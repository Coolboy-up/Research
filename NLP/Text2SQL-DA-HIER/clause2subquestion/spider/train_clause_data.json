{"db_id": "department_management", "sub_sql": "select count head", "question": "How many heads of the departments are older than 56 ?", "sub_sql_type": "null agg col", "sub_sql_new": "select count head", "query": "SELECT count(*) FROM head WHERE age  >  56", "sub_ques": "how many heads"}
{"db_id": "department_management", "sub_sql": "where age > 56", "question": "How many heads of the departments are older than 56 ?", "sub_sql_type": "null col op op value", "sub_sql_new": "where age more than 56", "query": "SELECT count(*) FROM head WHERE age  >  56", "sub_ques": "are older than 56"}
{"db_id": "department_management", "sub_sql": "select name , born_state , age from head", "question": "List the name, born state and age of the heads of departments ordered by age.", "sub_sql_type": "null col null col col null col col col", "sub_sql_new": "select name , born state , age from head", "query": "SELECT name ,  born_state ,  age FROM head ORDER BY age", "sub_ques": "list the name , born state and age of the heads"}
{"db_id": "department_management", "sub_sql": "order by age", "question": "List the name, born state and age of the heads of departments ordered by age.", "sub_sql_type": "null null col", "sub_sql_new": "order by age", "query": "SELECT name ,  born_state ,  age FROM head ORDER BY age", "sub_ques": "ordered by age"}
{"db_id": "department_management", "sub_sql": "select creation , name , budget_in_billions from department", "question": "List the creation year, name and budget of each department.", "sub_sql_type": "null col null col null col col col", "sub_sql_new": "select creation , name , budget_in_billions from department", "query": "SELECT creation ,  name ,  budget_in_billions FROM department", "sub_ques": "list the creation year , name and budget of each department"}
{"db_id": "department_management", "sub_sql": "select max budget_in_billions , min budget_in_billions from department", "question": "What are the maximum and minimum budget of the departments?", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select max budget_in_billions , min budget_in_billions from department", "query": "SELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department", "sub_ques": "what are the maximum and minimum budget of the departments"}
{"db_id": "department_management", "sub_sql": "select avg num_employees from department", "question": "What is the average number of employees of the departments whose rank is between 10 and 15?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select avg num_employees from department", "query": "SELECT avg(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15", "sub_ques": "what is the average number of employees of the departments"}
{"db_id": "department_management", "sub_sql": "select name from head", "question": "What are the names of the heads who are born outside the California state?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from head", "query": "SELECT name FROM head WHERE born_state != 'California'", "sub_ques": "what are the names of the heads"}
{"db_id": "department_management", "sub_sql": "where born_state != california", "question": "What are the names of the heads who are born outside the California state?", "sub_sql_type": "null col col op op op value", "sub_sql_new": "where born state not equal to california", "query": "SELECT name FROM head WHERE born_state != 'California'", "sub_ques": "who are born outside the california state"}
{"db_id": "department_management", "sub_sql": "select distinct creation from department", "question": "What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct creation from department", "query": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'", "sub_ques": "what are the distinct creation years of the departments"}
{"db_id": "department_management", "sub_sql": "where born_state = alabama", "question": "What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where born state equal to alabama", "query": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'", "sub_ques": "born in state"}
{"db_id": "department_management", "sub_sql": "select born_state from head", "question": "What are the names of the states where at least 3 heads were born?", "sub_sql_type": "null col col col col", "sub_sql_new": "select born state from head", "query": "SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  3", "sub_ques": "states where at least 3 heads were born"}
{"db_id": "department_management", "sub_sql": "group by born_state having count head >= 3", "question": "What are the names of the states where at least 3 heads were born?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  3", "sub_ques": "states where at least 3 heads were born"}
{"db_id": "department_management", "sub_sql": "select creation from department", "question": "In which year were most departments established?", "sub_sql_type": "null col col col", "sub_sql_new": "select creation from department", "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1", "sub_ques": "in which year were most departments"}
{"db_id": "department_management", "sub_sql": "group by creation order by count department desc limit 1", "question": "In which year were most departments established?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count department desc limit 1", "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1", "sub_ques": "year were most departments established"}
{"db_id": "department_management", "sub_sql": "select name , num_employees from department", "question": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , num_employees from department", "query": "SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  'Yes'", "sub_ques": "show the name and number of employees for the departments"}
{"db_id": "department_management", "sub_sql": "where temporary_acting = yes", "question": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where temporary acting equal to yes", "query": "SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  'Yes'", "sub_ques": "temporary acting"}
{"db_id": "department_management", "sub_sql": "select count distinct temporary_acting from management", "question": "How many acting statuses are there?", "sub_sql_type": "null agg col col col col col", "sub_sql_new": "select count distinct temporary acting from management", "query": "SELECT count(DISTINCT temporary_acting) FROM management", "sub_ques": "how many acting"}
{"db_id": "department_management", "sub_sql": "select count department", "question": "How many departments are led by heads who are not mentioned?", "sub_sql_type": "null agg col", "sub_sql_new": "select count department", "query": "SELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);", "sub_ques": "how many departments"}
{"db_id": "department_management", "sub_sql": "department not in management)", "question": "How many departments are led by heads who are not mentioned?", "sub_sql_type": "tab op op", "sub_sql_new": "department not in management) tab", "query": "SELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);", "sub_ques": "departments are led by heads who are not mentioned"}
{"db_id": "department_management", "sub_sql": "select distinct age from head", "question": "What are the distinct ages of the heads who are acting?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct age from head", "query": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'", "sub_ques": "what are the distinct ages of the heads"}
{"db_id": "department_management", "sub_sql": "where temporary_acting = yes", "question": "What are the distinct ages of the heads who are acting?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where temporary acting equal to yes", "query": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'", "sub_ques": "acting"}
{"db_id": "department_management", "sub_sql": "select t1.department_id , t1.name , count * from department", "question": "Which department has more than 1 head at a time? List the id, name and the number of heads.", "sub_sql_type": "null col null col null agg col col col", "sub_sql_new": "select department_id , name , count * from department", "query": "SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1", "sub_ques": "list the id , name and the number of heads"}
{"db_id": "department_management", "sub_sql": "group by department_id having count management > 1", "question": "Which department has more than 1 head at a time? List the id, name and the number of heads.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1", "sub_ques": "department has more than 1 head at a time ?"}
{"db_id": "department_management", "sub_sql": "select head_id , name from head", "question": "Which head's name has the substring 'Ha'? List the id and name.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select head_id , name from head", "query": "SELECT head_id ,  name FROM head WHERE name LIKE '%Ha%'", "sub_ques": "list the id and name"}
{"db_id": "department_management", "sub_sql": "where name like ha", "question": "Which head's name has the substring 'Ha'? List the id and name.", "sub_sql_type": "null col op value", "sub_sql_new": "where name like ha", "query": "SELECT head_id ,  name FROM head WHERE name LIKE '%Ha%'", "sub_ques": "head 's name has the substring 'ha ' ?"}
{"db_id": "farm", "sub_sql": "select count farm", "question": "How many farms are there?", "sub_sql_type": "null agg col", "sub_sql_new": "select count farm", "query": "SELECT count(*) FROM farm", "sub_ques": "how many farms"}
{"db_id": "farm", "sub_sql": "select count farm", "question": "Count the number of farms.", "sub_sql_type": "null agg col", "sub_sql_new": "select count farm", "query": "SELECT count(*) FROM farm", "sub_ques": "count the number of farms"}
{"db_id": "farm", "sub_sql": "select total_horses from farm", "question": "List the total number of horses on farms in ascending order.", "sub_sql_type": "null col col col", "sub_sql_new": "select total_horses from farm", "query": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC", "sub_ques": "list the total number of horses on farms"}
{"db_id": "farm", "sub_sql": "order by total_horses asc", "question": "List the total number of horses on farms in ascending order.", "sub_sql_type": "null null col null", "sub_sql_new": "order by total_horses asc", "query": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC", "sub_ques": "the total number of horses on farms in ascending order"}
{"db_id": "farm", "sub_sql": "select total_horses from farm", "question": "What is the total horses record for each farm, sorted ascending?", "sub_sql_type": "null col col col", "sub_sql_new": "select total_horses from farm", "query": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC", "sub_ques": "what is the total horses record for each farm"}
{"db_id": "farm", "sub_sql": "order by total_horses asc", "question": "What is the total horses record for each farm, sorted ascending?", "sub_sql_type": "null null col null", "sub_sql_new": "order by total_horses asc", "query": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC", "sub_ques": "the total horses record for each farm , sorted ascending"}
{"db_id": "farm", "sub_sql": "select hosts from farm_competition", "question": "What are the hosts of competitions whose theme is not \\\\\\\"Aliens\\\\\\\"?", "sub_sql_type": "null col col col", "sub_sql_new": "select hosts from farm_competition", "query": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'", "sub_ques": "what are the hosts of competitions"}
{"db_id": "farm", "sub_sql": "where theme != aliens", "question": "What are the hosts of competitions whose theme is not \\\\\\\"Aliens\\\\\\\"?", "sub_sql_type": "null col op op op value", "sub_sql_new": "where theme not equal to aliens", "query": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'", "sub_ques": "theme is not `` aliens"}
{"db_id": "farm", "sub_sql": "select hosts from farm_competition", "question": "Return the hosts of competitions for which the theme is not Aliens?", "sub_sql_type": "null col col col", "sub_sql_new": "select hosts from farm_competition", "query": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'", "sub_ques": "return the hosts of competitions"}
{"db_id": "farm", "sub_sql": "where theme != aliens", "question": "Return the hosts of competitions for which the theme is not Aliens?", "sub_sql_type": "null col op op op value", "sub_sql_new": "where theme not equal to aliens", "query": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'", "sub_ques": "theme is not aliens"}
{"db_id": "farm", "sub_sql": "select theme from farm_competition", "question": "What are the themes of farm competitions sorted by year in ascending order?", "sub_sql_type": "null col col col", "sub_sql_new": "select theme from farm_competition", "query": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC", "sub_ques": "what are the themes of farm competitions"}
{"db_id": "farm", "sub_sql": "order by year asc", "question": "What are the themes of farm competitions sorted by year in ascending order?", "sub_sql_type": "null null col null", "sub_sql_new": "order by year asc", "query": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC", "sub_ques": "sorted by year in ascending order"}
{"db_id": "farm", "sub_sql": "select theme from farm_competition", "question": "Return the themes of farm competitions, sorted by year ascending.", "sub_sql_type": "null col col col", "sub_sql_new": "select theme from farm_competition", "query": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC", "sub_ques": "return the themes of farm competitions"}
{"db_id": "farm", "sub_sql": "order by year asc", "question": "Return the themes of farm competitions, sorted by year ascending.", "sub_sql_type": "null null col null", "sub_sql_new": "order by year asc", "query": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC", "sub_ques": "sorted by year ascending"}
{"db_id": "farm", "sub_sql": "select avg working_horses from farm", "question": "What is the average number of working horses of farms with more than 5000 total number of horses?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select avg working_horses from farm", "query": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000", "sub_ques": "what is the average number of working horses of farms"}
{"db_id": "farm", "sub_sql": "where total_horses > 5000", "question": "What is the average number of working horses of farms with more than 5000 total number of horses?", "sub_sql_type": "null col op op value", "sub_sql_new": "where total_horses more than 5000", "query": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000", "sub_ques": "farms with more than 5000 total number of horses"}
{"db_id": "farm", "sub_sql": "select avg working_horses from farm", "question": "Give the average number of working horses on farms with more than 5000 total horses.", "sub_sql_type": "null agg col col col", "sub_sql_new": "select avg working_horses from farm", "query": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000", "sub_ques": "give the average number of working horses on farms"}
{"db_id": "farm", "sub_sql": "where total_horses > 5000", "question": "Give the average number of working horses on farms with more than 5000 total horses.", "sub_sql_type": "null col op op value", "sub_sql_new": "where total_horses more than 5000", "query": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000", "sub_ques": "farms with more than 5000 total horses"}
{"db_id": "farm", "sub_sql": "select max cows , min cows from farm", "question": "What are the maximum and minimum number of cows across all farms.", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select max cows , min cows from farm", "query": "SELECT max(Cows) ,  min(Cows) FROM farm", "sub_ques": "what are the maximum and minimum number of cows across all farms"}
{"db_id": "farm", "sub_sql": "select max cows , min cows from farm", "question": "Return the maximum and minimum number of cows across all farms.", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select max cows , min cows from farm", "query": "SELECT max(Cows) ,  min(Cows) FROM farm", "sub_ques": "return the maximum and minimum number of cows across all farms"}
{"db_id": "farm", "sub_sql": "select count distinct status from city", "question": "How many different statuses do cities have?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct status from city", "query": "SELECT count(DISTINCT Status) FROM city", "sub_ques": "how many different statuses do cities"}
{"db_id": "farm", "sub_sql": "select count distinct status from city", "question": "Count the number of different statuses.", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct status from city", "query": "SELECT count(DISTINCT Status) FROM city", "sub_ques": "count the number of different statuses"}
{"db_id": "farm", "sub_sql": "select official_name from city", "question": "List official names of cities in descending order of population.", "sub_sql_type": "null col col col", "sub_sql_new": "select official_name from city", "query": "SELECT Official_Name FROM city ORDER BY Population DESC", "sub_ques": "list official names of cities"}
{"db_id": "farm", "sub_sql": "order by population desc", "question": "List official names of cities in descending order of population.", "sub_sql_type": "null null col null", "sub_sql_new": "order by population desc", "query": "SELECT Official_Name FROM city ORDER BY Population DESC", "sub_ques": "in descending order of population"}
{"db_id": "farm", "sub_sql": "select official_name from city", "question": "What are the official names of cities, ordered descending by population?", "sub_sql_type": "null col col col", "sub_sql_new": "select official_name from city", "query": "SELECT Official_Name FROM city ORDER BY Population DESC", "sub_ques": "what are the official names of cities"}
{"db_id": "farm", "sub_sql": "order by population desc", "question": "What are the official names of cities, ordered descending by population?", "sub_sql_type": "null null col null", "sub_sql_new": "order by population desc", "query": "SELECT Official_Name FROM city ORDER BY Population DESC", "sub_ques": "ordered descending by population"}
{"db_id": "farm", "sub_sql": "select official_name , status from city", "question": "List the official name and status of the city with the largest population.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select official_name , status from city", "query": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1", "sub_ques": "list the official name and status of the city"}
{"db_id": "farm", "sub_sql": "order by population desc limit 1", "question": "List the official name and status of the city with the largest population.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by population desc limit 1", "query": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1", "sub_ques": "the largest population"}
{"db_id": "farm", "sub_sql": "select official_name , status from city", "question": "What is the official name and status of the city with the most residents?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select official_name , status from city", "query": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1", "sub_ques": "what is the official name and status of the city"}
{"db_id": "farm", "sub_sql": "order by population desc limit 1", "question": "What is the official name and status of the city with the most residents?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by population desc limit 1", "query": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1", "sub_ques": "the most residents"}
{"db_id": "farm", "sub_sql": "select year , official_name from farm_competition , city", "question": "Show the years and the official names of the host cities of competitions.", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select year , official_name from farm_competition , city", "query": "SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID", "sub_ques": "show the years and the official names of the host cities"}
{"db_id": "farm", "sub_sql": "select year , official_name from farm_competition , city", "question": "Give the years and official names of the cities of each competition.", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select year , official_name from farm_competition , city", "query": "SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID", "sub_ques": "give the years and official names of the cities"}
{"db_id": "farm", "sub_sql": "select official_name from city", "question": "Show the official names of the cities that have hosted more than one competition.", "sub_sql_type": "null col col col", "sub_sql_new": "select official_name from city", "query": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1", "sub_ques": "show the official names of the cities"}
{"db_id": "farm", "sub_sql": "group by t2.host_city_id having count farm_competition > 1", "question": "Show the official names of the cities that have hosted more than one competition.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1", "sub_ques": "that have hosted more than one competition"}
{"db_id": "farm", "sub_sql": "select official_name from city", "question": "What are the official names of cities that have hosted more than one competition?", "sub_sql_type": "null col col col", "sub_sql_new": "select official_name from city", "query": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1", "sub_ques": "what are the official names of cities"}
{"db_id": "farm", "sub_sql": "group by t2.host_city_id having count farm_competition > 1", "question": "What are the official names of cities that have hosted more than one competition?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1", "sub_ques": "that have hosted more than one competition"}
{"db_id": "farm", "sub_sql": "select status from city", "question": "Show the status of the city that has hosted the greatest number of competitions.", "sub_sql_type": "null col col col", "sub_sql_new": "select status from city", "query": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "show the status of the city"}
{"db_id": "farm", "sub_sql": "group by host_city_id order by count farm_competition desc limit 1", "question": "Show the status of the city that has hosted the greatest number of competitions.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count farm_competition desc limit 1", "query": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "has hosted the greatest number of competitions"}
{"db_id": "farm", "sub_sql": "select status from city", "question": "What is the status of the city that has hosted the most competitions?", "sub_sql_type": "null col col col", "sub_sql_new": "select status from city", "query": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "what is the status of the city"}
{"db_id": "farm", "sub_sql": "group by host_city_id order by count farm_competition desc limit 1", "question": "What is the status of the city that has hosted the most competitions?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count farm_competition desc limit 1", "query": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "has hosted the most competitions"}
{"db_id": "farm", "sub_sql": "select t2.theme from farm_competition", "question": "Please show the themes of competitions with host cities having populations larger than 1000.", "sub_sql_type": "null col col col", "sub_sql_new": "select theme from farm_competition", "query": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000", "sub_ques": "show the themes of competitions"}
{"db_id": "farm", "sub_sql": "where population > 1000", "question": "Please show the themes of competitions with host cities having populations larger than 1000.", "sub_sql_type": "null col op op value", "sub_sql_new": "where population more than 1000", "query": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000", "sub_ques": "cities having populations larger than 1000"}
{"db_id": "farm", "sub_sql": "select theme from farm_competition", "question": "What are the themes of competitions that have corresponding host cities with more than 1000 residents?", "sub_sql_type": "null col col col", "sub_sql_new": "select theme from farm_competition", "query": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000", "sub_ques": "what are the themes of competitions"}
{"db_id": "farm", "sub_sql": "where population > 1000", "question": "What are the themes of competitions that have corresponding host cities with more than 1000 residents?", "sub_sql_type": "null col op op value", "sub_sql_new": "where population more than 1000", "query": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000", "sub_ques": "cities with more than 1000 residents"}
{"db_id": "farm", "sub_sql": "select status , avg population from city", "question": "Please show the different statuses of cities and the average population of cities with each status.", "sub_sql_type": "null col null agg col col col", "sub_sql_new": "select status , avg population from city", "query": "SELECT Status ,  avg(Population) FROM city GROUP BY Status", "sub_ques": "show the different statuses of cities and the average population of cities with each status"}
{"db_id": "farm", "sub_sql": "select status , avg population from city", "question": "What are the statuses and average populations of each city?", "sub_sql_type": "null col null agg col col col", "sub_sql_new": "select status , avg population from city", "query": "SELECT Status ,  avg(Population) FROM city GROUP BY Status", "sub_ques": "what are the statuses and average populations of each city"}
{"db_id": "farm", "sub_sql": "select status from city", "question": "Please show the different statuses, ordered by the number of cities that have each.", "sub_sql_type": "null col col col", "sub_sql_new": "select status from city", "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC", "sub_ques": "show the different statuses , ordered by the number of cities"}
{"db_id": "farm", "sub_sql": "group by status order by count * asc", "question": "Please show the different statuses, ordered by the number of cities that have each.", "sub_sql_type": "null null agg col null", "sub_sql_new": "order by count * asc", "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC", "sub_ques": "the different statuses , ordered by the number of cities that have"}
{"db_id": "farm", "sub_sql": "select status from city", "question": "Return the different statuses of cities, ascending by frequency.", "sub_sql_type": "null col col col", "sub_sql_new": "select status from city", "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC", "sub_ques": "return the statuses of cities"}
{"db_id": "farm", "sub_sql": "group by status order by count * asc", "question": "Return the different statuses of cities, ascending by frequency.", "sub_sql_type": "null null agg col null", "sub_sql_new": "order by count * asc", "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC", "sub_ques": "the different statuses of cities, ascending by frequency"}
{"db_id": "farm", "sub_sql": "select status from city", "question": "List the most common type of Status across cities.", "sub_sql_type": "null col col col", "sub_sql_new": "select status from city", "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "list the status across cities"}
{"db_id": "farm", "sub_sql": "group by status order by count city desc limit 1", "question": "List the most common type of Status across cities.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count city desc limit 1", "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "the most common type of status across cities"}
{"db_id": "farm", "sub_sql": "select status from city", "question": "What is the most common status across all cities?", "sub_sql_type": "null col col col", "sub_sql_new": "select status from city", "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "what is status across all cities"}
{"db_id": "farm", "sub_sql": "group by status order by count * desc limit 1", "question": "What is the most common status across all cities?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count * desc limit 1", "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "the most common status across all cities"}
{"db_id": "farm", "sub_sql": "select official_name from city", "question": "List the official names of cities that have not held any competition.", "sub_sql_type": "null col col col", "sub_sql_new": "select official_name from city", "query": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)", "sub_ques": "list the official names of cities"}
{"db_id": "farm", "sub_sql": "city not in farm_competition", "question": "List the official names of cities that have not held any competition.", "sub_sql_type": "tab op op tab tab", "sub_sql_new": "city not in farm competition", "query": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)", "sub_ques": "cities that have not held any competition"}
{"db_id": "farm", "sub_sql": "select official_name from city", "question": "What are the official names of cities that have not hosted a farm competition?", "sub_sql_type": "null col col col", "sub_sql_new": "select official_name from city", "query": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)", "sub_ques": "what are the official names of cities"}
{"db_id": "farm", "sub_sql": "city not in farm_competition", "question": "What are the official names of cities that have not hosted a farm competition?", "sub_sql_type": "tab op op tab tab", "sub_sql_new": "city not in farm competition", "query": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)", "sub_ques": "cities that have not hosted a farm competition"}
{"db_id": "farm", "sub_sql": "select official_name from city", "question": "Find the official names of cities with population bigger than 1500 or smaller than 500.", "sub_sql_type": "null col col col", "sub_sql_new": "select official_name from city", "query": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500", "sub_ques": "official names of cities"}
{"db_id": "farm", "sub_sql": "where population > 1500 or population < 500", "question": "Find the official names of cities with population bigger than 1500 or smaller than 500.", "sub_sql_type": "null col op op value null col op value value", "sub_sql_new": "where population more than 1500 or or population < 500", "query": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500", "sub_ques": "cities with population bigger than 1500 or smaller than 500"}
{"db_id": "farm", "sub_sql": "select official_name from city", "question": "What are the official names of cities that have population over 1500 or less than 500?", "sub_sql_type": "null col col col", "sub_sql_new": "select official_name from city", "query": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500", "sub_ques": "what are the official names of cities"}
{"db_id": "farm", "sub_sql": "where population > 1500", "question": "What are the official names of cities that have population over 1500 or less than 500?", "sub_sql_type": "null col op op value", "sub_sql_new": "where population more than 1500", "query": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500", "sub_ques": "cities that have population over 1500"}
{"db_id": "farm", "sub_sql": "where population < 1500", "question": "What are the official names of cities that have population over 1500 or less than 500?", "sub_sql_type": "null col op op value", "sub_sql_new": "where population less than 1500", "query": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500", "sub_ques": "cities that have population less than 500"}
{"db_id": "farm", "sub_sql": "select census_ranking from city", "question": "Show the census ranking of cities whose status are not \\\\\\\"Village\\\\\\\".", "sub_sql_type": "null col col col", "sub_sql_new": "select census_ranking from city", "query": "SELECT Census_Ranking FROM city WHERE Status !=  \\\\\\\"Village\\\\\\\"", "sub_ques": "show the census ranking of cities"}
{"db_id": "farm", "sub_sql": "where status != village", "question": "Show the census ranking of cities whose status are not \\\\\\\"Village\\\\\\\".", "sub_sql_type": "null col op op op value", "sub_sql_new": "where status not equal to village", "query": "SELECT Census_Ranking FROM city WHERE Status !=  \\\\\\\"Village\\\\\\\"", "sub_ques": "cities whose status are not `` village"}
{"db_id": "farm", "sub_sql": "select census_ranking from city", "question": "What are the census rankings of cities that do not have the status \\\\\\\"Village\\\\\\\"?", "sub_sql_type": "null col col col", "sub_sql_new": "select census_ranking from city", "query": "SELECT Census_Ranking FROM city WHERE Status !=  \\\\\\\"Village\\\\\\\"", "sub_ques": "what are the census rankings of cities"}
{"db_id": "farm", "sub_sql": "where status != village", "question": "What are the census rankings of cities that do not have the status \\\\\\\"Village\\\\\\\"?", "sub_sql_type": "null col op op op value", "sub_sql_new": "where status not equal to village", "query": "SELECT Census_Ranking FROM city WHERE Status !=  \\\\\\\"Village\\\\\\\"", "sub_ques": "cities that do not have the status `` village"}
{"db_id": "student_assessment", "sub_sql": "select course_name from courses", "question": "which course has most number of registered students?", "sub_sql_type": "null col col col col", "sub_sql_new": "select course name from courses", "query": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "which course"}
{"db_id": "student_assessment", "sub_sql": "group by course_id order by count student_course_registrations desc limit 1", "question": "which course has most number of registered students?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count student_course_registrations desc limit 1", "query": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "course has most number of registered students"}
{"db_id": "student_assessment", "sub_sql": "select course_name from courses", "question": "What is the name of the course with the most registered students?", "sub_sql_type": "null col col col col", "sub_sql_new": "select course name from courses", "query": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "what is the name of the course"}
{"db_id": "student_assessment", "sub_sql": "group by course_id order by count student_course_registrations desc limit 1", "question": "What is the name of the course with the most registered students?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count student_course_registrations desc limit 1", "query": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "course with the most registered students"}
{"db_id": "student_assessment", "sub_sql": "select student_id from student_course_registrations", "question": "what is id of students who registered some courses but the least number of courses in these students?", "sub_sql_type": "null col col col col", "sub_sql_new": "select student id from student_course_registrations", "query": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1", "sub_ques": "what is id of students who registered some courses"}
{"db_id": "student_assessment", "sub_sql": "group by student_id order by count student_course_registrations limit 1", "question": "what is id of students who registered some courses but the least number of courses in these students?", "sub_sql_type": "null null agg col null limv", "sub_sql_new": "order by count student_course_registrations limit 1", "query": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1", "sub_ques": "the least number of courses in these students"}
{"db_id": "student_assessment", "sub_sql": "select student_id from student_course_registrations", "question": "What are the ids of the students who registered for some courses but had the least number of courses for all students?", "sub_sql_type": "null col col col col", "sub_sql_new": "select student id from student_course_registrations", "query": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1", "sub_ques": "students who registered for some courses"}
{"db_id": "student_assessment", "sub_sql": "group by student_id order by count student_course_registrations limit 1", "question": "What are the ids of the students who registered for some courses but had the least number of courses for all students?", "sub_sql_type": "null null agg col null limv", "sub_sql_new": "order by count student_course_registrations limit 1", "query": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1", "sub_ques": "had the least number of courses for all students"}
{"db_id": "student_assessment", "sub_sql": "select first_name , last_name from people", "question": "what are the first name and last name of all candidates?", "sub_sql_type": "null col col null col col col col", "sub_sql_new": "select first name , last name from people", "query": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id", "sub_ques": "what are the first name and last name"}
{"db_id": "student_assessment", "sub_sql": "select first_name , last_name from people", "question": "What are the first and last names of all the candidates?", "sub_sql_type": "null col col null col col col col", "sub_sql_new": "select first name , last name from people", "query": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id", "sub_ques": "what are the first and last names"}
{"db_id": "student_assessment", "sub_sql": "select student_id from students", "question": "List the id of students who never attends courses?", "sub_sql_type": "null col col col col", "sub_sql_new": "select student id from students", "query": "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)", "sub_ques": "list the id of students"}
{"db_id": "student_assessment", "sub_sql": "students not in student_course_attendance", "question": "List the id of students who never attends courses?", "sub_sql_type": "op op", "sub_sql_new": "students tab not in student_course_attendance tab", "query": "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)", "sub_ques": "students who never attends courses"}
{"db_id": "student_assessment", "sub_sql": "select student_id from students", "question": "What are the  ids of every student who has never attended a course?", "sub_sql_type": "null col col col col", "sub_sql_new": "select student id from students", "query": "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)", "sub_ques": "what are the ids of every student"}
{"db_id": "student_assessment", "sub_sql": "students not in student_course_attendance", "question": "What are the  ids of every student who has never attended a course?", "sub_sql_type": "op op", "sub_sql_new": "students tab not in student_course_attendance tab", "query": "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)", "sub_ques": "student who has never attended a course"}
{"db_id": "student_assessment", "sub_sql": "select student_id from student_course_attendance", "question": "List the id of students who attended some courses?", "sub_sql_type": "null col col col col", "sub_sql_new": "select student id from student_course_attendance", "query": "SELECT student_id FROM student_course_attendance", "sub_ques": "list the id of students who attended some courses"}
{"db_id": "student_assessment", "sub_sql": "select student_id from student_course_attendance", "question": "What are the ids of all students who have attended at least one course?", "sub_sql_type": "null col col col col", "sub_sql_new": "select student id from student_course_attendance", "query": "SELECT student_id FROM student_course_attendance", "sub_ques": "what are the ids of all students who have attended at least one course"}
{"db_id": "student_assessment", "sub_sql": "select student_id , course_name from student_course_registrations , courses", "question": "What are the ids of all students for courses and what are the names of those courses?", "sub_sql_type": "null col col null col col col col null col", "sub_sql_new": "select student id , course name from student_course_registrations , courses", "query": "SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id", "sub_ques": "what are the ids of all students for courses and what are the names of those courses"}
{"db_id": "student_assessment", "sub_sql": "select student_details from students", "question": "What is detail of the student who most recently registered course?", "sub_sql_type": "null col col col col", "sub_sql_new": "select student details from students", "query": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1", "sub_ques": "what is detail of the student"}
{"db_id": "student_assessment", "sub_sql": "order by registration_date desc limit 1", "question": "What is detail of the student who most recently registered course?", "sub_sql_type": "null null col col null null limv", "sub_sql_new": "order by registration date desc limit 1", "query": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1", "sub_ques": "who most recently registered course"}
{"db_id": "student_assessment", "sub_sql": "select student_details from students", "question": "What details do we have on the students who registered for courses most recently?", "sub_sql_type": "null col col col col", "sub_sql_new": "select student details from students", "query": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1", "sub_ques": "what details do we have on the students"}
{"db_id": "student_assessment", "sub_sql": "order by registration_date desc limit 1", "question": "What details do we have on the students who registered for courses most recently?", "sub_sql_type": "null null col col null null limv", "sub_sql_new": "order by registration date desc limit 1", "query": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1", "sub_ques": "who registered for courses most recently"}
{"db_id": "student_assessment", "sub_sql": "select count student_course_attendance ", "question": "How many students attend course English?", "sub_sql_type": "null agg col", "sub_sql_new": "select count student_course_attendance  col", "query": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \\\\\\\"English\\\\\\\"", "sub_ques": "how many students attend course"}
{"db_id": "student_assessment", "sub_sql": "where course_name = english", "question": "How many students attend course English?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where course name equal to english", "query": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \\\\\\\"English\\\\\\\"", "sub_ques": "course english"}
{"db_id": "student_assessment", "sub_sql": "select count student_course_attendance", "question": "How many students are attending English courses?", "sub_sql_type": "null agg col", "sub_sql_new": "select count student_course_attendance", "query": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \\\\\\\"English\\\\\\\"", "sub_ques": "how many students are attending english courses"}
{"db_id": "student_assessment", "sub_sql": "where course_name = english", "question": "How many students are attending English courses?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where course name equal to english", "query": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \\\\\\\"English\\\\\\\"", "sub_ques": "english courses"}
{"db_id": "student_assessment", "sub_sql": "select count student_course_attendance", "question": "How many courses do the student whose id is 171 attend?", "sub_sql_type": "null agg col", "sub_sql_new": "select count student_course_attendance", "query": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171", "sub_ques": "how many courses do the student"}
{"db_id": "student_assessment", "sub_sql": "where student_id = 171", "question": "How many courses do the student whose id is 171 attend?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where student id equal to 171", "query": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171", "sub_ques": "student whose id is 171 attend"}
{"db_id": "student_assessment", "sub_sql": "select count student_course_attendance", "question": "How many courses does the student with id 171 actually attend?", "sub_sql_type": "null agg col", "sub_sql_new": "select count student_course_attendance", "query": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171", "sub_ques": "how many courses does the student"}
{"db_id": "student_assessment", "sub_sql": "where student_id = 171", "question": "How many courses does the student with id 171 actually attend?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where student id equal to 171", "query": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171", "sub_ques": "student with id 171 actually attend"}
{"db_id": "student_assessment", "sub_sql": "select candidate_id from candidates", "question": "Find id of the candidate whose email is stanley.monahan@example.org?", "sub_sql_type": "null col col col col", "sub_sql_new": "select candidate id from candidates", "query": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \\\\\\\"stanley.monahan@example.org\\\\\\\"", "sub_ques": "find id of the candidate"}
{"db_id": "student_assessment", "sub_sql": "where email_address = stanley.monahan@example.org", "question": "Find id of the candidate whose email is stanley.monahan@example.org?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where email address equal to stanley.monahan@example.org", "query": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \\\\\\\"stanley.monahan@example.org\\\\\\\"", "sub_ques": "email is stanley.monahan@example.org"}
{"db_id": "student_assessment", "sub_sql": "select candidate_id from candidates", "question": "What is the id of the candidate whose email is stanley.monahan@example.org?", "sub_sql_type": "null col col col col", "sub_sql_new": "select candidate id from candidates", "query": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \\\\\\\"stanley.monahan@example.org\\\\\\\"", "sub_ques": "what is the id of the candidate"}
{"db_id": "student_assessment", "sub_sql": "where email_address = stanley.monahan@example.org", "question": "What is the id of the candidate whose email is stanley.monahan@example.org?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where email address equal to stanley.monahan@example.org", "query": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \\\\\\\"stanley.monahan@example.org\\\\\\\"", "sub_ques": "email is stanley.monahan@example.org"}
{"db_id": "student_assessment", "sub_sql": "select candidate_id from candidate_assessments", "question": "Find id of the candidate who most recently accessed the course?", "sub_sql_type": "null col col col col", "sub_sql_new": "select candidate id from candidate_assessments", "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1", "sub_ques": "find id of the candidate"}
{"db_id": "student_assessment", "sub_sql": "order by assessment_date desc limit 1", "question": "Find id of the candidate who most recently accessed the course?", "sub_sql_type": "null null col col null null limv", "sub_sql_new": "order by assessment date desc limit 1", "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1", "sub_ques": "most recently accessed the course"}
{"db_id": "student_assessment", "sub_sql": "select candidate_id from candidate_assessments", "question": "What is the id of the candidate who most recently accessed the course?", "sub_sql_type": "null col col col col", "sub_sql_new": "select candidate id from candidate_assessments", "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1", "sub_ques": "what is the id of the candidate"}
{"db_id": "student_assessment", "sub_sql": "order by assessment_date desc limit 1", "question": "What is the id of the candidate who most recently accessed the course?", "sub_sql_type": "null null col col null null limv", "sub_sql_new": "order by assessment date desc limit 1", "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1", "sub_ques": "who most recently accessed the course"}
{"db_id": "student_assessment", "sub_sql": "select student_details from students", "question": "What is detail of the student who registered the most number of courses?", "sub_sql_type": "null col col col col", "sub_sql_new": "select student details from students", "query": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "what is detail of the student"}
{"db_id": "student_assessment", "sub_sql": "group by student_id order by count student_course_registrations desc limit 1", "question": "What is detail of the student who registered the most number of courses?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count student_course_registrations desc limit 1", "query": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "student who registered the most number of courses"}
{"db_id": "student_assessment", "sub_sql": "select student_details from students", "question": "What are the details of the student who registered for the most number of courses?", "sub_sql_type": "null col col col col", "sub_sql_new": "select student details from students", "query": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "what are the details of the student"}
{"db_id": "student_assessment", "sub_sql": "group by student_id order by count student_course_registrations desc limit 1", "question": "What are the details of the student who registered for the most number of courses?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count student_course_registrations desc limit 1", "query": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "student who registered for the most number of courses"}
{"db_id": "student_assessment", "sub_sql": "select t1.student_id", "question": "List the id of students who registered some courses and the number of their registered courses?", "sub_sql_type": "null col col", "sub_sql_new": "select student id", "query": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id", "sub_ques": "list the id of students"}
{"db_id": "student_assessment", "sub_sql": "select count student_course_registrations from students group by t1.student_id", "question": "List the id of students who registered some courses and the number of their registered courses?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select count student_course_registrations from students", "query": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id", "sub_ques": "who registered some courses and the number of their registered courses"}
{"db_id": "student_assessment", "sub_sql": "select t1.student_id , count * from students group by t1.student_id", "question": "For every student who is registered for some course, how many courses are they registered for?", "sub_sql_type": "null col col null agg col col col", "sub_sql_new": "select student id , count * from students", "query": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id", "sub_ques": "how many courses are they registered for"}
{"db_id": "student_assessment", "sub_sql": "select course_name", "question": "How many registed students do each course have? List course name and the number of their registered students?", "sub_sql_type": "null col col", "sub_sql_new": "select course name", "query": "SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id", "sub_ques": "list course name"}
{"db_id": "student_assessment", "sub_sql": "select count student_course_registrations group by course_id", "question": "How many registed students do each course have? List course name and the number of their registered students?", "sub_sql_type": "null agg col", "sub_sql_new": "select count student_course_registrations", "query": "SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id", "sub_ques": "how many registed students do each course have ? "}
{"db_id": "student_assessment", "sub_sql": "select course_name from courses", "question": "For each course id, how many students are registered and what are the course names?", "sub_sql_type": "null col col col col", "sub_sql_new": "select course name from courses", "query": "SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id", "sub_ques": "what are the course names"}
{"db_id": "student_assessment", "sub_sql": "select count student_course_registrations group by course_id", "question": "For each course id, how many students are registered and what are the course names?", "sub_sql_type": "null agg col", "sub_sql_new": "select count student_course_registrations", "query": "SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id", "sub_ques": "for each course id , how many students are registered"}
{"db_id": "student_assessment", "sub_sql": "select candidate_id from candidate_assessments", "question": "Find id of candidates whose assessment code is \\\\\\\"Pass\\\\\\\"?", "sub_sql_type": "null col col col col", "sub_sql_new": "select candidate id from candidate_assessments", "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \\\\\\\"Pass\\\\\\\"", "sub_ques": "find id of candidates"}
{"db_id": "student_assessment", "sub_sql": "where asessment_outcome_code = pass", "question": "Find id of candidates whose assessment code is \\\\\\\"Pass\\\\\\\"?", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where asessment outcome code equal to pass", "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \\\\\\\"Pass\\\\\\\"", "sub_ques": "whose assessment code is `` pass"}
{"db_id": "student_assessment", "sub_sql": "select candidate_id from candidate_assessments", "question": "What are the ids of the candidates that have an outcome code of Pass?", "sub_sql_type": "null col col col col", "sub_sql_new": "select candidate id from candidate_assessments", "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \\\\\\\"Pass\\\\\\\"", "sub_ques": "what are the ids of the candidates"}
{"db_id": "student_assessment", "sub_sql": "where asessment_outcome_code = pass", "question": "What are the ids of the candidates that have an outcome code of Pass?", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where asessment outcome code equal to pass", "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \\\\\\\"Pass\\\\\\\"", "sub_ques": "that have an outcome code of pass"}
{"db_id": "student_assessment", "sub_sql": "select cell_mobile_number from people", "question": "Find the cell mobile number of the candidates whose assessment code is \\\\\\\"Fail\\\\\\\"?", "sub_sql_type": "null col col col col col", "sub_sql_new": "select cell mobile number from people", "query": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \\\\\\\"Fail\\\\\\\"", "sub_ques": "find the cell mobile number"}
{"db_id": "student_assessment", "sub_sql": "where asessment_outcome_code = fail", "question": "Find the cell mobile number of the candidates whose assessment code is \\\\\\\"Fail\\\\\\\"?", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where asessment outcome code equal to fail", "query": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \\\\\\\"Fail\\\\\\\"", "sub_ques": "whose assessment code is `` fail"}
{"db_id": "student_assessment", "sub_sql": "select cell_mobile_number from people", "question": "What are the cell phone numbers of the candidates that received an assessment code of \\\\\\\"Fail\\\\\\\"?", "sub_sql_type": "null col col col col col", "sub_sql_new": "select cell mobile number from people", "query": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \\\\\\\"Fail\\\\\\\"", "sub_ques": "what are the cell phone numbers"}
{"db_id": "student_assessment", "sub_sql": "where asessment_outcome_code = fail", "question": "What are the cell phone numbers of the candidates that received an assessment code of \\\\\\\"Fail\\\\\\\"?", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where asessment outcome code equal to fail", "query": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \\\\\\\"Fail\\\\\\\"", "sub_ques": "that received assessment code of `` fail"}
{"db_id": "student_assessment", "sub_sql": "select student_id from student_course_attendance", "question": "What are the id of students who registered course 301?", "sub_sql_type": "null col col col col", "sub_sql_new": "select student id from student_course_attendance", "query": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301", "sub_ques": "what are the id of students who registered"}
{"db_id": "student_assessment", "sub_sql": "where course_id = 301", "question": "What are the id of students who registered course 301?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where course id equal to 301", "query": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301", "sub_ques": "who registered course 301"}
{"db_id": "student_assessment", "sub_sql": "select student_id from student_course_attendance", "question": "What are the ids of the students who registered for course 301?", "sub_sql_type": "null col col col col", "sub_sql_new": "select student id from student_course_attendance", "query": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301", "sub_ques": "what are the ids of the students"}
{"db_id": "student_assessment", "sub_sql": "where course_id = 301", "question": "What are the ids of the students who registered for course 301?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where course id equal to 301", "query": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301", "sub_ques": "who registered for course 301"}
{"db_id": "student_assessment", "sub_sql": "select student_id from student_course_attendance", "question": "What is the id of the student who most recently registered course 301?", "sub_sql_type": "null col col col col", "sub_sql_new": "select student id from student_course_attendance", "query": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1", "sub_ques": "what is the id of the student"}
{"db_id": "student_assessment", "sub_sql": "where course_id = 301", "question": "What is the id of the student who most recently registered course 301?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where course id equal to 301", "query": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1", "sub_ques": "registered course 301"}
{"db_id": "student_assessment", "sub_sql": "order by date_of_attendance desc limit 1", "question": "What is the id of the student who most recently registered course 301?", "sub_sql_type": "null null col col col null null limv", "sub_sql_new": "order by date of attendance desc limit 1", "query": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1", "sub_ques": "who most recently registered"}
{"db_id": "student_assessment", "sub_sql": "select student_id from student_course_attendance", "question": "What are the ids of the students who registered for course 301 most recently?", "sub_sql_type": "null col col col col", "sub_sql_new": "select student id from student_course_attendance", "query": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1", "sub_ques": "what are the ids of the students"}
{"db_id": "student_assessment", "sub_sql": "where course_id = 301", "question": "What are the ids of the students who registered for course 301 most recently?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where course id equal to 301", "query": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1", "sub_ques": "who registered for course 301"}
{"db_id": "student_assessment", "sub_sql": "order by date_of_attendance desc limit 1", "question": "What are the ids of the students who registered for course 301 most recently?", "sub_sql_type": "null null col col col null null limv", "sub_sql_new": "order by date of attendance desc limit 1", "query": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1", "sub_ques": "registered for course most recently"}
{"db_id": "student_assessment", "sub_sql": "select distinct city from addresses", "question": "Find distinct cities of addresses of people?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct city from addresses", "query": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id", "sub_ques": "find distinct cities of addresses"}
{"db_id": "student_assessment", "sub_sql": "select distinct city from addresses", "question": "What are the different cities where people live?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct city from addresses", "query": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id", "sub_ques": "what are the different cities"}
{"db_id": "student_assessment", "sub_sql": "select distinct t1.city from addresses", "question": "Find distinct cities of address of students?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct city from addresses", "query": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id", "sub_ques": "find distinct cities of address"}
{"db_id": "student_assessment", "sub_sql": "select distinct city from addresses", "question": "What are the different cities where students live?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct city from addresses", "query": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id", "sub_ques": "what are the different cities"}
{"db_id": "student_assessment", "sub_sql": "select course_name from courses", "question": "List the names of courses in alphabetical order?", "sub_sql_type": "null col col col col", "sub_sql_new": "select course name from courses", "query": "SELECT course_name FROM courses ORDER BY course_name", "sub_ques": "list the names of courses"}
{"db_id": "student_assessment", "sub_sql": "order by course_name", "question": "List the names of courses in alphabetical order?", "sub_sql_type": "null null col col", "sub_sql_new": "order by course name", "query": "SELECT course_name FROM courses ORDER BY course_name", "sub_ques": "names of courses in alphabetical order"}
{"db_id": "student_assessment", "sub_sql": "select course_name from courses", "question": "What are the names of the courses in alphabetical order?", "sub_sql_type": "null col col col col", "sub_sql_new": "select course name from courses", "query": "SELECT course_name FROM courses ORDER BY course_name", "sub_ques": "what are the names of the courses"}
{"db_id": "student_assessment", "sub_sql": "order by course_name", "question": "What are the names of the courses in alphabetical order?", "sub_sql_type": "null null col col", "sub_sql_new": "order by course name", "query": "SELECT course_name FROM courses ORDER BY course_name", "sub_ques": "the names of the courses in alphabetical order"}
{"db_id": "student_assessment", "sub_sql": "select first_name from people", "question": "List the first names of people in alphabetical order?", "sub_sql_type": "null col col col col", "sub_sql_new": "select first name from people", "query": "SELECT first_name FROM people ORDER BY first_name", "sub_ques": "list the first names of people"}
{"db_id": "student_assessment", "sub_sql": "order by first_name", "question": "List the first names of people in alphabetical order?", "sub_sql_type": "null null col col", "sub_sql_new": "order by first name", "query": "SELECT first_name FROM people ORDER BY first_name", "sub_ques": "the first names of people in alphabetical order"}
{"db_id": "student_assessment", "sub_sql": "select first_name from people", "question": "What are the first names of the people in alphabetical order?", "sub_sql_type": "null col col col col", "sub_sql_new": "select first name from people", "query": "SELECT first_name FROM people ORDER BY first_name", "sub_ques": "what are the first names of the people"}
{"db_id": "student_assessment", "sub_sql": "order by first_name", "question": "What are the first names of the people in alphabetical order?", "sub_sql_type": "null null col col", "sub_sql_new": "order by first name", "query": "SELECT first_name FROM people ORDER BY first_name", "sub_ques": "the first names of the people in alphabetical order"}
{"db_id": "student_assessment", "sub_sql": "select student_course_attendance", "question": "What are all info of students who registered courses but not attended courses?", "sub_sql_type": "null col", "sub_sql_new": "select student_course_attendance", "query": "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)", "sub_ques": "what are all info of students who registered courses"}
{"db_id": "student_assessment", "sub_sql": "select student_id from student_course_registrations", "question": "List the id of students who registered course statistics in the order of registration date.", "sub_sql_type": "null col col col col", "sub_sql_new": "select student id from student_course_registrations", "query": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \\\\\\\"statistics\\\\\\\" ORDER BY T2.registration_date", "sub_ques": "list the id of students who registered course "}
{"db_id": "student_assessment", "sub_sql": "where course_name = statistics", "question": "List the id of students who registered course statistics in the order of registration date.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where course name equal to statistics", "query": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \\\\\\\"statistics\\\\\\\" ORDER BY T2.registration_date", "sub_ques": "who registered course statistics"}
{"db_id": "student_assessment", "sub_sql": "order by registration_date", "question": "List the id of students who registered course statistics in the order of registration date.", "sub_sql_type": "null null col col", "sub_sql_new": "order by registration date", "query": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \\\\\\\"statistics\\\\\\\" ORDER BY T2.registration_date", "sub_ques": "order of registration date"}
{"db_id": "student_assessment", "sub_sql": "select student_id from student_course_registrations", "question": "What are the ids of the students who registered course statistics by order of registration date?", "sub_sql_type": "null col col col col", "sub_sql_new": "select student id from student_course_registrations", "query": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \\\\\\\"statistics\\\\\\\" ORDER BY T2.registration_date", "sub_ques": "what are the ids of the students"}
{"db_id": "student_assessment", "sub_sql": "where course_name = statistics", "question": "What are the ids of the students who registered course statistics by order of registration date?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where course name equal to statistics", "query": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \\\\\\\"statistics\\\\\\\" ORDER BY T2.registration_date", "sub_ques": "who registered course statistics"}
{"db_id": "student_assessment", "sub_sql": "order by registration_date", "question": "What are the ids of the students who registered course statistics by order of registration date?", "sub_sql_type": "null null col col", "sub_sql_new": "order by registration date", "query": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \\\\\\\"statistics\\\\\\\" ORDER BY T2.registration_date", "sub_ques": "by order of registration date"}
{"db_id": "student_assessment", "sub_sql": "select student_id from student_course_attendance", "question": "List the id of students who attended  statistics courses in the order of attendance date.", "sub_sql_type": "null col col col col", "sub_sql_new": "select student id from student_course_attendance", "query": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \\\\\\\"statistics\\\\\\\" ORDER BY T2.date_of_attendance", "sub_ques": "list the id of students"}
{"db_id": "student_assessment", "sub_sql": "where course_name = statistics", "question": "List the id of students who attended  statistics courses in the order of attendance date.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where course name equal to statistics", "query": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \\\\\\\"statistics\\\\\\\" ORDER BY T2.date_of_attendance", "sub_ques": "statistics courses"}
{"db_id": "student_assessment", "sub_sql": "order by date_of_attendance", "question": "List the id of students who attended  statistics courses in the order of attendance date.", "sub_sql_type": "null null col col col", "sub_sql_new": "order by date of attendance", "query": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \\\\\\\"statistics\\\\\\\" ORDER BY T2.date_of_attendance", "sub_ques": "in the order of attendance date"}
{"db_id": "student_assessment", "sub_sql": "select student_id from student_course_attendance", "question": "What are the ids of the students who attended courses in the statistics department in order of attendance date.", "sub_sql_type": "null col col col col", "sub_sql_new": "select student id from student_course_attendance", "query": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \\\\\\\"statistics\\\\\\\" ORDER BY T2.date_of_attendance", "sub_ques": "what are the ids of the students"}
{"db_id": "student_assessment", "sub_sql": "where course_name = statistics", "question": "What are the ids of the students who attended courses in the statistics department in order of attendance date.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where course name equal to statistics", "query": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \\\\\\\"statistics\\\\\\\" ORDER BY T2.date_of_attendance", "sub_ques": "courses in the statistics"}
{"db_id": "student_assessment", "sub_sql": "order by date_of_attendance", "question": "What are the ids of the students who attended courses in the statistics department in order of attendance date.", "sub_sql_type": "null null col col col", "sub_sql_new": "order by date of attendance", "query": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \\\\\\\"statistics\\\\\\\" ORDER BY T2.date_of_attendance", "sub_ques": "in the order of attendance date"}
{"db_id": "bike_1", "sub_sql": "select date from weather", "question": "Give me the dates when the max temperature was higher than 85.", "sub_sql_type": "null col col col", "sub_sql_new": "select date from weather", "query": "SELECT date FROM weather WHERE max_temperature_f  >  85", "sub_ques": "give me the dates"}
{"db_id": "bike_1", "sub_sql": "where max_temperature_f > 85", "question": "Give me the dates when the max temperature was higher than 85.", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where max temperature f more than 85", "query": "SELECT date FROM weather WHERE max_temperature_f  >  85", "sub_ques": "when the max temperature was higher than 85"}
{"db_id": "bike_1", "sub_sql": "select date from weather", "question": "What are the dates with a maximum temperature higher than 85?", "sub_sql_type": "null col col col", "sub_sql_new": "select date from weather", "query": "SELECT date FROM weather WHERE max_temperature_f  >  85", "sub_ques": "what are the dates"}
{"db_id": "bike_1", "sub_sql": "where max_temperature_f > 85", "question": "What are the dates with a maximum temperature higher than 85?", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where max temperature f more than 85", "query": "SELECT date FROM weather WHERE max_temperature_f  >  85", "sub_ques": "with a maximum temperature higher than 85"}
{"db_id": "bike_1", "sub_sql": "select name from station", "question": "What are the names of stations that have latitude lower than 37.5?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from station", "query": "SELECT name FROM station WHERE lat  <  37.5", "sub_ques": "what are the names of stations"}
{"db_id": "bike_1", "sub_sql": "where lat < 37.5", "question": "What are the names of stations that have latitude lower than 37.5?", "sub_sql_type": "null col op op value", "sub_sql_new": "where latitude less than 37.5", "query": "SELECT name FROM station WHERE lat  <  37.5", "sub_ques": "stations that have latitude lower than 37.5"}
{"db_id": "bike_1", "sub_sql": "select name from station", "question": "What are the names of all stations with a latitude smaller than 37.5?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from station", "query": "SELECT name FROM station WHERE lat  <  37.5", "sub_ques": "what are the names of all stations"}
{"db_id": "bike_1", "sub_sql": "where lat < 37.5", "question": "What are the names of all stations with a latitude smaller than 37.5?", "sub_sql_type": "null col op op value", "sub_sql_new": "where latitude less than 37.5", "query": "SELECT name FROM station WHERE lat  <  37.5", "sub_ques": "stations with a latitude smaller than 37.5"}
{"db_id": "bike_1", "sub_sql": "select city , max lat from station", "question": "For each city, return the highest latitude among its stations.", "sub_sql_type": "null col null agg col col col", "sub_sql_new": "select city , max latitude from station", "query": "SELECT city ,  max(lat) FROM station GROUP BY city", "sub_ques": "for each city , return the highest latitude among its stations"}
{"db_id": "bike_1", "sub_sql": "select city , max lat from station", "question": "For each city, what is the highest latitude for its stations?", "sub_sql_type": "null col null agg col col col", "sub_sql_new": "select city , max latitude from station", "query": "SELECT city ,  max(lat) FROM station GROUP BY city", "sub_ques": "for each city , what is the highest latitude for its stations"}
{"db_id": "bike_1", "sub_sql": "select start_station_name , end_station_name from trip", "question": "Give me the start station and end station for the trips with the three oldest id.", "sub_sql_type": "null col col col null col col col col col", "sub_sql_new": "select start station name , end station name from trip", "query": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3", "sub_ques": "give me the start station and end station for the trips"}
{"db_id": "bike_1", "sub_sql": "order by id limit 3", "question": "Give me the start station and end station for the trips with the three oldest id.", "sub_sql_type": "null null col null limv", "sub_sql_new": "order by id limit 3", "query": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3", "sub_ques": "the three oldest id"}
{"db_id": "bike_1", "sub_sql": "select start_station_name , end_station_name from trip", "question": "What is the station station and end station for the trips with the three smallest ids?", "sub_sql_type": "null col col col null col col col col col", "sub_sql_new": "select start station name , end station name from trip", "query": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3", "sub_ques": "what is the station station and end station for the trips"}
{"db_id": "bike_1", "sub_sql": "order by id limit 3", "question": "What is the station station and end station for the trips with the three smallest ids?", "sub_sql_type": "null null col null limv", "sub_sql_new": "order by id limit 3", "query": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3", "sub_ques": "the three smallest ids"}
{"db_id": "bike_1", "sub_sql": "select avg lat , avg long from station", "question": "What is the average latitude and longitude of stations located in San Jose city?", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select avg latitude , avg longitude from station", "query": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \\\\\\\"San Jose\\\\\\\"", "sub_ques": "what is the average latitude and longitude of stations"}
{"db_id": "bike_1", "sub_sql": "where city = sanjose", "question": "What is the average latitude and longitude of stations located in San Jose city?", "sub_sql_type": "null col op op value", "sub_sql_new": "where city equal to sanjose", "query": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \\\\\\\"San Jose\\\\\\\"", "sub_ques": "stations located in san jose city"}
{"db_id": "bike_1", "sub_sql": "select avg lat , avg long from station", "question": "What is the average latitude and longitude in San Jose?", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select avg latitude , avg longitude from station", "query": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \\\\\\\"San Jose\\\\\\\"", "sub_ques": "what is the average latitude"}
{"db_id": "bike_1", "sub_sql": "where city = sanjose", "question": "What is the average latitude and longitude in San Jose?", "sub_sql_type": "null col op op value", "sub_sql_new": "where city equal to sanjose", "query": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \\\\\\\"San Jose\\\\\\\"", "sub_ques": "in san jose"}
{"db_id": "bike_1", "sub_sql": "select id from trip", "question": "What is the id of the trip that has the shortest duration?", "sub_sql_type": "null col col col", "sub_sql_new": "select id from trip", "query": "SELECT id FROM trip ORDER BY duration LIMIT 1", "sub_ques": "what is the id of the trip"}
{"db_id": "bike_1", "sub_sql": "order by duration limit 1", "question": "What is the id of the trip that has the shortest duration?", "sub_sql_type": "null null col null limv", "sub_sql_new": "order by duration limit 1", "query": "SELECT id FROM trip ORDER BY duration LIMIT 1", "sub_ques": "has the shortest duration"}
{"db_id": "bike_1", "sub_sql": "select id from trip", "question": "What is the id of the shortest trip?", "sub_sql_type": "null col col col", "sub_sql_new": "select id from trip", "query": "SELECT id FROM trip ORDER BY duration LIMIT 1", "sub_ques": "what is the id of trip"}
{"db_id": "bike_1", "sub_sql": "order by duration limit 1", "question": "What is the id of the shortest trip?", "sub_sql_type": "null null col null limv", "sub_sql_new": "order by duration limit 1", "query": "SELECT id FROM trip ORDER BY duration LIMIT 1", "sub_ques": "the shortest trip"}
{"db_id": "bike_1", "sub_sql": "select sum duration , max duration from trip", "question": "What is the total and maximum duration of trips with bike id 636?", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select sum duration , max duration from trip", "query": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636", "sub_ques": "what is the total and maximum duration of trips"}
{"db_id": "bike_1", "sub_sql": "where bike_id = 636", "question": "What is the total and maximum duration of trips with bike id 636?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where bike id equal to 636", "query": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636", "sub_ques": "trips with bike id 636"}
{"db_id": "bike_1", "sub_sql": "select sum duration , max duration from trip", "question": "What is the total and maximum duration for all trips with the bike id 636?", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select sum duration , max duration from trip", "query": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636", "sub_ques": "what is the total and maximum duration for all trips"}
{"db_id": "bike_1", "sub_sql": "where bike_id = 636", "question": "What is the total and maximum duration for all trips with the bike id 636?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where bike id equal to 636", "query": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636", "sub_ques": "trips with the bike id 636"}
{"db_id": "bike_1", "sub_sql": "select zip_code , avg mean_temperature_f from weather", "question": "For each zip code, return the average mean temperature of August there.", "sub_sql_type": "null col col null agg col col col col col", "sub_sql_new": "select zip code , avg mean temperature f from weather", "query": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \\\\\\\"8/%\\\\\\\" GROUP BY zip_code", "sub_ques": "for each zip code , return the average mean temperature"}
{"db_id": "bike_1", "sub_sql": "where date like 8", "question": "For each zip code, return the average mean temperature of August there.", "sub_sql_type": "null col op value", "sub_sql_new": "where date like 8", "query": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \\\\\\\"8/%\\\\\\\" GROUP BY zip_code", "sub_ques": "august"}
{"db_id": "bike_1", "sub_sql": "select zip_code , avg mean_temperature_f from weather", "question": "For each zip code, what is the average mean temperature for all dates that start with '8'?", "sub_sql_type": "null col col null agg col col col col col", "sub_sql_new": "select zip code , avg mean temperature f from weather", "query": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \\\\\\\"8/%\\\\\\\" GROUP BY zip_code", "sub_ques": "for each zip code , what is the average mean temperature"}
{"db_id": "bike_1", "sub_sql": "where date like 8", "question": "For each zip code, what is the average mean temperature for all dates that start with '8'?", "sub_sql_type": "null col op value", "sub_sql_new": "where date like 8", "query": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \\\\\\\"8/%\\\\\\\" GROUP BY zip_code", "sub_ques": "dates that start with 8"}
{"db_id": "bike_1", "sub_sql": "select count distinct bike_id from trip", "question": "From the trip record, find the number of unique bikes.", "sub_sql_type": "null agg col col col col col", "sub_sql_new": "select count distinct bike id from trip", "query": "SELECT count(DISTINCT bike_id) FROM trip", "sub_ques": "find the number of unique bikes"}
{"db_id": "bike_1", "sub_sql": "select count distinct bike_id from trip", "question": "How many different bike ids are there?", "sub_sql_type": "null agg col col col col col", "sub_sql_new": "select count distinct bike id from trip", "query": "SELECT count(DISTINCT bike_id) FROM trip", "sub_ques": "how many different bike ids"}
{"db_id": "bike_1", "sub_sql": "select count distinct city from station", "question": "What is the number of distinct cities the stations are located at?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct city from station", "query": "SELECT count(DISTINCT city) FROM station", "sub_ques": "what is the number of distinct cities the stations"}
{"db_id": "bike_1", "sub_sql": "select count distinct city from station", "question": "How many different cities have these stations?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct city from station", "query": "SELECT count(DISTINCT city) FROM station", "sub_ques": "how many different cities have these stations"}
{"db_id": "bike_1", "sub_sql": "select count station", "question": "How many stations does Mountain View city has?", "sub_sql_type": "null agg col", "sub_sql_new": "select count station", "query": "SELECT COUNT(*) FROM station WHERE city  =  \\\\\\\"Mountain View\\\\\\\"", "sub_ques": "how many stations"}
{"db_id": "bike_1", "sub_sql": "where city = mountainview", "question": "How many stations does Mountain View city has?", "sub_sql_type": "null col op op value", "sub_sql_new": "where city equal to mountainview", "query": "SELECT COUNT(*) FROM station WHERE city  =  \\\\\\\"Mountain View\\\\\\\"", "sub_ques": "stations does mountain view city"}
{"db_id": "bike_1", "sub_sql": "select count station", "question": "How many stations are in Mountain View?", "sub_sql_type": "null agg col", "sub_sql_new": "select count station", "query": "SELECT COUNT(*) FROM station WHERE city  =  \\\\\\\"Mountain View\\\\\\\"", "sub_ques": "how many stations"}
{"db_id": "bike_1", "sub_sql": "where city = mountainview", "question": "How many stations are in Mountain View?", "sub_sql_type": "null col op op value", "sub_sql_new": "where city equal to mountainview", "query": "SELECT COUNT(*) FROM station WHERE city  =  \\\\\\\"Mountain View\\\\\\\"", "sub_ques": "stations are in mountain view"}
{"db_id": "bike_1", "sub_sql": "select distinct name from station", "question": "Return the unique name for stations that have ever had 7 bikes available.", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct name from station", "query": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7", "sub_ques": "return the unique name for stations"}
{"db_id": "bike_1", "sub_sql": "where bikes_available = 7", "question": "Return the unique name for stations that have ever had 7 bikes available.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where bikes available equal to 7", "query": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7", "sub_ques": "had 7 bikes available"}
{"db_id": "bike_1", "sub_sql": "select distinct t1.name from station", "question": "What are the different names for each station that has ever had 7 bikes available?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct name from station", "query": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7", "sub_ques": "what are the different names for each station"}
{"db_id": "bike_1", "sub_sql": "where t2.bikes_available = 7", "question": "What are the different names for each station that has ever had 7 bikes available?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where bikes available equal to 7", "query": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7", "sub_ques": "had 7 bikes available"}
{"db_id": "bike_1", "sub_sql": "select start_station_name , start_station_id from trip", "question": "Which start station had the most trips starting from August? Give me the name and id of the station.", "sub_sql_type": "null col col col null col col col col col", "sub_sql_new": "select start station name , start station id from trip", "query": "SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \\\\\\\"8/%\\\\\\\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "give me the name and id of the station"}
{"db_id": "bike_1", "sub_sql": "where start_date like 8", "question": "Which start station had the most trips starting from August? Give me the name and id of the station.", "sub_sql_type": "null col col op value", "sub_sql_new": "where start date like 8", "query": "SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \\\\\\\"8/%\\\\\\\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "which start station had the most trips starting from august"}
{"db_id": "bike_1", "sub_sql": "group by start_station_name order by count trip desc limit 1", "question": "Which start station had the most trips starting from August? Give me the name and id of the station.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count trip desc limit 1", "query": "SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \\\\\\\"8/%\\\\\\\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "which start station had the most trips"}
{"db_id": "bike_1", "sub_sql": "select start_station_name , start_station_id from trip", "question": "What are the start station's name and id for the one that had the most start trips in August?", "sub_sql_type": "null col col col null col col col col col", "sub_sql_new": "select start station name , start station id from trip", "query": "SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \\\\\\\"8/%\\\\\\\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "what are the start station 's name and id"}
{"db_id": "bike_1", "sub_sql": "where start_date like 8", "question": "What are the start station's name and id for the one that had the most start trips in August?", "sub_sql_type": "null col col op value", "sub_sql_new": "where start date like 8", "query": "SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \\\\\\\"8/%\\\\\\\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "start trips in august"}
{"db_id": "bike_1", "sub_sql": "group by start_station_name order by count start_data desc limit 1", "question": "What are the start station's name and id for the one that had the most start trips in August?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count start_data desc limit 1", "query": "SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \\\\\\\"8/%\\\\\\\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "the start station 's name for the one that had the most start trips"}
{"db_id": "bike_1", "sub_sql": "select bike_id from trip", "question": "Which bike traveled the most often in zip code 94002?", "sub_sql_type": "null col col col col", "sub_sql_new": "select bike id from trip", "query": "SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "which bike traveled"}
{"db_id": "bike_1", "sub_sql": "where zip_code = 94002", "question": "Which bike traveled the most often in zip code 94002?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where zip code equal to 94002", "query": "SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "in zip code 94002"}
{"db_id": "bike_1", "sub_sql": "group by bike_id order by count trip desc limit 1", "question": "Which bike traveled the most often in zip code 94002?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count trip desc limit 1", "query": "SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "bike traveled the most often"}
{"db_id": "bike_1", "sub_sql": "select bike_id from trip", "question": "What is the id of the bike that traveled the most in 94002?", "sub_sql_type": "null col col col col", "sub_sql_new": "select bike id from trip", "query": "SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "what is the id of the bike"}
{"db_id": "bike_1", "sub_sql": "where zip_code = 94002", "question": "What is the id of the bike that traveled the most in 94002?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where zip code equal to 94002", "query": "SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "in 94002"}
{"db_id": "bike_1", "sub_sql": "group by bike_id order by count trip desc limit 1", "question": "What is the id of the bike that traveled the most in 94002?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count trip desc limit 1", "query": "SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "the id of the bike that traveled the most"}
{"db_id": "bike_1", "sub_sql": "select count weather", "question": "How many days had both mean humidity above 50 and mean visibility above 8?", "sub_sql_type": "null agg col", "sub_sql_new": "select count weather", "query": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8", "sub_ques": "how many days"}
{"db_id": "bike_1", "sub_sql": "where mean_humidity > 50", "question": "How many days had both mean humidity above 50 and mean visibility above 8?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where mean humidity more than 50", "query": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8", "sub_ques": "mean humidity above 50"}
{"db_id": "bike_1", "sub_sql": "where mean_visibility_miles > 8", "question": "How many days had both mean humidity above 50 and mean visibility above 8?", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where mean visibility miles more than 8", "query": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8", "sub_ques": "mean visibility above 8"}
{"db_id": "bike_1", "sub_sql": "select count weather", "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?", "sub_sql_type": "null agg col", "sub_sql_new": "select count weather", "query": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8", "sub_ques": "what is the number of days"}
{"db_id": "bike_1", "sub_sql": "where mean_humidity > 50", "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where mean humidity more than 50", "query": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8", "sub_ques": "average humity above 50"}
{"db_id": "bike_1", "sub_sql": "where mean_visibility_miles > 8", "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where mean visibility miles more than 8", "query": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8", "sub_ques": "an average visibility above 8"}
{"db_id": "bike_1", "sub_sql": "select t1.lat , t1.long , t1.city from station", "question": "What is the latitude, longitude, city of the station from which the shortest trip started?", "sub_sql_type": "null col null col null col col col", "sub_sql_new": "select latitude , longitude , city from station", "query": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1", "sub_ques": "what is the latitude , longitude , city of the station"}
{"db_id": "bike_1", "sub_sql": "order by t2.duration limit 1", "question": "What is the latitude, longitude, city of the station from which the shortest trip started?", "sub_sql_type": "null null col null limv", "sub_sql_new": "order by duration limit 1", "query": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1", "sub_ques": "the shortest trip started"}
{"db_id": "bike_1", "sub_sql": "select t1.lat , t1.long , t1.city from station", "question": "What is the latitude, longitude, and city of the station from which the trip with smallest duration started?", "sub_sql_type": "null col null col null col col col", "sub_sql_new": "select latitude , longitude , city from station", "query": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1", "sub_ques": "what is the latitude , longitude , and city of the station"}
{"db_id": "bike_1", "sub_sql": "order by t2.duration limit 1", "question": "What is the latitude, longitude, and city of the station from which the trip with smallest duration started?", "sub_sql_type": "null null col null limv", "sub_sql_new": "order by duration limit 1", "query": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1", "sub_ques": "with smallest duration"}
{"db_id": "bike_1", "sub_sql": "select cloud_cover from weather", "question": "What is the 3 most common cloud cover rates in the region of zip code 94107?", "sub_sql_type": "null col col col col", "sub_sql_new": "select cloud cover from weather", "query": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3", "sub_ques": "what is cloud cover"}
{"db_id": "bike_1", "sub_sql": "where zip_code = 94107", "question": "What is the 3 most common cloud cover rates in the region of zip code 94107?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where zip code equal to 94107", "query": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3", "sub_ques": "in the region of zip code 94107"}
{"db_id": "bike_1", "sub_sql": "group by cloud_cover order by count weather desc limit 3", "question": "What is the 3 most common cloud cover rates in the region of zip code 94107?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count weather desc limit 3", "query": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3", "sub_ques": "the 3 most common cloud cover"}
{"db_id": "bike_1", "sub_sql": "select cloud_cover from weather", "question": "What are the 3 most common cloud covers in the zip code of 94107?", "sub_sql_type": "null col col col col", "sub_sql_new": "select cloud cover from weather", "query": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3", "sub_ques": "what are cloud covers"}
{"db_id": "bike_1", "sub_sql": "where zip_code = 94107", "question": "What are the 3 most common cloud covers in the zip code of 94107?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where zip code equal to 94107", "query": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3", "sub_ques": "in the zip code of 94107"}
{"db_id": "bike_1", "sub_sql": "group by cloud_cover order by count whether desc limit 3", "question": "What are the 3 most common cloud covers in the zip code of 94107?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count whether desc limit 3", "query": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3", "sub_ques": "the 3 most common cloud covers"}
{"db_id": "bike_1", "sub_sql": "select zip_code from weather", "question": "What is the zip code in which the average mean sea level pressure is the lowest?", "sub_sql_type": "null col col col col", "sub_sql_new": "select zip code from weather", "query": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1", "sub_ques": "what is the zip code"}
{"db_id": "bike_1", "sub_sql": "group by zip_code order by avg mean_sea_level_pressure_inches limit 1", "question": "What is the zip code in which the average mean sea level pressure is the lowest?", "sub_sql_type": "null null agg col col col col col null limv", "sub_sql_new": "order by avg mean sea level pressure inches limit 1", "query": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1", "sub_ques": "the zip code in which the average mean sea level pressure is the lowest"}
{"db_id": "bike_1", "sub_sql": "select zip_code from weather", "question": "What is the zip code that has the lowest average mean sea level pressure?", "sub_sql_type": "null col col col col", "sub_sql_new": "select zip code from weather", "query": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1", "sub_ques": "what is the zip code"}
{"db_id": "bike_1", "sub_sql": "group by zip_code order by avg mean_sea_level_pressure_inches limit 1", "question": "What is the zip code that has the lowest average mean sea level pressure?", "sub_sql_type": "null null agg col col col col col null limv", "sub_sql_new": "order by avg mean sea level pressure inches limit 1", "query": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1", "sub_ques": "the zip code that has the lowest average mean sea level pressure"}
{"db_id": "bike_1", "sub_sql": "select avg bikes_available from status", "question": "What is the average bike availability in stations that are not located in Palo Alto?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select avg bikes available from status", "query": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \\\\\\\"Palo Alto\\\\\\\")", "sub_ques": "what is the average bike availability"}
{"db_id": "bike_1", "sub_sql": "where city = paloalto", "question": "What is the average bike availability in stations that are not located in Palo Alto?", "sub_sql_type": "null col op op value", "sub_sql_new": "where city equal to paloalto", "query": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \\\\\\\"Palo Alto\\\\\\\")", "sub_ques": "located in palo alto"}
{"db_id": "bike_1", "sub_sql": "select avg bikes_available from status", "question": "What is the average bike availablility for stations not in Palo Alto?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select avg bikes available from status", "query": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \\\\\\\"Palo Alto\\\\\\\")", "sub_ques": "what is the average bike availablility"}
{"db_id": "bike_1", "sub_sql": "where city = paloalto", "question": "What is the average bike availablility for stations not in Palo Alto?", "sub_sql_type": "null col op op value", "sub_sql_new": "where city equal to paloalto", "query": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \\\\\\\"Palo Alto\\\\\\\")", "sub_ques": "in palo alto"}
{"db_id": "bike_1", "sub_sql": "select avg long from station", "question": "What is the average longitude of stations that never had bike availability more than 10?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select avg longitude from station", "query": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)", "sub_ques": "what is the average longitude"}
{"db_id": "bike_1", "sub_sql": "group by station_id having max bikes_available > 10", "question": "What is the average longitude of stations that never had bike availability more than 10?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)", "sub_ques": "stations that never had bike availability more than 10"}
{"db_id": "bike_1", "sub_sql": "select avg long from station", "question": "What is the mean longitude for all stations that have never had more than 10 bikes available?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select avg longitude from station", "query": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)", "sub_ques": "what is the mean longitude"}
{"db_id": "bike_1", "sub_sql": "group by station_id having max bikes_available > 10", "question": "What is the mean longitude for all stations that have never had more than 10 bikes available?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)", "sub_ques": "stations that have never had more than 10 bikes available"}
{"db_id": "bike_1", "sub_sql": "select date , zip_code from weather", "question": "When and in what zip code did max temperature reach 80?", "sub_sql_type": "null col null col col col col", "sub_sql_new": "select date , zip code from weather", "query": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80", "sub_ques": "when and in what zip code did max temperature"}
{"db_id": "bike_1", "sub_sql": "where max_temperature_f >= 80", "question": "When and in what zip code did max temperature reach 80?", "sub_sql_type": "null col col col op op op value", "sub_sql_new": "where max temperature f no less than 80", "query": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80", "sub_ques": "max temperature reach 80"}
{"db_id": "bike_1", "sub_sql": "select date , zip_code from weather", "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?", "sub_sql_type": "null col null col col col col", "sub_sql_new": "select date , zip code from weather", "query": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80", "sub_ques": "what zip codes have a station with a max temperature and when"}
{"db_id": "bike_1", "sub_sql": "where max_temperature_f >= 80", "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?", "sub_sql_type": "null col col col op op op value", "sub_sql_new": "where max temperature f no less than 80", "query": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80", "sub_ques": "max temperature greater than or equal to 80"}
{"db_id": "bike_1", "sub_sql": "select t1.id from trip", "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.", "sub_sql_type": "null col col col", "sub_sql_new": "select id from trip", "query": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60", "sub_ques": "give me ids for all the trip"}
{"db_id": "bike_1", "sub_sql": "group by t2.zip_code having avg t2.mean_temperature_f > 60", "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60", "sub_ques": "a zip code area with average mean temperature above 60"}
{"db_id": "bike_1", "sub_sql": "select t1.id from trip", "question": "For each zip code, find the ids of all trips that have a higher average mean temperature above 60?", "sub_sql_type": "null col col col", "sub_sql_new": "select id from trip", "query": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60", "sub_ques": "find the ids of all trips"}
{"db_id": "bike_1", "sub_sql": "group by t2.zip_code having avg t2.mean_temperature_f > 60", "question": "For each zip code, find the ids of all trips that have a higher average mean temperature above 60?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60", "sub_ques": "zip code that have a higher average mean temperature above 60"}
{"db_id": "bike_1", "sub_sql": "select zip_code , count weather group by zip_code", "question": "For each zip code, return how many times max wind speed reached 25?", "sub_sql_type": "null col col null agg col", "sub_sql_new": "select zip code , count weather", "query": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code", "sub_ques": "for each zip code, return how many times"}
{"db_id": "bike_1", "sub_sql": "where max_wind_speed_mph >= 25", "question": "For each zip code, return how many times max wind speed reached 25?", "sub_sql_type": "null col op op op value", "sub_sql_new": "where max_wind_speed_mph no less than 25", "query": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code", "sub_ques": "max wind speed reached 25"}
{"db_id": "bike_1", "sub_sql": "select zip_code , count weather group by zip_code", "question": "For each zip code, how many times has the maximum wind speed reached 25 mph?", "sub_sql_type": "null col col null agg col", "sub_sql_new": "select zip code , count weather", "query": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code", "sub_ques": "for each zip code, how many times"}
{"db_id": "bike_1", "sub_sql": "where max_wind_speed_mph >= 25", "question": "For each zip code, how many times has the maximum wind speed reached 25 mph?", "sub_sql_type": "null col op op op value", "sub_sql_new": "where max_wind_speed_mph no less than 25", "query": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code", "sub_ques": "maximum wind speed reached 25 mph"}
{"db_id": "bike_1", "sub_sql": "select date , zip_code from weather", "question": "On which day and in which zip code was the min dew point lower than any day in zip code 94107?", "sub_sql_type": "null col null col col col col", "sub_sql_new": "select date , zip code from weather", "query": "SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)", "sub_ques": "day and in which zip code"}
{"db_id": "bike_1", "sub_sql": "where min_dew_point_f < select min min_dew_point_f", "question": "On which day and in which zip code was the min dew point lower than any day in zip code 94107?", "sub_sql_type": "null col col col col op op value value value", "sub_sql_new": "where min dew point f less than select min min_dew_point_f", "query": "SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)", "sub_ques": "was the min dew point lower than any day"}
{"db_id": "bike_1", "sub_sql": "where zip_code = 94107", "question": "On which day and in which zip code was the min dew point lower than any day in zip code 94107?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where zip code equal to 94107", "query": "SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)", "sub_ques": "in zip code 94107"}
{"db_id": "bike_1", "sub_sql": "select date , zip_code from weather", "question": "Which days had a minimum dew point smaller than any day in zip code 94107, and in which zip codes were those measurements taken?", "sub_sql_type": "null col null col col col col", "sub_sql_new": "select date , zip code from weather", "query": "SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)", "sub_ques": "which days and in which zip codes"}
{"db_id": "bike_1", "sub_sql": "where min_dew_point_f < select min min_dew_point_f", "question": "Which days had a minimum dew point smaller than any day in zip code 94107, and in which zip codes were those measurements taken?", "sub_sql_type": "null col col col col op op value value value", "sub_sql_new": "where min dew point f less than select min min_dew_point_f", "query": "SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)", "sub_ques": "had a minimum dew point smaller than any day"}
{"db_id": "bike_1", "sub_sql": "where zip_code = 94107", "question": "Which days had a minimum dew point smaller than any day in zip code 94107, and in which zip codes were those measurements taken?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where zip code equal to 94107", "query": "SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)", "sub_ques": "in zip code 94107"}
{"db_id": "bike_1", "sub_sql": "select installation_date from trip , station", "question": "For each trip, return its ending station's installation date.", "sub_sql_type": "null col col col col null col", "sub_sql_new": "select installation date from trip , station", "query": "SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id", "sub_ques": "return its ending station 's installation date"}
{"db_id": "bike_1", "sub_sql": "select id , installation_date from trip , station", "question": "What is the installation date for each ending station on all the trips?", "sub_sql_type": "null col null col col col col null col", "sub_sql_new": "select id , installation date from trip , station", "query": "SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id", "sub_ques": "what is the installation date for each ending station on all the trips"}
{"db_id": "bike_1", "sub_sql": "select t1.id from trip", "question": "Which trip started from the station with the largest dock count? Give me the trip id.", "sub_sql_type": "null col col col", "sub_sql_new": "select id from trip", "query": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1", "sub_ques": "give me the trip id"}
{"db_id": "bike_1", "sub_sql": "order by t2.dock_count desc limit 1", "question": "Which trip started from the station with the largest dock count? Give me the trip id.", "sub_sql_type": "null null col col null null limv", "sub_sql_new": "order by dock count desc limit 1", "query": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1", "sub_ques": "the largest dock count"}
{"db_id": "bike_1", "sub_sql": "select t1.id from trip", "question": "What is the id of the trip that started from the station with the highest dock count?", "sub_sql_type": "null col col col", "sub_sql_new": "select id from trip", "query": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1", "sub_ques": "what is the id of the trip"}
{"db_id": "bike_1", "sub_sql": "order by t2.dock_count desc limit 1", "question": "What is the id of the trip that started from the station with the highest dock count?", "sub_sql_type": "null null col col null null limv", "sub_sql_new": "order by dock count desc limit 1", "query": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1", "sub_ques": "the highest dock count"}
{"db_id": "bike_1", "sub_sql": "select count trip ", "question": "Count the number of trips that did not end in San Francisco city.", "sub_sql_type": "null agg col", "sub_sql_new": "select count trip  col", "query": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city !=  \\\\\\\"San Francisco\\\\\\\"", "sub_ques": "count the number of trips"}
{"db_id": "bike_1", "sub_sql": "where t2.city != sanfrancisco", "question": "Count the number of trips that did not end in San Francisco city.", "sub_sql_type": "null col op op op value", "sub_sql_new": "where city not equal to sanfrancisco", "query": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city !=  \\\\\\\"San Francisco\\\\\\\"", "sub_ques": "did not end in san francisco city"}
{"db_id": "bike_1", "sub_sql": "select count trip", "question": "How many trips did not end in San Francisco?", "sub_sql_type": "null agg col", "sub_sql_new": "select count trip", "query": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city != \\\\\\\"San Francisco\\\\\\\"", "sub_ques": "how many trips"}
{"db_id": "bike_1", "sub_sql": "where t2.city != sanfrancisco", "question": "How many trips did not end in San Francisco?", "sub_sql_type": "null col op op op value", "sub_sql_new": "where city not equal to sanfrancisco", "query": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city != \\\\\\\"San Francisco\\\\\\\"", "sub_ques": "did not end in san francisco"}
{"db_id": "bike_1", "sub_sql": "select date from weather", "question": "In zip code 94107, on which day neither Fog nor Rain was not observed?", "sub_sql_type": "null col col col", "sub_sql_new": "select date from weather", "query": "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \\\\\\\"Fog\\\\\\\" AND EVENTS != \\\\\\\"Rain\\\\\\\"", "sub_ques": "on which day"}
{"db_id": "bike_1", "sub_sql": "where zip_code = 94107", "question": "In zip code 94107, on which day neither Fog nor Rain was not observed?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where zip code equal to 94107", "query": "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \\\\\\\"Fog\\\\\\\" AND EVENTS != \\\\\\\"Rain\\\\\\\"", "sub_ques": "in zip code 94107"}
{"db_id": "bike_1", "sub_sql": "where events != Fog", "question": "On which day has it neither been foggy nor rained in the zip code of 94107?", "sub_sql_type": "null col op op op value", "sub_sql_new": "where events not equal to Fog", "query": "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \\\\\\\"Fog\\\\\\\" AND EVENTS != \\\\\\\"Rain\\\\\\\"", "sub_ques": "neither been foggy"}
{"db_id": "bike_1", "sub_sql": "select name , lat , city from station", "question": "What are the name, latitude, and city of the station with the lowest latitude?", "sub_sql_type": "null col null col null col col col", "sub_sql_new": "select name , latitude , city from station", "query": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1", "sub_ques": "what are the name , latitude , and city of the station"}
{"db_id": "bike_1", "sub_sql": "order by lat limit 1", "question": "What are the name, latitude, and city of the station with the lowest latitude?", "sub_sql_type": "null null col null limv", "sub_sql_new": "order by latitude limit 1", "query": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1", "sub_ques": "with the lowest latitude"}
{"db_id": "bike_1", "sub_sql": "select name , lat , city from station", "question": "What is the name, latitude, and city of the station that is located the furthest South?", "sub_sql_type": "null col null col null col col col", "sub_sql_new": "select name , latitude , city from station", "query": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1", "sub_ques": "what is the name , latitude , and city of the station"}
{"db_id": "bike_1", "sub_sql": "order by lat limit 1", "question": "What is the name, latitude, and city of the station that is located the furthest South?", "sub_sql_type": "null null col null limv", "sub_sql_new": "order by latitude limit 1", "query": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1", "sub_ques": "that is located the furthest"}
{"db_id": "bike_1", "sub_sql": "select date , mean_temperature_f , mean_humidity from weather", "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?", "sub_sql_type": "null col null col col col null col col col col", "sub_sql_new": "select date , mean temperature f , mean humidity from weather", "query": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3", "sub_ques": "what are the date , mean temperature and mean humidity"}
{"db_id": "bike_1", "sub_sql": "order by max_gust_speed_mph desc limit 3", "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?", "sub_sql_type": "null null col col col col null null limv", "sub_sql_new": "order by max gust speed mph desc limit 3", "query": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3", "sub_ques": "the top 3 days with the largest max gust speeds"}
{"db_id": "bike_1", "sub_sql": "select date , mean_temperature_f , mean_humidity from weather", "question": "What is the date, average temperature and mean humidity for the days with the 3 largest maximum gust speeds?", "sub_sql_type": "null col null col col col null col col col col", "sub_sql_new": "select date , mean temperature f , mean humidity from weather", "query": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3", "sub_ques": "what is the date , average temperature and mean humidity"}
{"db_id": "bike_1", "sub_sql": "order by max_gust_speed_mph desc limit 3", "question": "What is the date, average temperature and mean humidity for the days with the 3 largest maximum gust speeds?", "sub_sql_type": "null null col col col col null null limv", "sub_sql_new": "order by max gust speed mph desc limit 3", "query": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3", "sub_ques": "the 3 largest maximum gust speeds"}
{"db_id": "bike_1", "sub_sql": "select city , count station group by city", "question": "List the name and the number of stations for all the cities that have at least 15 stations.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select city , count station", "query": "SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15", "sub_ques": "list the name and the number of stations for all the cities"}
{"db_id": "bike_1", "sub_sql": "group by city having count station >= 15", "question": "List the name and the number of stations for all the cities that have at least 15 stations.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15", "sub_ques": "the cities that have at least 15 stations"}
{"db_id": "bike_1", "sub_sql": "select city , count * from station group by city", "question": "What is the name of every city that has at least 15 stations and how many stations does it have?", "sub_sql_type": "null col null agg col col col", "sub_sql_new": "select city , count * from station", "query": "SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15", "sub_ques": "what is the name of city and how many stations does it"}
{"db_id": "bike_1", "sub_sql": "group by city having count station >= 15", "question": "What is the name of every city that has at least 15 stations and how many stations does it have?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15", "sub_ques": "city that has at least 15 stations"}
{"db_id": "bike_1", "sub_sql": "select start_station_id , start_station_name from trip", "question": "Find the ids and names of stations from which at least 200 trips started.", "sub_sql_type": "null col col col null col col col col col", "sub_sql_new": "select start station id , start station name from trip", "query": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200", "sub_ques": "find the ids and names of stations"}
{"db_id": "bike_1", "sub_sql": "group by start_station_name having count trip >= 200", "question": "Find the ids and names of stations from which at least 200 trips started.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200", "sub_ques": "names of stations from which at least 200 trips"}
{"db_id": "bike_1", "sub_sql": "select start_station_id , start_station_name from trip", "question": "What are the ids and names of all start stations that were the beginning of at least 200 trips?", "sub_sql_type": "null col col col null col col col col col", "sub_sql_new": "select start station id , start station name from trip", "query": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200", "sub_ques": "what are the ids and names of all start stations that were the beginning of at least 200 trips"}
{"db_id": "bike_1", "sub_sql": "group by start_station_name having count trip >= 200", "question": "What are the ids and names of all start stations that were the beginning of at least 200 trips?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200", "sub_ques": "names of all start stations that were the beginning of at least 200 trips"}
{"db_id": "bike_1", "sub_sql": "select zip_code from weather", "question": "Find the zip code in which the average mean visibility is lower than 10.", "sub_sql_type": "null col col col col", "sub_sql_new": "select zip code from weather", "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10", "sub_ques": "find the zip code"}
{"db_id": "bike_1", "sub_sql": "group by zip_code having avg mean_visibility_miles < 10", "question": "Find the zip code in which the average mean visibility is lower than 10.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10", "sub_ques": "zip code in which the average mean visibility is lower than 10"}
{"db_id": "bike_1", "sub_sql": "select zip_code from weather", "question": "For each zip code, select all those that have an average mean visiblity below 10.", "sub_sql_type": "null col col col col", "sub_sql_new": "select zip code from weather", "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10", "sub_ques": "for each zip code, select all those"}
{"db_id": "bike_1", "sub_sql": "group by zip_code having avg mean_visibility_miles < 10", "question": "For each zip code, select all those that have an average mean visiblity below 10.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10", "sub_ques": "zip code that have an average mean visiblity below 10"}
{"db_id": "bike_1", "sub_sql": "select city from station", "question": "List all the cities in a decreasing order of each city's stations' highest latitude.", "sub_sql_type": "null col col col", "sub_sql_new": "select city from station", "query": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC", "sub_ques": "list all the cities"}
{"db_id": "bike_1", "sub_sql": "group by city order by max lat desc", "question": "List all the cities in a decreasing order of each city's stations' highest latitude.", "sub_sql_type": "null null agg col null", "sub_sql_new": "order by max latitude desc", "query": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC", "sub_ques": "the cities in a decreasing order of each city 's stations ' highest latitude"}
{"db_id": "bike_1", "sub_sql": "select city from station", "question": "For each city, list their names in decreasing order by their highest station latitude.", "sub_sql_type": "null col col col", "sub_sql_new": "select city from station", "query": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC", "sub_ques": "city , list their names"}
{"db_id": "bike_1", "sub_sql": "group by city order by max lat desc", "question": "For each city, list their names in decreasing order by their highest station latitude.", "sub_sql_type": "null null agg col null", "sub_sql_new": "order by max latitude desc", "query": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC", "sub_ques": "in decreasing order by their highest station latitude"}
{"db_id": "bike_1", "sub_sql": "select date , cloud_cover from weather", "question": "What are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate.", "sub_sql_type": "null col null col col col col", "sub_sql_new": "select date , cloud cover from weather", "query": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5", "sub_ques": "what are the dates ? also tell me the cloud cover"}
{"db_id": "bike_1", "sub_sql": "order by cloud_cover desc limit 5", "question": "What are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate.", "sub_sql_type": "null null col col null null limv", "sub_sql_new": "order by cloud cover desc limit 5", "query": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5", "sub_ques": "the top 5 cloud cover rates"}
{"db_id": "bike_1", "sub_sql": "select date from weather", "question": "What are the dates that have the 5 highest cloud cover rates and what are the rates?", "sub_sql_type": "null col col col", "sub_sql_new": "select date from weather", "query": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5", "sub_ques": "what are the dates"}
{"db_id": "bike_1", "sub_sql": "order by cloud_cover desc limit 5", "question": "What are the dates that have the 5 highest cloud cover rates and what are the rates?", "sub_sql_type": "null null col col null null limv", "sub_sql_new": "order by cloud cover desc limit 5", "query": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5", "sub_ques": "the 5 highest cloud cover"}
{"db_id": "bike_1", "sub_sql": "select id , duration from trip", "question": "What are the ids and durations of the trips with the top 3 durations?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select id , duration from trip", "query": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3", "sub_ques": "what are the ids and durations of the trips"}
{"db_id": "bike_1", "sub_sql": "order by duration desc limit 3", "question": "What are the ids and durations of the trips with the top 3 durations?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by duration desc limit 3", "query": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3", "sub_ques": "durations of the trips with the top 3 durations"}
{"db_id": "bike_1", "sub_sql": "select id , duration from trip", "question": "What are the ids of the trips that lasted the longest and how long did they last?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select id , duration from trip", "query": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3", "sub_ques": "what are the ids of the trips and how long"}
{"db_id": "bike_1", "sub_sql": "order by duration desc limit 3", "question": "What are the ids of the trips that lasted the longest and how long did they last?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by duration desc limit 3", "query": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3", "sub_ques": "that lasted the longest"}
{"db_id": "bike_1", "sub_sql": "select t1.name , t1.long , avg t2.duration from station , trip", "question": "For each station, return its longitude and the average duration of trips that started from the station.", "sub_sql_type": "null col null col null agg col col col null col", "sub_sql_new": "select name , longitude , avg duration from station , trip", "query": "SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id", "sub_ques": "station , return its longitude and the average duration of trips that started from the station"}
{"db_id": "bike_1", "sub_sql": "select t1.name , t1.long , avg t2.duration from station , trip", "question": "For each start station id, what is its name, longitude and average duration of trips started there?", "sub_sql_type": "null col null col null agg col col col null col", "sub_sql_new": "select name , longitude , avg duration from station , trip", "query": "SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id", "sub_ques": "what is its name , longitude and average duration of trips"}
{"db_id": "bike_1", "sub_sql": "select t1.name , t1.lat , min t2.duration from station , trip", "question": "For each station, find its latitude and the minimum duration of trips that ended at the station.", "sub_sql_type": "null col null col null agg col col col null col", "sub_sql_new": "select name , latitude , min duration from station , trip", "query": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id", "sub_ques": "station , find its latitude and the minimum duration of trips that ended at the station"}
{"db_id": "bike_1", "sub_sql": "select t1.name , t1.lat , min t2.duration from station , trip", "question": "For each end station id, what is its name, latitude, and minimum duration for trips ended there?", "sub_sql_type": "null col null col null agg col col col null col", "sub_sql_new": "select name , latitude , min duration from station , trip", "query": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id", "sub_ques": "what is its name , latitude , and minimum duration for trips"}
{"db_id": "bike_1", "sub_sql": "select distinct start_station_name from trip", "question": "List all the distinct stations from which a trip of duration below 100 started.", "sub_sql_type": "null col col col col col col", "sub_sql_new": "select distinct start station name from trip", "query": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100", "sub_ques": "list all the distinct stations"}
{"db_id": "bike_1", "sub_sql": "where duration < 100", "question": "List all the distinct stations from which a trip of duration below 100 started.", "sub_sql_type": "null col op op value", "sub_sql_new": "where duration less than 100", "query": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100", "sub_ques": "trip of duration below 100"}
{"db_id": "bike_1", "sub_sql": "select distinct start_station_name from trip", "question": "What are all the different start station names for a trip that lasted less than 100?", "sub_sql_type": "null col col col col col col", "sub_sql_new": "select distinct start station name from trip", "query": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100", "sub_ques": "what are all the different start station names for a trip"}
{"db_id": "bike_1", "sub_sql": "where duration < 100", "question": "What are all the different start station names for a trip that lasted less than 100?", "sub_sql_type": "null col op op value", "sub_sql_new": "where duration less than 100", "query": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100", "sub_ques": "trip that lasted less than 100"}
{"db_id": "bike_1", "sub_sql": "select id from trip", "question": "Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103.", "sub_sql_type": "null col col col", "sub_sql_new": "select id from trip", "query": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)", "sub_ques": "find the id for the trips"}
{"db_id": "bike_1", "sub_sql": "where duration >= select avg duration", "question": "Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103.", "sub_sql_type": "null col op op op value value value", "sub_sql_new": "where duration no less than select avg duration", "query": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)", "sub_ques": "that lasted at least as long as the average duration of trips"}
{"db_id": "bike_1", "sub_sql": "where zip_code = 94103", "question": "Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where zip code equal to 94103", "query": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)", "sub_ques": "in zip code 94103"}
{"db_id": "bike_1", "sub_sql": "select id from trip", "question": "What are the ids of all trips that had a duration as long as the average trip duration in the zip code 94103?", "sub_sql_type": "null col col col", "sub_sql_new": "select id from trip", "query": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)", "sub_ques": "what are the ids of all trips"}
{"db_id": "bike_1", "sub_sql": "where duration >= select avg duration", "question": "What are the ids of all trips that had a duration as long as the average trip duration in the zip code 94103?", "sub_sql_type": "null col op op op value value value", "sub_sql_new": "where duration no less than select avg duration", "query": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)", "sub_ques": "duration as long as the average trip duration"}
{"db_id": "bike_1", "sub_sql": "where zip_code = 94103", "question": "What are the ids of all trips that had a duration as long as the average trip duration in the zip code 94103?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where zip code equal to 94103", "query": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)", "sub_ques": "in the zip code 94103"}
{"db_id": "bike_1", "sub_sql": "select date from weather", "question": "What are the dates in which the mean sea level pressure was between 30.3 and 31?", "sub_sql_type": "null col col col", "sub_sql_new": "select date from weather", "query": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31", "sub_ques": "what are the dates"}
{"db_id": "bike_1", "sub_sql": "WHERE mean_sea_level_pressure_inches between 30.3 and 31", "question": "What are the dates in which the mean sea level pressure was between 30.3 and 31?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31", "sub_ques": "which the mean sea level pressure was between 30.3 and 31"}
{"db_id": "bike_1", "sub_sql": "select date from weather", "question": "What are the dates that have an average sea level pressure between 30.3 and 31?", "sub_sql_type": "null col col col", "sub_sql_new": "select date from weather", "query": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31", "sub_ques": "what are the dates"}
{"db_id": "bike_1", "sub_sql": "select distinct t1.id , t1.name from station", "question": "What are the id and name of the stations that have ever had more than 12 bikes available?", "sub_sql_type": "null col col null col col col", "sub_sql_new": "select distinct id , name from station", "query": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12", "sub_ques": "what are the id and name of the stations"}
{"db_id": "bike_1", "sub_sql": "where t2.bikes_available > 12", "question": "What are the id and name of the stations that have ever had more than 12 bikes available?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where bikes available more than 12", "query": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12", "sub_ques": "that have ever had more than 12 bikes available"}
{"db_id": "bike_1", "sub_sql": "select distinct t1.id , t1.name from station", "question": "What are the different ids and names of the stations that have had more than 12 bikes available?", "sub_sql_type": "null col col null col col col", "sub_sql_new": "select distinct id , name from station", "query": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12", "sub_ques": "what are the different ids and names of the stations"}
{"db_id": "bike_1", "sub_sql": "where t2.bikes_available > 12", "question": "What are the different ids and names of the stations that have had more than 12 bikes available?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where bikes available more than 12", "query": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12", "sub_ques": "that have had more than 12 bikes available"}
{"db_id": "bike_1", "sub_sql": "select count trip ", "question": "How many trips started from Mountain View city and ended at Palo Alto city?", "sub_sql_type": "null agg col", "sub_sql_new": "select count trip  col", "query": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \\\\\\\"Mountain View\\\\\\\" AND T3.city  =  \\\\\\\"Palo Alto\\\\\\\"", "sub_ques": "how many trips"}
{"db_id": "bike_1", "sub_sql": "where t1.city = mountainview", "question": "How many trips started from Mountain View city and ended at Palo Alto city?", "sub_sql_type": "null col op op value", "sub_sql_new": "where city equal to mountainview", "query": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \\\\\\\"Mountain View\\\\\\\" AND T3.city  =  \\\\\\\"Palo Alto\\\\\\\"", "sub_ques": "started from mountain view city"}
{"db_id": "bike_1", "sub_sql": "select count trip", "question": "How many trips stated from  a station in Mountain View and ended at one in Palo Alto?", "sub_sql_type": "null agg col", "sub_sql_new": "select count trip", "query": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \\\\\\\"Mountain View\\\\\\\" AND T3.city  =  \\\\\\\"Palo Alto\\\\\\\"", "sub_ques": "how many trips"}
{"db_id": "bike_1", "sub_sql": "where t1.city = mountain view", "question": "How many trips stated from  a station in Mountain View and ended at one in Palo Alto?", "sub_sql_type": "null col op op value value", "sub_sql_new": "where city equal to mountain view", "query": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \\\\\\\"Mountain View\\\\\\\" AND T3.city  =  \\\\\\\"Palo Alto\\\\\\\"", "sub_ques": "station in mountain view"}
{"db_id": "bike_1", "sub_sql": "where t3.city = palo alto", "question": "How many trips stated from  a station in Mountain View and ended at one in Palo Alto?", "sub_sql_type": "null col op op value value", "sub_sql_new": "where city equal to palo alto", "query": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \\\\\\\"Mountain View\\\\\\\" AND T3.city  =  \\\\\\\"Palo Alto\\\\\\\"", "sub_ques": "ended at one in palo alto"}
{"db_id": "bike_1", "sub_sql": "select avg t1.lat , avg t1.long from station", "question": "What is the average latitude and longitude of the starting points of all trips?", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select avg latitude , avg longitude from station", "query": "SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id", "sub_ques": "what is the average latitude and longitude"}
{"db_id": "bike_1", "sub_sql": "select avg t1.lat , avg t1.long from station", "question": "What is the average latitude and longitude of all starting stations for the trips?", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select avg latitude , avg longitude from station", "query": "SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id", "sub_ques": "what is the average latitude and longitude of all starting stations"}
{"db_id": "book_2", "sub_sql": "select count * from book", "question": "How many books are there?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select count * from book", "query": "SELECT count(*) FROM book", "sub_ques": "how many books"}
{"db_id": "book_2", "sub_sql": "select writer from book", "question": "List the writers of the books in ascending alphabetical order.", "sub_sql_type": "null col col col", "sub_sql_new": "select writer from book", "query": "SELECT Writer FROM book ORDER BY Writer ASC", "sub_ques": "list the writers of the books"}
{"db_id": "book_2", "sub_sql": "order by writer asc", "question": "List the writers of the books in ascending alphabetical order.", "sub_sql_type": "null null col null", "sub_sql_new": "order by writer asc", "query": "SELECT Writer FROM book ORDER BY Writer ASC", "sub_ques": "the writers of the books in ascending alphabetical order"}
{"db_id": "book_2", "sub_sql": "select title from book", "question": "List the titles of the books in ascending order of issues.", "sub_sql_type": "null col col col", "sub_sql_new": "select title from book", "query": "SELECT Title FROM book ORDER BY Issues ASC", "sub_ques": "list the titles of the books"}
{"db_id": "book_2", "sub_sql": "order by issues asc", "question": "List the titles of the books in ascending order of issues.", "sub_sql_type": "null null col null", "sub_sql_new": "order by issues asc", "query": "SELECT Title FROM book ORDER BY Issues ASC", "sub_ques": "in ascending order of issues"}
{"db_id": "book_2", "sub_sql": "select title from book", "question": "What are the titles of the books whose writer is not \\\\\\\"Elaine Lee\\\\\\\"?", "sub_sql_type": "null col col col", "sub_sql_new": "select title from book", "query": "SELECT Title FROM book WHERE Writer != \\\\\\\"Elaine Lee\\\\\\\"", "sub_ques": "what are the titles of the books"}
{"db_id": "book_2", "sub_sql": "where writer != elainelee", "question": "What are the titles of the books whose writer is not \\\\\\\"Elaine Lee\\\\\\\"?", "sub_sql_type": "null col op op op value", "sub_sql_new": "where writer not equal to elainelee", "query": "SELECT Title FROM book WHERE Writer != \\\\\\\"Elaine Lee\\\\\\\"", "sub_ques": "books whose writer is not elaine lee"}
{"db_id": "book_2", "sub_sql": "select title , issues from book", "question": "What are the title and issues of the books?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select title , issues from book", "query": "SELECT Title ,  Issues FROM book", "sub_ques": "what are the title and issues of the books"}
{"db_id": "book_2", "sub_sql": "select publication_date from publication", "question": "What are the dates of publications in descending order of price?", "sub_sql_type": "null col col col", "sub_sql_new": "select publication_date from publication", "query": "SELECT Publication_Date FROM publication ORDER BY Price DESC", "sub_ques": "what are the dates of publications"}
{"db_id": "book_2", "sub_sql": "order by price desc", "question": "What are the dates of publications in descending order of price?", "sub_sql_type": "null null col null", "sub_sql_new": "order by price desc", "query": "SELECT Publication_Date FROM publication ORDER BY Price DESC", "sub_ques": "in descending order of price"}
{"db_id": "book_2", "sub_sql": "select distinct publisher from publication", "question": "What are the distinct publishers of publications with price higher than 5000000?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct publisher from publication", "query": "SELECT DISTINCT Publisher FROM publication WHERE Price  >  5000000", "sub_ques": "what are the distinct publishers of publications"}
{"db_id": "book_2", "sub_sql": "where price > 5000000", "question": "What are the distinct publishers of publications with price higher than 5000000?", "sub_sql_type": "null col op op value", "sub_sql_new": "where price more than 5000000", "query": "SELECT DISTINCT Publisher FROM publication WHERE Price  >  5000000", "sub_ques": "publications with price higher than 5000000"}
{"db_id": "book_2", "sub_sql": "select publisher from publication", "question": "List the publisher of the publication with the highest price.", "sub_sql_type": "null col col col", "sub_sql_new": "select publisher from publication", "query": "SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1", "sub_ques": "list the publisher of the publication"}
{"db_id": "book_2", "sub_sql": "order by price desc limit 1", "question": "List the publisher of the publication with the highest price.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by price desc limit 1", "query": "SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1", "sub_ques": "with the highest price"}
{"db_id": "book_2", "sub_sql": "select publication_date from publication", "question": "List the publication dates of publications with 3 lowest prices.", "sub_sql_type": "null col col col", "sub_sql_new": "select publication_date from publication", "query": "SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3", "sub_ques": "list the publication dates of publications"}
{"db_id": "book_2", "sub_sql": "order by price asc limit 3", "question": "List the publication dates of publications with 3 lowest prices.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by price asc limit 3", "query": "SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3", "sub_ques": "with 3 lowest prices"}
{"db_id": "book_2", "sub_sql": "select t1.title , t2.publication_date from book , publication", "question": "Show the title and publication dates of books.", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select title , publication_date from book , publication", "query": "SELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID", "sub_ques": "show the title and publication dates of books"}
{"db_id": "book_2", "sub_sql": "select t1.writer from book", "question": "Show writers who have published a book with price more than 4000000.", "sub_sql_type": "null col col col", "sub_sql_new": "select writer from book", "query": "SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  4000000", "sub_ques": "show writers who have published a book"}
{"db_id": "book_2", "sub_sql": "where t2.price > 4000000", "question": "Show writers who have published a book with price more than 4000000.", "sub_sql_type": "null col op op value", "sub_sql_new": "where price more than 4000000", "query": "SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  4000000", "sub_ques": "price more than 4000000"}
{"db_id": "book_2", "sub_sql": "select t1.title from book", "question": "Show the titles of books in descending order of publication price.", "sub_sql_type": "null col col col", "sub_sql_new": "select title from book", "query": "SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Price DESC", "sub_ques": "show the titles of books"}
{"db_id": "book_2", "sub_sql": "order by t2.price desc", "question": "Show the titles of books in descending order of publication price.", "sub_sql_type": "null null col null", "sub_sql_new": "order by price desc", "query": "SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Price DESC", "sub_ques": "in descending order of publication price"}
{"db_id": "book_2", "sub_sql": "select publisher from publication", "question": "Show publishers that have more than one publication.", "sub_sql_type": "null col col col", "sub_sql_new": "select publisher from publication", "query": "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1", "sub_ques": "show publishers"}
{"db_id": "book_2", "sub_sql": "group by publisher having count publication > 1", "question": "Show publishers that have more than one publication.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1", "sub_ques": "publishers that have more than one publication"}
{"db_id": "book_2", "sub_sql": "select publisher , count publication group by publisher", "question": "Show different publishers together with the number of publications they have.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select publisher , count publication", "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher", "sub_ques": "show different publishers together with the number of publications"}
{"db_id": "book_2", "sub_sql": "select publication_date from publication", "question": "Please show the most common publication date.", "sub_sql_type": "null col col col", "sub_sql_new": "select publication_date from publication", "query": "SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "show the publication date"}
{"db_id": "book_2", "sub_sql": "group by publication_date order by count publication desc limit 1", "question": "Please show the most common publication date.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count publication desc limit 1", "query": "SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "the most common publication date"}
{"db_id": "book_2", "sub_sql": "select writer from book", "question": "List the writers who have written more than one book.", "sub_sql_type": "null col col col", "sub_sql_new": "select writer from book", "query": "SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1", "sub_ques": "list the writers who have written"}
{"db_id": "book_2", "sub_sql": "group by writer having count book > 1", "question": "List the writers who have written more than one book.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1", "sub_ques": "writers who have written more than one book"}
{"db_id": "book_2", "sub_sql": "select title from book", "question": "List the titles of books that are not published.", "sub_sql_type": "null col col col", "sub_sql_new": "select title from book", "query": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)", "sub_ques": "list the titles of books"}
{"db_id": "book_2", "sub_sql": "book not in publication", "question": "List the titles of books that are not published.", "sub_sql_type": "tab op op tab", "sub_sql_new": "book not in publication", "query": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)", "sub_ques": "books that are not published"}
{"db_id": "book_2", "sub_sql": "select count distinct publication_date from publication", "question": "What is the number of distinct publication dates?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct publication_date from publication", "query": "SELECT COUNT (DISTINCT Publication_Date) FROM publication", "sub_ques": "what is the number of distinct publication dates"}
{"db_id": "book_2", "sub_sql": "select count distinct publication_date from publication", "question": "How many distinct publication dates are there in our record?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct publication_date from publication", "query": "SELECT COUNT (DISTINCT Publication_Date) FROM publication", "sub_ques": "how many distinct publication dates"}
{"db_id": "book_2", "sub_sql": "select price from publication", "question": "Show the prices of publications whose publisher is either \\\\\\\"Person\\\\\\\" or \\\\\\\"Wiley\\\\\\\"", "sub_sql_type": "null col col col", "sub_sql_new": "select price from publication", "query": "SELECT Price FROM publication WHERE Publisher  =  \\\\\\\"Person\\\\\\\" OR Publisher  =  \\\\\\\"Wiley\\\\\\\"", "sub_ques": "show the prices of publications"}
{"db_id": "book_2", "sub_sql": "where publisher = person", "question": "Show the prices of publications whose publisher is either \\\\\\\"Person\\\\\\\" or \\\\\\\"Wiley\\\\\\\"", "sub_sql_type": "null col op op value", "sub_sql_new": "where publisher equal to person", "query": "SELECT Price FROM publication WHERE Publisher  =  \\\\\\\"Person\\\\\\\" OR Publisher  =  \\\\\\\"Wiley\\\\\\\"", "sub_ques": "publications whose publisher is either `` person"}
{"db_id": "musical", "sub_sql": "select count actor", "question": "How many actors are there?", "sub_sql_type": "null agg col", "sub_sql_new": "select count actor", "query": "SELECT count(*) FROM actor", "sub_ques": "how many actors"}
{"db_id": "musical", "sub_sql": "select count actor", "question": "Count the number of actors.", "sub_sql_type": "null agg col", "sub_sql_new": "select count actor", "query": "SELECT count(*) FROM actor", "sub_ques": "count the number of actors"}
{"db_id": "musical", "sub_sql": "select name from actor", "question": "List the name of actors in ascending alphabetical order.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from actor", "query": "SELECT Name FROM actor ORDER BY Name ASC", "sub_ques": "list the name of actors"}
{"db_id": "musical", "sub_sql": "order by name asc", "question": "List the name of actors in ascending alphabetical order.", "sub_sql_type": "null null col null", "sub_sql_new": "order by name asc", "query": "SELECT Name FROM actor ORDER BY Name ASC", "sub_ques": "the name of actors in ascending alphabetical order"}
{"db_id": "musical", "sub_sql": "select name from actor", "question": "What are the names of actors, ordered alphabetically?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from actor", "query": "SELECT Name FROM actor ORDER BY Name ASC", "sub_ques": "what are the names of actors"}
{"db_id": "musical", "sub_sql": "order by name asc", "question": "What are the names of actors, ordered alphabetically?", "sub_sql_type": "null null col null", "sub_sql_new": "order by name asc", "query": "SELECT Name FROM actor ORDER BY Name ASC", "sub_ques": "the names of actors, ordered alphabetically"}
{"db_id": "musical", "sub_sql": "select character , duration from actor", "question": "What are the characters and duration of actors?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select character , duration from actor", "query": "SELECT Character ,  Duration FROM actor", "sub_ques": "what are the characters and duration of actors"}
{"db_id": "musical", "sub_sql": "select character , duration from actor", "question": "Return the characters and durations for each actor.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select character , duration from actor", "query": "SELECT Character ,  Duration FROM actor", "sub_ques": "return the characters and durations for each actor"}
{"db_id": "musical", "sub_sql": "select name from actor", "question": "List the name of actors whose age is not 20.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from actor", "query": "SELECT Name FROM actor WHERE Age != 20", "sub_ques": "list the name of actors"}
{"db_id": "musical", "sub_sql": "where age != 20", "question": "List the name of actors whose age is not 20.", "sub_sql_type": "null col op op op value", "sub_sql_new": "where age not equal to 20", "query": "SELECT Name FROM actor WHERE Age != 20", "sub_ques": "actors whose age is not 20"}
{"db_id": "musical", "sub_sql": "select name from actor", "question": "What are the names of actors who are not 20 years old?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from actor", "query": "SELECT Name FROM actor WHERE Age != 20", "sub_ques": "what are the names of actors"}
{"db_id": "musical", "sub_sql": "where age != 20", "question": "What are the names of actors who are not 20 years old?", "sub_sql_type": "null col op op op value", "sub_sql_new": "where age not equal to 20", "query": "SELECT Name FROM actor WHERE Age != 20", "sub_ques": "actors who are not 20"}
{"db_id": "musical", "sub_sql": "select character from actor", "question": "What are the characters of actors in descending order of age?", "sub_sql_type": "null col col col", "sub_sql_new": "select character from actor", "query": "SELECT Character FROM actor ORDER BY age DESC", "sub_ques": "what are the characters of actors"}
{"db_id": "musical", "sub_sql": "order by age desc", "question": "What are the characters of actors in descending order of age?", "sub_sql_type": "null null col null", "sub_sql_new": "order by age desc", "query": "SELECT Character FROM actor ORDER BY age DESC", "sub_ques": "in descending order of age"}
{"db_id": "musical", "sub_sql": "select character from actor", "question": "Return the characters for actors, ordered by age descending.", "sub_sql_type": "null col col col", "sub_sql_new": "select character from actor", "query": "SELECT Character FROM actor ORDER BY age DESC", "sub_ques": "return the characters for actors"}
{"db_id": "musical", "sub_sql": "order by age desc", "question": "Return the characters for actors, ordered by age descending.", "sub_sql_type": "null null col null", "sub_sql_new": "order by age desc", "query": "SELECT Character FROM actor ORDER BY age DESC", "sub_ques": "ordered by age descending"}
{"db_id": "musical", "sub_sql": "select duration from actor", "question": "What is the duration of the oldest actor?", "sub_sql_type": "null col col col", "sub_sql_new": "select duration from actor", "query": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1", "sub_ques": "what is the duration"}
{"db_id": "musical", "sub_sql": "order by age desc limit 1", "question": "What is the duration of the oldest actor?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by age desc limit 1", "query": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1", "sub_ques": "the oldest actor"}
{"db_id": "musical", "sub_sql": "select duration from actor", "question": "Return the duration of the actor with the greatest age.", "sub_sql_type": "null col col col", "sub_sql_new": "select duration from actor", "query": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1", "sub_ques": "return the duration of the actor"}
{"db_id": "musical", "sub_sql": "order by age desc limit 1", "question": "Return the duration of the actor with the greatest age.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by age desc limit 1", "query": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1", "sub_ques": "the greatest age"}
{"db_id": "musical", "sub_sql": "select name from musical", "question": "What are the names of musicals with nominee \\\\\\\"Bob Fosse\\\\\\\"?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from musical", "query": "SELECT Name FROM musical WHERE Nominee  =  \\\\\\\"Bob Fosse\\\\\\\"", "sub_ques": "what are the names of musicals"}
{"db_id": "musical", "sub_sql": "where nominee = bobfosse", "question": "What are the names of musicals with nominee \\\\\\\"Bob Fosse\\\\\\\"?", "sub_sql_type": "null col op op value", "sub_sql_new": "where nominee equal to bobfosse", "query": "SELECT Name FROM musical WHERE Nominee  =  \\\\\\\"Bob Fosse\\\\\\\"", "sub_ques": "musicals with nominee"}
{"db_id": "musical", "sub_sql": "select name from musical", "question": "Return the names of musicals who have the nominee Bob Fosse.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from musical", "query": "SELECT Name FROM musical WHERE Nominee  =  \\\\\\\"Bob Fosse\\\\\\\"", "sub_ques": "return the names of musicals"}
{"db_id": "musical", "sub_sql": "where nominee = bobfosse", "question": "Return the names of musicals who have the nominee Bob Fosse.", "sub_sql_type": "null col op op value", "sub_sql_new": "where nominee equal to bobfosse", "query": "SELECT Name FROM musical WHERE Nominee  =  \\\\\\\"Bob Fosse\\\\\\\"", "sub_ques": "musicals who have the nominee bob fosse"}
{"db_id": "musical", "sub_sql": "select distinct nominee from musical", "question": "What are the distinct nominees of the musicals with the award that is not \\\\\\\"Tony Award\\\\\\\"?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct nominee from musical", "query": "SELECT DISTINCT Nominee FROM musical WHERE Award != \\\\\\\"Tony Award\\\\\\\"", "sub_ques": "what are the distinct nominees of the musicals"}
{"db_id": "musical", "sub_sql": "where award != tonyaward", "question": "What are the distinct nominees of the musicals with the award that is not \\\\\\\"Tony Award\\\\\\\"?", "sub_sql_type": "null col op op op value", "sub_sql_new": "where award not equal to tonyaward", "query": "SELECT DISTINCT Nominee FROM musical WHERE Award != \\\\\\\"Tony Award\\\\\\\"", "sub_ques": "musicals with the award that is not tony award"}
{"db_id": "musical", "sub_sql": "select distinct nominee from musical", "question": "Return the different nominees of musicals that have an award that is not the Tony Award.", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct nominee from musical", "query": "SELECT DISTINCT Nominee FROM musical WHERE Award != \\\\\\\"Tony Award\\\\\\\"", "sub_ques": "return the different nominees of musicals"}
{"db_id": "musical", "sub_sql": "where award != tonyaward", "question": "Return the different nominees of musicals that have an award that is not the Tony Award.", "sub_sql_type": "null col op op op value", "sub_sql_new": "where award not equal to tonyaward", "query": "SELECT DISTINCT Nominee FROM musical WHERE Award != \\\\\\\"Tony Award\\\\\\\"", "sub_ques": "that have an award that is not the tony award"}
{"db_id": "musical", "sub_sql": "select t1.name , t2.name from actor , musical", "question": "Show names of actors and names of musicals they are in.", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select name , name from actor , musical", "query": "SELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID", "sub_ques": "show names of actors and names of musicals"}
{"db_id": "musical", "sub_sql": "select t1.name , t2.name from actor , musical", "question": "What are the names of actors and the musicals that they are in?", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select name , name from actor , musical", "query": "SELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID", "sub_ques": "what are the names of actors and the musicals"}
{"db_id": "musical", "sub_sql": "select t1.name from actor", "question": "Show names of actors that have appeared in musical with name \\\\\\\"The Phantom of the Opera\\\\\\\".", "sub_sql_type": "null col col col", "sub_sql_new": "select name from actor", "query": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \\\\\\\"The Phantom of the Opera\\\\\\\"", "sub_ques": "show names of actors"}
{"db_id": "musical", "sub_sql": "where musical name = thephantomoftheopera", "question": "Show names of actors that have appeared in musical with name \\\\\\\"The Phantom of the Opera\\\\\\\".", "sub_sql_type": "null col op value value", "sub_sql_new": "where musical name = thephantomoftheopera", "query": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \\\\\\\"The Phantom of the Opera\\\\\\\"", "sub_ques": "musical with name the phantom of the opera"}
{"db_id": "musical", "sub_sql": "select t1.name from actor", "question": "What are the names of actors who have been in the musical titled The Phantom of the Opera?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from actor", "query": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \\\\\\\"The Phantom of the Opera\\\\\\\"", "sub_ques": "what are the names of actors"}
{"db_id": "musical", "sub_sql": "where t2.name = thephantomoftheopera", "question": "What are the names of actors who have been in the musical titled The Phantom of the Opera?", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to thephantomoftheopera", "query": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \\\\\\\"The Phantom of the Opera\\\\\\\"", "sub_ques": "musical titled the phantom of the opera"}
{"db_id": "musical", "sub_sql": "select t1.name from actor", "question": "Show names of actors in descending order of the year their musical is awarded.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from actor", "query": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC", "sub_ques": "show names of actors"}
{"db_id": "musical", "sub_sql": "order by t2.year desc", "question": "Show names of actors in descending order of the year their musical is awarded.", "sub_sql_type": "null null col null", "sub_sql_new": "order by year desc", "query": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC", "sub_ques": "in descending order of the year their musical"}
{"db_id": "musical", "sub_sql": "select t1.name from actor", "question": "What are the names of actors ordered descending by the year in which their musical was awarded?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from actor", "query": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC", "sub_ques": "what are the names of actors"}
{"db_id": "musical", "sub_sql": "order by t2.year desc", "question": "What are the names of actors ordered descending by the year in which their musical was awarded?", "sub_sql_type": "null null col null", "sub_sql_new": "order by year desc", "query": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC", "sub_ques": "ordered descending by the year"}
{"db_id": "musical", "sub_sql": "select musical name , count actor group by musical_id", "question": "Show names of musicals and the number of actors who have appeared in the musicals.", "sub_sql_type": "null col col null agg col", "sub_sql_new": "select musical name , count actor", "query": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID", "sub_ques": "show names of musicals and the number of actors who have appeared in the musicals"}
{"db_id": "musical", "sub_sql": "select t2.name , count actor group by t1.musical_id", "question": "How many actors have appeared in each musical?", "sub_sql_type": "null col null agg col", "sub_sql_new": "select name , count actor", "query": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID", "sub_ques": "how many actors have appeared in each musical"}
{"db_id": "musical", "sub_sql": "select t2.name from musical", "question": "Show names of musicals which have at least three actors.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from musical", "query": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3", "sub_ques": "show names of musicals"}
{"db_id": "musical", "sub_sql": "group by t1.musical_id having count actor >= 3", "question": "Show names of musicals which have at least three actors.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3", "sub_ques": "musicals which have at least three actors"}
{"db_id": "musical", "sub_sql": "select t2.name from musical", "question": "What are the names of musicals who have at 3 or more actors?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from musical", "query": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3", "sub_ques": "what are the names of musicals"}
{"db_id": "musical", "sub_sql": "group by t1.musical_id having count actor >= 3", "question": "What are the names of musicals who have at 3 or more actors?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3", "sub_ques": "musicals who have at 3 or more actors"}
{"db_id": "musical", "sub_sql": "select nominee , count musical group by nominee", "question": "Show different nominees and the number of musicals they have been nominated.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select nominee , count musical", "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee", "sub_ques": "show different nominees and the number of musicals"}
{"db_id": "musical", "sub_sql": "select nominee , count musical group by nominee", "question": "How many musicals has each nominee been nominated for?", "sub_sql_type": "null col null agg col", "sub_sql_new": "select nominee , count musical", "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee", "sub_ques": "how many musicals has each nominee"}
{"db_id": "musical", "sub_sql": "select nominee from musical", "question": "Please show the nominee who has been nominated the greatest number of times.", "sub_sql_type": "null col col col", "sub_sql_new": "select nominee from musical", "query": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "show the nominee"}
{"db_id": "musical", "sub_sql": "group by nominee order by count musical desc limit 1", "question": "Please show the nominee who has been nominated the greatest number of times.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count musical desc limit 1", "query": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "the nominee who has been nominated the greatest number"}
{"db_id": "musical", "sub_sql": "select nominee from musical", "question": "Who is the nominee who has been nominated for the most musicals?", "sub_sql_type": "null col col col", "sub_sql_new": "select nominee from musical", "query": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "who is the nominee"}
{"db_id": "musical", "sub_sql": "group by nominee order by count musical desc limit 1", "question": "Who is the nominee who has been nominated for the most musicals?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count musical desc limit 1", "query": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "the nominee who has been nominated for the most musicals"}
{"db_id": "musical", "sub_sql": "select result from musical", "question": "List the most common result of the musicals.", "sub_sql_type": "null col col col", "sub_sql_new": "select result from musical", "query": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "list the result"}
{"db_id": "musical", "sub_sql": "group by result order by count musical desc limit 1", "question": "List the most common result of the musicals.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count musical desc limit 1", "query": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "the most common result of the musicals"}
{"db_id": "musical", "sub_sql": "select result from musical", "question": "Return the most frequent result across all musicals.", "sub_sql_type": "null col col col", "sub_sql_new": "select result from musical", "query": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "return result across all musicals"}
{"db_id": "musical", "sub_sql": "group by result order by count musical desc limit 1", "question": "Return the most frequent result across all musicals.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count musical desc limit 1", "query": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "the most frequent result across all musicals"}
{"db_id": "musical", "sub_sql": "select nominee from musical", "question": "List the nominees that have been nominated more than two musicals.", "sub_sql_type": "null col col col", "sub_sql_new": "select nominee from musical", "query": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2", "sub_ques": "list the nominees"}
{"db_id": "musical", "sub_sql": "group by nominee having count musical > 2", "question": "List the nominees that have been nominated more than two musicals.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2", "sub_ques": "nominees that have been nominated more than two musicals"}
{"db_id": "musical", "sub_sql": "select nominee from musical", "question": "Who are the nominees who have been nominated more than two times?", "sub_sql_type": "null col col col", "sub_sql_new": "select nominee from musical", "query": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2", "sub_ques": "who are the nominees"}
{"db_id": "musical", "sub_sql": "group by nominee having count musical > 2", "question": "Who are the nominees who have been nominated more than two times?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2", "sub_ques": "nominees who have been nominated more than two times"}
{"db_id": "musical", "sub_sql": "select name from musical", "question": "List the name of musicals that do not have actors.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from musical", "query": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)", "sub_ques": "list the name of musicals"}
{"db_id": "musical", "sub_sql": "musical not in actor", "question": "List the name of musicals that do not have actors.", "sub_sql_type": "tab op op tab", "sub_sql_new": "musical not in actor", "query": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)", "sub_ques": "musicals that do not have actors"}
{"db_id": "musical", "sub_sql": "select name from musical", "question": "What are the names of musicals who have no actors?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from musical", "query": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)", "sub_ques": "what are the names"}
{"db_id": "musical", "sub_sql": "musical not in actor", "question": "What are the names of musicals who have no actors?", "sub_sql_type": "tab op op tab", "sub_sql_new": "musical not in actor", "query": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)", "sub_ques": "musicals who have no actors"}
{"db_id": "musical", "sub_sql": "select nominee from musical", "question": "Show the musical nominee with award \\\\\\\"Bob Fosse\\\\\\\" or \\\\\\\"Cleavant Derricks\\\\\\\".", "sub_sql_type": "null col col col", "sub_sql_new": "select nominee from musical", "query": "SELECT Nominee FROM musical WHERE Award  =  \\\\\\\"Tony Award\\\\\\\" OR Award  =  \\\\\\\"Cleavant Derricks\\\\\\\"", "sub_ques": "show the musical nominee"}
{"db_id": "musical", "sub_sql": "where award = tony award", "question": "Show the musical nominee with award \\\\\\\"Bob Fosse\\\\\\\" or \\\\\\\"Cleavant Derricks\\\\\\\".", "sub_sql_type": "null col op op value value", "sub_sql_new": "where award equal to tony award", "query": "SELECT Nominee FROM musical WHERE Award  =  \\\\\\\"Tony Award\\\\\\\" OR Award  =  \\\\\\\"Cleavant Derricks\\\\\\\"", "sub_ques": "with award tony award"}
{"db_id": "musical", "sub_sql": "select nominee from musical", "question": "Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards?", "sub_sql_type": "null col col col", "sub_sql_new": "select nominee from musical", "query": "SELECT Nominee FROM musical WHERE Award  =  \\\\\\\"Tony Award\\\\\\\" OR Award  =  \\\\\\\"Cleavant Derricks\\\\\\\"", "sub_ques": "who are the nominees"}
{"db_id": "twitter_1", "sub_sql": "select email from user_profiles", "question": "Find the emails of the user named \\\\\\\"Mary\\\\\\\".", "sub_sql_type": "null col col col", "sub_sql_new": "select email from user_profiles", "query": "SELECT email FROM user_profiles WHERE name  =  'Mary'", "sub_ques": "find the emails of the user"}
{"db_id": "twitter_1", "sub_sql": "where name = mary", "question": "Find the emails of the user named \\\\\\\"Mary\\\\\\\".", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to mary", "query": "SELECT email FROM user_profiles WHERE name  =  'Mary'", "sub_ques": "named `` mary"}
{"db_id": "twitter_1", "sub_sql": "select partitionid from user_profiles", "question": "What is the partition id of the user named \\\\\\\"Iron Man\\\\\\\".", "sub_sql_type": "null col col col col", "sub_sql_new": "select partition id from user_profiles", "query": "SELECT partitionid FROM user_profiles WHERE name  =  'Iron Man'", "sub_ques": "what is the partition id of the user"}
{"db_id": "twitter_1", "sub_sql": "where name = ironman", "question": "What is the partition id of the user named \\\\\\\"Iron Man\\\\\\\".", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to ironman", "query": "SELECT partitionid FROM user_profiles WHERE name  =  'Iron Man'", "sub_ques": "named iron man"}
{"db_id": "twitter_1", "sub_sql": "select count user_profiles", "question": "How many users are there?", "sub_sql_type": "null agg col", "sub_sql_new": "select count user_profiles", "query": "SELECT count(*) FROM user_profiles", "sub_ques": "how many users"}
{"db_id": "twitter_1", "sub_sql": "select count follows", "question": "How many followers does each user have?", "sub_sql_type": "null agg col", "sub_sql_new": "select count follows", "query": "SELECT count(*) FROM follows", "sub_ques": "how many followers"}
{"db_id": "twitter_1", "sub_sql": "select count follows group by f1", "question": "Find the number of followers for each user.", "sub_sql_type": "null agg col", "sub_sql_new": "select count follows", "query": "SELECT count(*) FROM follows GROUP BY f1", "sub_ques": "find the number of followers for each user"}
{"db_id": "twitter_1", "sub_sql": "select count tweets", "question": "Find the number of tweets in record.", "sub_sql_type": "null agg col", "sub_sql_new": "select count tweets", "query": "SELECT count(*) FROM tweets", "sub_ques": "find the number of tweets"}
{"db_id": "twitter_1", "sub_sql": "select count distinct uid from tweets", "question": "Find the number of users who posted some tweets.", "sub_sql_type": "null agg col col col col col", "sub_sql_new": "select count distinct user id from tweets", "query": "SELECT count(DISTINCT UID) FROM tweets", "sub_ques": "find the number of users who posted some tweets"}
{"db_id": "twitter_1", "sub_sql": "select name , email from user_profiles", "question": "Find the name and email of the user whose name contains the word \\\\u2018Swift\\\\u2019.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , email from user_profiles", "query": "SELECT name ,  email FROM user_profiles WHERE name LIKE '%Swift%'", "sub_ques": "find name and email of the user"}
{"db_id": "twitter_1", "sub_sql": "where name like swift", "question": "Find the name and email of the user whose name contains the word \\\\u2018Swift\\\\u2019.", "sub_sql_type": "null col op value", "sub_sql_new": "where name like swift", "query": "SELECT name ,  email FROM user_profiles WHERE name LIKE '%Swift%'", "sub_ques": "whose name contains the word swift"}
{"db_id": "twitter_1", "sub_sql": "select name from user_profiles", "question": "Find the names of users whose emails contain \\\\u2018superstar\\\\u2019 or \\\\u2018edu\\\\u2019.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from user_profiles", "query": "SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'", "sub_ques": "find the names of users"}
{"db_id": "twitter_1", "sub_sql": "where email like superstar", "question": "Find the names of users whose emails contain \\\\u2018superstar\\\\u2019 or \\\\u2018edu\\\\u2019.", "sub_sql_type": "null col op value", "sub_sql_new": "where email like superstar", "query": "SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'", "sub_ques": "emails contain superstar"}
{"db_id": "twitter_1", "sub_sql": "select text from tweets", "question": "Return the text of tweets about the topic 'intern'.", "sub_sql_type": "null col col col", "sub_sql_new": "select text from tweets", "query": "SELECT text FROM tweets WHERE text LIKE '%intern%'", "sub_ques": "return the text of tweets"}
{"db_id": "twitter_1", "sub_sql": "where text like intern", "question": "Return the text of tweets about the topic 'intern'.", "sub_sql_type": "null col op value", "sub_sql_new": "where text like intern", "query": "SELECT text FROM tweets WHERE text LIKE '%intern%'", "sub_ques": "text of tweets about the topic intern"}
{"db_id": "twitter_1", "sub_sql": "select name , email from user_profiles", "question": "Find the name and email of the users who have more than 1000 followers.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , email from user_profiles", "query": "SELECT name ,  email FROM user_profiles WHERE followers  >  1000", "sub_ques": "find the name and email of the users"}
{"db_id": "twitter_1", "sub_sql": "where followers > 1000", "question": "Find the name and email of the users who have more than 1000 followers.", "sub_sql_type": "null col op op value", "sub_sql_new": "where followers more than 1000", "query": "SELECT name ,  email FROM user_profiles WHERE followers  >  1000", "sub_ques": "who have more than 1000 followers"}
{"db_id": "twitter_1", "sub_sql": "select t1.name from user_profiles", "question": "Find the names of the users whose number of followers is greater than that of the user named \\\\\\\"Tyler Swift\\\\\\\".", "sub_sql_type": "null col col col", "sub_sql_new": "select name from user_profiles", "query": "SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  (SELECT count(*) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 WHERE T1.name  =  'Tyler Swift')", "sub_ques": "names of the users whose number of followers is greater than that of the user named"}
{"db_id": "twitter_1", "sub_sql": "group by t2.f1 having count follows > select count follows", "question": "Find the names of the users whose number of followers is greater than that of the user named \\\\\\\"Tyler Swift\\\\\\\".", "sub_sql_type": "null agg col", "sub_sql_new": "select count follows", "query": "SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  (SELECT count(*) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 WHERE T1.name  =  'Tyler Swift')", "sub_ques": "whose number of followers is greater than that of the user"}
{"db_id": "twitter_1", "sub_sql": "where t1.name = tylerswift", "question": "Find the names of the users whose number of followers is greater than that of the user named \\\\\\\"Tyler Swift\\\\\\\".", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to tylerswift", "query": "SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  (SELECT count(*) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 WHERE T1.name  =  'Tyler Swift')", "sub_ques": "the user named tyler swift"}
{"db_id": "twitter_1", "sub_sql": "select t1.name , t1.email from user_profiles", "question": "Find the name and email for the users who have more than one follower.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , email from user_profiles", "query": "SELECT T1.name ,  T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  1", "sub_ques": "find the name and email for the users"}
{"db_id": "twitter_1", "sub_sql": "group by t2.f1 having count follows > 1", "question": "Find the name and email for the users who have more than one follower.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T1.name ,  T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  1", "sub_ques": "who have more than one follower"}
{"db_id": "twitter_1", "sub_sql": "select t1.name from user_profiles", "question": "Find the names of users who have more than one tweet.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from user_profiles", "query": "SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1", "sub_ques": "find the names of users"}
{"db_id": "twitter_1", "sub_sql": "group by t2.uid having count tweets > 1", "question": "Find the names of users who have more than one tweet.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1", "sub_ques": "who have more than one tweet"}
{"db_id": "twitter_1", "sub_sql": "select t2.f1 from follows", "question": "Find the id of users who are followed by Mary or Susan.", "sub_sql_type": "null col col col col", "sub_sql_new": "select user id from follows", "query": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \\\\\\\"Mary\\\\\\\" OR T1.name  =  \\\\\\\"Susan\\\\\\\"", "sub_ques": "find the id of users who are followed"}
{"db_id": "twitter_1", "sub_sql": "where t1.name = mary", "question": "Find the id of users who are followed by Mary or Susan.", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to mary", "query": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \\\\\\\"Mary\\\\\\\" OR T1.name  =  \\\\\\\"Susan\\\\\\\"", "sub_ques": "are followed mary"}
{"db_id": "twitter_1", "sub_sql": "select name from user_profiles", "question": "Find the name of the user who has the largest number of followers.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from user_profiles", "query": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1", "sub_ques": "find the name of the user"}
{"db_id": "twitter_1", "sub_sql": "order by followers desc limit 1", "question": "Find the name of the user who has the largest number of followers.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by followers desc limit 1", "query": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1", "sub_ques": "the largest number of followers"}
{"db_id": "twitter_1", "sub_sql": "select name , email from user_profiles", "question": "Find the name and email of the user followed by the least number of people.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , email from user_profiles", "query": "SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1", "sub_ques": "find the name and email of the user"}
{"db_id": "twitter_1", "sub_sql": "order by followers limit 1", "question": "Find the name and email of the user followed by the least number of people.", "sub_sql_type": "null null col null limv", "sub_sql_new": "order by followers limit 1", "query": "SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1", "sub_ques": "the user followed by the least number of people"}
{"db_id": "twitter_1", "sub_sql": "select name , followers from user_profiles", "question": "List the name and number of followers for each user, and sort the results by the number of followers in descending order.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , followers from user_profiles", "query": "SELECT name ,  followers FROM user_profiles ORDER BY followers DESC", "sub_ques": "list the name and number of followers for each user"}
{"db_id": "twitter_1", "sub_sql": "order by followers desc", "question": "List the name and number of followers for each user, and sort the results by the number of followers in descending order.", "sub_sql_type": "null null col null", "sub_sql_new": "order by followers desc", "query": "SELECT name ,  followers FROM user_profiles ORDER BY followers DESC", "sub_ques": "sort the results by the number of followers"}
{"db_id": "twitter_1", "sub_sql": "select name from user_profiles", "question": "List the names of 5 users followed by the largest number of other users.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from user_profiles", "query": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 5", "sub_ques": "list the names"}
{"db_id": "twitter_1", "sub_sql": "order by followers desc limit 5", "question": "List the names of 5 users followed by the largest number of other users.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by followers desc limit 5", "query": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 5", "sub_ques": "5 users followed by the largest number of other users"}
{"db_id": "twitter_1", "sub_sql": "select text from tweets", "question": "List the text of all tweets in the order of date.", "sub_sql_type": "null col col col", "sub_sql_new": "select text from tweets", "query": "SELECT text FROM tweets ORDER BY createdate", "sub_ques": "list the text of all tweets"}
{"db_id": "twitter_1", "sub_sql": "order by createdate", "question": "List the text of all tweets in the order of date.", "sub_sql_type": "null null col col", "sub_sql_new": "order by create date", "query": "SELECT text FROM tweets ORDER BY createdate", "sub_ques": "in the order of date"}
{"db_id": "twitter_1", "sub_sql": "select t1.name , count tweets group by t2.uid", "question": "Find the name of each user and number of tweets tweeted by each of them.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select name , count tweets", "query": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid", "sub_ques": "find the name of each user and number of tweets tweeted by each"}
{"db_id": "twitter_1", "sub_sql": "select t1.name , t1.partitionid from user_profiles", "question": "Find the name and partition id for users who tweeted less than twice.", "sub_sql_type": "null col null col col col col", "sub_sql_new": "select name , partition id from user_profiles", "query": "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2", "sub_ques": "find the name and partition id for users"}
{"db_id": "twitter_1", "sub_sql": "group by t2.uid having count tweets < 2", "question": "Find the name and partition id for users who tweeted less than twice.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2", "sub_ques": "users who tweeted less than twice"}
{"db_id": "twitter_1", "sub_sql": "select t1.name , count * from user_profiles group by t2.uid", "question": "Find the name of the user who tweeted more than once, and number of tweets tweeted by them.", "sub_sql_type": "null col null agg col col col", "sub_sql_new": "select name , count * from user_profiles", "query": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1", "sub_ques": "find the name of the user and number of tweets tweeted by them"}
{"db_id": "twitter_1", "sub_sql": "group by t2.uid having count tweets > 1", "question": "Find the name of the user who tweeted more than once, and number of tweets tweeted by them.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1", "sub_ques": "the user who tweeted more than once"}
{"db_id": "twitter_1", "sub_sql": "select avg followers from user_profiles", "question": "Find the average number of followers for the users who do not have any tweet.", "sub_sql_type": "null agg col col col", "sub_sql_new": "select avg followers from user_profiles", "query": "SELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)", "sub_ques": "find the average number of followers"}
{"db_id": "twitter_1", "sub_sql": "select avg followers from user_profiles", "question": "Find the average number of followers for the users who had some tweets.", "sub_sql_type": "null agg col col col", "sub_sql_new": "select avg followers from user_profiles", "query": "SELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)", "sub_ques": "find the average number of followers"}
{"db_id": "twitter_1", "sub_sql": "user_profiles in tweets", "question": "Find the average number of followers for the users who had some tweets.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)", "sub_ques": "users who had some tweets"}
{"db_id": "twitter_1", "sub_sql": "select max followers , sum followers from user_profiles", "question": "Find the maximum and total number of followers of all users.", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select max followers , sum followers from user_profiles", "query": "SELECT max(followers) ,  sum(followers) FROM user_profiles", "sub_ques": "find the maximum and total number of followers"}
{"db_id": "product_catalog", "sub_sql": "select distinct catalog_entry_name from catalog_contents", "question": "Find the names of all the catalog entries.", "sub_sql_type": "null col col col col col col", "sub_sql_new": "select distinct catalog entry name from catalog_contents", "query": "SELECT distinct(catalog_entry_name) FROM catalog_contents", "sub_ques": "find the names of all the catalog entries"}
{"db_id": "product_catalog", "sub_sql": "select distinct catalog_entry_name from catalog_contents", "question": "What are all the catalog entry names?", "sub_sql_type": "null col col col col col col", "sub_sql_new": "select distinct catalog entry name from catalog_contents", "query": "SELECT distinct(catalog_entry_name) FROM catalog_contents", "sub_ques": "what are all the catalog entry names"}
{"db_id": "product_catalog", "sub_sql": "select attribute_data_type from attribute_definitions", "question": "Find the list of attribute data types possessed by more than 3 attribute definitions.", "sub_sql_type": "null col col col col col", "sub_sql_new": "select attribute data type from attribute_definitions", "query": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3", "sub_ques": "list of attribute data types"}
{"db_id": "product_catalog", "sub_sql": "group by attribute_data_type having count attribute_definitions > 3", "question": "Find the list of attribute data types possessed by more than 3 attribute definitions.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3", "sub_ques": "attribute data types possessed by more than 3 attribute definitions"}
{"db_id": "product_catalog", "sub_sql": "select attribute_data_type from attribute_definitions", "question": "What are the attribute data types with more than 3 attribute definitions?", "sub_sql_type": "null col col col col col", "sub_sql_new": "select attribute data type from attribute_definitions", "query": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3", "sub_ques": "what are the attribute data types"}
{"db_id": "product_catalog", "sub_sql": "group by attribute_data_type having count attribute_definitions > 3", "question": "What are the attribute data types with more than 3 attribute definitions?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3", "sub_ques": "attribute data types with more than 3 attribute definitions"}
{"db_id": "product_catalog", "sub_sql": "select attribute_data_type from attribute_definitions", "question": "What is the attribute data type of the attribute with name \\\\\\\"Green\\\\\\\"?", "sub_sql_type": "null col col col col col", "sub_sql_new": "select attribute data type from attribute_definitions", "query": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  \\\\\\\"Green\\\\\\\"", "sub_ques": "what is the attribute data type"}
{"db_id": "product_catalog", "sub_sql": "where attribute_name = green", "question": "What is the attribute data type of the attribute with name \\\\\\\"Green\\\\\\\"?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where attribute name equal to green", "query": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  \\\\\\\"Green\\\\\\\"", "sub_ques": "attribute with name `` green"}
{"db_id": "product_catalog", "sub_sql": "select attribute_data_type from attribute_definitions", "question": "Find the attribute data type for the attribute named \\\\\\\"Green\\\\\\\".", "sub_sql_type": "null col col col col col", "sub_sql_new": "select attribute data type from attribute_definitions", "query": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  \\\\\\\"Green\\\\\\\"", "sub_ques": "find the attribute data type"}
{"db_id": "product_catalog", "sub_sql": "where attribute_name = green", "question": "Find the attribute data type for the attribute named \\\\\\\"Green\\\\\\\".", "sub_sql_type": "null col col op op value", "sub_sql_new": "where attribute name equal to green", "query": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  \\\\\\\"Green\\\\\\\"", "sub_ques": "attribute named `` green"}
{"db_id": "product_catalog", "sub_sql": "select catalog_level_name , catalog_level_number from catalog_structure", "question": "Find the name and level of catalog structure with level between 5 and 10.", "sub_sql_type": "null col col col null col col col col col", "sub_sql_new": "select catalog level name , catalog level number from catalog_structure", "query": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10", "sub_ques": "find the name and level of catalog structure"}
{"db_id": "product_catalog", "sub_sql": "select catalog_level_name , catalog_level_number from catalog_structure", "question": "What are the name and level of catalog structure with level number between 5 and 10", "sub_sql_type": "null col col col null col col col col col", "sub_sql_new": "select catalog level name , catalog level number from catalog_structure", "query": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10", "sub_ques": "what are the name and level of catalog structure"}
{"db_id": "product_catalog", "sub_sql": "select distinct catalog_publisher from catalogs", "question": "Find all the catalog publishers whose name contains \\\\\\\"Murray\\\\\\\"", "sub_sql_type": "null col col col col col", "sub_sql_new": "select distinct catalog publisher from catalogs", "query": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \\\\\\\"%Murray%\\\\\\\"", "sub_ques": "find all the catalog publishers"}
{"db_id": "product_catalog", "sub_sql": "where catalog_publisher like murray", "question": "Find all the catalog publishers whose name contains \\\\\\\"Murray\\\\\\\"", "sub_sql_type": "null col col op value", "sub_sql_new": "where catalog publisher like murray", "query": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \\\\\\\"%Murray%\\\\\\\"", "sub_ques": "catalog publishers whose name contains `` murray"}
{"db_id": "product_catalog", "sub_sql": "select distinct catalog_publisher from catalogs", "question": "Which catalog publishers have substring \\\\\\\"Murray\\\\\\\" in their names?", "sub_sql_type": "null col col col col col", "sub_sql_new": "select distinct catalog publisher from catalogs", "query": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \\\\\\\"%Murray%\\\\\\\"", "sub_ques": "which catalog publishers"}
{"db_id": "product_catalog", "sub_sql": "where catalog_publisher like murray", "question": "Which catalog publishers have substring \\\\\\\"Murray\\\\\\\" in their names?", "sub_sql_type": "null col col op value", "sub_sql_new": "where catalog publisher like murray", "query": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \\\\\\\"%Murray%\\\\\\\"", "sub_ques": "catalog publishers have substring `` murray"}
{"db_id": "product_catalog", "sub_sql": "select catalog_publisher from catalogs", "question": "Which catalog publisher has published the most catalogs?", "sub_sql_type": "null col col col col", "sub_sql_new": "select catalog publisher from catalogs", "query": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1", "sub_ques": "which catalog publisher"}
{"db_id": "product_catalog", "sub_sql": "group by catalog_publisher order by count catalogs desc limit 1", "question": "Which catalog publisher has published the most catalogs?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count catalogs desc limit 1", "query": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1", "sub_ques": "catalog publisher has published the most catalogs"}
{"db_id": "product_catalog", "sub_sql": "select catalog_publisher from catalogs", "question": "Find the catalog publisher that has the most catalogs.", "sub_sql_type": "null col col col col", "sub_sql_new": "select catalog publisher from catalogs", "query": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1", "sub_ques": "find the catalog publisher"}
{"db_id": "product_catalog", "sub_sql": "group by catalog_publisher order by count catalogs desc limit 1", "question": "Find the catalog publisher that has the most catalogs.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count catalogs desc limit 1", "query": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the catalog publisher that has the most catalogs"}
{"db_id": "product_catalog", "sub_sql": "select t1.catalog_name , t1.date_of_publication from catalogs", "question": "Find the names and publication dates of all catalogs that have catalog level number greater than 5.", "sub_sql_type": "null col col null col col col col col", "sub_sql_new": "select catalog name , date of publication from catalogs", "query": "SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5", "sub_ques": "find the names and publication dates of all catalogs"}
{"db_id": "product_catalog", "sub_sql": "where catalog_level_number > 5", "question": "Find the names and publication dates of all catalogs that have catalog level number greater than 5.", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where catalog level number more than 5", "query": "SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5", "sub_ques": "catalog level number greater than 5"}
{"db_id": "product_catalog", "sub_sql": "select t1.catalog_name , t1.date_of_publication from catalogs", "question": "What are the name and publication date of the catalogs with catalog level number above 5?", "sub_sql_type": "null col col null col col col col col", "sub_sql_new": "select catalog name , date of publication from catalogs", "query": "SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5", "sub_ques": "what are the name and publication date of the catalogs"}
{"db_id": "product_catalog", "sub_sql": "where catalog_level_number > 5", "question": "What are the name and publication date of the catalogs with catalog level number above 5?", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where catalog level number more than 5", "query": "SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5", "sub_ques": "catalog level number above 5"}
{"db_id": "product_catalog", "sub_sql": "select t1.catalog_entry_name from catalog_contents", "question": "What are the entry names of catalog with the attribute possessed by most entries.", "sub_sql_type": "null col col col col col", "sub_sql_new": "select catalog entry name from catalog_contents", "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)", "sub_ques": "what are the entry names of catalog"}
{"db_id": "product_catalog", "sub_sql": "group by attribute_value order by count * desc limit 1", "question": "What are the entry names of catalog with the attribute possessed by most entries.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count * desc limit 1", "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)", "sub_ques": "with the attribute possessed by most entries"}
{"db_id": "product_catalog", "sub_sql": "select t1.catalog_entry_name from catalog_contents", "question": "Find the entry names of the catalog with the attribute that have the most entries.", "sub_sql_type": "null col col col col col", "sub_sql_new": "select catalog entry name from catalog_contents", "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)", "sub_ques": "find the entry names of the catalog"}
{"db_id": "product_catalog", "sub_sql": "group by attribute_value order by count entries desc limit 1", "question": "Find the entry names of the catalog with the attribute that have the most entries.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count entries desc limit 1", "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)", "sub_ques": "the attribute that have the most entries"}
{"db_id": "product_catalog", "sub_sql": "select catalog_entry_name from catalog_contents", "question": "What is the entry name of the most expensive catalog (in USD)?", "sub_sql_type": "null col col col col col", "sub_sql_new": "select catalog entry name from catalog_contents", "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1", "sub_ques": "what is the entry name"}
{"db_id": "product_catalog", "sub_sql": "order by price_in_dollars desc limit 1", "question": "What is the entry name of the most expensive catalog (in USD)?", "sub_sql_type": "null null col col col null null limv", "sub_sql_new": "order by price in dollars desc limit 1", "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1", "sub_ques": "the most expensive catalog in usd"}
{"db_id": "product_catalog", "sub_sql": "select catalog_entry_name from catalog_contents", "question": "Find the entry name of the catalog with the highest price (in USD).", "sub_sql_type": "null col col col col col", "sub_sql_new": "select catalog entry name from catalog_contents", "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1", "sub_ques": "find the entry name of the catalog"}
{"db_id": "product_catalog", "sub_sql": "order by price_in_dollars desc limit 1", "question": "Find the entry name of the catalog with the highest price (in USD).", "sub_sql_type": "null null col col col null null limv", "sub_sql_new": "order by price in dollars desc limit 1", "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1", "sub_ques": "the highest price in usd"}
{"db_id": "product_catalog", "sub_sql": "select t2.catalog_level_name from catalog_structure", "question": "What is the level name of the cheapest catalog (in USD)?", "sub_sql_type": "null col col col col col", "sub_sql_new": "select catalog level name from catalog_structure", "query": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1", "sub_ques": "what is the level name"}
{"db_id": "product_catalog", "sub_sql": "order by t1.price_in_dollars limit 1", "question": "What is the level name of the cheapest catalog (in USD)?", "sub_sql_type": "null null col col col null limv", "sub_sql_new": "order by price in dollars limit 1", "query": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1", "sub_ques": "the cheapest catalog in usd"}
{"db_id": "product_catalog", "sub_sql": "select t2.catalog_level_name from catalog_structure", "question": "Find the level name of the catalog with the lowest price (in USD).", "sub_sql_type": "null col col col col col", "sub_sql_new": "select catalog level name from catalog_structure", "query": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1", "sub_ques": "find the level name of the catalog"}
{"db_id": "product_catalog", "sub_sql": "order by t1.price_in_dollars limit 1", "question": "Find the level name of the catalog with the lowest price (in USD).", "sub_sql_type": "null null col col col null limv", "sub_sql_new": "order by price in dollars limit 1", "query": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1", "sub_ques": "the lowest price in usd"}
{"db_id": "product_catalog", "sub_sql": "select avg price_in_euros , min price_in_euros from catalog_contents", "question": "What are the average and minimum price (in Euro) of all products?", "sub_sql_type": "null agg col col col null agg col col col col col", "sub_sql_new": "select avg price in euros , min price in euros from catalog_contents", "query": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents", "sub_ques": "what are the average and minimum price in euro"}
{"db_id": "product_catalog", "sub_sql": "select avg price_in_euros , min price_in_euros from catalog_contents", "question": "Give me the average and minimum price (in Euro) of the products.", "sub_sql_type": "null agg col col col null agg col col col col col", "sub_sql_new": "select avg price in euros , min price in euros from catalog_contents", "query": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents", "sub_ques": "give me the average and minimum price in euro"}
{"db_id": "product_catalog", "sub_sql": "select catalog_entry_name from catalog_contents", "question": "What is the product with the highest height? Give me the catalog entry name.", "sub_sql_type": "null col col col col col", "sub_sql_new": "select catalog entry name from catalog_contents", "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1", "sub_ques": "give me the catalog entry name"}
{"db_id": "product_catalog", "sub_sql": "order by height desc limit 1", "question": "What is the product with the highest height? Give me the catalog entry name.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by height desc limit 1", "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1", "sub_ques": "the highest height"}
{"db_id": "product_catalog", "sub_sql": "select catalog_entry_name from catalog_contents", "question": "Which catalog content has the highest height? Give me the catalog entry name.", "sub_sql_type": "null col col col col col", "sub_sql_new": "select catalog entry name from catalog_contents", "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1", "sub_ques": "give me the catalog entry name"}
{"db_id": "product_catalog", "sub_sql": "order by height desc limit 1", "question": "Which catalog content has the highest height? Give me the catalog entry name.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by height desc limit 1", "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1", "sub_ques": "the highest height"}
{"db_id": "product_catalog", "sub_sql": "select catalog_entry_name from catalog_contents", "question": "Find the name of the product that has the smallest capacity.", "sub_sql_type": "null col col col col col", "sub_sql_new": "select catalog entry name from catalog_contents", "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1", "sub_ques": "find the name of the product"}
{"db_id": "product_catalog", "sub_sql": "order by capacity asc limit 1", "question": "Find the name of the product that has the smallest capacity.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by capacity asc limit 1", "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1", "sub_ques": "that has the smallest capacity"}
{"db_id": "product_catalog", "sub_sql": "select catalog_entry_name from catalog_contents", "question": "Which catalog content has the smallest capacity? Return the catalog entry name.", "sub_sql_type": "null col col col col col", "sub_sql_new": "select catalog entry name from catalog_contents", "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1", "sub_ques": "return the catalog entry name"}
{"db_id": "product_catalog", "sub_sql": "order by capacity asc limit 1", "question": "Which catalog content has the smallest capacity? Return the catalog entry name.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by capacity asc limit 1", "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1", "sub_ques": "the smallest capacity"}
{"db_id": "product_catalog", "sub_sql": "select catalog_entry_name from catalog_contents", "question": "Find the names of all the products whose stock number starts with \\\\\\\"2\\\\\\\".", "sub_sql_type": "null col col col col col", "sub_sql_new": "select catalog entry name from catalog_contents", "query": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \\\\\\\"2%\\\\\\\"", "sub_ques": "find the names of all the products"}
{"db_id": "product_catalog", "sub_sql": "where product_stock_number like 2", "question": "Find the names of all the products whose stock number starts with \\\\\\\"2\\\\\\\".", "sub_sql_type": "null col col col op value", "sub_sql_new": "where product stock number like 2", "query": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \\\\\\\"2%\\\\\\\"", "sub_ques": "products whose stock number starts with `` 2"}
{"db_id": "product_catalog", "sub_sql": "select catalog_entry_name from catalog_contents", "question": "Which catalog contents have a product stock number that starts from \\\\\\\"2\\\\\\\"? Show the catalog entry names.", "sub_sql_type": "null col col col col col", "sub_sql_new": "select catalog entry name from catalog_contents", "query": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \\\\\\\"2%\\\\\\\"", "sub_ques": "show the catalog entry names"}
{"db_id": "product_catalog", "sub_sql": "where product_stock_number like 2", "question": "Which catalog contents have a product stock number that starts from \\\\\\\"2\\\\\\\"? Show the catalog entry names.", "sub_sql_type": "null col col col op value", "sub_sql_new": "where product stock number like 2", "query": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \\\\\\\"2%\\\\\\\"", "sub_ques": "product stock number that starts from `` 2"}
{"db_id": "product_catalog", "sub_sql": "select t1.catalog_entry_name from catalog_contents", "question": "Find the names of catalog entries with level number 8.", "sub_sql_type": "null col col col col col", "sub_sql_new": "select catalog entry name from catalog_contents", "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \\\\\\\"8\\\\\\\"", "sub_ques": "find the names of catalog entries"}
{"db_id": "product_catalog", "sub_sql": "where t2.catalog_level_number = 8", "question": "Find the names of catalog entries with level number 8.", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where catalog level number equal to 8", "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \\\\\\\"8\\\\\\\"", "sub_ques": "catalog entries with level number 8"}
{"db_id": "product_catalog", "sub_sql": "select t1.catalog_entry_name from catalog_contents", "question": "What are the names of catalog entries with level number 8?", "sub_sql_type": "null col col col col col", "sub_sql_new": "select catalog entry name from catalog_contents", "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \\\\\\\"8\\\\\\\"", "sub_ques": "what are the names of catalog entries"}
{"db_id": "product_catalog", "sub_sql": "where t2.catalog_level_number = 8", "question": "What are the names of catalog entries with level number 8?", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where catalog level number equal to 8", "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \\\\\\\"8\\\\\\\"", "sub_ques": "catalog entries with level number 8"}
{"db_id": "product_catalog", "sub_sql": "select catalog_entry_name from catalog_contents", "question": "Find the names of the products with length smaller than 3 or height greater than 5.", "sub_sql_type": "null col col col col col", "sub_sql_new": "select catalog entry name from catalog_contents", "query": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5", "sub_ques": "find the names of the products "}
{"db_id": "product_catalog", "sub_sql": "where length < 3", "question": "Find the names of the products with length smaller than 3 or height greater than 5.", "sub_sql_type": "null col op op value", "sub_sql_new": "where length less than 3", "query": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5", "sub_ques": "length smaller than 3"}
{"db_id": "product_catalog", "sub_sql": "select catalog_entry_name from catalog_contents", "question": "Which catalog contents have length below 3 or above 5? Find the catalog entry names.", "sub_sql_type": "null col col col col col", "sub_sql_new": "select catalog entry name from catalog_contents", "query": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5", "sub_ques": "find the catalog entry names"}
{"db_id": "product_catalog", "sub_sql": "where length < 3", "question": "Which catalog contents have length below 3 or above 5? Find the catalog entry names.", "sub_sql_type": "null col op op value", "sub_sql_new": "where length less than 3", "query": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5", "sub_ques": "length below 3"}
{"db_id": "product_catalog", "sub_sql": "select t1.attribute_name , t1.attribute_id from attribute_definitions", "question": "Find the name and attribute ID of the attribute definitions with attribute value 0.", "sub_sql_type": "null col col null col col col col", "sub_sql_new": "select attribute name , attribute id from attribute_definitions", "query": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0", "sub_ques": "find the name and attribute ID of the attribute definitions"}
{"db_id": "product_catalog", "sub_sql": "where t2.attribute_value = 0", "question": "Find the name and attribute ID of the attribute definitions with attribute value 0.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where attribute value equal to 0", "query": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0", "sub_ques": "attribute value 0"}
{"db_id": "product_catalog", "sub_sql": "select t1.attribute_name , t1.attribute_id from attribute_definitions", "question": "Which attribute definitions have attribute value 0? Give me the attribute name and attribute ID.", "sub_sql_type": "null col col null col col col col", "sub_sql_new": "select attribute name , attribute id from attribute_definitions", "query": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0", "sub_ques": "give me the attribute name and attribute id"}
{"db_id": "product_catalog", "sub_sql": "where t2.attribute_value = 0", "question": "Which attribute definitions have attribute value 0? Give me the attribute name and attribute ID.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where attribute value equal to 0", "query": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0", "sub_ques": "attribute value 0"}
{"db_id": "product_catalog", "sub_sql": "select catalog_entry_name , capacity from catalog_contents", "question": "Find the name and capacity of products with price greater than 700 (in USD).", "sub_sql_type": "null col col col null col col col", "sub_sql_new": "select catalog entry name , capacity from catalog_contents", "query": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700", "sub_ques": "find the name and capacity"}
{"db_id": "product_catalog", "sub_sql": "where price_in_dollars > 700", "question": "Find the name and capacity of products with price greater than 700 (in USD).", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where price in dollars more than 700", "query": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700", "sub_ques": "price greater than 700 ( in usd"}
{"db_id": "product_catalog", "sub_sql": "select catalog_entry_name , capacity from catalog_contents", "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.", "sub_sql_type": "null col col col null col col col", "sub_sql_new": "select catalog entry name , capacity from catalog_contents", "query": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700", "sub_ques": "show their catalog entry names and capacities"}
{"db_id": "product_catalog", "sub_sql": "where price_in_dollars > 700", "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where price in dollars more than 700", "query": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700", "sub_ques": "price above 700 dollars"}
{"db_id": "product_catalog", "sub_sql": "select date_of_latest_revision from catalogs", "question": "Find the dates on which more than one revisions were made.", "sub_sql_type": "null col col col col col col", "sub_sql_new": "select date of latest revision from catalogs", "query": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1", "sub_ques": "find the dates"}
{"db_id": "product_catalog", "sub_sql": "group by date_of_latest_revision having count catalogs > 1", "question": "Find the dates on which more than one revisions were made.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1", "sub_ques": "dates on which more than one revisions were made"}
{"db_id": "product_catalog", "sub_sql": "select date_of_latest_revision from catalogs", "question": "On which days more than one revisions were made on catalogs.", "sub_sql_type": "null col col col col col col", "sub_sql_new": "select date of latest revision from catalogs", "query": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1", "sub_ques": "which days revisions were made on catalogs"}
{"db_id": "product_catalog", "sub_sql": "group by date_of_latest_revision having count catalogs > 1", "question": "On which days more than one revisions were made on catalogs.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1", "sub_ques": "days more than one revisions were made on catalogs"}
{"db_id": "product_catalog", "sub_sql": "select count catalog_contents", "question": "How many products are there in the records?", "sub_sql_type": "null agg col", "sub_sql_new": "select count catalog_contents", "query": "SELECT count(*) FROM catalog_contents", "sub_ques": "how many products"}
{"db_id": "product_catalog", "sub_sql": "select count catalog_contents", "question": "Find the total number of catalog contents.", "sub_sql_type": "null agg col", "sub_sql_new": "select count catalog_contents", "query": "SELECT count(*) FROM catalog_contents", "sub_ques": "find the total number of catalog contents"}
{"db_id": "product_catalog", "sub_sql": "select catalog_entry_name from catalog_contents", "question": "Name all the products with next entry ID greater than 8.", "sub_sql_type": "null col col col col col", "sub_sql_new": "select catalog entry name from catalog_contents", "query": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8", "sub_ques": "name all the products"}
{"db_id": "product_catalog", "sub_sql": "where next_entry_id > 8", "question": "Name all the products with next entry ID greater than 8.", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where next entry id more than 8", "query": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8", "sub_ques": "next entry id greater than 8"}
{"db_id": "product_catalog", "sub_sql": "select catalog_entry_name from catalog_contents", "question": "What are the catalog entry names of the products with next entry ID above 8?", "sub_sql_type": "null col col col col col", "sub_sql_new": "select catalog entry name from catalog_contents", "query": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8", "sub_ques": "what are the catalog entry names"}
{"db_id": "product_catalog", "sub_sql": "where next_entry_id > 8", "question": "What are the catalog entry names of the products with next entry ID above 8?", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where next entry id more than 8", "query": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8", "sub_ques": "next entry id above 8"}
{"db_id": "flight_1", "sub_sql": "select count aircraft", "question": "How many aircrafts do we have?", "sub_sql_type": "null agg col", "sub_sql_new": "select count aircraft", "query": "SELECT count(*) FROM Aircraft", "sub_ques": "how many aircrafts"}
{"db_id": "flight_1", "sub_sql": "select count aircraft", "question": "How many aircrafts exist in the database?", "sub_sql_type": "null agg col", "sub_sql_new": "select count aircraft", "query": "SELECT count(*) FROM Aircraft", "sub_ques": "how many aircrafts"}
{"db_id": "flight_1", "sub_sql": "select name , distance from aircraft", "question": "Show name and distance for all aircrafts.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , distance from aircraft", "query": "SELECT name ,  distance FROM Aircraft", "sub_ques": "show name and distance for all aircrafts"}
{"db_id": "flight_1", "sub_sql": "select name , distance from aircraft", "question": "What are the names and distances for all airplanes?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , distance from aircraft", "query": "SELECT name ,  distance FROM Aircraft", "sub_ques": "what are the names and distances"}
{"db_id": "flight_1", "sub_sql": "select aid from aircraft", "question": "Show ids for all aircrafts with more than 1000 distance.", "sub_sql_type": "null col col col col", "sub_sql_new": "select airline id from aircraft", "query": "SELECT aid FROM Aircraft WHERE distance  >  1000", "sub_ques": "show ids for all aircrafts"}
{"db_id": "flight_1", "sub_sql": "where distance > 1000", "question": "Show ids for all aircrafts with more than 1000 distance.", "sub_sql_type": "null col op op value", "sub_sql_new": "where distance more than 1000", "query": "SELECT aid FROM Aircraft WHERE distance  >  1000", "sub_ques": "aircrafts with more than 1000 distance"}
{"db_id": "flight_1", "sub_sql": "select aid from aircraft", "question": "What are the ids of all aircrafts that can cover a distance of more than 1000?", "sub_sql_type": "null col col col col", "sub_sql_new": "select airline id from aircraft", "query": "SELECT aid FROM Aircraft WHERE distance  >  1000", "sub_ques": "what are the ids of all aircrafts"}
{"db_id": "flight_1", "sub_sql": "where distance > 1000", "question": "What are the ids of all aircrafts that can cover a distance of more than 1000?", "sub_sql_type": "null col op op value", "sub_sql_new": "where distance more than 1000", "query": "SELECT aid FROM Aircraft WHERE distance  >  1000", "sub_ques": "aircrafts that can cover a distance of more than 1000"}
{"db_id": "flight_1", "sub_sql": "select count aircraft", "question": "How many aircrafts have distance between 1000 and 5000?", "sub_sql_type": "null agg col", "sub_sql_new": "select count aircraft", "query": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000", "sub_ques": "how many aircrafts have"}
{"db_id": "flight_1", "sub_sql": "select count aircraft", "question": "What is the count of aircrafts that have a distance between 1000 and 5000?", "sub_sql_type": "null agg col", "sub_sql_new": "select count aircraft", "query": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000", "sub_ques": "what is the count of aircrafts that have"}
{"db_id": "flight_1", "sub_sql": "select name , distance from aircraft", "question": "What is the name and distance for aircraft with id 12?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , distance from aircraft", "query": "SELECT name ,  distance FROM Aircraft WHERE aid  =  12", "sub_ques": "what is the name and distance for aircraft"}
{"db_id": "flight_1", "sub_sql": "where aid = 12", "question": "What is the name and distance for aircraft with id 12?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where airline id equal to 12", "query": "SELECT name ,  distance FROM Aircraft WHERE aid  =  12", "sub_ques": "aircraft with id 12"}
{"db_id": "flight_1", "sub_sql": "select name , distance from aircraft", "question": "What is the name and distance for the aircraft that has an id of 12?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , distance from aircraft", "query": "SELECT name ,  distance FROM Aircraft WHERE aid  =  12", "sub_ques": "what is the name and distance for the aircraft"}
{"db_id": "flight_1", "sub_sql": "where aid = 12", "question": "What is the name and distance for the aircraft that has an id of 12?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where airline id equal to 12", "query": "SELECT name ,  distance FROM Aircraft WHERE aid  =  12", "sub_ques": "aircraft that has an id of 12"}
{"db_id": "flight_1", "sub_sql": "select min distance , avg distance , max distance from aircraft", "question": "What is the minimum, average, and maximum distance of all aircrafts.", "sub_sql_type": "null agg col null agg col null agg col col col", "sub_sql_new": "select min distance , avg distance , max distance from aircraft", "query": "SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft", "sub_ques": "what is the minimum , average , and maximum distance of all aircrafts"}
{"db_id": "flight_1", "sub_sql": "select min distance , avg distance , max distance from aircraft", "question": "Return the minimum, average and maximum distances traveled across all aircrafts.", "sub_sql_type": "null agg col null agg col null agg col col col", "sub_sql_new": "select min distance , avg distance , max distance from aircraft", "query": "SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft", "sub_ques": "minimum , average and maximum distances traveled across all aircrafts"}
{"db_id": "flight_1", "sub_sql": "select aid , name from aircraft", "question": "Show the id and name of the aircraft with the maximum distance.", "sub_sql_type": "null col col null col col col", "sub_sql_new": "select airline id , name from aircraft", "query": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1", "sub_ques": "show the id and name of the aircraft"}
{"db_id": "flight_1", "sub_sql": "order by distance desc limit 1", "question": "Show the id and name of the aircraft with the maximum distance.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by distance desc limit 1", "query": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1", "sub_ques": "the maximum distance"}
{"db_id": "flight_1", "sub_sql": "select aid , name from aircraft", "question": "What is the id and name of the aircraft that can cover the maximum distance?", "sub_sql_type": "null col col null col col col", "sub_sql_new": "select airline id , name from aircraft", "query": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1", "sub_ques": "what is the id and name of the aircraft"}
{"db_id": "flight_1", "sub_sql": "order by distance desc limit 1", "question": "What is the id and name of the aircraft that can cover the maximum distance?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by distance desc limit 1", "query": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1", "sub_ques": "the maximum distance"}
{"db_id": "flight_1", "sub_sql": "select name from aircraft", "question": "Show the name of aircrafts with top three lowest distances.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from aircraft", "query": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3", "sub_ques": "show the name of aircrafts"}
{"db_id": "flight_1", "sub_sql": "order by distance limit 3", "question": "Show the name of aircrafts with top three lowest distances.", "sub_sql_type": "null null col null limv", "sub_sql_new": "order by distance limit 3", "query": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3", "sub_ques": "three lowest distances"}
{"db_id": "flight_1", "sub_sql": "select name from aircraft", "question": "What are the aircrafts with top 3 shortest lengthes? List their names.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from aircraft", "query": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3", "sub_ques": "What are the aircrafts , list their names"}
{"db_id": "flight_1", "sub_sql": "order by distance limit 3", "question": "What are the aircrafts with top 3 shortest lengthes? List their names.", "sub_sql_type": "null null col null limv", "sub_sql_new": "order by distance limit 3", "query": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3", "sub_ques": "3 shortest lengthes"}
{"db_id": "flight_1", "sub_sql": "select name from aircraft", "question": "Show names for all aircrafts with distances more than the average.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from aircraft", "query": "SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)", "sub_ques": "show names for all aircrafts"}
{"db_id": "flight_1", "sub_sql": "where distance > select avg distance", "question": "Show names for all aircrafts with distances more than the average.", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where distance more than select avg distance", "query": "SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)", "sub_ques": "distances more than the average"}
{"db_id": "flight_1", "sub_sql": "select name from aircraft", "question": "What are the names of all aircrafts that can cover more distances than average?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from aircraft", "query": "SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)", "sub_ques": "what are the names of all aircrafts"}
{"db_id": "flight_1", "sub_sql": "where distance > select avg distance", "question": "What are the names of all aircrafts that can cover more distances than average?", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where distance more than select avg distance", "query": "SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)", "sub_ques": "cover more distances than average"}
{"db_id": "flight_1", "sub_sql": "select count employee", "question": "How many employees do we have?", "sub_sql_type": "null agg col", "sub_sql_new": "select count employee", "query": "SELECT count(*) FROM Employee", "sub_ques": "how many employees"}
{"db_id": "flight_1", "sub_sql": "select count employee", "question": "What is the number of employees?", "sub_sql_type": "null agg col", "sub_sql_new": "select count employee", "query": "SELECT count(*) FROM Employee", "sub_ques": "what is the number of employees"}
{"db_id": "flight_1", "sub_sql": "select name , salary from employee", "question": "Show name and salary for all employees sorted by salary.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , salary from employee", "query": "SELECT name ,  salary FROM Employee ORDER BY salary", "sub_ques": "show name and salary for all employees"}
{"db_id": "flight_1", "sub_sql": "order by salary", "question": "Show name and salary for all employees sorted by salary.", "sub_sql_type": "null null col", "sub_sql_new": "order by salary", "query": "SELECT name ,  salary FROM Employee ORDER BY salary", "sub_ques": "sorted by salary"}
{"db_id": "flight_1", "sub_sql": "select name , salary from employee", "question": "What is the name and salary of all employees in order of salary?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , salary from employee", "query": "SELECT name ,  salary FROM Employee ORDER BY salary", "sub_ques": "what is the name and salary of all employees"}
{"db_id": "flight_1", "sub_sql": "order by salary", "question": "What is the name and salary of all employees in order of salary?", "sub_sql_type": "null null col", "sub_sql_new": "order by salary", "query": "SELECT name ,  salary FROM Employee ORDER BY salary", "sub_ques": "in order of salary"}
{"db_id": "flight_1", "sub_sql": "select eid from employee", "question": "Show ids for all employees with at least 100000 salary.", "sub_sql_type": "null col col col col", "sub_sql_new": "select employee id from employee", "query": "SELECT eid FROM Employee WHERE salary  >  100000", "sub_ques": "show ids for all employees"}
{"db_id": "flight_1", "sub_sql": "where salary > 100000", "question": "Show ids for all employees with at least 100000 salary.", "sub_sql_type": "null col op op value", "sub_sql_new": "where salary more than 100000", "query": "SELECT eid FROM Employee WHERE salary  >  100000", "sub_ques": "employees with at least 100000 salary"}
{"db_id": "flight_1", "sub_sql": "select eid from employee", "question": "What is the id of every employee who has at least a salary of  100000?", "sub_sql_type": "null col col col col", "sub_sql_new": "select employee id from employee", "query": "SELECT eid FROM Employee WHERE salary  >  100000", "sub_ques": "what is the id of every employee"}
{"db_id": "flight_1", "sub_sql": "where salary > 100000", "question": "What is the id of every employee who has at least a salary of  100000?", "sub_sql_type": "null col op op value", "sub_sql_new": "where salary more than 100000", "query": "SELECT eid FROM Employee WHERE salary  >  100000", "sub_ques": "employee who has at least a salary of 100000"}
{"db_id": "flight_1", "sub_sql": "select count employee", "question": "How many employees have salary between 100000 and 200000?", "sub_sql_type": "null agg col", "sub_sql_new": "select count employee", "query": "SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000", "sub_ques": "how many employees"}
{"db_id": "flight_1", "sub_sql": "select count employee", "question": "What is the number of employees that have a salary between 100000 and 200000?", "sub_sql_type": "null agg col", "sub_sql_new": "select count employee", "query": "SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000", "sub_ques": "what is the number of employees that have"}
{"db_id": "flight_1", "sub_sql": "select name , salary from employee", "question": "What is the name and salary for employee with id 242518965?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , salary from employee", "query": "SELECT name ,  salary FROM Employee WHERE eid  =  242518965", "sub_ques": "what is the name and salary for employee"}
{"db_id": "flight_1", "sub_sql": "where eid = 242518965", "question": "What is the name and salary for employee with id 242518965?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where employee id equal to 242518965", "query": "SELECT name ,  salary FROM Employee WHERE eid  =  242518965", "sub_ques": "employee with id 242518965"}
{"db_id": "flight_1", "sub_sql": "select name , salary from employee", "question": "What is the name and salary of the employee with the id 242518965?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , salary from employee", "query": "SELECT name ,  salary FROM Employee WHERE eid  =  242518965", "sub_ques": "what is the name and salary of the employee"}
{"db_id": "flight_1", "sub_sql": "where eid = 242518965", "question": "What is the name and salary of the employee with the id 242518965?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where employee id equal to 242518965", "query": "SELECT name ,  salary FROM Employee WHERE eid  =  242518965", "sub_ques": "employee with the id 242518965"}
{"db_id": "flight_1", "sub_sql": "select avg salary , max salary from employee", "question": "What is average and maximum salary of all employees.", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select avg salary , max salary from employee", "query": "SELECT avg(salary) ,  max(salary) FROM Employee", "sub_ques": "what is average and maximum salary of all employees"}
{"db_id": "flight_1", "sub_sql": "select avg salary , max salary from employee", "question": "What is the average and largest salary of all employees?", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select avg salary , max salary from employee", "query": "SELECT avg(salary) ,  max(salary) FROM Employee", "sub_ques": "what is the average and largest salary of all employees"}
{"db_id": "flight_1", "sub_sql": "select eid , name from employee", "question": "Show the id and name of the employee with maximum salary.", "sub_sql_type": "null col col null col col col", "sub_sql_new": "select employee id , name from employee", "query": "SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1", "sub_ques": "show the id and name of the employee"}
{"db_id": "flight_1", "sub_sql": "order by salary desc limit 1", "question": "Show the id and name of the employee with maximum salary.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by salary desc limit 1", "query": "SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1", "sub_ques": "maximum salary"}
{"db_id": "flight_1", "sub_sql": "select eid , name from employee", "question": "What is the id and name of the employee with the highest salary?", "sub_sql_type": "null col col null col col col", "sub_sql_new": "select employee id , name from employee", "query": "SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1", "sub_ques": "what is the id and name of the employee"}
{"db_id": "flight_1", "sub_sql": "order by salary desc limit 1", "question": "What is the id and name of the employee with the highest salary?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by salary desc limit 1", "query": "SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1", "sub_ques": "the highest salary"}
{"db_id": "flight_1", "sub_sql": "select name from employee", "question": "Show the name of employees with three lowest salaries.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from employee", "query": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3", "sub_ques": "show the name of employees"}
{"db_id": "flight_1", "sub_sql": "order by salary asc limit 3", "question": "Show the name of employees with three lowest salaries.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by salary asc limit 3", "query": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3", "sub_ques": "three lowest salaries"}
{"db_id": "flight_1", "sub_sql": "select name from employee", "question": "What is the name of the 3 employees who get paid the least?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from employee", "query": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3", "sub_ques": "what is the name of employees"}
{"db_id": "flight_1", "sub_sql": "order by salary asc limit 3", "question": "What is the name of the 3 employees who get paid the least?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by salary asc limit 3", "query": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3", "sub_ques": "the 3 employees who get paid the least"}
{"db_id": "flight_1", "sub_sql": "select name from employee", "question": "Show names for all employees with salary more than the average.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from employee", "query": "SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)", "sub_ques": "show names for all employees"}
{"db_id": "flight_1", "sub_sql": "where salary > select avg salary", "question": "Show names for all employees with salary more than the average.", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where salary more than select avg salary", "query": "SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)", "sub_ques": "salary more than the average"}
{"db_id": "flight_1", "sub_sql": "select name from employee", "question": "What are the names of all employees who have a salary higher than average?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from employee", "query": "SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)", "sub_ques": "what are the names of all employees"}
{"db_id": "flight_1", "sub_sql": "where salary > select avg salary", "question": "What are the names of all employees who have a salary higher than average?", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where salary more than select avg salary", "query": "SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)", "sub_ques": "salary higher than average"}
{"db_id": "flight_1", "sub_sql": "select eid , salary from employee", "question": "Show the id and salary of Mark Young.", "sub_sql_type": "null col col null col col col", "sub_sql_new": "select employee id , salary from employee", "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'", "sub_ques": "show the id and salary"}
{"db_id": "flight_1", "sub_sql": "where name = markyoung", "question": "Show the id and salary of Mark Young.", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to markyoung", "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'", "sub_ques": "mark young"}
{"db_id": "flight_1", "sub_sql": "select eid , salary from employee", "question": "What is the id and salary of the employee named Mark Young?", "sub_sql_type": "null col col null col col col", "sub_sql_new": "select employee id , salary from employee", "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'", "sub_ques": "what is the id and salary of the employee"}
{"db_id": "flight_1", "sub_sql": "where name = markyoung", "question": "What is the id and salary of the employee named Mark Young?", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to markyoung", "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'", "sub_ques": "employee named mark young"}
{"db_id": "flight_1", "sub_sql": "select count flight", "question": "How many flights do we have?", "sub_sql_type": "null agg col", "sub_sql_new": "select count flight", "query": "SELECT count(*) FROM Flight", "sub_ques": "how many flights"}
{"db_id": "flight_1", "sub_sql": "select count flight", "question": "What is the number of flights?", "sub_sql_type": "null agg col", "sub_sql_new": "select count flight", "query": "SELECT count(*) FROM Flight", "sub_ques": "what is the number of flights"}
{"db_id": "flight_1", "sub_sql": "select flno , origin , destination from flight", "question": "Show flight number, origin, destination of all flights in the alphabetical order of the departure cities.", "sub_sql_type": "null col col null col null col col col", "sub_sql_new": "select flight number , origin , destination from flight", "query": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin", "sub_ques": "show flight number , origin , destination of all flights"}
{"db_id": "flight_1", "sub_sql": "order by origin", "question": "Show flight number, origin, destination of all flights in the alphabetical order of the departure cities.", "sub_sql_type": "null null col", "sub_sql_new": "order by origin", "query": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin", "sub_ques": "in the alphabetical order of the departure cities"}
{"db_id": "flight_1", "sub_sql": "select flno , origin , destination from flight", "question": "What is the flight number, origin, and destination for all flights in alphabetical order by departure cities?", "sub_sql_type": "null col col null col null col col col", "sub_sql_new": "select flight number , origin , destination from flight", "query": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin", "sub_ques": "what is the flight number , origin , and destination for all flights"}
{"db_id": "flight_1", "sub_sql": "order by origin", "question": "What is the flight number, origin, and destination for all flights in alphabetical order by departure cities?", "sub_sql_type": "null null col", "sub_sql_new": "order by origin", "query": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin", "sub_ques": "in alphabetical order by departure cities"}
{"db_id": "flight_1", "sub_sql": "select flno from flight", "question": "Show all flight number from Los Angeles.", "sub_sql_type": "null col col col col", "sub_sql_new": "select flight number from flight", "query": "SELECT flno FROM Flight WHERE origin  =  \\\\\\\"Los Angeles\\\\\\\"", "sub_ques": "show all flight number"}
{"db_id": "flight_1", "sub_sql": "where origin = losangeles", "question": "Show all flight number from Los Angeles.", "sub_sql_type": "null col op op value", "sub_sql_new": "where origin equal to losangeles", "query": "SELECT flno FROM Flight WHERE origin  =  \\\\\\\"Los Angeles\\\\\\\"", "sub_ques": "from los angeles"}
{"db_id": "flight_1", "sub_sql": "select flno from flight", "question": "What are the numbers of all flights coming from Los Angeles?", "sub_sql_type": "null col col col col", "sub_sql_new": "select flight number from flight", "query": "SELECT flno FROM Flight WHERE origin  =  \\\\\\\"Los Angeles\\\\\\\"", "sub_ques": "what are the numbers of all flights"}
{"db_id": "flight_1", "sub_sql": "where origin = losangeles", "question": "What are the numbers of all flights coming from Los Angeles?", "sub_sql_type": "null col op op value", "sub_sql_new": "where origin equal to losangeles", "query": "SELECT flno FROM Flight WHERE origin  =  \\\\\\\"Los Angeles\\\\\\\"", "sub_ques": "coming from los angeles"}
{"db_id": "flight_1", "sub_sql": "select origin from flight", "question": "Show origins of all flights with destination Honolulu.", "sub_sql_type": "null col col col", "sub_sql_new": "select origin from flight", "query": "SELECT origin FROM Flight WHERE destination  =  \\\\\\\"Honolulu\\\\\\\"", "sub_ques": "show origins of all flights"}
{"db_id": "flight_1", "sub_sql": "where destination = honolulu", "question": "Show origins of all flights with destination Honolulu.", "sub_sql_type": "null col op op value", "sub_sql_new": "where destination equal to honolulu", "query": "SELECT origin FROM Flight WHERE destination  =  \\\\\\\"Honolulu\\\\\\\"", "sub_ques": "flights with destination honolulu"}
{"db_id": "flight_1", "sub_sql": "select origin from flight", "question": "What are the origins of all flights that are headed to Honolulu?", "sub_sql_type": "null col col col", "sub_sql_new": "select origin from flight", "query": "SELECT origin FROM Flight WHERE destination  =  \\\\\\\"Honolulu\\\\\\\"", "sub_ques": "what are the origins of all flights"}
{"db_id": "flight_1", "sub_sql": "where destination = honolulu", "question": "What are the origins of all flights that are headed to Honolulu?", "sub_sql_type": "null col op op value", "sub_sql_new": "where destination equal to honolulu", "query": "SELECT origin FROM Flight WHERE destination  =  \\\\\\\"Honolulu\\\\\\\"", "sub_ques": "flights that are headed to honolulu"}
{"db_id": "flight_1", "sub_sql": "select departure_date , arrival_date from flight", "question": "Show me the departure date and arrival date for all flights from Los Angeles to Honolulu.", "sub_sql_type": "null col col null col col col col", "sub_sql_new": "select departure date , arrival date from flight", "query": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \\\\\\\"Los Angeles\\\\\\\" AND destination  =  \\\\\\\"Honolulu\\\\\\\"", "sub_ques": "show me the departure date and arrival date for all flights"}
{"db_id": "flight_1", "sub_sql": "where origin = losangeles", "question": "Show me the departure date and arrival date for all flights from Los Angeles to Honolulu.", "sub_sql_type": "null col op op value", "sub_sql_new": "where origin equal to losangeles", "query": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \\\\\\\"Los Angeles\\\\\\\" AND destination  =  \\\\\\\"Honolulu\\\\\\\"", "sub_ques": "flights from los angeles"}
{"db_id": "flight_1", "sub_sql": "select departure_date , arrival_date from flight", "question": "What are the departure and arrival dates of all flights from LA to Honolulu?", "sub_sql_type": "null col col null col col col col", "sub_sql_new": "select departure date , arrival date from flight", "query": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \\\\\\\"Los Angeles\\\\\\\" AND destination  =  \\\\\\\"Honolulu\\\\\\\"", "sub_ques": "what are the departure and arrival dates of all flights"}
{"db_id": "flight_1", "sub_sql": "where origin = losangeles", "question": "What are the departure and arrival dates of all flights from LA to Honolulu?", "sub_sql_type": "null col op op value", "sub_sql_new": "where origin equal to losangeles", "query": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \\\\\\\"Los Angeles\\\\\\\" AND destination  =  \\\\\\\"Honolulu\\\\\\\"", "sub_ques": "flights from la"}
{"db_id": "flight_1", "sub_sql": "select flno from flight", "question": "Show flight number for all flights with more than 2000 distance.", "sub_sql_type": "null col col col col", "sub_sql_new": "select flight number from flight", "query": "SELECT flno FROM Flight WHERE distance  >  2000", "sub_ques": "show flight number for all flights"}
{"db_id": "flight_1", "sub_sql": "where distance > 2000", "question": "Show flight number for all flights with more than 2000 distance.", "sub_sql_type": "null col op op value", "sub_sql_new": "where distance more than 2000", "query": "SELECT flno FROM Flight WHERE distance  >  2000", "sub_ques": "flights with more than 2000 distance"}
{"db_id": "flight_1", "sub_sql": "select flno from flight", "question": "What are the numbers of all flights that can cover a distance of more than 2000?", "sub_sql_type": "null col col col col", "sub_sql_new": "select flight number from flight", "query": "SELECT flno FROM Flight WHERE distance  >  2000", "sub_ques": "what are the numbers of all flights"}
{"db_id": "flight_1", "sub_sql": "where distance > 2000", "question": "What are the numbers of all flights that can cover a distance of more than 2000?", "sub_sql_type": "null col op op value", "sub_sql_new": "where distance more than 2000", "query": "SELECT flno FROM Flight WHERE distance  >  2000", "sub_ques": "that can cover distance of more than 2000"}
{"db_id": "flight_1", "sub_sql": "select avg price from flight", "question": "What is the average price for flights from Los Angeles to Honolulu.", "sub_sql_type": "null agg col col col", "sub_sql_new": "select avg price from flight", "query": "SELECT avg(price) FROM Flight WHERE origin  =  \\\\\\\"Los Angeles\\\\\\\" AND destination  =  \\\\\\\"Honolulu\\\\\\\"", "sub_ques": "what is the average price for flights"}
{"db_id": "flight_1", "sub_sql": "where origin = losangeles", "question": "What is the average price for flights from Los Angeles to Honolulu.", "sub_sql_type": "null col op op value", "sub_sql_new": "where origin equal to losangeles", "query": "SELECT avg(price) FROM Flight WHERE origin  =  \\\\\\\"Los Angeles\\\\\\\" AND destination  =  \\\\\\\"Honolulu\\\\\\\"", "sub_ques": "flights from los angeles"}
{"db_id": "flight_1", "sub_sql": "select avg price from flight", "question": "What is the average price for flights from LA to Honolulu?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select avg price from flight", "query": "SELECT avg(price) FROM Flight WHERE origin  =  \\\\\\\"Los Angeles\\\\\\\" AND destination  =  \\\\\\\"Honolulu\\\\\\\"", "sub_ques": "what is the average price for flights"}
{"db_id": "flight_1", "sub_sql": "where origin = losangeles", "question": "What is the average price for flights from LA to Honolulu?", "sub_sql_type": "null col op op value", "sub_sql_new": "where origin equal to losangeles", "query": "SELECT avg(price) FROM Flight WHERE origin  =  \\\\\\\"Los Angeles\\\\\\\" AND destination  =  \\\\\\\"Honolulu\\\\\\\"", "sub_ques": "flights from la"}
{"db_id": "flight_1", "sub_sql": "select origin , destination from flight", "question": "Show origin and destination for flights with price higher than 300.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select origin , destination from flight", "query": "SELECT origin ,  destination FROM Flight WHERE price  >  300", "sub_ques": "show origin and destination for flights"}
{"db_id": "flight_1", "sub_sql": "where price > 300", "question": "Show origin and destination for flights with price higher than 300.", "sub_sql_type": "null col op op value", "sub_sql_new": "where price more than 300", "query": "SELECT origin ,  destination FROM Flight WHERE price  >  300", "sub_ques": "flights with price higher than 300"}
{"db_id": "flight_1", "sub_sql": "select origin , destination from flight", "question": "What is the origin and destination for all flights whose price is higher than 300?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select origin , destination from flight", "query": "SELECT origin ,  destination FROM Flight WHERE price  >  300", "sub_ques": "what is the origin and destination for all flights"}
{"db_id": "flight_1", "sub_sql": "where price > 300", "question": "What is the origin and destination for all flights whose price is higher than 300?", "sub_sql_type": "null col op op value", "sub_sql_new": "where price more than 300", "query": "SELECT origin ,  destination FROM Flight WHERE price  >  300", "sub_ques": "flights whose price is higher than 300"}
{"db_id": "flight_1", "sub_sql": "select flno , distance from flight", "question": "Show the flight number and distance of the flight with maximum price.", "sub_sql_type": "null col col null col col col", "sub_sql_new": "select flight number , distance from flight", "query": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1", "sub_ques": "show the flight number and distance of the flight"}
{"db_id": "flight_1", "sub_sql": "order by price desc limit 1", "question": "Show the flight number and distance of the flight with maximum price.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by price desc limit 1", "query": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1", "sub_ques": "the maximum price"}
{"db_id": "flight_1", "sub_sql": "select flno , distance from flight", "question": "What is the flight number and its distance for the one with the maximum price?", "sub_sql_type": "null col col null col col col", "sub_sql_new": "select flight number , distance from flight", "query": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1", "sub_ques": "what is the flight number and its distance"}
{"db_id": "flight_1", "sub_sql": "order by price desc limit 1", "question": "What is the flight number and its distance for the one with the maximum price?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by price desc limit 1", "query": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1", "sub_ques": "the maximum price"}
{"db_id": "flight_1", "sub_sql": "select flno from flight", "question": "Show the flight number of flights with three lowest distances.", "sub_sql_type": "null col col col col", "sub_sql_new": "select flight number from flight", "query": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3", "sub_ques": "show the flight number of flights"}
{"db_id": "flight_1", "sub_sql": "order by distance asc limit 3", "question": "Show the flight number of flights with three lowest distances.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by distance asc limit 3", "query": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3", "sub_ques": "three lowest distances"}
{"db_id": "flight_1", "sub_sql": "select flno from flight", "question": "What are the numbers of the shortest flights?", "sub_sql_type": "null col col col col", "sub_sql_new": "select flight number from flight", "query": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3", "sub_ques": "what are the numbers of the shortest flights"}
{"db_id": "flight_1", "sub_sql": "order by distance asc limit 3", "question": "What are the numbers of the shortest flights?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by distance asc limit 3", "query": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3", "sub_ques": "the shortest flights"}
{"db_id": "flight_1", "sub_sql": "select avg distance , avg price from flight", "question": "What is the average distance and average price for flights from Los Angeles.", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select avg distance , avg price from flight", "query": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \\\\\\\"Los Angeles\\\\\\\"", "sub_ques": "what is the average distance and average price for flights"}
{"db_id": "flight_1", "sub_sql": "where origin = losangeles", "question": "What is the average distance and average price for flights from Los Angeles.", "sub_sql_type": "null col op op value", "sub_sql_new": "where origin equal to losangeles", "query": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \\\\\\\"Los Angeles\\\\\\\"", "sub_ques": "flights from los angeles"}
{"db_id": "flight_1", "sub_sql": "select avg distance , avg price from flight", "question": "What is the average distance and price for all flights from LA?", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select avg distance , avg price from flight", "query": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \\\\\\\"Los Angeles\\\\\\\"", "sub_ques": "what is the average distance and price for all flights"}
{"db_id": "flight_1", "sub_sql": "where origin = losangeles", "question": "What is the average distance and price for all flights from LA?", "sub_sql_type": "null col op op value", "sub_sql_new": "where origin equal to losangeles", "query": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \\\\\\\"Los Angeles\\\\\\\"", "sub_ques": "flights from la"}
{"db_id": "flight_1", "sub_sql": "select origin , count * from flight group by origin", "question": "Show all origins and the number of flights from each origin.", "sub_sql_type": "null col null agg col col col", "sub_sql_new": "select origin , count * from flight", "query": "SELECT origin ,  count(*) FROM Flight GROUP BY origin", "sub_ques": "show all origins and the number of flights from each origin"}
{"db_id": "flight_1", "sub_sql": "select origin , count flight group by origin", "question": "For each origin, how many flights came from there?", "sub_sql_type": "null col null agg col", "sub_sql_new": "select origin , count flight", "query": "SELECT origin ,  count(*) FROM Flight GROUP BY origin", "sub_ques": "for each origin , how many flights"}
{"db_id": "flight_1", "sub_sql": "select destination , count flight group by destination", "question": "Show all destinations and the number of flights to each destination.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select destination , count flight", "query": "SELECT destination ,  count(*) FROM Flight GROUP BY destination", "sub_ques": "show all destinations and the number of flights to each destination"}
{"db_id": "flight_1", "sub_sql": "select destination , count flight group by destination", "question": "What are the destinations and number of flights to each one?", "sub_sql_type": "null col null agg col", "sub_sql_new": "select destination , count flight", "query": "SELECT destination ,  count(*) FROM Flight GROUP BY destination", "sub_ques": "what are the destinations and number of flights"}
{"db_id": "flight_1", "sub_sql": "select origin from flight", "question": "Which origin has most number of flights?", "sub_sql_type": "null col col col", "sub_sql_new": "select origin from flight", "query": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1", "sub_ques": "which origin"}
{"db_id": "flight_1", "sub_sql": "group by origin order by count flight desc limit 1", "question": "Which origin has most number of flights?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count flight desc limit 1", "query": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1", "sub_ques": "origin has most number of flights"}
{"db_id": "flight_1", "sub_sql": "select origin from flight", "question": "What place has the most flights coming from there?", "sub_sql_type": "null col col col", "sub_sql_new": "select origin from flight", "query": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1", "sub_ques": "what place the flights coming from"}
{"db_id": "flight_1", "sub_sql": "group by origin order by count flight desc limit 1", "question": "What place has the most flights coming from there?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count flight desc limit 1", "query": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1", "sub_ques": "place has the most flights coming from"}
{"db_id": "flight_1", "sub_sql": "select destination from flight", "question": "Which destination has least number of flights?", "sub_sql_type": "null col col col", "sub_sql_new": "select destination from flight", "query": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1", "sub_ques": "which destination"}
{"db_id": "flight_1", "sub_sql": "group by destination order by count flight limit 1", "question": "Which destination has least number of flights?", "sub_sql_type": "null null agg col null limv", "sub_sql_new": "order by count flight limit 1", "query": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1", "sub_ques": "destination has least number of flights"}
{"db_id": "flight_1", "sub_sql": "select destination from flight", "question": "What destination has the fewest number of flights?", "sub_sql_type": "null col col col", "sub_sql_new": "select destination from flight", "query": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1", "sub_ques": "what destination"}
{"db_id": "flight_1", "sub_sql": "group by destination order by count flight limit 1", "question": "What destination has the fewest number of flights?", "sub_sql_type": "null null agg col null limv", "sub_sql_new": "order by count flight limit 1", "query": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1", "sub_ques": "destination has the fewest number of flights"}
{"db_id": "flight_1", "sub_sql": "select t2.name from aircraft", "question": "What is the aircraft name for the flight with number 99", "sub_sql_type": "null col col col", "sub_sql_new": "select name from aircraft", "query": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99", "sub_ques": "what is the aircraft name"}
{"db_id": "flight_1", "sub_sql": "where t1.flno = 99", "question": "What is the aircraft name for the flight with number 99", "sub_sql_type": "null col col op op value", "sub_sql_new": "where flight number equal to 99", "query": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99", "sub_ques": "flight with number 99"}
{"db_id": "flight_1", "sub_sql": "select t2.name from aircraft", "question": "What is the name of the aircraft that was on flight number 99?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from aircraft", "query": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99", "sub_ques": "what is the name of the aircraft"}
{"db_id": "flight_1", "sub_sql": "where t1.flno = 99", "question": "What is the name of the aircraft that was on flight number 99?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where flight number equal to 99", "query": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99", "sub_ques": "flight number 99"}
{"db_id": "flight_1", "sub_sql": "select t1.flno from flight", "question": "Show all flight numbers with aircraft Airbus A340-300.", "sub_sql_type": "null col col col col", "sub_sql_new": "select flight number from flight", "query": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \\\\\\\"Airbus A340-300\\\\\\\"", "sub_ques": "show all flight numbers"}
{"db_id": "flight_1", "sub_sql": "where t2.name = airbusa340-300", "question": "Show all flight numbers with aircraft Airbus A340-300.", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to airbusa340-300", "query": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \\\\\\\"Airbus A340-300\\\\\\\"", "sub_ques": "aircraft airbus a340-300"}
{"db_id": "flight_1", "sub_sql": "select t1.flno from flight", "question": "What are the flight numbers for the aircraft Airbus A340-300?", "sub_sql_type": "null col col col col", "sub_sql_new": "select flight number from flight", "query": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \\\\\\\"Airbus A340-300\\\\\\\"", "sub_ques": "what are the flight numbers"}
{"db_id": "flight_1", "sub_sql": "where t2.name = airbusa340-300", "question": "What are the flight numbers for the aircraft Airbus A340-300?", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to airbusa340-300", "query": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \\\\\\\"Airbus A340-300\\\\\\\"", "sub_ques": "aircraft airbus a340-300"}
{"db_id": "flight_1", "sub_sql": "select t2.name , count * from aircraft group by t1.aid", "question": "Show aircraft names and number of flights for each aircraft.", "sub_sql_type": "null col null agg col col col", "sub_sql_new": "select name , count * from aircraft", "query": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid", "sub_ques": "show aircraft names and number of flights for each aircraft"}
{"db_id": "flight_1", "sub_sql": "select t2.name , count aircraft group by t1.aid", "question": "What is the name of each aircraft and how many flights does each one complete?", "sub_sql_type": "null col null agg col", "sub_sql_new": "select name , count aircraft", "query": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid", "sub_ques": "what is the name of each aircraft and how many flights"}
{"db_id": "flight_1", "sub_sql": "select t2.name from aircraft", "question": "Show names for all aircraft with at least two flights.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from aircraft", "query": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2", "sub_ques": "show names for all aircraft"}
{"db_id": "flight_1", "sub_sql": "group by t1.aid having count flight >= 2", "question": "Show names for all aircraft with at least two flights.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2", "sub_ques": "aircraft with at least two flights"}
{"db_id": "flight_1", "sub_sql": "select t2.name from aircraft", "question": "What are the names for all aircrafts with at least 2 flights?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from aircraft", "query": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2", "sub_ques": "what are the names for all aircrafts"}
{"db_id": "flight_1", "sub_sql": "group by t1.aid having count flight >= 2", "question": "What are the names for all aircrafts with at least 2 flights?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2", "sub_ques": "aircrafts with at least 2 flights"}
{"db_id": "flight_1", "sub_sql": "select count distinct eid from certificate", "question": "How many employees have certificate.", "sub_sql_type": "null agg col col col col col", "sub_sql_new": "select count distinct employee id from certificate", "query": "SELECT count(DISTINCT eid) FROM Certificate", "sub_ques": "how many employees have"}
{"db_id": "flight_1", "sub_sql": "select count distinct eid from certificate", "question": "What is the count of distinct employees with certificates?", "sub_sql_type": "null agg col col col col col", "sub_sql_new": "select count distinct employee id from certificate", "query": "SELECT count(DISTINCT eid) FROM Certificate", "sub_ques": "what is the count of distinct employees with certificates"}
{"db_id": "flight_1", "sub_sql": "select t3.name from aircraft", "question": "Show names for all aircrafts of which John Williams has certificates.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from aircraft", "query": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \\\\\\\"John Williams\\\\\\\"", "sub_ques": "show names for all aircrafts"}
{"db_id": "flight_1", "sub_sql": "where t1.name = johnwilliams", "question": "Show names for all aircrafts of which John Williams has certificates.", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to johnwilliams", "query": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \\\\\\\"John Williams\\\\\\\"", "sub_ques": "john williams"}
{"db_id": "flight_1", "sub_sql": "select t3.name from aircraft", "question": "What are the names of all aircrafts that John Williams have certificates to be able to fly?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from aircraft", "query": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \\\\\\\"John Williams\\\\\\\"", "sub_ques": "what are the names of all aircrafts"}
{"db_id": "flight_1", "sub_sql": "where t1.name = johnwilliams", "question": "What are the names of all aircrafts that John Williams have certificates to be able to fly?", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to johnwilliams", "query": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \\\\\\\"John Williams\\\\\\\"", "sub_ques": "john williams"}
{"db_id": "flight_1", "sub_sql": "select t1.name from employee", "question": "Show names for all employees who have certificate of Boeing 737-800.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from employee", "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \\\\\\\"Boeing 737-800\\\\\\\"", "sub_ques": "show names for all employees"}
{"db_id": "flight_1", "sub_sql": "where t3.name = boeing737-800", "question": "Show names for all employees who have certificate of Boeing 737-800.", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to boeing737-800", "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \\\\\\\"Boeing 737-800\\\\\\\"", "sub_ques": "who have certificate of boeing 737-800"}
{"db_id": "flight_1", "sub_sql": "select t1.name from employee", "question": "What are the names of all employees who have a certificate to fly Boeing 737-800?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from employee", "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \\\\\\\"Boeing 737-800\\\\\\\"", "sub_ques": "what are the names of all employees"}
{"db_id": "flight_1", "sub_sql": "where t3.name = boeing737-800", "question": "What are the names of all employees who have a certificate to fly Boeing 737-800?", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to boeing737-800", "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \\\\\\\"Boeing 737-800\\\\\\\"", "sub_ques": "who have a certificate to fly boeing 737-800"}
{"db_id": "flight_1", "sub_sql": "select t2.name from aircraft", "question": "Show the name of aircraft which fewest people have its certificate.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from aircraft", "query": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1", "sub_ques": "show the name of aircraft"}
{"db_id": "flight_1", "sub_sql": "group by t1.aid order by count certificate desc limit 1", "question": "Show the name of aircraft which fewest people have its certificate.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count certificate desc limit 1", "query": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1", "sub_ques": "aircraft which fewest people have its certificate"}
{"db_id": "flight_1", "sub_sql": "select t2.name from aircraft", "question": "What are the names of the aircraft that the least people are certified to fly?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from aircraft", "query": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1", "sub_ques": "what are the names of the aircraft"}
{"db_id": "flight_1", "sub_sql": "group by t1.aid order by count certificate desc limit 1", "question": "What are the names of the aircraft that the least people are certified to fly?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count certificate desc limit 1", "query": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1", "sub_ques": "aircraft that the least people are certified to fly"}
{"db_id": "flight_1", "sub_sql": "select t2.name from aircraft", "question": "Show the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from aircraft", "query": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5", "sub_ques": "show the name and distance of the aircrafts"}
{"db_id": "flight_1", "sub_sql": "where t2.distance > 5000", "question": "Show the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate.", "sub_sql_type": "null col op op value", "sub_sql_new": "where distance more than 5000", "query": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5", "sub_ques": "distance of the aircrafts with more than 5000 distance"}
{"db_id": "flight_1", "sub_sql": "group by t1.aid order by count certificate limit 5", "question": "Show the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate.", "sub_sql_type": "null null agg col null limv", "sub_sql_new": "order by count certificate limit 5", "query": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5", "sub_ques": "which at least 5 people have its certificate"}
{"db_id": "flight_1", "sub_sql": "select t2.name from aircraft", "question": "What is the name and distance of every aircraft that can cover a distance of more than 5000 and which at least 5 people can fly?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from aircraft", "query": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5", "sub_ques": "what is the name and distance of every aircraft"}
{"db_id": "flight_1", "sub_sql": "where t2.distance > 5000", "question": "What is the name and distance of every aircraft that can cover a distance of more than 5000 and which at least 5 people can fly?", "sub_sql_type": "null col op op value", "sub_sql_new": "where distance more than 5000", "query": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5", "sub_ques": "that can cover a distance of more than 5000"}
{"db_id": "flight_1", "sub_sql": "group by t1.aid order by count certificate limit 5", "question": "What is the name and distance of every aircraft that can cover a distance of more than 5000 and which at least 5 people can fly?", "sub_sql_type": "null null agg col null limv", "sub_sql_new": "order by count certificate limit 5", "query": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5", "sub_ques": "which at least 5 people can fly"}
{"db_id": "flight_1", "sub_sql": "select t1.name , t1.salary from employee", "question": "what is the salary and name of the employee who has the most number of aircraft certificates?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , salary from employee", "query": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1", "sub_ques": "what is the salary and name of the employee"}
{"db_id": "flight_1", "sub_sql": "group by t1.eid order by count certificate desc limit 1", "question": "what is the salary and name of the employee who has the most number of aircraft certificates?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count certificate desc limit 1", "query": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the most number of aircraft certificates"}
{"db_id": "flight_1", "sub_sql": "select t1.name , t1.salary from employee", "question": "What is the salaray and name of the employee that is certified to fly the most planes?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , salary from employee", "query": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1", "sub_ques": "what is the salaray and name of the employee"}
{"db_id": "flight_1", "sub_sql": "group by t1.eid order by count certificate desc limit 1", "question": "What is the salaray and name of the employee that is certified to fly the most planes?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count certificate desc limit 1", "query": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1", "sub_ques": "that is certified to fly the most planes"}
{"db_id": "flight_1", "sub_sql": "select t1.name from employee", "question": "What is the salary and name of the employee who has the most number of certificates on aircrafts with distance more than 5000?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from employee", "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1", "sub_ques": "what is the name of the employee"}
{"db_id": "flight_1", "sub_sql": "where t3.distance > 5000", "question": "What is the salary and name of the employee who has the most number of certificates on aircrafts with distance more than 5000?", "sub_sql_type": "null col op op value", "sub_sql_new": "where distance more than 5000", "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1", "sub_ques": "aircrafts with distance more than 5000"}
{"db_id": "flight_1", "sub_sql": "group by t1.eid order by count certificate desc limit 1", "question": "What is the salary and name of the employee who has the most number of certificates on aircrafts with distance more than 5000?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count certificate desc limit 1", "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1", "sub_ques": "who has the most number of certificates on aircrafts"}
{"db_id": "flight_1", "sub_sql": "select t1.name from employee", "question": "What is the salaray and name of the employee with the most certificates to fly planes more than 5000?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from employee", "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1", "sub_ques": "what is the name of the employee"}
{"db_id": "flight_1", "sub_sql": "where t3.distance > 5000", "question": "What is the salaray and name of the employee with the most certificates to fly planes more than 5000?", "sub_sql_type": "null col op op value", "sub_sql_new": "where distance more than 5000", "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1", "sub_ques": "fly planes more than 5000"}
{"db_id": "flight_1", "sub_sql": "group by t1.eid order by count certificate desc limit 1", "question": "What is the salaray and name of the employee with the most certificates to fly planes more than 5000?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count certificate desc limit 1", "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1", "sub_ques": "with the most certificates"}
{"db_id": "allergy_1", "sub_sql": "select count distinct allergy from allergy_type", "question": "How many allergies are there?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct allergy from allergy_type", "query": "SELECT count(DISTINCT allergy) FROM Allergy_type", "sub_ques": "how many allergies are there"}
{"db_id": "allergy_1", "sub_sql": "select count distinct allergy from allergy_type", "question": "How many allergy entries are there?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct allergy from allergy_type", "query": "SELECT count(DISTINCT allergy) FROM Allergy_type", "sub_ques": "how many allergy are there"}
{"db_id": "allergy_1", "sub_sql": "select count distinct allergytype from allergy_type", "question": "How many different allergy types exist?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct allergytype from allergy_type", "query": "SELECT count(DISTINCT allergytype) FROM Allergy_type", "sub_ques": "how many different allergy types"}
{"db_id": "allergy_1", "sub_sql": "select count distinct allergytype from allergy_type", "question": "How many distinct allergies are there?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct allergytype from allergy_type", "query": "SELECT count(DISTINCT allergytype) FROM Allergy_type", "sub_ques": "how many distinct allergies"}
{"db_id": "allergy_1", "sub_sql": "select distinct allergytype from allergy_type", "question": "Show all allergy types.", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct allergytype from allergy_type", "query": "SELECT DISTINCT allergytype FROM Allergy_type", "sub_ques": "show all allergy types"}
{"db_id": "allergy_1", "sub_sql": "select distinct allergytype from allergy_type", "question": "What are the different allergy types?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct allergytype from allergy_type", "query": "SELECT DISTINCT allergytype FROM Allergy_type", "sub_ques": "what are the different allergy types"}
{"db_id": "allergy_1", "sub_sql": "select allergy , allergytype from allergy_type", "question": "Show all allergies and their types.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select allergy , allergytype from allergy_type", "query": "SELECT allergy ,  allergytype FROM Allergy_type", "sub_ques": "show all allergies and their types"}
{"db_id": "allergy_1", "sub_sql": "select allergy , allergytype from allergy_type", "question": "What are the allergies and their types?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select allergy , allergytype from allergy_type", "query": "SELECT allergy ,  allergytype FROM Allergy_type", "sub_ques": "what are the allergies and their types"}
{"db_id": "allergy_1", "sub_sql": "select distinct allergy from allergy_type", "question": "Show all allergies with type food.", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct allergy from allergy_type", "query": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  \\\\\\\"food\\\\\\\"", "sub_ques": "show all allergies"}
{"db_id": "allergy_1", "sub_sql": "where allergytype = food", "question": "Show all allergies with type food.", "sub_sql_type": "null col op op value", "sub_sql_new": "where allergytype equal to food", "query": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  \\\\\\\"food\\\\\\\"", "sub_ques": "with type food"}
{"db_id": "allergy_1", "sub_sql": "select distinct allergy from allergy_type", "question": "What are all the different food allergies?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct allergy from allergy_type", "query": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  \\\\\\\"food\\\\\\\"", "sub_ques": "what are all the different food allergies"}
{"db_id": "allergy_1", "sub_sql": "where allergytype = food", "question": "What are all the different food allergies?", "sub_sql_type": "null col op op value", "sub_sql_new": "where allergytype equal to food", "query": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  \\\\\\\"food\\\\\\\"", "sub_ques": "food"}
{"db_id": "allergy_1", "sub_sql": "select allergytype from allergy_type", "question": "What is the type of allergy Cat?", "sub_sql_type": "null col col col", "sub_sql_new": "select allergytype from allergy_type", "query": "SELECT allergytype FROM Allergy_type WHERE allergy  =  \\\\\\\"Cat\\\\\\\"", "sub_ques": "what is the type of allergy"}
{"db_id": "allergy_1", "sub_sql": "where allergy = cat", "question": "What is the type of allergy Cat?", "sub_sql_type": "null col op op value", "sub_sql_new": "where allergy equal to cat", "query": "SELECT allergytype FROM Allergy_type WHERE allergy  =  \\\\\\\"Cat\\\\\\\"", "sub_ques": "allergy cat"}
{"db_id": "allergy_1", "sub_sql": "select allergytype from allergy_type", "question": "What is allergy type of a cat allergy?", "sub_sql_type": "null col col col", "sub_sql_new": "select allergytype from allergy_type", "query": "SELECT allergytype FROM Allergy_type WHERE allergy  =  \\\\\\\"Cat\\\\\\\"", "sub_ques": "what is allergy type"}
{"db_id": "allergy_1", "sub_sql": "where allergy = cat", "question": "What is allergy type of a cat allergy?", "sub_sql_type": "null col op op value", "sub_sql_new": "where allergy equal to cat", "query": "SELECT allergytype FROM Allergy_type WHERE allergy  =  \\\\\\\"Cat\\\\\\\"", "sub_ques": "cat allergy"}
{"db_id": "allergy_1", "sub_sql": "select count allergy_type", "question": "How many allergies have type animal?", "sub_sql_type": "null agg col", "sub_sql_new": "select count allergy_type", "query": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \\\\\\\"animal\\\\\\\"", "sub_ques": "how many allergies"}
{"db_id": "allergy_1", "sub_sql": "where allergytype = animal", "question": "How many allergies have type animal?", "sub_sql_type": "null col op op value", "sub_sql_new": "where allergytype equal to animal", "query": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \\\\\\\"animal\\\\\\\"", "sub_ques": "type animal"}
{"db_id": "allergy_1", "sub_sql": "select count from allergy_type", "question": "How many animal type allergies exist?", "sub_sql_type": "null agg col col", "sub_sql_new": "select count from allergy_type", "query": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \\\\\\\"animal\\\\\\\"", "sub_ques": "how many type allergies exist"}
{"db_id": "allergy_1", "sub_sql": "where allergytype = animal", "question": "How many animal type allergies exist?", "sub_sql_type": "null col op op value", "sub_sql_new": "where allergytype equal to animal", "query": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \\\\\\\"animal\\\\\\\"", "sub_ques": "animal type"}
{"db_id": "allergy_1", "sub_sql": "select allergytype , count allergy_type group by allergytype", "question": "Show all allergy types and the number of allergies in each type.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select allergytype , count allergy_type", "query": "SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype", "sub_ques": "show all allergy types and the number of allergies in each type"}
{"db_id": "allergy_1", "sub_sql": "select allergytype , count allergy_type group by allergytype", "question": "What are the allergy types and how many allergies correspond to each one?", "sub_sql_type": "null col null agg col", "sub_sql_new": "select allergytype , count allergy_type", "query": "SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype", "sub_ques": "what are the allergy types and how many allergies correspond to each one"}
{"db_id": "allergy_1", "sub_sql": "select allergytype from allergy_type", "question": "Which allergy type has most number of allergies?", "sub_sql_type": "null col col col", "sub_sql_new": "select allergytype from allergy_type", "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1", "sub_ques": "which allergy type"}
{"db_id": "allergy_1", "sub_sql": "group by allergytype order by count allergy_type desc limit 1", "question": "Which allergy type has most number of allergies?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count allergy_type desc limit 1", "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1", "sub_ques": "allergy type has most number of allergies"}
{"db_id": "allergy_1", "sub_sql": "select allergytype from allergy_type", "question": "Which allergy type is most common?", "sub_sql_type": "null col col col", "sub_sql_new": "select allergytype from allergy_type", "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1", "sub_ques": "which allergy type"}
{"db_id": "allergy_1", "sub_sql": "group by allergytype order by count allergy_type desc limit 1", "question": "Which allergy type is most common?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count allergy_type desc limit 1", "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1", "sub_ques": "allergy type is most common"}
{"db_id": "allergy_1", "sub_sql": "select allergytype from allergy_type", "question": "Which allergy type has least number of allergies?", "sub_sql_type": "null col col col", "sub_sql_new": "select allergytype from allergy_type", "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1", "sub_ques": "which allergy type"}
{"db_id": "allergy_1", "sub_sql": "group by allergytype order by count allergy_type asc limit 1", "question": "Which allergy type has least number of allergies?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count allergy_type asc limit 1", "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1", "sub_ques": "allergy type has least number of allergies"}
{"db_id": "allergy_1", "sub_sql": "select allergytype from allergy_type", "question": "Which allergy type is the least common?", "sub_sql_type": "null col col col", "sub_sql_new": "select allergytype from allergy_type", "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1", "sub_ques": "which allergy type"}
{"db_id": "allergy_1", "sub_sql": "group by allergytype order by count allergy_type asc limit 1", "question": "Which allergy type is the least common?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count allergy_type asc limit 1", "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1", "sub_ques": "allergy type is the least common"}
{"db_id": "allergy_1", "sub_sql": "select count student", "question": "How many students are there?", "sub_sql_type": "null agg col", "sub_sql_new": "select count student", "query": "SELECT count(*) FROM Student", "sub_ques": "how many students"}
{"db_id": "allergy_1", "sub_sql": "select count student", "question": "What is the total number of students?", "sub_sql_type": "null agg col", "sub_sql_new": "select count student", "query": "SELECT count(*) FROM Student", "sub_ques": "what is the total number of students"}
{"db_id": "allergy_1", "sub_sql": "select fname , lname from student", "question": "Show first name and last name for all students.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select fname , lname from student", "query": "SELECT Fname ,  Lname FROM Student", "sub_ques": "show first name and last name for all students"}
{"db_id": "allergy_1", "sub_sql": "select fname , lname from student", "question": "What are the full names of all students", "sub_sql_type": "null col null col col col", "sub_sql_new": "select fname , lname from student", "query": "SELECT Fname ,  Lname FROM Student", "sub_ques": "what are the full names of all students"}
{"db_id": "allergy_1", "sub_sql": "select count distinct advisor from student", "question": "How many different advisors are listed?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct advisor from student", "query": "SELECT count(DISTINCT advisor) FROM Student", "sub_ques": "how many different advisors"}
{"db_id": "allergy_1", "sub_sql": "select count distinct advisor from student", "question": "How many advisors are there?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct advisor from student", "query": "SELECT count(DISTINCT advisor) FROM Student", "sub_ques": "how many advisors"}
{"db_id": "allergy_1", "sub_sql": "select distinct major from student", "question": "Show all majors.", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct major from student", "query": "SELECT DISTINCT Major FROM Student", "sub_ques": "show all majors"}
{"db_id": "allergy_1", "sub_sql": "select distinct major from student", "question": "What are the different majors?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct major from student", "query": "SELECT DISTINCT Major FROM Student", "sub_ques": "what are the different majors"}
{"db_id": "allergy_1", "sub_sql": "select distinct city_code from student", "question": "Show all cities where students live.", "sub_sql_type": "null col col col col col", "sub_sql_new": "select distinct city code from student", "query": "SELECT DISTINCT city_code FROM Student", "sub_ques": "show all cities where students"}
{"db_id": "allergy_1", "sub_sql": "select distinct city_code from student", "question": "What cities do students live in?", "sub_sql_type": "null col col col col col", "sub_sql_new": "select distinct city code from student", "query": "SELECT DISTINCT city_code FROM Student", "sub_ques": "what cities do students live in"}
{"db_id": "allergy_1", "sub_sql": "select fname , lname , age from student", "question": "Show first name, last name, age for all female students. Their sex is F.", "sub_sql_type": "null col null col null col col col", "sub_sql_new": "select fname , lname , age from student", "query": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'", "sub_ques": "show first name , last name , age for all female students"}
{"db_id": "allergy_1", "sub_sql": "where sex = f", "question": "Show first name, last name, age for all female students. Their sex is F.", "sub_sql_type": "null col op op value", "sub_sql_new": "where sex equal to f", "query": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'", "sub_ques": "female students . their sex is f"}
{"db_id": "allergy_1", "sub_sql": "select fname , lname , age from student", "question": "What are the full names and ages for all female students whose sex is F?", "sub_sql_type": "null col null col null col col col", "sub_sql_new": "select fname , lname , age from student", "query": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'", "sub_ques": "what are the full names and ages for all female students"}
{"db_id": "allergy_1", "sub_sql": "where sex = f", "question": "What are the full names and ages for all female students whose sex is F?", "sub_sql_type": "null col op op value", "sub_sql_new": "where sex equal to f", "query": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'", "sub_ques": "female students whose sex is f"}
{"db_id": "allergy_1", "sub_sql": "select stuid from student", "question": "Show student ids for all male students.", "sub_sql_type": "null col col col", "sub_sql_new": "select stuid from student", "query": "SELECT StuID FROM Student WHERE Sex  =  'M'", "sub_ques": "show student ids"}
{"db_id": "allergy_1", "sub_sql": "where sex = m", "question": "Show student ids for all male students.", "sub_sql_type": "null col op op value", "sub_sql_new": "where sex equal to m", "query": "SELECT StuID FROM Student WHERE Sex  =  'M'", "sub_ques": "male students"}
{"db_id": "allergy_1", "sub_sql": "select stuid from student", "question": "What are the student ids for all male students?", "sub_sql_type": "null col col col", "sub_sql_new": "select stuid from student", "query": "SELECT StuID FROM Student WHERE Sex  =  'M'", "sub_ques": "what are the student ids"}
{"db_id": "allergy_1", "sub_sql": "where sex = m", "question": "What are the student ids for all male students?", "sub_sql_type": "null col op op value", "sub_sql_new": "where sex equal to m", "query": "SELECT StuID FROM Student WHERE Sex  =  'M'", "sub_ques": "male students"}
{"db_id": "allergy_1", "sub_sql": "select count student", "question": "How many students are age 18?", "sub_sql_type": "null agg col", "sub_sql_new": "select count student", "query": "SELECT count(*) FROM Student WHERE age  =  18", "sub_ques": "how many students"}
{"db_id": "allergy_1", "sub_sql": "where age = 18", "question": "How many students are age 18?", "sub_sql_type": "null col op op value", "sub_sql_new": "where age equal to 18", "query": "SELECT count(*) FROM Student WHERE age  =  18", "sub_ques": "students are age 18"}
{"db_id": "allergy_1", "sub_sql": "select count student", "question": "How many students are 18 years old?", "sub_sql_type": "null agg col", "sub_sql_new": "select count student", "query": "SELECT count(*) FROM Student WHERE age  =  18", "sub_ques": "how many students"}
{"db_id": "allergy_1", "sub_sql": "where age = 18", "question": "How many students are 18 years old?", "sub_sql_type": "null col op op value", "sub_sql_new": "where age equal to 18", "query": "SELECT count(*) FROM Student WHERE age  =  18", "sub_ques": "students are 18 years old"}
{"db_id": "allergy_1", "sub_sql": "select stuid from student", "question": "Show all student ids who are older than 20.", "sub_sql_type": "null col col col", "sub_sql_new": "select stuid from student", "query": "SELECT StuID FROM Student WHERE age  >  20", "sub_ques": "show all student ids"}
{"db_id": "allergy_1", "sub_sql": "where age > 20", "question": "Show all student ids who are older than 20.", "sub_sql_type": "null col op op value", "sub_sql_new": "where age more than 20", "query": "SELECT StuID FROM Student WHERE age  >  20", "sub_ques": "who are older than 20"}
{"db_id": "allergy_1", "sub_sql": "select stuid from student", "question": "What are the student ids for students over 20 years old?", "sub_sql_type": "null col col col", "sub_sql_new": "select stuid from student", "query": "SELECT StuID FROM Student WHERE age  >  20", "sub_ques": "what are the student ids for students"}
{"db_id": "allergy_1", "sub_sql": "where age > 20", "question": "What are the student ids for students over 20 years old?", "sub_sql_type": "null col op op value", "sub_sql_new": "where age more than 20", "query": "SELECT StuID FROM Student WHERE age  >  20", "sub_ques": "students over 20 years old"}
{"db_id": "allergy_1", "sub_sql": "select city_code from student", "question": "Which city does the student whose last name is \\\\\\\"Kim\\\\\\\" live in?", "sub_sql_type": "null col col col col", "sub_sql_new": "select city code from student", "query": "SELECT city_code FROM Student WHERE LName  =  \\\\\\\"Kim\\\\\\\"", "sub_ques": "which city does the student"}
{"db_id": "allergy_1", "sub_sql": "where lname = kim", "question": "Which city does the student whose last name is \\\\\\\"Kim\\\\\\\" live in?", "sub_sql_type": "null col op op value", "sub_sql_new": "where lname equal to kim", "query": "SELECT city_code FROM Student WHERE LName  =  \\\\\\\"Kim\\\\\\\"", "sub_ques": "student whose last name is `` kim"}
{"db_id": "allergy_1", "sub_sql": "select city_code from student", "question": "Give the city that the student whose family name is Kim lives in.", "sub_sql_type": "null col col col col", "sub_sql_new": "select city code from student", "query": "SELECT city_code FROM Student WHERE LName  =  \\\\\\\"Kim\\\\\\\"", "sub_ques": "give the city that the student"}
{"db_id": "allergy_1", "sub_sql": "where lname = kim", "question": "Give the city that the student whose family name is Kim lives in.", "sub_sql_type": "null col op op value", "sub_sql_new": "where lname equal to kim", "query": "SELECT city_code FROM Student WHERE LName  =  \\\\\\\"Kim\\\\\\\"", "sub_ques": "student whose family name is kim"}
{"db_id": "allergy_1", "sub_sql": "select advisor from student", "question": "Who is the advisor of student with ID 1004?", "sub_sql_type": "null col col col", "sub_sql_new": "select advisor from student", "query": "SELECT Advisor FROM Student WHERE StuID  =  1004", "sub_ques": "who is the advisor of student"}
{"db_id": "allergy_1", "sub_sql": "where stuid = 1004", "question": "Who is the advisor of student with ID 1004?", "sub_sql_type": "null col op op value", "sub_sql_new": "where stuid equal to 1004", "query": "SELECT Advisor FROM Student WHERE StuID  =  1004", "sub_ques": "student with id 1004"}
{"db_id": "allergy_1", "sub_sql": "select advisor from student", "question": "Who advises student 1004?", "sub_sql_type": "null col col col", "sub_sql_new": "select advisor from student", "query": "SELECT Advisor FROM Student WHERE StuID  =  1004", "sub_ques": "who advises student"}
{"db_id": "allergy_1", "sub_sql": "where stuid = 1004", "question": "Who advises student 1004?", "sub_sql_type": "null col op op value", "sub_sql_new": "where stuid equal to 1004", "query": "SELECT Advisor FROM Student WHERE StuID  =  1004", "sub_ques": "student 1004"}
{"db_id": "allergy_1", "sub_sql": "select count student", "question": "How many students live in HKG or CHI?", "sub_sql_type": "null agg col", "sub_sql_new": "select count student", "query": "SELECT count(*) FROM Student WHERE city_code  =  \\\\\\\"HKG\\\\\\\" OR city_code  =  \\\\\\\"CHI\\\\\\\"", "sub_ques": "how many students"}
{"db_id": "allergy_1", "sub_sql": "where city_code = hkg", "question": "How many students live in HKG or CHI?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where city code equal to hkg", "query": "SELECT count(*) FROM Student WHERE city_code  =  \\\\\\\"HKG\\\\\\\" OR city_code  =  \\\\\\\"CHI\\\\\\\"", "sub_ques": "students live in hkg"}
{"db_id": "allergy_1", "sub_sql": "select count student", "question": "Give the number of students living in either HKG or CHI.", "sub_sql_type": "null agg col", "sub_sql_new": "select count student", "query": "SELECT count(*) FROM Student WHERE city_code  =  \\\\\\\"HKG\\\\\\\" OR city_code  =  \\\\\\\"CHI\\\\\\\"", "sub_ques": "give the number of students"}
{"db_id": "allergy_1", "sub_sql": "where city_code = hkg", "question": "Give the number of students living in either HKG or CHI.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where city code equal to hkg", "query": "SELECT count(*) FROM Student WHERE city_code  =  \\\\\\\"HKG\\\\\\\" OR city_code  =  \\\\\\\"CHI\\\\\\\"", "sub_ques": "students living in either hkg"}
{"db_id": "allergy_1", "sub_sql": "select min age , avg age , max age from student", "question": "Show the minimum, average, and maximum age of all students.", "sub_sql_type": "null agg col null agg col null agg col col col", "sub_sql_new": "select min age , avg age , max age from student", "query": "SELECT min(age) ,  avg(age) ,  max(age) FROM Student", "sub_ques": "show the minimum , average , and maximum age of all students"}
{"db_id": "allergy_1", "sub_sql": "select min age , avg age , max age from student", "question": "What is the minimum, mean, and maximum age across all students?", "sub_sql_type": "null agg col null agg col null agg col col col", "sub_sql_new": "select min age , avg age , max age from student", "query": "SELECT min(age) ,  avg(age) ,  max(age) FROM Student", "sub_ques": "what is the minimum , mean , and maximum age across all students"}
{"db_id": "allergy_1", "sub_sql": "select lname from student", "question": "What is the last name of the youngest student?", "sub_sql_type": "null col col col", "sub_sql_new": "select lname from student", "query": "SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)", "sub_ques": "what is the last name"}
{"db_id": "allergy_1", "sub_sql": "where age = select min age", "question": "What is the last name of the youngest student?", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where age equal to select min age", "query": "SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)", "sub_ques": "youngest student"}
{"db_id": "allergy_1", "sub_sql": "select lname from student", "question": "Provide the last name of the youngest student.", "sub_sql_type": "null col col col", "sub_sql_new": "select lname from student", "query": "SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)", "sub_ques": "provide the last name"}
{"db_id": "allergy_1", "sub_sql": "where age = select min age", "question": "Provide the last name of the youngest student.", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where age equal to select min age", "query": "SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)", "sub_ques": "the youngest student"}
{"db_id": "allergy_1", "sub_sql": "select stuid from student", "question": "Show the student id of the oldest student.", "sub_sql_type": "null col col col", "sub_sql_new": "select stuid from student", "query": "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)", "sub_ques": "show the student id"}
{"db_id": "allergy_1", "sub_sql": "where age = select max age", "question": "Show the student id of the oldest student.", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where age equal to select max age", "query": "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)", "sub_ques": "the oldest student"}
{"db_id": "allergy_1", "sub_sql": "select stuid from student", "question": "What student id corresponds to the oldest student?", "sub_sql_type": "null col col col", "sub_sql_new": "select stuid from student", "query": "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)", "sub_ques": "what student id"}
{"db_id": "allergy_1", "sub_sql": "where age = select max age", "question": "What student id corresponds to the oldest student?", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where age equal to select max age", "query": "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)", "sub_ques": "the oldest student"}
{"db_id": "allergy_1", "sub_sql": "select major , count student group by major", "question": "Show all majors and corresponding number of students.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select major , count student", "query": "SELECT major ,  count(*) FROM Student GROUP BY major", "sub_ques": "show all majors and corresponding number of students"}
{"db_id": "allergy_1", "sub_sql": "select major , count student group by major", "question": "How many students are there for each major?", "sub_sql_type": "null col null agg col", "sub_sql_new": "select major , count student", "query": "SELECT major ,  count(*) FROM Student GROUP BY major", "sub_ques": "how many students are there for each major"}
{"db_id": "allergy_1", "sub_sql": "select major from student", "question": "Which major has most number of students?", "sub_sql_type": "null col col col", "sub_sql_new": "select major from student", "query": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1", "sub_ques": "which major"}
{"db_id": "allergy_1", "sub_sql": "group by major order by count student desc limit 1", "question": "Which major has most number of students?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count student desc limit 1", "query": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1", "sub_ques": "major has most number of students"}
{"db_id": "allergy_1", "sub_sql": "select major from student", "question": "What is the largest major?", "sub_sql_type": "null col col col", "sub_sql_new": "select major from student", "query": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1", "sub_ques": "what is the major"}
{"db_id": "allergy_1", "sub_sql": "group by major order by count student desc limit 1", "question": "What is the largest major?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count student desc limit 1", "query": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the largest major"}
{"db_id": "allergy_1", "sub_sql": "select age , count student group by age", "question": "Show all ages and corresponding number of students.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select age , count student", "query": "SELECT age ,  count(*) FROM Student GROUP BY age", "sub_ques": "show all ages and corresponding number of students"}
{"db_id": "allergy_1", "sub_sql": "select age , count student group by age", "question": "How old is each student and how many students are each age?", "sub_sql_type": "null col null agg col", "sub_sql_new": "select age , count student", "query": "SELECT age ,  count(*) FROM Student GROUP BY age", "sub_ques": "how many students are each age"}
{"db_id": "allergy_1", "sub_sql": "select avg age , sex from student", "question": "Show the average age for male and female students.", "sub_sql_type": "null agg col null col col col", "sub_sql_new": "select avg age , sex from student", "query": "SELECT avg(age) ,  sex FROM Student GROUP BY sex", "sub_ques": "show the average age for male and female students"}
{"db_id": "allergy_1", "sub_sql": "select avg age , sex from student", "question": "What are the average ages for male and female students?", "sub_sql_type": "null agg col null col col col", "sub_sql_new": "select avg age , sex from student", "query": "SELECT avg(age) ,  sex FROM Student GROUP BY sex", "sub_ques": "what are the average ages for male and female students"}
{"db_id": "allergy_1", "sub_sql": "select city_code , count student group by city_code", "question": "Show all cities and corresponding number of students.", "sub_sql_type": "null col col null agg col", "sub_sql_new": "select city code , count student", "query": "SELECT city_code ,  count(*) FROM Student GROUP BY city_code", "sub_ques": "show all cities and corresponding number of students"}
{"db_id": "allergy_1", "sub_sql": "select city_code , count student group by city_code", "question": "How many students live in each city?", "sub_sql_type": "null col col null agg col", "sub_sql_new": "select city code , count student", "query": "SELECT city_code ,  count(*) FROM Student GROUP BY city_code", "sub_ques": "how many students live in each city"}
{"db_id": "allergy_1", "sub_sql": "select advisor , count student group by advisor", "question": "Show all advisors and corresponding number of students.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select advisor , count student", "query": "SELECT advisor ,  count(*) FROM Student GROUP BY advisor", "sub_ques": "show all advisors and corresponding number of students"}
{"db_id": "allergy_1", "sub_sql": "select advisor , count student group by advisor", "question": "How many students does each advisor have?", "sub_sql_type": "null col null agg col", "sub_sql_new": "select advisor , count student", "query": "SELECT advisor ,  count(*) FROM Student GROUP BY advisor", "sub_ques": "how many students does each advisor"}
{"db_id": "allergy_1", "sub_sql": "select advisor from student", "question": "Which advisor has most number of students?", "sub_sql_type": "null col col col", "sub_sql_new": "select advisor from student", "query": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1", "sub_ques": "which advisor of students"}
{"db_id": "allergy_1", "sub_sql": "group by advisor order by count student desc limit 1", "question": "Which advisor has most number of students?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count student desc limit 1", "query": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1", "sub_ques": "advisor has most number of students"}
{"db_id": "allergy_1", "sub_sql": "select advisor from student", "question": "Give the advisor with the most students.", "sub_sql_type": "null col col col", "sub_sql_new": "select advisor from student", "query": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1", "sub_ques": "give the advisor "}
{"db_id": "allergy_1", "sub_sql": "group by advisor order by count student desc limit 1", "question": "Give the advisor with the most students.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count student desc limit 1", "query": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the advisor with the most students"}
{"db_id": "allergy_1", "sub_sql": "select count has_allergy", "question": "How many students have cat allergies?", "sub_sql_type": "null agg col", "sub_sql_new": "select count has_allergy", "query": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \\\\\\\"Cat\\\\\\\"", "sub_ques": "how many students have allergies"}
{"db_id": "allergy_1", "sub_sql": "where allergy = cat", "question": "How many students have cat allergies?", "sub_sql_type": "null col op op value", "sub_sql_new": "where allergy equal to cat", "query": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \\\\\\\"Cat\\\\\\\"", "sub_ques": "cat allergies"}
{"db_id": "allergy_1", "sub_sql": "select count has_allergy", "question": "How many students are affected by cat allergies?", "sub_sql_type": "null agg col", "sub_sql_new": "select count has_allergy", "query": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \\\\\\\"Cat\\\\\\\"", "sub_ques": "how many students allergie"}
{"db_id": "allergy_1", "sub_sql": "where allergy = cat", "question": "How many students are affected by cat allergies?", "sub_sql_type": "null col op op value", "sub_sql_new": "where allergy equal to cat", "query": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \\\\\\\"Cat\\\\\\\"", "sub_ques": "cat allergies"}
{"db_id": "allergy_1", "sub_sql": "select stuid from has_allergy", "question": "Show all student IDs who have at least two allergies.", "sub_sql_type": "null col col col", "sub_sql_new": "select stuid from has_allergy", "query": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2", "sub_ques": "show all student ids"}
{"db_id": "allergy_1", "sub_sql": "group by stuid having count has_allergy >= 2", "question": "Show all student IDs who have at least two allergies.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2", "sub_ques": "student ids who have at least two allergies"}
{"db_id": "allergy_1", "sub_sql": "select stuid from has_allergy", "question": "What are the students ids of students who have more than one allergy?", "sub_sql_type": "null col col col", "sub_sql_new": "select stuid from has_allergy", "query": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2", "sub_ques": "what are the students ids"}
{"db_id": "allergy_1", "sub_sql": "group by stuid having count allergy >= 2", "question": "What are the students ids of students who have more than one allergy?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2", "sub_ques": "students ids of students who have more than one allergy"}
{"db_id": "allergy_1", "sub_sql": "where t2.sex = f", "question": "How many female students have milk or egg allergies?", "sub_sql_type": "null col op op value", "sub_sql_new": "where sex equal to f", "query": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \\\\\\\"F\\\\\\\" AND T1.allergy  =  \\\\\\\"Milk\\\\\\\" OR T1.allergy  =  \\\\\\\"Eggs\\\\\\\"", "sub_ques": "female students"}
{"db_id": "allergy_1", "sub_sql": "select count student ", "question": "How many students who are female are allergic to milk or eggs?", "sub_sql_type": "null agg col", "sub_sql_new": "select count student  col", "query": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \\\\\\\"F\\\\\\\" AND T1.allergy  =  \\\\\\\"Milk\\\\\\\" OR T1.allergy  =  \\\\\\\"Eggs\\\\\\\"", "sub_ques": "how many students"}
{"db_id": "allergy_1", "sub_sql": "where t2.sex = f", "question": "How many students who are female are allergic to milk or eggs?", "sub_sql_type": "null col op op value", "sub_sql_new": "where sex equal to f", "query": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \\\\\\\"F\\\\\\\" AND T1.allergy  =  \\\\\\\"Milk\\\\\\\" OR T1.allergy  =  \\\\\\\"Eggs\\\\\\\"", "sub_ques": "students who are female"}
{"db_id": "allergy_1", "sub_sql": "select count student", "question": "How many students have a food allergy?", "sub_sql_type": "null agg col", "sub_sql_new": "select count student", "query": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \\\\\\\"food\\\\\\\"", "sub_ques": "how many students"}
{"db_id": "allergy_1", "sub_sql": "where t2.allergytype = food", "question": "How many students have a food allergy?", "sub_sql_type": "null col op op value", "sub_sql_new": "where allergytype equal to food", "query": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \\\\\\\"food\\\\\\\"", "sub_ques": "food allergy"}
{"db_id": "allergy_1", "sub_sql": "select count student", "question": "How many students are affected by food related allergies?", "sub_sql_type": "null agg col", "sub_sql_new": "select count student", "query": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \\\\\\\"food\\\\\\\"", "sub_ques": "how many students"}
{"db_id": "allergy_1", "sub_sql": "where t2.allergytype = food", "question": "How many students are affected by food related allergies?", "sub_sql_type": "null col op op value", "sub_sql_new": "where allergytype equal to food", "query": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \\\\\\\"food\\\\\\\"", "sub_ques": "food related allergies"}
{"db_id": "allergy_1", "sub_sql": "select allergy from has_allergy", "question": "Which allergy has most number of students affected?", "sub_sql_type": "null col col col", "sub_sql_new": "select allergy from has_allergy", "query": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1", "sub_ques": "which allergy"}
{"db_id": "allergy_1", "sub_sql": "group by allergy order by count student desc limit 1", "question": "Which allergy has most number of students affected?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count student desc limit 1", "query": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1", "sub_ques": "allergy has most number number of students affected"}
{"db_id": "allergy_1", "sub_sql": "select allergy from has_allergy", "question": "Which allergy is the most common?", "sub_sql_type": "null col col col", "sub_sql_new": "select allergy from has_allergy", "query": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1", "sub_ques": "which allergy"}
{"db_id": "allergy_1", "sub_sql": "group by allergy order by count student desc limit 1", "question": "Which allergy is the most common?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count student desc limit 1", "query": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1", "sub_ques": "allergy is the most common"}
{"db_id": "allergy_1", "sub_sql": "select allergy , count student group by allergy", "question": "Show all allergies with number of students affected.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select allergy , count student", "query": "SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy", "sub_ques": "show all allergies with number of students affected"}
{"db_id": "allergy_1", "sub_sql": "select allergy , count student group by allergy", "question": "How many students have each different allergy?", "sub_sql_type": "null col null agg col", "sub_sql_new": "select allergy , count student", "query": "SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy", "sub_ques": "how many students have each different allergy"}
{"db_id": "allergy_1", "sub_sql": "select t2.allergytype , count student group by t2.allergytype", "question": "Show all allergy type with number of students affected.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select allergytype , count student", "query": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype", "sub_ques": "show all allergy type with number of students affected"}
{"db_id": "allergy_1", "sub_sql": "select t2.allergytype , count student group by t2.allergytype", "question": "How many students are affected by each allergy type?", "sub_sql_type": "null col null agg col", "sub_sql_new": "select allergytype , count student", "query": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype", "sub_ques": "how many students are affected by each allergy type"}
{"db_id": "allergy_1", "sub_sql": "select t1.allergy , t1.allergytype from allergy_type", "question": "What are the allergies and their types that the student with first name Lisa has? And order the result by name of allergies.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select allergy , allergytype from allergy_type", "query": "SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  \\\\\\\"Lisa\\\\\\\" ORDER BY T1.Allergy", "sub_ques": "what are the allergies and their types"}
{"db_id": "allergy_1", "sub_sql": "where t3.fname = lisa", "question": "What are the allergies and their types that the student with first name Lisa has? And order the result by name of allergies.", "sub_sql_type": "null col op op value", "sub_sql_new": "where fname equal to lisa", "query": "SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  \\\\\\\"Lisa\\\\\\\" ORDER BY T1.Allergy", "sub_ques": "student with first name lisa"}
{"db_id": "allergy_1", "sub_sql": "order by t1.allergy", "question": "What are the allergies and their types that the student with first name Lisa has? And order the result by name of allergies.", "sub_sql_type": "null null col", "sub_sql_new": "order by allergy", "query": "SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  \\\\\\\"Lisa\\\\\\\" ORDER BY T1.Allergy", "sub_ques": "and order the result by name of allergies"}
{"db_id": "allergy_1", "sub_sql": "select t1.allergy , t1.allergytype from allergy_type", "question": "What are the allergies the girl named Lisa has? And what are the types of them? Order the result by allergy names.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select allergy , allergytype from allergy_type", "query": "SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  \\\\\\\"Lisa\\\\\\\" ORDER BY T1.Allergy", "sub_ques": "what are the allergies and what are the types of them ?"}
{"db_id": "allergy_1", "sub_sql": "where t3.fname = lisa", "question": "What are the allergies the girl named Lisa has? And what are the types of them? Order the result by allergy names.", "sub_sql_type": "null col op op value", "sub_sql_new": "where fname equal to lisa", "query": "SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  \\\\\\\"Lisa\\\\\\\" ORDER BY T1.Allergy", "sub_ques": "the girl named lisa"}
{"db_id": "allergy_1", "sub_sql": "order by t1.allergy", "question": "What are the allergies the girl named Lisa has? And what are the types of them? Order the result by allergy names.", "sub_sql_type": "null null col", "sub_sql_new": "order by allergy", "query": "SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  \\\\\\\"Lisa\\\\\\\" ORDER BY T1.Allergy", "sub_ques": "order the result by allergy"}
{"db_id": "allergy_1", "sub_sql": "select fname , lname from student", "question": "List the first and last name of the students who do not have any food type allergy.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select fname , lname from student", "query": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \\\\\\\"food\\\\\\\")", "sub_ques": "list the first and last name of the students"}
{"db_id": "allergy_1", "sub_sql": "where t2.allergytype = food", "question": "List the first and last name of the students who do not have any food type allergy.", "sub_sql_type": "null col op op value", "sub_sql_new": "where allergytype equal to food", "query": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \\\\\\\"food\\\\\\\")", "sub_ques": "food type allergy"}
{"db_id": "allergy_1", "sub_sql": "select fname , lname from student", "question": "What is the full name of each student who is not allergic to any type of food.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select fname , lname from student", "query": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \\\\\\\"food\\\\\\\")", "sub_ques": "what is the full name of each student"}
{"db_id": "allergy_1", "sub_sql": "where t2.allergytype = food", "question": "What is the full name of each student who is not allergic to any type of food.", "sub_sql_type": "null col op op value", "sub_sql_new": "where allergytype equal to food", "query": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \\\\\\\"food\\\\\\\")", "sub_ques": "allergic to any type of food"}
{"db_id": "allergy_1", "sub_sql": "select count student", "question": "Find the number of male (sex is 'M') students who have some food type allery.", "sub_sql_type": "null agg col", "sub_sql_new": "select count student", "query": "SELECT count(*) FROM Student WHERE sex  =  \\\\\\\"M\\\\\\\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \\\\\\\"food\\\\\\\")", "sub_ques": "find the number of students"}
{"db_id": "allergy_1", "sub_sql": "where sex = m", "question": "Find the number of male (sex is 'M') students who have some food type allery.", "sub_sql_type": "null col op op value", "sub_sql_new": "where sex equal to m", "query": "SELECT count(*) FROM Student WHERE sex  =  \\\\\\\"M\\\\\\\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \\\\\\\"food\\\\\\\")", "sub_ques": "sex is 'm ' ) students"}
{"db_id": "allergy_1", "sub_sql": "where t2.allergytype = food", "question": "Find the number of male (sex is 'M') students who have some food type allery.", "sub_sql_type": "null col op op value", "sub_sql_new": "where allergytype equal to food", "query": "SELECT count(*) FROM Student WHERE sex  =  \\\\\\\"M\\\\\\\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \\\\\\\"food\\\\\\\")", "sub_ques": "food type allery"}
{"db_id": "allergy_1", "sub_sql": "select count student", "question": "How many male students (sex is 'M') are allergic to any type of food?", "sub_sql_type": "null agg col", "sub_sql_new": "select count student", "query": "SELECT count(*) FROM Student WHERE sex  =  \\\\\\\"M\\\\\\\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \\\\\\\"food\\\\\\\")", "sub_ques": "how many students"}
{"db_id": "allergy_1", "sub_sql": "where sex = m", "question": "How many male students (sex is 'M') are allergic to any type of food?", "sub_sql_type": "null col op op value", "sub_sql_new": "where sex equal to m", "query": "SELECT count(*) FROM Student WHERE sex  =  \\\\\\\"M\\\\\\\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \\\\\\\"food\\\\\\\")", "sub_ques": "male students sex is 'm'"}
{"db_id": "allergy_1", "sub_sql": "where t2.allergytype = food", "question": "How many male students (sex is 'M') are allergic to any type of food?", "sub_sql_type": "null col op op value", "sub_sql_new": "where allergytype equal to food", "query": "SELECT count(*) FROM Student WHERE sex  =  \\\\\\\"M\\\\\\\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \\\\\\\"food\\\\\\\")", "sub_ques": "allergic to any type of food"}
{"db_id": "allergy_1", "sub_sql": "select distinct t1.fname , t1.city_code from student", "question": "Find the different first names and cities of the students who have allergy to milk or cat.", "sub_sql_type": "null col col null col col col col", "sub_sql_new": "select distinct fname , city code from student", "query": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \\\\\\\"Milk\\\\\\\" OR T2.Allergy  =  \\\\\\\"Cat\\\\\\\"", "sub_ques": "find the different first names and cities of the students"}
{"db_id": "allergy_1", "sub_sql": "where t2.allergy = milk", "question": "Find the different first names and cities of the students who have allergy to milk or cat.", "sub_sql_type": "null col op op value", "sub_sql_new": "where allergy equal to milk", "query": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \\\\\\\"Milk\\\\\\\" OR T2.Allergy  =  \\\\\\\"Cat\\\\\\\"", "sub_ques": "allergy to milk"}
{"db_id": "allergy_1", "sub_sql": "select distinct t1.fname , t1.city_code from student", "question": "What are the distinct first names and cities of the students who have allergy either to milk or to cat?", "sub_sql_type": "null col col null col col col col", "sub_sql_new": "select distinct fname , city code from student", "query": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \\\\\\\"Milk\\\\\\\" OR T2.Allergy  =  \\\\\\\"Cat\\\\\\\"", "sub_ques": "what are the distinct first names and cities of the students"}
{"db_id": "allergy_1", "sub_sql": "where t2.allergy = milk", "question": "What are the distinct first names and cities of the students who have allergy either to milk or to cat?", "sub_sql_type": "null col op op value", "sub_sql_new": "where allergy equal to milk", "query": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \\\\\\\"Milk\\\\\\\" OR T2.Allergy  =  \\\\\\\"Cat\\\\\\\"", "sub_ques": "allergy either to milk"}
{"db_id": "allergy_1", "sub_sql": "select count student", "question": "Find the number of students who are older than 18 and do not have allergy to either food or animal.", "sub_sql_type": "null agg col", "sub_sql_new": "select count student", "query": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \\\\\\\"food\\\\\\\" OR T2.allergytype  =  \\\\\\\"animal\\\\\\\")", "sub_ques": "the number of students"}
{"db_id": "allergy_1", "sub_sql": "where age > 18", "question": "Find the number of students who are older than 18 and do not have allergy to either food or animal.", "sub_sql_type": "null col op op value", "sub_sql_new": "where age more than 18", "query": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \\\\\\\"food\\\\\\\" OR T2.allergytype  =  \\\\\\\"animal\\\\\\\")", "sub_ques": "students who are older than 18"}
{"db_id": "allergy_1", "sub_sql": "where t2.allergytype = food", "question": "Find the number of students who are older than 18 and do not have allergy to either food or animal.", "sub_sql_type": "null col op op value", "sub_sql_new": "where allergytype equal to food", "query": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \\\\\\\"food\\\\\\\" OR T2.allergytype  =  \\\\\\\"animal\\\\\\\")", "sub_ques": "allergy to either food"}
{"db_id": "allergy_1", "sub_sql": "select count student", "question": "How many students are over 18 and do not have allergy to food type or animal type?", "sub_sql_type": "null agg col", "sub_sql_new": "select count student", "query": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \\\\\\\"food\\\\\\\" OR T2.allergytype  =  \\\\\\\"animal\\\\\\\")", "sub_ques": "how many students"}
{"db_id": "allergy_1", "sub_sql": "where age > 18", "question": "How many students are over 18 and do not have allergy to food type or animal type?", "sub_sql_type": "null col op op value", "sub_sql_new": "where age more than 18", "query": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \\\\\\\"food\\\\\\\" OR T2.allergytype  =  \\\\\\\"animal\\\\\\\")", "sub_ques": "students are over 18"}
{"db_id": "allergy_1", "sub_sql": "where t2.allergytype = food", "question": "How many students are over 18 and do not have allergy to food type or animal type?", "sub_sql_type": "null col op op value", "sub_sql_new": "where allergytype equal to food", "query": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \\\\\\\"food\\\\\\\" OR T2.allergytype  =  \\\\\\\"animal\\\\\\\")", "sub_ques": "allergy to food"}
{"db_id": "allergy_1", "sub_sql": "select fname , major from student", "question": "Find the first name and major of the students who are not allegry to soy.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select fname , major from student", "query": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \\\\\\\"Soy\\\\\\\")", "sub_ques": "find the first name and major of the students"}
{"db_id": "allergy_1", "sub_sql": "where allergy = soy", "question": "Find the first name and major of the students who are not allegry to soy.", "sub_sql_type": "null col op op value", "sub_sql_new": "where allergy equal to soy", "query": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \\\\\\\"Soy\\\\\\\")", "sub_ques": "allegry to soy"}
{"db_id": "allergy_1", "sub_sql": "select fname , major from student", "question": "What are the first name and major of the students who are able to consume soy?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select fname , major from student", "query": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \\\\\\\"Soy\\\\\\\")", "sub_ques": "what are the first name and major of the students"}
{"db_id": "allergy_1", "sub_sql": "where allergy = soy", "question": "What are the first name and major of the students who are able to consume soy?", "sub_sql_type": "null col op op value", "sub_sql_new": "where allergy equal to soy", "query": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \\\\\\\"Soy\\\\\\\")", "sub_ques": "who are able to consume soy"}
{"db_id": "store_1", "sub_sql": "select billing_country , count invoices group by billing_country", "question": "A list of the top 5 countries by number of invoices. List country name and number of invoices.", "sub_sql_type": "null col col null agg col", "sub_sql_new": "select billing country , count invoices", "query": "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;", "sub_ques": "list country name and number of invoices"}
{"db_id": "store_1", "sub_sql": "group by billing_country order by count invoices desc limit 5", "question": "A list of the top 5 countries by number of invoices. List country name and number of invoices.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count invoices desc limit 5", "query": "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;", "sub_ques": "the top 5 countries by number of invoices"}
{"db_id": "store_1", "sub_sql": "select billing_country , count * from invoices group by billing_country", "question": "What are the top 5 countries by number of invoices and how many do they have?", "sub_sql_type": "null col col null agg col col col", "sub_sql_new": "select billing country , count * from invoices", "query": "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;", "sub_ques": "what are the countries by number of invoices and how many do they have"}
{"db_id": "store_1", "sub_sql": "group by billing_country order by count invoices desc limit 5", "question": "What are the top 5 countries by number of invoices and how many do they have?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count invoices desc limit 5", "query": "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;", "sub_ques": "the top 5 countries by number of invoices"}
{"db_id": "store_1", "sub_sql": "select billing_country , sum total from invoices", "question": "A list of the top 8 countries by gross/total invoice size. List country name and gross invoice size.", "sub_sql_type": "null col col null agg col col col", "sub_sql_new": "select billing country , sum total from invoices", "query": "SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8;", "sub_ques": "list country name and gross invoice"}
{"db_id": "store_1", "sub_sql": "group by billing_country order by sum total desc limit 8", "question": "A list of the top 8 countries by gross/total invoice size. List country name and gross invoice size.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by sum total desc limit 8", "query": "SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8;", "sub_ques": "the top 8 countries by gross/total invoice size"}
{"db_id": "store_1", "sub_sql": "select billing_country , sum total from invoices", "question": "What are the names of the top 8 countries by total invoice size and what are those sizes?", "sub_sql_type": "null col col null agg col col col", "sub_sql_new": "select billing country , sum total from invoices", "query": "SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8;", "sub_ques": "what are the names and what are those sizes"}
{"db_id": "store_1", "sub_sql": "group by billing_country order by sum total desc limit 8", "question": "What are the names of the top 8 countries by total invoice size and what are those sizes?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by sum total desc limit 8", "query": "SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8;", "sub_ques": "the names of the top 8 countries by total invoice size"}
{"db_id": "store_1", "sub_sql": "select billing_country , avg total from invoices", "question": "A list of the top 10 countries by average invoice size. List country name and average invoice size.", "sub_sql_type": "null col col null agg col col col", "sub_sql_new": "select billing country , avg total from invoices", "query": "SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10;", "sub_ques": "list country name and average invoice"}
{"db_id": "store_1", "sub_sql": "group by billing_country order by avg total desc limit 10", "question": "A list of the top 10 countries by average invoice size. List country name and average invoice size.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by avg total desc limit 10", "query": "SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10;", "sub_ques": "the top 10 countries by average invoice size"}
{"db_id": "store_1", "sub_sql": "select billing_country , avg total from invoices", "question": "What are the names of the countries and average invoice size of the top countries by size?", "sub_sql_type": "null col col null agg col col col", "sub_sql_new": "select billing country , avg total from invoices", "query": "SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 1;", "sub_ques": "what are the names of the countries and average invoice size"}
{"db_id": "store_1", "sub_sql": "group by billing_country order by avg total desc limit 10", "question": "What are the names of the countries and average invoice size of the top countries by size?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by avg total desc limit 10", "query": "SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 1;", "sub_ques": "the countries and average invoice size of the top countries by size"}
{"db_id": "store_1", "sub_sql": "select t1.first_name , t1.last_name from customers", "question": "Find out 5 customers who most recently purchased something. List customers' first and last name.", "sub_sql_type": "null col col null col col col col", "sub_sql_new": "select first name , last name from customers", "query": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;", "sub_ques": "list customers ' first and last name"}
{"db_id": "store_1", "sub_sql": "order by t2.invoice_date desc limit 5", "question": "Find out 5 customers who most recently purchased something. List customers' first and last name.", "sub_sql_type": "null null col col null null limv", "sub_sql_new": "order by invoice date desc limit 5", "query": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;", "sub_ques": "5 customers who most recently purchased"}
{"db_id": "store_1", "sub_sql": "select t1.first_name , t1.last_name from customers", "question": "What are the first and last names of the 5 customers who purchased something most recently?", "sub_sql_type": "null col col null col col col col", "sub_sql_new": "select first name , last name from customers", "query": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;", "sub_ques": "what are the first and last names"}
{"db_id": "store_1", "sub_sql": "order by t2.invoice_date desc limit 5", "question": "What are the first and last names of the 5 customers who purchased something most recently?", "sub_sql_type": "null null col col null null limv", "sub_sql_new": "order by invoice date desc limit 5", "query": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;", "sub_ques": "the 5 customers who purchased something most recently"}
{"db_id": "store_1", "sub_sql": "select t1.first_name , t1.last_name , count orders customers group by t1.id", "question": "Find out the top 10 customers by total number of orders. List customers' first and last name and the number of total orders.", "sub_sql_type": "null col col null col col null agg col col", "sub_sql_new": "select first name , last name , count orders customers", "query": "SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;", "sub_ques": "total number of orders . list customers ' first and last name"}
{"db_id": "store_1", "sub_sql": "group by t1.id order by count orders desc limit 10", "question": "Find out the top 10 customers by total number of orders. List customers' first and last name and the number of total orders.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count orders desc limit 10", "query": "SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;", "sub_ques": "the top 10 customers by total number of orders"}
{"db_id": "store_1", "sub_sql": "select t1.first_name , t1.last_name , count * from customers group by t1.id", "question": "What are the top 10 customers' first and last names by total number of orders and how many orders did they make?", "sub_sql_type": "null col col null col col null agg col col col", "sub_sql_new": "select first name , last name , count * from customers", "query": "SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;", "sub_ques": "What are the top 10 customers first and last names and how many orders did they make"}
{"db_id": "store_1", "sub_sql": "group by t1.id order by count orders desc limit 10", "question": "What are the top 10 customers' first and last names by total number of orders and how many orders did they make?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count orders desc limit 10", "query": "SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;", "sub_ques": "the top 10 customers by total number of orders"}
{"db_id": "store_1", "sub_sql": "select t1.first_name , t1.last_name , sum t2.total from customers , invoices", "question": "List the top 10 customers by total gross sales. List customers' first and last name and total gross sales.", "sub_sql_type": "null col col null col col null agg col col col null col", "sub_sql_new": "select first name , last name , sum total from customers , invoices", "query": "SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10;", "sub_ques": "List customers' first and last name and total gross sales"}
{"db_id": "store_1", "sub_sql": "group by t1.id order by sum t2.total desc limit 10", "question": "List the top 10 customers by total gross sales. List customers' first and last name and total gross sales.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by sum total desc limit 10", "query": "SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10;", "sub_ques": "the top 10 customers by total gross sales"}
{"db_id": "store_1", "sub_sql": "select t1.first_name , t1.last_name , sum t2.total from customers , invoices", "question": "What are the top 10 customers' first and last names with the highest gross sales, and also what are the sales?", "sub_sql_type": "null col col null col col null agg col col col null col", "sub_sql_new": "select first name , last name , sum total from customers , invoices", "query": "SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10;", "sub_ques": "first and last names , and also what are the sales"}
{"db_id": "store_1", "sub_sql": "group by t1.id order by sum t2.total desc limit 10", "question": "What are the top 10 customers' first and last names with the highest gross sales, and also what are the sales?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by sum total desc limit 10", "query": "SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10;", "sub_ques": "the top 10 customers with the highest gross sales"}
{"db_id": "store_1", "sub_sql": "select t1.name , count * from genres group by t1.id", "question": "List the top 5 genres by number of tracks. List genres name and total tracks.", "sub_sql_type": "null col null agg col col col", "sub_sql_new": "select seq , count * from genres", "query": "SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5;", "sub_ques": "list genres name and total tracks"}
{"db_id": "store_1", "sub_sql": "group by t1.id order by count tracks desc limit 5", "question": "List the top 5 genres by number of tracks. List genres name and total tracks.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count tracks desc limit 5", "query": "SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5;", "sub_ques": "the top 5 genres by number of tracks"}
{"db_id": "store_1", "sub_sql": "select t1.name , count tracks from genres group by t1.id", "question": "How many tracks does each genre have and what are the names of the top 5?", "sub_sql_type": "null col null agg col col col", "sub_sql_new": "select seq , count tracks from genres", "query": "SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5;", "sub_ques": "how many tracks does each genre have and what are the names"}
{"db_id": "store_1", "sub_sql": "group by t1.id order by count tracks desc limit 5", "question": "How many tracks does each genre have and what are the names of the top 5?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count tracks desc limit 5", "query": "SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5;", "sub_ques": "each genre have and what are the names of the top 5"}
{"db_id": "store_1", "sub_sql": "select title from albums", "question": "List every album's title.", "sub_sql_type": "null col col col", "sub_sql_new": "select title from albums", "query": "SELECT title FROM albums;", "sub_ques": "list every album 's title"}
{"db_id": "store_1", "sub_sql": "select title from albums", "question": "What are the titles of all the albums?", "sub_sql_type": "null col col col", "sub_sql_new": "select title from albums", "query": "SELECT title FROM albums;", "sub_ques": "what are the titles of all the albums"}
{"db_id": "store_1", "sub_sql": "select title from albums", "question": "List every album ordered by album title in ascending order.", "sub_sql_type": "null col col col", "sub_sql_new": "select title from albums", "query": "SELECT title FROM albums ORDER BY title;", "sub_ques": "list every album "}
{"db_id": "store_1", "sub_sql": "order by title", "question": "List every album ordered by album title in ascending order.", "sub_sql_type": "null null col", "sub_sql_new": "order by title", "query": "SELECT title FROM albums ORDER BY title;", "sub_ques": "ordered by album title in ascending order"}
{"db_id": "store_1", "sub_sql": "select title from albums", "question": "What are the titles of all the albums alphabetically ascending?", "sub_sql_type": "null col col col", "sub_sql_new": "select title from albums", "query": "SELECT title FROM albums ORDER BY title;", "sub_ques": "what are the titles of all the albums"}
{"db_id": "store_1", "sub_sql": "order by title", "question": "What are the titles of all the albums alphabetically ascending?", "sub_sql_type": "null null col", "sub_sql_new": "order by title", "query": "SELECT title FROM albums ORDER BY title;", "sub_ques": "the titles of all the albums alphabetically ascending"}
{"db_id": "store_1", "sub_sql": "select title from albums", "question": "List every album whose title starts with A in alphabetical order.", "sub_sql_type": "null col col col", "sub_sql_new": "select title from albums", "query": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;", "sub_ques": "list every album whose title"}
{"db_id": "store_1", "sub_sql": "where title like a", "question": "List every album whose title starts with A in alphabetical order.", "sub_sql_type": "null col op value", "sub_sql_new": "where title like a", "query": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;", "sub_ques": "album whose title starts with a"}
{"db_id": "store_1", "sub_sql": "order by title", "question": "List every album whose title starts with A in alphabetical order.", "sub_sql_type": "null null col", "sub_sql_new": "order by title", "query": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;", "sub_ques": "title in alphabetical order"}
{"db_id": "store_1", "sub_sql": "select title from albums", "question": "What are the titles of all albums that start with A in alphabetical order?", "sub_sql_type": "null col col col", "sub_sql_new": "select title from albums", "query": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;", "sub_ques": "what are the titles of all albums"}
{"db_id": "store_1", "sub_sql": "where title like a", "question": "What are the titles of all albums that start with A in alphabetical order?", "sub_sql_type": "null col op value", "sub_sql_new": "where title like a", "query": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;", "sub_ques": "titles of all albums that start with a"}
{"db_id": "store_1", "sub_sql": "order by title", "question": "What are the titles of all albums that start with A in alphabetical order?", "sub_sql_type": "null null col", "sub_sql_new": "order by title", "query": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;", "sub_ques": "the titles of all albums in alphabetical order"}
{"db_id": "store_1", "sub_sql": "select t1.first_name , t1.last_name from customers", "question": "List the customers first and last name of 10 least expensive invoices.", "sub_sql_type": "null col col null col col col col", "sub_sql_new": "select first name , last name from customers", "query": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10;", "sub_ques": "list the customers first and last name"}
{"db_id": "store_1", "sub_sql": "order by total limit 10", "question": "List the customers first and last name of 10 least expensive invoices.", "sub_sql_type": "null null col null limv", "sub_sql_new": "order by total limit 10", "query": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10;", "sub_ques": "10 least expensive invoices"}
{"db_id": "store_1", "sub_sql": "select t1.first_name , t1.last_name from customers", "question": "What are the first and last names of the customers with the 10 cheapest invoices?", "sub_sql_type": "null col col null col col col col", "sub_sql_new": "select first name , last name from customers", "query": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10;", "sub_ques": "what are the first and last names of the customers"}
{"db_id": "store_1", "sub_sql": "order by total limit 10", "question": "What are the first and last names of the customers with the 10 cheapest invoices?", "sub_sql_type": "null null col null limv", "sub_sql_new": "order by total limit 10", "query": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10;", "sub_ques": "the 10 cheapest invoices"}
{"db_id": "store_1", "sub_sql": "select sum total from invoices", "question": "List total amount of  invoice from Chicago, IL.", "sub_sql_type": "null agg col col col", "sub_sql_new": "select sum total from invoices", "query": "SELECT sum(total) FROM invoices WHERE billing_city  =  \\\\\\\"Chicago\\\\\\\" AND billing_state  =  \\\\\\\"IL\\\\\\\";", "sub_ques": "list total amount of invoice"}
{"db_id": "store_1", "sub_sql": "where billing_city = chicago", "question": "List total amount of  invoice from Chicago, IL.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where billing city equal to chicago", "query": "SELECT sum(total) FROM invoices WHERE billing_city  =  \\\\\\\"Chicago\\\\\\\" AND billing_state  =  \\\\\\\"IL\\\\\\\";", "sub_ques": "invoice from chicago"}
{"db_id": "store_1", "sub_sql": "select sum total from invoices", "question": "What are the total amount of money in the invoices billed from Chicago, Illinois?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select sum total from invoices", "query": "SELECT sum(total) FROM invoices WHERE billing_city  =  \\\\\\\"Chicago\\\\\\\" AND billing_state  =  \\\\\\\"IL\\\\\\\";", "sub_ques": "what are the total amount of money in the invoices"}
{"db_id": "store_1", "sub_sql": "where billing_city = chicago", "question": "What are the total amount of money in the invoices billed from Chicago, Illinois?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where billing city equal to chicago", "query": "SELECT sum(total) FROM invoices WHERE billing_city  =  \\\\\\\"Chicago\\\\\\\" AND billing_state  =  \\\\\\\"IL\\\\\\\";", "sub_ques": "invoices billed from chicago"}
{"db_id": "store_1", "sub_sql": "select count * from invoices", "question": "List the number of invoices from Chicago, IL.", "sub_sql_type": "null agg col col col", "sub_sql_new": "select count * from invoices", "query": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \\\\\\\"Chicago\\\\\\\" AND billing_state  =  \\\\\\\"IL\\\\\\\";", "sub_ques": "list the number of invoices"}
{"db_id": "store_1", "sub_sql": "where billing_city = chicago", "question": "List the number of invoices from Chicago, IL.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where billing city equal to chicago", "query": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \\\\\\\"Chicago\\\\\\\" AND billing_state  =  \\\\\\\"IL\\\\\\\";", "sub_ques": "invoices from chicago"}
{"db_id": "store_1", "sub_sql": "select count invoices", "question": "How many invoices were billed from Chicago, IL?", "sub_sql_type": "null agg col", "sub_sql_new": "select count invoices", "query": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \\\\\\\"Chicago\\\\\\\" AND billing_state  =  \\\\\\\"IL\\\\\\\";", "sub_ques": "how many invoices"}
{"db_id": "store_1", "sub_sql": "where billing_city = chicago", "question": "How many invoices were billed from Chicago, IL?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where billing city equal to chicago", "query": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \\\\\\\"Chicago\\\\\\\" AND billing_state  =  \\\\\\\"IL\\\\\\\";", "sub_ques": "invoices were billed from chicago"}
{"db_id": "store_1", "sub_sql": "select billing_state , count invoices group by billing_state", "question": "List the number of invoices from the US, grouped by state.", "sub_sql_type": "null col col null agg col", "sub_sql_new": "select billing state , count invoices", "query": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \\\\\\\"USA\\\\\\\" GROUP BY billing_state;", "sub_ques": "list the number of invoices from the us , grouped by state"}
{"db_id": "store_1", "sub_sql": "where billing_country = usa", "question": "List the number of invoices from the US, grouped by state.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where billing country equal to usa", "query": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \\\\\\\"USA\\\\\\\" GROUP BY billing_state;", "sub_ques": "invoices from the us"}
{"db_id": "store_1", "sub_sql": "select billing_state , count invoices group by billing_state", "question": "How many invoices were billed from each state?", "sub_sql_type": "null col col null agg col", "sub_sql_new": "select billing state , count invoices", "query": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \\\\\\\"USA\\\\\\\" GROUP BY billing_state;", "sub_ques": "how many invoices were billed from each state"}
{"db_id": "store_1", "sub_sql": "where billing_country = usa", "question": "How many invoices were billed from each state?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where billing country equal to usa", "query": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \\\\\\\"USA\\\\\\\" GROUP BY billing_state;", "sub_ques": "invoices were billed"}
{"db_id": "store_1", "sub_sql": "where billing_country = usa", "question": "List the state in the US with the most invoices.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where billing country equal to usa", "query": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \\\\\\\"USA\\\\\\\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;", "sub_ques": "in the us"}
{"db_id": "store_1", "sub_sql": "group by billing_state order by count invoices desc limit 1", "question": "List the state in the US with the most invoices.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count invoices desc limit 1", "query": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \\\\\\\"USA\\\\\\\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;", "sub_ques": "the state with the most invoices"}
{"db_id": "store_1", "sub_sql": "group by billing_state order by count invoices desc limit 1", "question": "What are the states with the most invoices?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count invoices desc limit 1", "query": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \\\\\\\"USA\\\\\\\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;", "sub_ques": "the states with the most invoices"}
{"db_id": "store_1", "sub_sql": "select billing_state , sum total from invoices", "question": "List the number of invoices and the invoice total from California.", "sub_sql_type": "null col col null agg col col col", "sub_sql_new": "select billing state , sum total from invoices", "query": "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \\\\\\\"CA\\\\\\\";", "sub_ques": "list the number of invoices and the invoice total from california"}
{"db_id": "store_1", "sub_sql": "where billing_state = ca", "question": "List the number of invoices and the invoice total from California.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where billing state equal to ca", "query": "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \\\\\\\"CA\\\\\\\";", "sub_ques": "from california"}
{"db_id": "store_1", "sub_sql": "select count invoices , sum total from invoices", "question": "What is the number of invoices and total money billed in them from CA?", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select count invoices , sum total from invoices", "query": "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \\\\\\\"CA\\\\\\\";", "sub_ques": "what is the number of invoices and total money billed"}
{"db_id": "store_1", "sub_sql": "where billing_state = ca", "question": "What is the number of invoices and total money billed in them from CA?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where billing state equal to ca", "query": "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \\\\\\\"CA\\\\\\\";", "sub_ques": "from ca"}
{"db_id": "store_1", "sub_sql": "select t1.title from albums", "question": "List Aerosmith's albums.", "sub_sql_type": "null col col col", "sub_sql_new": "select title from albums", "query": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \\\\\\\"Aerosmith\\\\\\\";", "sub_ques": "list aerosmith 's albums"}
{"db_id": "store_1", "sub_sql": "where t2.name = aerosmith", "question": "List Aerosmith's albums.", "sub_sql_type": "null col op op value", "sub_sql_new": "where seq equal to aerosmith", "query": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \\\\\\\"Aerosmith\\\\\\\";", "sub_ques": "aerosmith"}
{"db_id": "store_1", "sub_sql": "select t1.title from albums", "question": "What are the titles of all the Aerosmith albums?", "sub_sql_type": "null col col col", "sub_sql_new": "select title from albums", "query": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \\\\\\\"Aerosmith\\\\\\\";", "sub_ques": "what are the titles"}
{"db_id": "store_1", "sub_sql": "where t2.name = aerosmith", "question": "What are the titles of all the Aerosmith albums?", "sub_sql_type": "null col op op value", "sub_sql_new": "where seq equal to aerosmith", "query": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \\\\\\\"Aerosmith\\\\\\\";", "sub_ques": "the aerosmith albums"}
{"db_id": "store_1", "sub_sql": "select count albums", "question": "How many albums does Billy Cobham has?", "sub_sql_type": "null agg col", "sub_sql_new": "select count albums", "query": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \\\\\\\"Billy Cobham\\\\\\\";", "sub_ques": "how many albums"}
{"db_id": "store_1", "sub_sql": "where t2.name = billycobham", "question": "How many albums does Billy Cobham has?", "sub_sql_type": "null col op op value", "sub_sql_new": "where seq equal to billycobham", "query": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \\\\\\\"Billy Cobham\\\\\\\";", "sub_ques": "billy cobham has"}
{"db_id": "store_1", "sub_sql": "select count albums", "question": "How many albums has Billy Cobam released?", "sub_sql_type": "null agg col", "sub_sql_new": "select count albums", "query": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \\\\\\\"Billy Cobham\\\\\\\";", "sub_ques": "how many albums"}
{"db_id": "store_1", "sub_sql": "where t2.name = billycobham", "question": "How many albums has Billy Cobam released?", "sub_sql_type": "null col op op value", "sub_sql_new": "where seq equal to billycobham", "query": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \\\\\\\"Billy Cobham\\\\\\\";", "sub_ques": "billy cobam released"}
{"db_id": "store_1", "sub_sql": "select company from customers", "question": "Eduardo Martins is a customer at which company?", "sub_sql_type": "null col col col", "sub_sql_new": "select company from customers", "query": "SELECT company FROM customers WHERE first_name = \\\\\\\"Eduardo\\\\\\\" AND last_name = \\\\\\\"Martins\\\\\\\";", "sub_ques": "which company"}
{"db_id": "store_1", "sub_sql": "where first_name = eduardo", "question": "Eduardo Martins is a customer at which company?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where first name equal to eduardo", "query": "SELECT company FROM customers WHERE first_name = \\\\\\\"Eduardo\\\\\\\" AND last_name = \\\\\\\"Martins\\\\\\\";", "sub_ques": "eduardo martins is a customer"}
{"db_id": "store_1", "sub_sql": "select company from customers", "question": "What is the company where Eduardo Martins is a customer?", "sub_sql_type": "null col col col", "sub_sql_new": "select company from customers", "query": "SELECT company FROM customers WHERE first_name = \\\\\\\"Eduardo\\\\\\\" AND last_name = \\\\\\\"Martins\\\\\\\";", "sub_ques": "what is the company"}
{"db_id": "store_1", "sub_sql": "where first_name = eduardo", "question": "What is the company where Eduardo Martins is a customer?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where first name equal to eduardo", "query": "SELECT company FROM customers WHERE first_name = \\\\\\\"Eduardo\\\\\\\" AND last_name = \\\\\\\"Martins\\\\\\\";", "sub_ques": "eduardo martins is a customer"}
{"db_id": "store_1", "sub_sql": "select email , phone from customers", "question": "What is Astrid Gruber's email and phone number?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select email , phone from customers", "query": "SELECT email ,  phone FROM customers WHERE first_name = \\\\\\\"Astrid\\\\\\\" AND last_name = \\\\\\\"Gruber\\\\\\\";", "sub_ques": "what is email and phone"}
{"db_id": "store_1", "sub_sql": "where first_name = astrid", "question": "What is Astrid Gruber's email and phone number?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where first name equal to astrid", "query": "SELECT email ,  phone FROM customers WHERE first_name = \\\\\\\"Astrid\\\\\\\" AND last_name = \\\\\\\"Gruber\\\\\\\";", "sub_ques": "astrid"}
{"db_id": "store_1", "sub_sql": "select email , phone from customers", "question": "What is the email and phone number of Astrid Gruber the customer?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select email , phone from customers", "query": "SELECT email ,  phone FROM customers WHERE first_name = \\\\\\\"Astrid\\\\\\\" AND last_name = \\\\\\\"Gruber\\\\\\\";", "sub_ques": "what is the email and phone number"}
{"db_id": "store_1", "sub_sql": "where first_name = astrid", "question": "What is the email and phone number of Astrid Gruber the customer?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where first name equal to astrid", "query": "SELECT email ,  phone FROM customers WHERE first_name = \\\\\\\"Astrid\\\\\\\" AND last_name = \\\\\\\"Gruber\\\\\\\";", "sub_ques": "astrid gruber the customer"}
{"db_id": "store_1", "sub_sql": "select count customers", "question": "How many customers live in Prague city?", "sub_sql_type": "null agg col", "sub_sql_new": "select count customers", "query": "SELECT count(*) FROM customers WHERE city = \\\\\\\"Prague\\\\\\\";", "sub_ques": "how many customers"}
{"db_id": "store_1", "sub_sql": "where city = prague", "question": "How many customers live in Prague city?", "sub_sql_type": "null col op op value", "sub_sql_new": "where city equal to prague", "query": "SELECT count(*) FROM customers WHERE city = \\\\\\\"Prague\\\\\\\";", "sub_ques": "customers live in prague city"}
{"db_id": "store_1", "sub_sql": "select count customers", "question": "How many customers live in the city of Prague?", "sub_sql_type": "null agg col", "sub_sql_new": "select count customers", "query": "SELECT count(*) FROM customers WHERE city = \\\\\\\"Prague\\\\\\\";", "sub_ques": "how many customers"}
{"db_id": "store_1", "sub_sql": "where city = prague", "question": "How many customers live in the city of Prague?", "sub_sql_type": "null col op op value", "sub_sql_new": "where city equal to prague", "query": "SELECT count(*) FROM customers WHERE city = \\\\\\\"Prague\\\\\\\";", "sub_ques": "customers live in the city of prague"}
{"db_id": "store_1", "sub_sql": "select count customers", "question": "How many customers in state of CA?", "sub_sql_type": "null agg col", "sub_sql_new": "select count customers", "query": "SELECT count(*) FROM customers WHERE state = \\\\\\\"CA\\\\\\\";", "sub_ques": "how many customers"}
{"db_id": "store_1", "sub_sql": "where state = ca", "question": "How many customers in state of CA?", "sub_sql_type": "null col op op value", "sub_sql_new": "where state equal to ca", "query": "SELECT count(*) FROM customers WHERE state = \\\\\\\"CA\\\\\\\";", "sub_ques": "customers in state of ca"}
{"db_id": "store_1", "sub_sql": "select count customers", "question": "How many customers are from California?", "sub_sql_type": "null agg col", "sub_sql_new": "select count customers", "query": "SELECT count(*) FROM customers WHERE state = \\\\\\\"CA\\\\\\\";", "sub_ques": "how many customers"}
{"db_id": "store_1", "sub_sql": "where state = ca", "question": "How many customers are from California?", "sub_sql_type": "null col op op value", "sub_sql_new": "where state equal to ca", "query": "SELECT count(*) FROM customers WHERE state = \\\\\\\"CA\\\\\\\";", "sub_ques": "customers are from california"}
{"db_id": "store_1", "sub_sql": "select country from customers", "question": "What country does Roberto Almeida live?", "sub_sql_type": "null col col col", "sub_sql_new": "select country from customers", "query": "SELECT country FROM customers WHERE first_name = \\\\\\\"Roberto\\\\\\\" AND last_name = \\\\\\\"Almeida\\\\\\\";", "sub_ques": "what country"}
{"db_id": "store_1", "sub_sql": "where first_name = roberto", "question": "What country does Roberto Almeida live?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where first name equal to roberto", "query": "SELECT country FROM customers WHERE first_name = \\\\\\\"Roberto\\\\\\\" AND last_name = \\\\\\\"Almeida\\\\\\\";", "sub_ques": "roberto"}
{"db_id": "store_1", "sub_sql": "select country from customers", "question": "In which country does Roberto Almeida?", "sub_sql_type": "null col col col", "sub_sql_new": "select country from customers", "query": "SELECT country FROM customers WHERE first_name = \\\\\\\"Roberto\\\\\\\" AND last_name = \\\\\\\"Almeida\\\\\\\";", "sub_ques": "in which country"}
{"db_id": "store_1", "sub_sql": "where first_name = roberto", "question": "In which country does Roberto Almeida?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where first name equal to roberto", "query": "SELECT country FROM customers WHERE first_name = \\\\\\\"Roberto\\\\\\\" AND last_name = \\\\\\\"Almeida\\\\\\\";", "sub_ques": "roberto"}
{"db_id": "store_1", "sub_sql": "select t2.title from albums", "question": "List the name of albums that are released by aritist whose name has 'Led'", "sub_sql_type": "null col col col", "sub_sql_new": "select title from albums", "query": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%'", "sub_ques": "list the name of albums"}
{"db_id": "store_1", "sub_sql": "where t1.name like led", "question": "List the name of albums that are released by aritist whose name has 'Led'", "sub_sql_type": "null col op value", "sub_sql_new": "where seq like led", "query": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%'", "sub_ques": "whose name has ' led '"}
{"db_id": "store_1", "sub_sql": "select t2.title from albums", "question": "What is the title of the album that was released by the artist whose name has the phrase 'Led'?", "sub_sql_type": "null col col col", "sub_sql_new": "select title from albums", "query": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%'", "sub_ques": "what is the title of the album"}
{"db_id": "store_1", "sub_sql": "where t1.name like led", "question": "What is the title of the album that was released by the artist whose name has the phrase 'Led'?", "sub_sql_type": "null col op value", "sub_sql_new": "where seq like led", "query": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%'", "sub_ques": "whose name has the phrase ' led '"}
{"db_id": "store_1", "sub_sql": "select count customers", "question": "How many customers does Steve Johnson support?", "sub_sql_type": "null agg col", "sub_sql_new": "select count customers", "query": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \\\\\\\"Steve\\\\\\\" AND T1.last_name = \\\\\\\"Johnson\\\\\\\";", "sub_ques": "how many customers"}
{"db_id": "store_1", "sub_sql": "where t1.first_name = steve", "question": "How many customers does Steve Johnson support?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where first name equal to steve", "query": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \\\\\\\"Steve\\\\\\\" AND T1.last_name = \\\\\\\"Johnson\\\\\\\";", "sub_ques": "steve"}
{"db_id": "store_1", "sub_sql": "select count customers ", "question": "What is the count of customers that Steve Johnson supports?", "sub_sql_type": "null agg col", "sub_sql_new": "select count customers  col", "query": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \\\\\\\"Steve\\\\\\\" AND T1.last_name = \\\\\\\"Johnson\\\\\\\";", "sub_ques": "what is the count of customers"}
{"db_id": "store_1", "sub_sql": "where t1.first_name = steve", "question": "What is the count of customers that Steve Johnson supports?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where first name equal to steve", "query": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \\\\\\\"Steve\\\\\\\" AND T1.last_name = \\\\\\\"Johnson\\\\\\\";", "sub_ques": "steve"}
{"db_id": "store_1", "sub_sql": "select title , phone , hire_date from employees", "question": "What is the title, phone and hire date of Nancy Edwards?", "sub_sql_type": "null col null col null col col col col", "sub_sql_new": "select title , phone , hire date from employees", "query": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \\\\\\\"Nancy\\\\\\\" AND last_name = \\\\\\\"Edwards\\\\\\\";", "sub_ques": "what is the title , phone and hire date"}
{"db_id": "store_1", "sub_sql": "where first_name = nancy", "question": "What is the title, phone and hire date of Nancy Edwards?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where first name equal to nancy", "query": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \\\\\\\"Nancy\\\\\\\" AND last_name = \\\\\\\"Edwards\\\\\\\";", "sub_ques": "nancy"}
{"db_id": "store_1", "sub_sql": "select title , phone , hire_date from employees", "question": "What is the title, phone number and hire date for the employee named Nancy Edwards?", "sub_sql_type": "null col null col null col col col col", "sub_sql_new": "select title , phone , hire date from employees", "query": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \\\\\\\"Nancy\\\\\\\" AND last_name = \\\\\\\"Edwards\\\\\\\";", "sub_ques": "what is the title , phone number and hire date for the employee"}
{"db_id": "store_1", "sub_sql": "where first_name = nancy", "question": "What is the title, phone number and hire date for the employee named Nancy Edwards?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where first name equal to nancy", "query": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \\\\\\\"Nancy\\\\\\\" AND last_name = \\\\\\\"Edwards\\\\\\\";", "sub_ques": "employee named nancy"}
{"db_id": "store_1", "sub_sql": "select t2.first_name , t2.last_name from employees", "question": "find the full name of employees who report to Nancy Edwards?", "sub_sql_type": "null col col null col col col col", "sub_sql_new": "select first name , last name from employees", "query": "SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \\\\\\\"Nancy\\\\\\\" AND T1.last_name = \\\\\\\"Edwards\\\\\\\";", "sub_ques": "find the full name of employees"}
{"db_id": "store_1", "sub_sql": "where t1.first_name = nancy", "question": "find the full name of employees who report to Nancy Edwards?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where first name equal to nancy", "query": "SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \\\\\\\"Nancy\\\\\\\" AND T1.last_name = \\\\\\\"Edwards\\\\\\\";", "sub_ques": "employees who report to nancy"}
{"db_id": "store_1", "sub_sql": "select t2.first_name , t2.last_name from employees", "question": "What is the first and last name of the employee who reports to Nancy Edwards?", "sub_sql_type": "null col col null col col col col", "sub_sql_new": "select first name , last name from employees", "query": "SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \\\\\\\"Nancy\\\\\\\" AND T1.last_name = \\\\\\\"Edwards\\\\\\\";", "sub_ques": "what is the first and last name of the employee"}
{"db_id": "store_1", "sub_sql": "where t1.first_name = nancy", "question": "What is the first and last name of the employee who reports to Nancy Edwards?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where first name equal to nancy", "query": "SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \\\\\\\"Nancy\\\\\\\" AND T1.last_name = \\\\\\\"Edwards\\\\\\\";", "sub_ques": "employee who reports to nancy"}
{"db_id": "store_1", "sub_sql": "select address from employees", "question": "What is the address of employee Nancy Edwards?", "sub_sql_type": "null col col col", "sub_sql_new": "select address from employees", "query": "SELECT address FROM employees WHERE first_name = \\\\\\\"Nancy\\\\\\\" AND last_name = \\\\\\\"Edwards\\\\\\\";", "sub_ques": "what is the address of employee"}
{"db_id": "store_1", "sub_sql": "where first_name = nancy", "question": "What is the address of employee Nancy Edwards?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where first name equal to nancy", "query": "SELECT address FROM employees WHERE first_name = \\\\\\\"Nancy\\\\\\\" AND last_name = \\\\\\\"Edwards\\\\\\\";", "sub_ques": "employee nancy"}
{"db_id": "store_1", "sub_sql": "select address from employees", "question": "What is Nancy Edwards's address?", "sub_sql_type": "null col col col", "sub_sql_new": "select address from employees", "query": "SELECT address FROM employees WHERE first_name = \\\\\\\"Nancy\\\\\\\" AND last_name = \\\\\\\"Edwards\\\\\\\";", "sub_ques": "what is address"}
{"db_id": "store_1", "sub_sql": "where first_name = nancy", "question": "What is Nancy Edwards's address?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where first name equal to nancy", "query": "SELECT address FROM employees WHERE first_name = \\\\\\\"Nancy\\\\\\\" AND last_name = \\\\\\\"Edwards\\\\\\\";", "sub_ques": "nancy edwards's"}
{"db_id": "store_1", "sub_sql": "select t1.first_name , t1.last_name from employees", "question": "Find the full name of employee who supported the most number of customers.", "sub_sql_type": "null col col null col col col col", "sub_sql_new": "select first name , last name from employees", "query": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "find the full name of employee"}
{"db_id": "store_1", "sub_sql": "group by t1.id order by count customers desc limit 1", "question": "Find the full name of employee who supported the most number of customers.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count customers desc limit 1", "query": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "employee who supported the most number of customers"}
{"db_id": "store_1", "sub_sql": "select t1.first_name , t1.last_name from employees", "question": "What is the full name of the employee who has the most customers?", "sub_sql_type": "null col col null col col col col", "sub_sql_new": "select first name , last name from employees", "query": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "what is the full name of the employee"}
{"db_id": "store_1", "sub_sql": "group by t1.id order by count customers desc limit 1", "question": "What is the full name of the employee who has the most customers?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count customers desc limit 1", "query": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "employee who has the most customers"}
{"db_id": "store_1", "sub_sql": "select count employees", "question": "How many employees are living in Canada?", "sub_sql_type": "null agg col", "sub_sql_new": "select count employees", "query": "SELECT count(*) FROM employees WHERE country = \\\\\\\"Canada\\\\\\\";", "sub_ques": "how many employees"}
{"db_id": "store_1", "sub_sql": "where country = canada", "question": "How many employees are living in Canada?", "sub_sql_type": "null col op op value", "sub_sql_new": "where country equal to canada", "query": "SELECT count(*) FROM employees WHERE country = \\\\\\\"Canada\\\\\\\";", "sub_ques": "employees are living in canada"}
{"db_id": "store_1", "sub_sql": "select count employees", "question": "How many employees live in Canada?", "sub_sql_type": "null agg col", "sub_sql_new": "select count employees", "query": "SELECT count(*) FROM employees WHERE country = \\\\\\\"Canada\\\\\\\";", "sub_ques": "how many employees"}
{"db_id": "store_1", "sub_sql": "where country = canada", "question": "How many employees live in Canada?", "sub_sql_type": "null col op op value", "sub_sql_new": "where country equal to canada", "query": "SELECT count(*) FROM employees WHERE country = \\\\\\\"Canada\\\\\\\";", "sub_ques": "employees live in canada"}
{"db_id": "store_1", "sub_sql": "where first_name = nancy", "question": "What is employee Nancy Edwards's phone number?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where first name equal to nancy", "query": "SELECT phone FROM employees WHERE first_name = \\\\\\\"Nancy\\\\\\\" AND last_name = \\\\\\\"Edwards\\\\\\\";", "sub_ques": "employee nancy"}
{"db_id": "store_1", "sub_sql": "select phone from employees", "question": "What is the the phone number of Nancy Edwards?", "sub_sql_type": "null col col col", "sub_sql_new": "select phone from employees", "query": "SELECT phone FROM employees WHERE first_name = \\\\\\\"Nancy\\\\\\\" AND last_name = \\\\\\\"Edwards\\\\\\\";", "sub_ques": "what is the the phone"}
{"db_id": "store_1", "sub_sql": "where first_name = nancy", "question": "What is the the phone number of Nancy Edwards?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where first name equal to nancy", "query": "SELECT phone FROM employees WHERE first_name = \\\\\\\"Nancy\\\\\\\" AND last_name = \\\\\\\"Edwards\\\\\\\";", "sub_ques": "nancy"}
{"db_id": "store_1", "sub_sql": "select first_name , last_name from employees", "question": "Who is the youngest employee in the company? List employee's first and last name.", "sub_sql_type": "null col col null col col col col", "sub_sql_new": "select first name , last name from employees", "query": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;", "sub_ques": "list employee 's first and last name"}
{"db_id": "store_1", "sub_sql": "order by birth_date desc limit 1", "question": "Who is the youngest employee in the company? List employee's first and last name.", "sub_sql_type": "null null col col null null limv", "sub_sql_new": "order by birth date desc limit 1", "query": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;", "sub_ques": "the youngest"}
{"db_id": "store_1", "sub_sql": "select first_name , last_name from employees", "question": "What si the youngest employee's first and last name?", "sub_sql_type": "null col col null col col col col", "sub_sql_new": "select first name , last name from employees", "query": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;", "sub_ques": "what is first and last name"}
{"db_id": "store_1", "sub_sql": "order by birth_date desc limit 1", "question": "What si the youngest employee's first and last name?", "sub_sql_type": "null null col col null null limv", "sub_sql_new": "order by birth date desc limit 1", "query": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;", "sub_ques": "the youngest"}
{"db_id": "store_1", "sub_sql": "select first_name , last_name from employees", "question": "List top 10 employee work longest in the company. List employee's first and last name.", "sub_sql_type": "null col col null col col col col", "sub_sql_new": "select first name , last name from employees", "query": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;", "sub_ques": "list employee 's first and last name"}
{"db_id": "store_1", "sub_sql": "order by hire_date asc limit 10", "question": "List top 10 employee work longest in the company. List employee's first and last name.", "sub_sql_type": "null null col col null null limv", "sub_sql_new": "order by hire date asc limit 10", "query": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;", "sub_ques": "top 10 employee work longest in the company"}
{"db_id": "store_1", "sub_sql": "select first_name , last_name from employees", "question": "What are the first and last names of the top 10 longest-serving employees?", "sub_sql_type": "null col col null col col col col", "sub_sql_new": "select first name , last name from employees", "query": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;", "sub_ques": "what are the first and last names"}
{"db_id": "store_1", "sub_sql": "order by hire_date asc limit 10", "question": "What are the first and last names of the top 10 longest-serving employees?", "sub_sql_type": "null null col col null null limv", "sub_sql_new": "order by hire date asc limit 10", "query": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;", "sub_ques": "the top 10 longest-serving employees"}
{"db_id": "store_1", "sub_sql": "select count employees , city group by city", "question": "Find the number of employees whose title is IT Staff from each city?", "sub_sql_type": "null agg col null col", "sub_sql_new": "select count employees , city", "query": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city", "sub_ques": "the number of employees from each city"}
{"db_id": "store_1", "sub_sql": "where title = itstaff", "question": "Find the number of employees whose title is IT Staff from each city?", "sub_sql_type": "null col op op value", "sub_sql_new": "where title equal to itstaff", "query": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city", "sub_ques": "employees whose title is it staff"}
{"db_id": "store_1", "sub_sql": "select count employees , city group by city", "question": "How many employees who are IT staff are from each city?", "sub_sql_type": "null agg col null col", "sub_sql_new": "select count employees , city", "query": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city", "sub_ques": "how many employees are from each city"}
{"db_id": "store_1", "sub_sql": "where title = itstaff", "question": "How many employees who are IT staff are from each city?", "sub_sql_type": "null col op op value", "sub_sql_new": "where title equal to itstaff", "query": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city", "sub_ques": "employees who are it staff"}
{"db_id": "store_1", "sub_sql": "select t2.first_name , t2.last_name , count t1.reports_to from employees", "question": "Which employee manage most number of peoples? List employee's first and last name, and number of people report to that employee.", "sub_sql_type": "null col col null col col null agg col col col col", "sub_sql_new": "select first name , last name , count reports to from employees", "query": "SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1;", "sub_ques": "list employee 's first and last name , and number of people report to that employee"}
{"db_id": "store_1", "sub_sql": "group by t1.reports_to order by count t1.reports_to desc limit 1", "question": "Which employee manage most number of peoples? List employee's first and last name, and number of people report to that employee.", "sub_sql_type": "null null agg col col null null limv", "sub_sql_new": "order by count reports to desc limit 1", "query": "SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1;", "sub_ques": "employee manage most number of peoples ? list employee 's first and last name , and number of people report to"}
{"db_id": "store_1", "sub_sql": "select t2.first_name , t2.last_name , count t1.reports_to from employees", "question": "What are the first and last names of all the employees and how many people report to them?", "sub_sql_type": "null col col null col col null agg col col col col", "sub_sql_new": "select first name , last name , count reports to from employees", "query": "SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1;", "sub_ques": "what are the first and last names of all the employees and how many people report to"}
{"db_id": "store_1", "sub_sql": "select count orders", "question": "How many orders does Lucas Mancini has?", "sub_sql_type": "null agg col", "sub_sql_new": "select count orders", "query": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \\\\\\\"Lucas\\\\\\\" AND T1.last_name = \\\\\\\"Mancini\\\\\\\";", "sub_ques": "how many orders"}
{"db_id": "store_1", "sub_sql": "where t1.first_name = lucas", "question": "How many orders does Lucas Mancini has?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where first name equal to lucas", "query": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \\\\\\\"Lucas\\\\\\\" AND T1.last_name = \\\\\\\"Mancini\\\\\\\";", "sub_ques": "lucas"}
{"db_id": "store_1", "sub_sql": "select count orders", "question": "How many orders does Luca Mancini have in his invoices?", "sub_sql_type": "null agg col", "sub_sql_new": "select count orders", "query": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \\\\\\\"Lucas\\\\\\\" AND T1.last_name = \\\\\\\"Mancini\\\\\\\";", "sub_ques": "how many orders"}
{"db_id": "store_1", "sub_sql": "where t1.first_name = lucas", "question": "How many orders does Luca Mancini have in his invoices?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where first name equal to lucas", "query": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \\\\\\\"Lucas\\\\\\\" AND T1.last_name = \\\\\\\"Mancini\\\\\\\";", "sub_ques": "luca"}
{"db_id": "store_1", "sub_sql": "select sum t2.total from invoices", "question": "What is the total amount of money spent by Lucas Mancini?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select sum total from invoices", "query": "SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \\\\\\\"Lucas\\\\\\\" AND T1.last_name = \\\\\\\"Mancini\\\\\\\";", "sub_ques": "what is the total amount of money "}
{"db_id": "store_1", "sub_sql": "select sum t2.total from invoices", "question": "How much money did Lucas Mancini spend?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select sum total from invoices", "query": "SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \\\\\\\"Lucas\\\\\\\" AND T1.last_name = \\\\\\\"Mancini\\\\\\\";", "sub_ques": "how much money spend"}
{"db_id": "store_1", "sub_sql": "where t1.first_name = lucas", "question": "How much money did Lucas Mancini spend?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where first name equal to lucas", "query": "SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \\\\\\\"Lucas\\\\\\\" AND T1.last_name = \\\\\\\"Mancini\\\\\\\";", "sub_ques": "lucas"}
{"db_id": "store_1", "sub_sql": "select name from media_types", "question": "List all media types.", "sub_sql_type": "null col col col", "sub_sql_new": "select seq from media_types", "query": "SELECT name FROM media_types;", "sub_ques": "list all media types"}
{"db_id": "store_1", "sub_sql": "select name from media_types", "question": "What are the names of all the media types?", "sub_sql_type": "null col col col", "sub_sql_new": "select seq from media_types", "query": "SELECT name FROM media_types;", "sub_ques": "what are the names"}
{"db_id": "store_1", "sub_sql": "select distinct name from genres", "question": "List all different genre types.", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct seq from genres", "query": "SELECT DISTINCT name FROM genres;", "sub_ques": "list all different genre"}
{"db_id": "store_1", "sub_sql": "select distinct name from genres", "question": "What are the different names of the genres?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct seq from genres", "query": "SELECT DISTINCT name FROM genres;", "sub_ques": "what are the different names of the genres"}
{"db_id": "store_1", "sub_sql": "select name from playlists", "question": "List the name of all playlist.", "sub_sql_type": "null col col col", "sub_sql_new": "select seq from playlists", "query": "SELECT name FROM playlists;", "sub_ques": "list the name of all playlist"}
{"db_id": "store_1", "sub_sql": "select name from playlists", "question": "What are the names of all the playlists?", "sub_sql_type": "null col col col", "sub_sql_new": "select seq from playlists", "query": "SELECT name FROM playlists;", "sub_ques": "what are the names of all the playlists"}
{"db_id": "store_1", "sub_sql": "select composer from tracks", "question": "Who is the composer of track Fast As a Shark?", "sub_sql_type": "null col col col", "sub_sql_new": "select composer from tracks", "query": "SELECT composer FROM tracks WHERE name = \\\\\\\"Fast As a Shark\\\\\\\";", "sub_ques": "Who is the composer of track"}
{"db_id": "store_1", "sub_sql": "where name = fastasashark", "question": "Who is the composer of track Fast As a Shark?", "sub_sql_type": "null col op op value", "sub_sql_new": "where seq equal to fastasashark", "query": "SELECT composer FROM tracks WHERE name = \\\\\\\"Fast As a Shark\\\\\\\";", "sub_ques": "track fast as a shark"}
{"db_id": "store_1", "sub_sql": "select composer from tracks", "question": "What is the composer who created the track \\\\\\\"Fast As a Shark\\\\\\\"?", "sub_sql_type": "null col col col", "sub_sql_new": "select composer from tracks", "query": "SELECT composer FROM tracks WHERE name = \\\\\\\"Fast As a Shark\\\\\\\";", "sub_ques": "what is the composer"}
{"db_id": "store_1", "sub_sql": "where name = fastasashark", "question": "What is the composer who created the track \\\\\\\"Fast As a Shark\\\\\\\"?", "sub_sql_type": "null col op op value", "sub_sql_new": "where seq equal to fastasashark", "query": "SELECT composer FROM tracks WHERE name = \\\\\\\"Fast As a Shark\\\\\\\";", "sub_ques": "who created the track `` fast as a shark"}
{"db_id": "store_1", "sub_sql": "select milliseconds from tracks", "question": "How long does track Fast As a Shark has?", "sub_sql_type": "null col col col", "sub_sql_new": "select milliseconds from tracks", "query": "SELECT milliseconds FROM tracks WHERE name = \\\\\\\"Fast As a Shark\\\\\\\";", "sub_ques": "how long does track"}
{"db_id": "store_1", "sub_sql": "where name = fastasashark", "question": "How long does track Fast As a Shark has?", "sub_sql_type": "null col op op value", "sub_sql_new": "where seq equal to fastasashark", "query": "SELECT milliseconds FROM tracks WHERE name = \\\\\\\"Fast As a Shark\\\\\\\";", "sub_ques": "track fast as a shark"}
{"db_id": "store_1", "sub_sql": "select milliseconds from tracks", "question": "How many milliseconds long is Fast As a Shark?", "sub_sql_type": "null col col col", "sub_sql_new": "select milliseconds from tracks", "query": "SELECT milliseconds FROM tracks WHERE name = \\\\\\\"Fast As a Shark\\\\\\\";", "sub_ques": "how many milliseconds long"}
{"db_id": "store_1", "sub_sql": "where name = fastasashark", "question": "How many milliseconds long is Fast As a Shark?", "sub_sql_type": "null col op op value", "sub_sql_new": "where seq equal to fastasashark", "query": "SELECT milliseconds FROM tracks WHERE name = \\\\\\\"Fast As a Shark\\\\\\\";", "sub_ques": "fast as a shark"}
{"db_id": "store_1", "sub_sql": "select t2.name from tracks", "question": "What is the name of tracks whose genre is Rock?", "sub_sql_type": "null col col col", "sub_sql_new": "select seq from tracks", "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \\\\\\\"Rock\\\\\\\";", "sub_ques": "what is the name of tracks"}
{"db_id": "store_1", "sub_sql": "where t1.name = rock", "question": "What is the name of tracks whose genre is Rock?", "sub_sql_type": "null col op op value", "sub_sql_new": "where seq equal to rock", "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \\\\\\\"Rock\\\\\\\";", "sub_ques": "tracks whose genre is rock"}
{"db_id": "store_1", "sub_sql": "select t2.name from tracks", "question": "What is the name of all tracks in the Rock genre?", "sub_sql_type": "null col col col", "sub_sql_new": "select seq from tracks", "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \\\\\\\"Rock\\\\\\\";", "sub_ques": "what is the name of all tracks"}
{"db_id": "store_1", "sub_sql": "where t1.name = rock", "question": "What is the name of all tracks in the Rock genre?", "sub_sql_type": "null col op op value", "sub_sql_new": "where seq equal to rock", "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \\\\\\\"Rock\\\\\\\";", "sub_ques": "tracks in the rock genre"}
{"db_id": "store_1", "sub_sql": "select t1.title from albums", "question": "What is title of album which track Balls to the Wall belongs to?", "sub_sql_type": "null col col col", "sub_sql_new": "select title from albums", "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \\\\\\\"Balls to the Wall\\\\\\\";", "sub_ques": "what is title of album"}
{"db_id": "store_1", "sub_sql": "where t2.name = ballstothewall", "question": "What is title of album which track Balls to the Wall belongs to?", "sub_sql_type": "null col op op value", "sub_sql_new": "where seq equal to ballstothewall", "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \\\\\\\"Balls to the Wall\\\\\\\";", "sub_ques": "which track balls to the wall belongs to"}
{"db_id": "store_1", "sub_sql": "select t1.title from albums", "question": "What is the name of the album that has the track Ball to the Wall?", "sub_sql_type": "null col col col", "sub_sql_new": "select title from albums", "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \\\\\\\"Balls to the Wall\\\\\\\";", "sub_ques": "what is the name of the album"}
{"db_id": "store_1", "sub_sql": "where t2.name = ballstothewall", "question": "What is the name of the album that has the track Ball to the Wall?", "sub_sql_type": "null col op op value", "sub_sql_new": "where seq equal to ballstothewall", "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \\\\\\\"Balls to the Wall\\\\\\\";", "sub_ques": "track ball to the wall"}
{"db_id": "store_1", "sub_sql": "select t2.name from tracks", "question": "List name of all tracks in Balls to the Wall.", "sub_sql_type": "null col col col", "sub_sql_new": "select seq from tracks", "query": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \\\\\\\"Balls to the Wall\\\\\\\";", "sub_ques": "list name of all tracks"}
{"db_id": "store_1", "sub_sql": "where t1.title = ballstothewall", "question": "List name of all tracks in Balls to the Wall.", "sub_sql_type": "null col op op value", "sub_sql_new": "where title equal to ballstothewall", "query": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \\\\\\\"Balls to the Wall\\\\\\\";", "sub_ques": "balls to the wall"}
{"db_id": "store_1", "sub_sql": "select t2.name from tracks", "question": "What is the name of all tracks in the album named Balls to the Wall?", "sub_sql_type": "null col col col", "sub_sql_new": "select seq from tracks", "query": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \\\\\\\"Balls to the Wall\\\\\\\";", "sub_ques": "what is the name of all tracks"}
{"db_id": "store_1", "sub_sql": "where t1.title = ballstothewall", "question": "What is the name of all tracks in the album named Balls to the Wall?", "sub_sql_type": "null col op op value", "sub_sql_new": "where title equal to ballstothewall", "query": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \\\\\\\"Balls to the Wall\\\\\\\";", "sub_ques": "album named balls to the wall"}
{"db_id": "store_1", "sub_sql": "select t1.title from albums", "question": "List title of albums have the number of tracks greater than 10.", "sub_sql_type": "null col col col", "sub_sql_new": "select title from albums", "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;", "sub_ques": "list title of albums"}
{"db_id": "store_1", "sub_sql": "group by t1.id having count t1.id > 10", "question": "List title of albums have the number of tracks greater than 10.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;", "sub_ques": "albums have the number of tracks greater than 10"}
{"db_id": "store_1", "sub_sql": "select t1.title from albums", "question": "What are the names of the albums that have more than 10 tracks?", "sub_sql_type": "null col col col", "sub_sql_new": "select title from albums", "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;", "sub_ques": "what are the names of the albums"}
{"db_id": "store_1", "sub_sql": "group by t1.id having count t1.id > 10", "question": "What are the names of the albums that have more than 10 tracks?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;", "sub_ques": "albums that have more than 10 tracks"}
{"db_id": "store_1", "sub_sql": "select t2.name from tracks", "question": "List the name of tracks belongs to genre Rock and whose media type is MPEG audio file.", "sub_sql_type": "null col col col", "sub_sql_new": "select seq from tracks", "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \\\\\\\"Rock\\\\\\\" AND T3.name = \\\\\\\"MPEG audio file\\\\\\\";", "sub_ques": "list the name of tracks"}
{"db_id": "store_1", "sub_sql": "where t1.name = rock", "question": "List the name of tracks belongs to genre Rock and whose media type is MPEG audio file.", "sub_sql_type": "null col op op value", "sub_sql_new": "where seq equal to rock", "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \\\\\\\"Rock\\\\\\\" AND T3.name = \\\\\\\"MPEG audio file\\\\\\\";", "sub_ques": "belongs to genre rock"}
{"db_id": "store_1", "sub_sql": "select t2.name from tracks", "question": "What are the names of all Rock tracks that are stored on MPEG audio files?", "sub_sql_type": "null col col col", "sub_sql_new": "select seq from tracks", "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \\\\\\\"Rock\\\\\\\" AND T3.name = \\\\\\\"MPEG audio file\\\\\\\";", "sub_ques": "what are the names of all rock tracks"}
{"db_id": "store_1", "sub_sql": "select t2.name from tracks", "question": "List the name of tracks belongs to genre Rock or media type is MPEG audio file.", "sub_sql_type": "null col col col", "sub_sql_new": "select seq from tracks", "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \\\\\\\"Rock\\\\\\\" OR T3.name = \\\\\\\"MPEG audio file\\\\\\\";", "sub_ques": "list the name of tracks"}
{"db_id": "store_1", "sub_sql": "where t1.name = rock", "question": "List the name of tracks belongs to genre Rock or media type is MPEG audio file.", "sub_sql_type": "null col op op value", "sub_sql_new": "where seq equal to rock", "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \\\\\\\"Rock\\\\\\\" OR T3.name = \\\\\\\"MPEG audio file\\\\\\\";", "sub_ques": "belongs to genre rock"}
{"db_id": "store_1", "sub_sql": "select t2.name from tracks", "question": "What are the names of all tracks that belong to the Rock genre and whose media type is MPEG?", "sub_sql_type": "null col col col", "sub_sql_new": "select seq from tracks", "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \\\\\\\"Rock\\\\\\\" OR T3.name = \\\\\\\"MPEG audio file\\\\\\\";", "sub_ques": "what are the names of all tracks"}
{"db_id": "store_1", "sub_sql": "where t1.name = rock", "question": "What are the names of all tracks that belong to the Rock genre and whose media type is MPEG?", "sub_sql_type": "null col op op value", "sub_sql_new": "where seq equal to rock", "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \\\\\\\"Rock\\\\\\\" OR T3.name = \\\\\\\"MPEG audio file\\\\\\\";", "sub_ques": "belong to rock genre"}
{"db_id": "store_1", "sub_sql": "select t2.name from tracks", "question": "List the name of tracks belongs to genre Rock or genre Jazz.", "sub_sql_type": "null col col col", "sub_sql_new": "select seq from tracks", "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \\\\\\\"Rock\\\\\\\" OR T1.name = \\\\\\\"Jazz\\\\\\\"", "sub_ques": "list the name of tracks"}
{"db_id": "store_1", "sub_sql": "where t1.name = rock", "question": "List the name of tracks belongs to genre Rock or genre Jazz.", "sub_sql_type": "null col op op value", "sub_sql_new": "where seq equal to rock", "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \\\\\\\"Rock\\\\\\\" OR T1.name = \\\\\\\"Jazz\\\\\\\"", "sub_ques": "belongs to genre rock"}
{"db_id": "store_1", "sub_sql": "select t2.name from tracks", "question": "What are the names of the tracks that are Rock or Jazz songs?", "sub_sql_type": "null col col col", "sub_sql_new": "select seq from tracks", "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \\\\\\\"Rock\\\\\\\" OR T1.name = \\\\\\\"Jazz\\\\\\\"", "sub_ques": "what are the names of the tracks"}
{"db_id": "store_1", "sub_sql": "select t1.name from tracks", "question": "List the name of all tracks in the playlists of Movies.", "sub_sql_type": "null col col col", "sub_sql_new": "select seq from tracks", "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \\\\\\\"Movies\\\\\\\";", "sub_ques": "list the name of all tracks"}
{"db_id": "store_1", "sub_sql": "where t3.name = movies", "question": "List the name of all tracks in the playlists of Movies.", "sub_sql_type": "null col op op value", "sub_sql_new": "where seq equal to movies", "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \\\\\\\"Movies\\\\\\\";", "sub_ques": "in the playlists of movies"}
{"db_id": "store_1", "sub_sql": "select t1.name from tracks", "question": "What are the names of all tracks that are on playlists titled Movies?", "sub_sql_type": "null col col col", "sub_sql_new": "select seq from tracks", "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \\\\\\\"Movies\\\\\\\";", "sub_ques": "what are the names of all tracks"}
{"db_id": "store_1", "sub_sql": "where t3.name = movies", "question": "What are the names of all tracks that are on playlists titled Movies?", "sub_sql_type": "null col op op value", "sub_sql_new": "where seq equal to movies", "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \\\\\\\"Movies\\\\\\\";", "sub_ques": "that are on playlists titled movies"}
{"db_id": "store_1", "sub_sql": "select t2.name from playlists", "question": "List the name of playlist which has number of tracks greater than 100.", "sub_sql_type": "null col col col", "sub_sql_new": "select seq from playlists", "query": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;", "sub_ques": "list the name of playlist"}
{"db_id": "store_1", "sub_sql": "group by t1.playlist_id having count t1.track_id > 100", "question": "List the name of playlist which has number of tracks greater than 100.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;", "sub_ques": "playlist which has number of tracks greater than 100"}
{"db_id": "store_1", "sub_sql": "select t2.name from playlists", "question": "What are the names of all playlists that have more than 100 tracks?", "sub_sql_type": "null col col col", "sub_sql_new": "select seq from playlists", "query": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;", "sub_ques": "what are the names of all playlists"}
{"db_id": "store_1", "sub_sql": "group by t1.playlist_id having count t1.track_id > 100", "question": "What are the names of all playlists that have more than 100 tracks?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;", "sub_ques": "playlists that have more than 100 tracks"}
{"db_id": "store_1", "sub_sql": "select t1.name from tracks", "question": "List all tracks bought by customer Daan Peeters.", "sub_sql_type": "null col col col", "sub_sql_new": "select seq from tracks", "query": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = \\\\\\\"Daan\\\\\\\" AND T4.last_name = \\\\\\\"Peeters\\\\\\\";", "sub_ques": "list all tracks"}
{"db_id": "store_1", "sub_sql": "where t4.first_name = daan", "question": "List all tracks bought by customer Daan Peeters.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where first name equal to daan", "query": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = \\\\\\\"Daan\\\\\\\" AND T4.last_name = \\\\\\\"Peeters\\\\\\\";", "sub_ques": "by customer daan"}
{"db_id": "store_1", "sub_sql": "select t1.name from tracks", "question": "What are the tracks that Dean Peeters bought?", "sub_sql_type": "null col col col", "sub_sql_new": "select seq from tracks", "query": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = \\\\\\\"Daan\\\\\\\" AND T4.last_name = \\\\\\\"Peeters\\\\\\\";", "sub_ques": "what are the tracks"}
{"db_id": "store_1", "sub_sql": "where t4.first_name = daan", "question": "What are the tracks that Dean Peeters bought?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where first name equal to daan", "query": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = \\\\\\\"Daan\\\\\\\" AND T4.last_name = \\\\\\\"Peeters\\\\\\\";", "sub_ques": "dean peeters bought"}
{"db_id": "store_1", "sub_sql": "select unit_price from tracks", "question": "How much is the track Fast As a Shark?", "sub_sql_type": "null col col col col", "sub_sql_new": "select unit price from tracks", "query": "SELECT unit_price FROM tracks WHERE name = \\\\\\\"Fast As a Shark\\\\\\\";", "sub_ques": "how much is the track"}
{"db_id": "store_1", "sub_sql": "where name = fastasashark", "question": "How much is the track Fast As a Shark?", "sub_sql_type": "null col op op value", "sub_sql_new": "where seq equal to fastasashark", "query": "SELECT unit_price FROM tracks WHERE name = \\\\\\\"Fast As a Shark\\\\\\\";", "sub_ques": "track fast as a shark"}
{"db_id": "store_1", "sub_sql": "select unit_price from tracks", "question": "What is the unit price of the tune \\\\\\\"Fast As a Shark\\\\\\\"?", "sub_sql_type": "null col col col col", "sub_sql_new": "select unit price from tracks", "query": "SELECT unit_price FROM tracks WHERE name = \\\\\\\"Fast As a Shark\\\\\\\";", "sub_ques": "what is the unit price"}
{"db_id": "store_1", "sub_sql": "where name = fastasashark", "question": "What is the unit price of the tune \\\\\\\"Fast As a Shark\\\\\\\"?", "sub_sql_type": "null col op op value", "sub_sql_new": "where seq equal to fastasashark", "query": "SELECT unit_price FROM tracks WHERE name = \\\\\\\"Fast As a Shark\\\\\\\";", "sub_ques": "the tune fast as a shark"}
{"db_id": "store_1", "sub_sql": "select count tracks , t1.name group by t1.name", "question": "Find number of tracks in each genre?", "sub_sql_type": "null agg col null col", "sub_sql_new": "select count tracks , seq", "query": "SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name;", "sub_ques": "number of tracks in each genre"}
{"db_id": "store_1", "sub_sql": "select count tracks , t1.name group by t1.name", "question": "How many tracks are in each genre?", "sub_sql_type": "null agg col null col", "sub_sql_new": "select count tracks , seq", "query": "SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name;", "sub_ques": "how many tracks are in each genre"}
{"db_id": "journal_committee", "sub_sql": "select count editor", "question": "How many editors are there?", "sub_sql_type": "null agg col", "sub_sql_new": "select count editor", "query": "SELECT count(*) FROM editor", "sub_ques": "how many editors"}
{"db_id": "journal_committee", "sub_sql": "select name from editor", "question": "List the names of editors in ascending order of age.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from editor", "query": "SELECT Name FROM editor ORDER BY Age ASC", "sub_ques": "list the names of editors"}
{"db_id": "journal_committee", "sub_sql": "order by age asc", "question": "List the names of editors in ascending order of age.", "sub_sql_type": "null null col null", "sub_sql_new": "order by age asc", "query": "SELECT Name FROM editor ORDER BY Age ASC", "sub_ques": "order of age"}
{"db_id": "journal_committee", "sub_sql": "select name , age from editor", "question": "What are the names and ages of editors?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , age from editor", "query": "SELECT Name ,  Age FROM editor", "sub_ques": "what are the names and ages of editors"}
{"db_id": "journal_committee", "sub_sql": "select name from editor", "question": "List the names of editors who are older than 25.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from editor", "query": "SELECT Name FROM editor WHERE Age  >  25", "sub_ques": "list the names of editors"}
{"db_id": "journal_committee", "sub_sql": "where age > 25", "question": "List the names of editors who are older than 25.", "sub_sql_type": "null col op op value", "sub_sql_new": "where age more than 25", "query": "SELECT Name FROM editor WHERE Age  >  25", "sub_ques": "editors who are older than 25"}
{"db_id": "journal_committee", "sub_sql": "select name from editor", "question": "Show the names of editors of age either 24 or 25.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from editor", "query": "SELECT Name FROM editor WHERE Age  =  24 OR Age  =  25", "sub_ques": "show the names of editors"}
{"db_id": "journal_committee", "sub_sql": "where age = 24", "question": "Show the names of editors of age either 24 or 25.", "sub_sql_type": "null col op op value", "sub_sql_new": "where age equal to 24", "query": "SELECT Name FROM editor WHERE Age  =  24 OR Age  =  25", "sub_ques": "editors of age either 24"}
{"db_id": "journal_committee", "sub_sql": "select name from editor", "question": "What is the name of the youngest editor?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from editor", "query": "SELECT Name FROM editor ORDER BY Age ASC LIMIT 1", "sub_ques": "what is the name of editor"}
{"db_id": "journal_committee", "sub_sql": "order by age asc limit 1", "question": "What is the name of the youngest editor?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by age asc limit 1", "query": "SELECT Name FROM editor ORDER BY Age ASC LIMIT 1", "sub_ques": "the youngest editor"}
{"db_id": "journal_committee", "sub_sql": "select age , count editor group by age", "question": "What are the different ages of editors? Show each age along with the number of editors of that age.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select age , count editor", "query": "SELECT Age ,  COUNT(*) FROM editor GROUP BY Age", "sub_ques": "show each age along with the number of editors of that age"}
{"db_id": "journal_committee", "sub_sql": "select age from editor", "question": "Please show the most common age of editors.", "sub_sql_type": "null col col col", "sub_sql_new": "select age from editor", "query": "SELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "show age of editors"}
{"db_id": "journal_committee", "sub_sql": "group by age order by count editor desc limit 1", "question": "Please show the most common age of editors.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count editor desc limit 1", "query": "SELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "the most common age of editors"}
{"db_id": "journal_committee", "sub_sql": "select distinct theme from journal", "question": "Show the distinct themes of journals.", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct theme from journal", "query": "SELECT DISTINCT Theme FROM journal", "sub_ques": "show the distinct themes of journals"}
{"db_id": "journal_committee", "sub_sql": "select t2.name , t3.theme from editor , journal", "question": "Show the names of editors and the theme of journals for which they serve on committees.", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select name , theme from editor , journal", "query": "SELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID", "sub_ques": "show the names of editors and the theme of journals"}
{"db_id": "journal_committee", "sub_sql": "select t2.name , t3.theme from editor , journal", "question": "For each journal_committee, find the editor name and the journal theme.", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select name , theme from editor , journal", "query": "SELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID", "sub_ques": "find the editor name and the journal theme"}
{"db_id": "journal_committee", "sub_sql": "select t2.name , t2.age , t3.theme from editor , journal", "question": "Show the names and ages of editors and the theme of journals for which they serve on committees, in ascending alphabetical order of theme.", "sub_sql_type": "null col null col null col col col null col", "sub_sql_new": "select name , age , theme from editor , journal", "query": "SELECT T2.Name ,  T2.age ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID ORDER BY T3.Theme ASC", "sub_ques": "show the names and ages of editors and the theme of journals"}
{"db_id": "journal_committee", "sub_sql": "order by t3.theme asc", "question": "Show the names and ages of editors and the theme of journals for which they serve on committees, in ascending alphabetical order of theme.", "sub_sql_type": "null null col null", "sub_sql_new": "order by theme asc", "query": "SELECT T2.Name ,  T2.age ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID ORDER BY T3.Theme ASC", "sub_ques": "in ascending alphabetical order of theme"}
{"db_id": "journal_committee", "sub_sql": "select t2.name from editor", "question": "Show the names of editors that are on the committee of journals with sales bigger than 3000.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from editor", "query": "SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID WHERE T3.Sales  >  3000", "sub_ques": "show the names of editors"}
{"db_id": "journal_committee", "sub_sql": "where t3.sales > 3000", "question": "Show the names of editors that are on the committee of journals with sales bigger than 3000.", "sub_sql_type": "null col op op value", "sub_sql_new": "where sales more than 3000", "query": "SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID WHERE T3.Sales  >  3000", "sub_ques": "journals with sales bigger than 3000"}
{"db_id": "journal_committee", "sub_sql": "select t1.editor_id , t1.name from editor group by t1.editor_id", "question": "Show the id, name of each editor and the number of journal committees they are on.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select editor_id , name from editor", "query": "SELECT T1.editor_id ,  T1.Name ,  COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.editor_id", "sub_ques": "show the id , name of each editor"}
{"db_id": "journal_committee", "sub_sql": "select t1.name from editor", "question": "Show the names of editors that are on at least two journal committees.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from editor", "query": "SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  2", "sub_ques": "show the names of editors"}
{"db_id": "journal_committee", "sub_sql": "group by t1.name having count journal_committee >= 2", "question": "Show the names of editors that are on at least two journal committees.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  2", "sub_ques": "names of editors that are on at least two journal committees"}
{"db_id": "journal_committee", "sub_sql": "select name from editor", "question": "List the names of editors that are not on any journal committee.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from editor", "query": "SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)", "sub_ques": "list the names of editors"}
{"db_id": "journal_committee", "sub_sql": "select avg t1.sales from journal", "question": "What is the average sales of the journals that have an editor whose work type is 'Photo'?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select avg sales from journal", "query": "SELECT avg(T1.sales) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID WHERE T2.work_type  =  'Photo'", "sub_ques": "what is the average sales of the journals"}
{"db_id": "journal_committee", "sub_sql": "where t2.work_type = photo", "question": "What is the average sales of the journals that have an editor whose work type is 'Photo'?", "sub_sql_type": "null col op op value", "sub_sql_new": "where work_type equal to photo", "query": "SELECT avg(T1.sales) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID WHERE T2.work_type  =  'Photo'", "sub_ques": "work type is ' photo '"}
{"db_id": "customers_card_transactions", "sub_sql": "select count accounts", "question": "How many accounts do we have?", "sub_sql_type": "null agg col", "sub_sql_new": "select count accounts", "query": "SELECT count(*) FROM Accounts", "sub_ques": "how many accounts"}
{"db_id": "customers_card_transactions", "sub_sql": "select count accounts", "question": "Count the number of accounts.", "sub_sql_type": "null agg col", "sub_sql_new": "select count accounts", "query": "SELECT count(*) FROM Accounts", "sub_ques": "count the number of accounts"}
{"db_id": "customers_card_transactions", "sub_sql": "select account_id , customer_id , account_name from accounts", "question": "Show ids, customer ids, names for all accounts.", "sub_sql_type": "null col col null col col null col col col col", "sub_sql_new": "select account id , customer id , account name from accounts", "query": "SELECT account_id ,  customer_id ,  account_name FROM Accounts", "sub_ques": "show ids , customer ids , names for all accounts"}
{"db_id": "customers_card_transactions", "sub_sql": "select account_id , customer_id , account_name from accounts", "question": "What are the account ids, customer ids, and account names for all the accounts?", "sub_sql_type": "null col col null col col null col col col col", "sub_sql_new": "select account id , customer id , account name from accounts", "query": "SELECT account_id ,  customer_id ,  account_name FROM Accounts", "sub_ques": "what are the account ids , customer ids , and account names for all the accounts"}
{"db_id": "customers_card_transactions", "sub_sql": "select other_account_details from accounts", "question": "Show other account details for account with name 338.", "sub_sql_type": "null col col col col col", "sub_sql_new": "select other account details from accounts", "query": "SELECT other_account_details FROM Accounts WHERE account_name  =  \\\\\\\"338\\\\\\\"", "sub_ques": "show other account details"}
{"db_id": "customers_card_transactions", "sub_sql": "where account_name = 338", "question": "Show other account details for account with name 338.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where account name equal to 338", "query": "SELECT other_account_details FROM Accounts WHERE account_name  =  \\\\\\\"338\\\\\\\"", "sub_ques": "account with name 338"}
{"db_id": "customers_card_transactions", "sub_sql": "select other_account_details from accounts", "question": "What are the other account details for the account with the name 338?", "sub_sql_type": "null col col col col col", "sub_sql_new": "select other account details from accounts", "query": "SELECT other_account_details FROM Accounts WHERE account_name  =  \\\\\\\"338\\\\\\\"", "sub_ques": "what are the other account details"}
{"db_id": "customers_card_transactions", "sub_sql": "where account_name = 338", "question": "What are the other account details for the account with the name 338?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where account name equal to 338", "query": "SELECT other_account_details FROM Accounts WHERE account_name  =  \\\\\\\"338\\\\\\\"", "sub_ques": "account with the name 338"}
{"db_id": "customers_card_transactions", "sub_sql": "select t2.customer_first_name , t2.customer_last_name , t2.customer_phone from customers", "question": "What is the first name, last name, and phone of the customer with account name 162?", "sub_sql_type": "null col col col null col col col null col col col col", "sub_sql_new": "select customer first name , customer last name , customer phone from customers", "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \\\\\\\"162\\\\\\\"", "sub_ques": "what is the first name , last name , and phone of the customer"}
{"db_id": "customers_card_transactions", "sub_sql": "where t1.account_name = 162", "question": "What is the first name, last name, and phone of the customer with account name 162?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where account name equal to 162", "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \\\\\\\"162\\\\\\\"", "sub_ques": "account name 162"}
{"db_id": "customers_card_transactions", "sub_sql": "select t2.customer_first_name , t2.customer_last_name , t2.customer_phone from customers", "question": "Give the full name and phone of the customer who has the account name 162.", "sub_sql_type": "null col col col null col col col null col col col col", "sub_sql_new": "select customer first name , customer last name , customer phone from customers", "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \\\\\\\"162\\\\\\\"", "sub_ques": "give the full name and phone of the customer"}
{"db_id": "customers_card_transactions", "sub_sql": "where t1.account_name = 162", "question": "Give the full name and phone of the customer who has the account name 162.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where account name equal to 162", "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \\\\\\\"162\\\\\\\"", "sub_ques": "account name 162"}
{"db_id": "customers_card_transactions", "sub_sql": "select count accounts", "question": "How many accounts does the customer with first name Art and last name Turcotte have?", "sub_sql_type": "null agg col", "sub_sql_new": "select count accounts", "query": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \\\\\\\"Art\\\\\\\" AND T2.customer_last_name  =  \\\\\\\"Turcotte\\\\\\\"", "sub_ques": "how many accounts"}
{"db_id": "customers_card_transactions", "sub_sql": "where t2.customer_first_name = art", "question": "How many accounts does the customer with first name Art and last name Turcotte have?", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where customer first name equal to art", "query": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \\\\\\\"Art\\\\\\\" AND T2.customer_last_name  =  \\\\\\\"Turcotte\\\\\\\"", "sub_ques": "customer with first name art"}
{"db_id": "customers_card_transactions", "sub_sql": "select count accounts", "question": "Return the number of accounts that the customer with the first name Art and last name Turcotte has.", "sub_sql_type": "null agg col", "sub_sql_new": "select count accounts", "query": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \\\\\\\"Art\\\\\\\" AND T2.customer_last_name  =  \\\\\\\"Turcotte\\\\\\\"", "sub_ques": "return the number of accounts"}
{"db_id": "customers_card_transactions", "sub_sql": "where t2.customer_first_name = art", "question": "Return the number of accounts that the customer with the first name Art and last name Turcotte has.", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where customer first name equal to art", "query": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \\\\\\\"Art\\\\\\\" AND T2.customer_last_name  =  \\\\\\\"Turcotte\\\\\\\"", "sub_ques": "customer with the first name art"}
{"db_id": "customers_card_transactions", "sub_sql": "select customer_id , count accounts group by customer_id", "question": "Show all customer ids and the number of accounts for each customer.", "sub_sql_type": "null col col null agg col", "sub_sql_new": "select customer id , count accounts", "query": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id", "sub_ques": "show all customer ids and the number of accounts for each customer"}
{"db_id": "customers_card_transactions", "sub_sql": "select customer_id , count accounts group by customer_id", "question": "How many accounts are there for each customer id?", "sub_sql_type": "null col col null agg col", "sub_sql_new": "select customer id , count accounts", "query": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id", "sub_ques": "how many accounts are there for each customer id"}
{"db_id": "customers_card_transactions", "sub_sql": "select customer_id , count accounts group by customer_id", "question": "Show the customer id and number of accounts with most accounts.", "sub_sql_type": "null col col null agg col", "sub_sql_new": "select customer id , count accounts", "query": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "show the customer id and number of accounts with most accounts"}
{"db_id": "customers_card_transactions", "sub_sql": "group by customer_id order by count accounts desc limit 1", "question": "Show the customer id and number of accounts with most accounts.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count accounts desc limit 1", "query": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the customer id with most accounts"}
{"db_id": "customers_card_transactions", "sub_sql": "select customer_id , count accounts from accounts group by customer_id", "question": "What is the customer id of the customer with the most accounts, and how many accounts does this person have?", "sub_sql_type": "null col col null agg col col col", "sub_sql_new": "select customer id , count accounts from accounts", "query": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "what is the customer id and how many accounts"}
{"db_id": "customers_card_transactions", "sub_sql": "group by customer_id order by count accounts desc limit 1", "question": "What is the customer id of the customer with the most accounts, and how many accounts does this person have?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count accounts desc limit 1", "query": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the customer with the most accounts"}
{"db_id": "customers_card_transactions", "sub_sql": "select t2.customer_first_name , t2.customer_last_name , t1.customer_id from customers , accounts", "question": "What is the customer first, last name and id with least number of accounts.", "sub_sql_type": "null col col col null col col col null col col col col null col", "sub_sql_new": "select customer first name , customer last name , customer id from customers , accounts", "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1", "sub_ques": "what is the customer first , last name and id "}
{"db_id": "customers_card_transactions", "sub_sql": "group by t1.customer_id order by count accounts asc limit 1", "question": "What is the customer first, last name and id with least number of accounts.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count accounts asc limit 1", "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1", "sub_ques": "id with least number of accounts"}
{"db_id": "customers_card_transactions", "sub_sql": "select t2.customer_first_name , t2.customer_last_name , t1.customer_id from customers , accounts", "question": "Give the full name and customer id of the customer with the fewest accounts.", "sub_sql_type": "null col col col null col col col null col col col col null col", "sub_sql_new": "select customer first name , customer last name , customer id from customers , accounts", "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1", "sub_ques": "give the full name and customer id of the customer"}
{"db_id": "customers_card_transactions", "sub_sql": "group by t1.customer_id order by count accounts asc limit 1", "question": "Give the full name and customer id of the customer with the fewest accounts.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count accounts asc limit 1", "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1", "sub_ques": "the customer with the fewest accounts"}
{"db_id": "customers_card_transactions", "sub_sql": "select count customers", "question": "Show the number of all customers without an account.", "sub_sql_type": "null agg col", "sub_sql_new": "select count customers", "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)", "sub_ques": "show the number of all customers "}
{"db_id": "customers_card_transactions", "sub_sql": "customers not in accounts", "question": "Show the number of all customers without an account.", "sub_sql_type": "op op", "sub_sql_new": "customers tab not in accounts tab", "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)", "sub_ques": "customers without an account"}
{"db_id": "customers_card_transactions", "sub_sql": "select count customers", "question": "How many customers do not have an account?", "sub_sql_type": "null agg col", "sub_sql_new": "select count customers", "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)", "sub_ques": "how many customers"}
{"db_id": "customers_card_transactions", "sub_sql": "customers not in accounts", "question": "How many customers do not have an account?", "sub_sql_type": "op op", "sub_sql_new": "customers tab not in accounts tab", "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)", "sub_ques": "customers do not have an account"}
{"db_id": "customers_card_transactions", "sub_sql": "select distinct t1.customer_first_name , t1.customer_last_name from customers", "question": "Show distinct first and last names for all customers with an account.", "sub_sql_type": "null col col col col null col col col col col", "sub_sql_new": "select distinct customer first name , customer last name from customers", "query": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id", "sub_ques": "show distinct first and last names for all customers"}
{"db_id": "customers_card_transactions", "sub_sql": "select distinct t1.customer_first_name , t1.customer_last_name from customers", "question": "What are the full names of customers who have accounts?", "sub_sql_type": "null col col col col null col col col col col", "sub_sql_new": "select distinct customer first name , customer last name from customers", "query": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id", "sub_ques": "what are the full names of customers"}
{"db_id": "customers_card_transactions", "sub_sql": "select count distinct customer_id from accounts", "question": "How many customers have an account?", "sub_sql_type": "null agg col col col col col", "sub_sql_new": "select count distinct customer id from accounts", "query": "SELECT count(DISTINCT customer_id) FROM Accounts", "sub_ques": "how many customers have an account"}
{"db_id": "customers_card_transactions", "sub_sql": "select count distinct customer_id from accounts", "question": "Count the number of customers who hold an account.", "sub_sql_type": "null agg col col col col col", "sub_sql_new": "select count distinct customer id from accounts", "query": "SELECT count(DISTINCT customer_id) FROM Accounts", "sub_ques": "count the number of customers who hold an account"}
{"db_id": "customers_card_transactions", "sub_sql": "select count customers", "question": "How many customers do we have?", "sub_sql_type": "null agg col", "sub_sql_new": "select count customers", "query": "SELECT count(*) FROM Customers", "sub_ques": "how many customers"}
{"db_id": "customers_card_transactions", "sub_sql": "select count customers", "question": "Count the number of customers.", "sub_sql_type": "null agg col", "sub_sql_new": "select count customers", "query": "SELECT count(*) FROM Customers", "sub_ques": "count the number of customers"}
{"db_id": "customers_card_transactions", "sub_sql": "select customer_id , customer_first_name , customer_last_name , customer_phone from customers", "question": "Show ids, first names, last names, and phones for all customers.", "sub_sql_type": "null col col null col col col null col col col null col col col col", "sub_sql_new": "select customer id , customer first name , customer last name , customer phone from customers", "query": "SELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers", "sub_ques": "show ids , first names , last names , and phones for all customers"}
{"db_id": "customers_card_transactions", "sub_sql": "select customer_id , customer_first_name , customer_last_name , customer_phone from customers", "question": "What are the ids, full names, and phones of each customer?", "sub_sql_type": "null col col null col col col null col col col null col col col col", "sub_sql_new": "select customer id , customer first name , customer last name , customer phone from customers", "query": "SELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers", "sub_ques": "what are the ids , full names , and phones of each customer"}
{"db_id": "customers_card_transactions", "sub_sql": "select customer_phone , customer_email from customers", "question": "What is the phone and email for customer with first name Aniyah and last name Feest?", "sub_sql_type": "null col col null col col col col", "sub_sql_new": "select customer phone , customer email from customers", "query": "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \\\\\\\"Aniyah\\\\\\\" AND customer_last_name  =  \\\\\\\"Feest\\\\\\\"", "sub_ques": "what is the phone and email for customer"}
{"db_id": "customers_card_transactions", "sub_sql": "where customer_first_name = aniyah", "question": "What is the phone and email for customer with first name Aniyah and last name Feest?", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where customer first name equal to aniyah", "query": "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \\\\\\\"Aniyah\\\\\\\" AND customer_last_name  =  \\\\\\\"Feest\\\\\\\"", "sub_ques": "customer with first name aniyah"}
{"db_id": "customers_card_transactions", "sub_sql": "select customer_phone , customer_email from customers", "question": "Return the phone and email of the customer with the first name Aniyah and last name Feest.", "sub_sql_type": "null col col null col col col col", "sub_sql_new": "select customer phone , customer email from customers", "query": "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \\\\\\\"Aniyah\\\\\\\" AND customer_last_name  =  \\\\\\\"Feest\\\\\\\"", "sub_ques": "return the phone and email of the customer"}
{"db_id": "customers_card_transactions", "sub_sql": "where customer_first_name = aniyah", "question": "Return the phone and email of the customer with the first name Aniyah and last name Feest.", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where customer first name equal to aniyah", "query": "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \\\\\\\"Aniyah\\\\\\\" AND customer_last_name  =  \\\\\\\"Feest\\\\\\\"", "sub_ques": "customer with the first name aniyah"}
{"db_id": "customers_card_transactions", "sub_sql": "select count customers_cards", "question": "Show the number of customer cards.", "sub_sql_type": "null agg col", "sub_sql_new": "select count customers_cards", "query": "SELECT count(*) FROM Customers_cards", "sub_ques": "show the number of customer cards"}
{"db_id": "customers_card_transactions", "sub_sql": "select count customers_cards", "question": "How many customer cards are there?", "sub_sql_type": "null agg col", "sub_sql_new": "select count customers_cards", "query": "SELECT count(*) FROM Customers_cards", "sub_ques": "how many customer cards are there"}
{"db_id": "customers_card_transactions", "sub_sql": "select card_id , customer_id , card_type_code , card_number from customers_cards", "question": "Show ids, customer ids, card type codes, card numbers for all cards.", "sub_sql_type": "null col col null col col null col col col null col col col col", "sub_sql_new": "select card id , customer id , card type code , card number from customers_cards", "query": "SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards", "sub_ques": "show ids , customer ids , card type codes , card numbers"}
{"db_id": "customers_card_transactions", "sub_sql": "select card_id , customer_id , card_type_code , card_number from customers_cards", "question": "What are card ids, customer ids, card types, and card numbers for each customer card?", "sub_sql_type": "null col col null col col null col col col null col col col col", "sub_sql_new": "select card id , customer id , card type code , card number from customers_cards", "query": "SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards", "sub_ques": "what are card ids , customer ids , card types , and card numbers"}
{"db_id": "customers_card_transactions", "sub_sql": "select date_valid_from , date_valid_to from customers_cards", "question": "Show the date valid from and the date valid to for the card with card number '4560596484842'.", "sub_sql_type": "null col col col null col col col col col", "sub_sql_new": "select date valid from , date valid to from customers_cards", "query": "SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \\\\\\\"4560596484842\\\\\\\"", "sub_ques": "show the date valid from and the date valid to"}
{"db_id": "customers_card_transactions", "sub_sql": "where card_number = 4560596484842", "question": "Show the date valid from and the date valid to for the card with card number '4560596484842'.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where card number equal to 4560596484842", "query": "SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \\\\\\\"4560596484842\\\\\\\"", "sub_ques": "card number 4560596484842"}
{"db_id": "customers_card_transactions", "sub_sql": "select date_valid_from , date_valid_to from customers_cards", "question": "What are the valid from and valid to dates for the card with the number 4560596484842?", "sub_sql_type": "null col col col null col col col col col", "sub_sql_new": "select date valid from , date valid to from customers_cards", "query": "SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \\\\\\\"4560596484842\\\\\\\"", "sub_ques": "what are the valid from and valid to dates"}
{"db_id": "customers_card_transactions", "sub_sql": "where card_number = 4560596484842", "question": "What are the valid from and valid to dates for the card with the number 4560596484842?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where card number equal to 4560596484842", "query": "SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \\\\\\\"4560596484842\\\\\\\"", "sub_ques": "number 4560596484842"}
{"db_id": "customers_card_transactions", "sub_sql": "select t2.customer_first_name , t2.customer_last_name , t2.customer_phone from customers", "question": "What is the first name, last name, and phone of the customer with card 4560596484842.", "sub_sql_type": "null col col col null col col col null col col col col", "sub_sql_new": "select customer first name , customer last name , customer phone from customers", "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  \\\\\\\"4560596484842\\\\\\\"", "sub_ques": "what is the first name , last name , and phone of the customer"}
{"db_id": "customers_card_transactions", "sub_sql": "where t1.card_number = 4560596484842", "question": "What is the first name, last name, and phone of the customer with card 4560596484842.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where card number equal to 4560596484842", "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  \\\\\\\"4560596484842\\\\\\\"", "sub_ques": "card 4560596484842"}
{"db_id": "customers_card_transactions", "sub_sql": "select t2.customer_first_name , t2.customer_last_name , t2.customer_phone from customers", "question": "Return the full name and phone of the customer who has card number 4560596484842.", "sub_sql_type": "null col col col null col col col null col col col col", "sub_sql_new": "select customer first name , customer last name , customer phone from customers", "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  \\\\\\\"4560596484842\\\\\\\"", "sub_ques": "return the full name and phone of the customer"}
{"db_id": "customers_card_transactions", "sub_sql": "where t1.card_number = 4560596484842", "question": "Return the full name and phone of the customer who has card number 4560596484842.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where card number equal to 4560596484842", "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  \\\\\\\"4560596484842\\\\\\\"", "sub_ques": "card number 4560596484842"}
{"db_id": "customers_card_transactions", "sub_sql": "select count customers_cards", "question": "How many cards does customer Art Turcotte have?", "sub_sql_type": "null agg col", "sub_sql_new": "select count customers_cards", "query": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \\\\\\\"Art\\\\\\\" AND T2.customer_last_name  =  \\\\\\\"Turcotte\\\\\\\"", "sub_ques": "how many cards does customer"}
{"db_id": "customers_card_transactions", "sub_sql": "where t2.customer_first_name = art", "question": "How many cards does customer Art Turcotte have?", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where customer first name equal to art", "query": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \\\\\\\"Art\\\\\\\" AND T2.customer_last_name  =  \\\\\\\"Turcotte\\\\\\\"", "sub_ques": "customer art"}
{"db_id": "customers_card_transactions", "sub_sql": "select count customers_cards ", "question": "Count the number of cards the customer with the first name Art and last name Turcotte has.", "sub_sql_type": "null agg col", "sub_sql_new": "select count customers_cards  col", "query": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \\\\\\\"Art\\\\\\\" AND T2.customer_last_name  =  \\\\\\\"Turcotte\\\\\\\"", "sub_ques": "count the number of cards the customer"}
{"db_id": "customers_card_transactions", "sub_sql": "where t2.customer_first_name = art", "question": "Count the number of cards the customer with the first name Art and last name Turcotte has.", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where customer first name equal to art", "query": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \\\\\\\"Art\\\\\\\" AND T2.customer_last_name  =  \\\\\\\"Turcotte\\\\\\\"", "sub_ques": "customer with the first name art"}
{"db_id": "customers_card_transactions", "sub_sql": "select count customers_cards", "question": "How many debit cards do we have?", "sub_sql_type": "null agg col", "sub_sql_new": "select count customers_cards", "query": "SELECT count(*) FROM Customers_cards WHERE card_type_code  =  \\\\\\\"Debit\\\\\\\"", "sub_ques": "how many cards do we have"}
{"db_id": "customers_card_transactions", "sub_sql": "where card_type_code = debit", "question": "How many debit cards do we have?", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where card type code equal to debit", "query": "SELECT count(*) FROM Customers_cards WHERE card_type_code  =  \\\\\\\"Debit\\\\\\\"", "sub_ques": "debit cards"}
{"db_id": "customers_card_transactions", "sub_sql": "select count customers_cards", "question": "Count the number of customer cards of the type Debit.", "sub_sql_type": "null agg col", "sub_sql_new": "select count customers_cards", "query": "SELECT count(*) FROM Customers_cards WHERE card_type_code  =  \\\\\\\"Debit\\\\\\\"", "sub_ques": "count the number of customer cards"}
{"db_id": "customers_card_transactions", "sub_sql": "where card_type_code = debit", "question": "Count the number of customer cards of the type Debit.", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where card type code equal to debit", "query": "SELECT count(*) FROM Customers_cards WHERE card_type_code  =  \\\\\\\"Debit\\\\\\\"", "sub_ques": "cards of the type debit"}
{"db_id": "customers_card_transactions", "sub_sql": "select count customers_cards", "question": "How many credit cards does customer Blanche Huels have?", "sub_sql_type": "null agg col", "sub_sql_new": "select count customers_cards", "query": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \\\\\\\"Blanche\\\\\\\" AND T2.customer_last_name  =  \\\\\\\"Huels\\\\\\\" AND T1.card_type_code  =  \\\\\\\"Credit\\\\\\\"", "sub_ques": "how many cards"}
{"db_id": "customers_card_transactions", "sub_sql": "where t2.customer_first_name = blanche", "question": "How many credit cards does customer Blanche Huels have?", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where customer first name equal to blanche", "query": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \\\\\\\"Blanche\\\\\\\" AND T2.customer_last_name  =  \\\\\\\"Huels\\\\\\\" AND T1.card_type_code  =  \\\\\\\"Credit\\\\\\\"", "sub_ques": "customer blanche"}
{"db_id": "customers_card_transactions", "sub_sql": "select count customers_cards", "question": "Count the number of credit cards that the customer with first name Blanche and last name Huels has.", "sub_sql_type": "null agg col", "sub_sql_new": "select count customers_cards", "query": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \\\\\\\"Blanche\\\\\\\" AND T2.customer_last_name  =  \\\\\\\"Huels\\\\\\\" AND T1.card_type_code  =  \\\\\\\"Credit\\\\\\\"", "sub_ques": "count the number of credit cards"}
{"db_id": "customers_card_transactions", "sub_sql": "where t2.customer_first_name = blanche", "question": "Count the number of credit cards that the customer with first name Blanche and last name Huels has.", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where customer first name equal to blanche", "query": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \\\\\\\"Blanche\\\\\\\" AND T2.customer_last_name  =  \\\\\\\"Huels\\\\\\\" AND T1.card_type_code  =  \\\\\\\"Credit\\\\\\\"", "sub_ques": "customer with first name blanche"}
{"db_id": "customers_card_transactions", "sub_sql": "select customer_id , count customers_cards group by customer_id", "question": "Show all customer ids and the number of cards owned by each customer.", "sub_sql_type": "null col col null agg col", "sub_sql_new": "select customer id , count customers_cards", "query": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id", "sub_ques": "show all customer ids and the number of cards owned by each customer"}
{"db_id": "customers_card_transactions", "sub_sql": "select customer_id , count customers_cards group by customer_id", "question": "What are the different customer ids, and how many cards does each one hold?", "sub_sql_type": "null col col null agg col", "sub_sql_new": "select customer id , count customers_cards", "query": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id", "sub_ques": "what are the different customer ids and how many does he have"}
{"db_id": "customers_card_transactions", "sub_sql": "group by customer_id order by count customers_cards desc limit 1", "question": "What is the customer id with most number of cards, and how many does he have?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count customers_cards desc limit 1", "query": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the customer id with most number of cards"}
{"db_id": "customers_card_transactions", "sub_sql": "select customer_id , count customers_cards group by customer_id", "question": "Return the id of the customer who has the most cards, as well as the number of cards.", "sub_sql_type": "null col col null agg col", "sub_sql_new": "select customer id , count customers_cards", "query": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "return the id of the customer as well as the number of cards ."}
{"db_id": "customers_card_transactions", "sub_sql": "group by customer_id order by count customers_cards desc limit 1", "question": "Return the id of the customer who has the most cards, as well as the number of cards.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count customers_cards desc limit 1", "query": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the id of the customer who has the most cards"}
{"db_id": "customers_card_transactions", "sub_sql": "select t1.customer_id , t2.customer_first_name , t2.customer_last_name from customers_cards , customers", "question": "Show id, first and last names for all customers with at least two cards.", "sub_sql_type": "null col col null col col col null col col col col col null col", "sub_sql_new": "select customer id , customer first name , customer last name from customers_cards , customers", "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2", "sub_ques": "show id , first and last names for all customers"}
{"db_id": "customers_card_transactions", "sub_sql": "group by t1.customer_id having count customers_cards >= 2", "question": "Show id, first and last names for all customers with at least two cards.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2", "sub_ques": "all customers with at least two cards"}
{"db_id": "customers_card_transactions", "sub_sql": "select t1.customer_id , t2.customer_first_name , t2.customer_last_name from customers_cards , customers", "question": "What are the ids and full names of customers who hold two or more cards?", "sub_sql_type": "null col col null col col col null col col col col col null col", "sub_sql_new": "select customer id , customer first name , customer last name from customers_cards , customers", "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2", "sub_ques": "what are the ids and full names of customers"}
{"db_id": "customers_card_transactions", "sub_sql": "group by t1.customer_id having count customers_cards >= 2", "question": "What are the ids and full names of customers who hold two or more cards?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2", "sub_ques": "customers who hold two or more cards"}
{"db_id": "customers_card_transactions", "sub_sql": "select t1.customer_id , t2.customer_first_name , t2.customer_last_name from customers_cards , customers", "question": "What is the customer id, first and last name with least number of accounts.", "sub_sql_type": "null col col null col col col null col col col col col null col", "sub_sql_new": "select customer id , customer first name , customer last name from customers_cards , customers", "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1", "sub_ques": "what is the customer id , first and last name"}
{"db_id": "customers_card_transactions", "sub_sql": "group by t1.customer_id order by count accounts asc limit 1", "question": "What is the customer id, first and last name with least number of accounts.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count accounts asc limit 1", "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1", "sub_ques": "the customer with least number of accounts"}
{"db_id": "customers_card_transactions", "sub_sql": "select t1.customer_id , t2.customer_first_name , t2.customer_last_name from customers_cards , customers", "question": "Return the id and full name of the customer who has the fewest accounts.", "sub_sql_type": "null col col null col col col null col col col col col null col", "sub_sql_new": "select customer id , customer first name , customer last name from customers_cards , customers", "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1", "sub_ques": "return the id and full name of the customer"}
{"db_id": "customers_card_transactions", "sub_sql": "group by t1.customer_id order by count accounts asc limit 1", "question": "Return the id and full name of the customer who has the fewest accounts.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count accounts asc limit 1", "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1", "sub_ques": "the customer who has the fewest accounts"}
{"db_id": "customers_card_transactions", "sub_sql": "select card_type_code , count customers_cards group by card_type_code", "question": "Show all card type codes and the number of cards in each type.", "sub_sql_type": "null col col col null agg col", "sub_sql_new": "select card type code , count customers_cards", "query": "SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code", "sub_ques": "show all card type codes and the number of cards in each type"}
{"db_id": "customers_card_transactions", "sub_sql": "select card_type_code , count customers_cards group by card_type_code", "question": "What are the different card types, and how many cards are there of each?", "sub_sql_type": "null col col col null agg col", "sub_sql_new": "select card type code , count customers_cards", "query": "SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code", "sub_ques": "what are the different card types , and how many cards"}
{"db_id": "customers_card_transactions", "sub_sql": "select card_type_code from customers_cards", "question": "What is the card type code with most number of cards?", "sub_sql_type": "null col col col col col", "sub_sql_new": "select card type code from customers_cards", "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1", "sub_ques": "what is the card type code"}
{"db_id": "customers_card_transactions", "sub_sql": "group by card_type_code order by count customers_cards desc limit 1", "question": "What is the card type code with most number of cards?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count customers_cards desc limit 1", "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the card type code with most number of cards"}
{"db_id": "customers_card_transactions", "sub_sql": "select card_type_code from customers_cards", "question": "Return the code of the card type that is most common.", "sub_sql_type": "null col col col col col", "sub_sql_new": "select card type code from customers_cards", "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1", "sub_ques": "return the code of the card type"}
{"db_id": "customers_card_transactions", "sub_sql": "group by card_type_code order by count customers_cards desc limit 1", "question": "Return the code of the card type that is most common.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count customers_cards desc limit 1", "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the code of the card type that is most common"}
{"db_id": "customers_card_transactions", "sub_sql": "select card_type_code from customers_cards", "question": "Show card type codes with at least 5 cards.", "sub_sql_type": "null col col col col col", "sub_sql_new": "select card type code from customers_cards", "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5", "sub_ques": "show card type codes"}
{"db_id": "customers_card_transactions", "sub_sql": "group by card_type_code having count customers_cards >= 5", "question": "Show card type codes with at least 5 cards.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5", "sub_ques": "card type codes with at least 5 cards"}
{"db_id": "customers_card_transactions", "sub_sql": "select card_type_code from customers_cards", "question": "What are the codes of card types that have 5 or more cards?", "sub_sql_type": "null col col col col col", "sub_sql_new": "select card type code from customers_cards", "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5", "sub_ques": "what are the codes of card types"}
{"db_id": "customers_card_transactions", "sub_sql": "group by card_type_code having count customers_cards >= 5", "question": "What are the codes of card types that have 5 or more cards?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5", "sub_ques": "codes of card types that have 5 or more cards"}
{"db_id": "customers_card_transactions", "sub_sql": "select card_type_code , count distinct customer_id from customers_cards", "question": "Show all card type codes and the number of customers holding cards in each type.", "sub_sql_type": "null col col col null agg col col col col col", "sub_sql_new": "select card type code , count distinct customer id from customers_cards", "query": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code", "sub_ques": "show all card type codes and the number of customers holding cards in each type"}
{"db_id": "customers_card_transactions", "sub_sql": "select card_type_code , count distinct customer_id from customers_cards", "question": "What are the different card type codes, and how many different customers hold each type?", "sub_sql_type": "null col col col null agg col col col col col", "sub_sql_new": "select card type code , count distinct customer id from customers_cards", "query": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code", "sub_ques": "what are the different card type codes , and how many different customers hold each type"}
{"db_id": "customers_card_transactions", "sub_sql": "select distinct card_type_code from customers_cards", "question": "Show all card type codes.", "sub_sql_type": "null col col col col col col", "sub_sql_new": "select distinct card type code from customers_cards", "query": "SELECT DISTINCT card_type_code FROM Customers_Cards", "sub_ques": "show all card type codes"}
{"db_id": "customers_card_transactions", "sub_sql": "select distinct card_type_code from customers_cards", "question": "What are the different card type codes?", "sub_sql_type": "null col col col col col col", "sub_sql_new": "select distinct card type code from customers_cards", "query": "SELECT DISTINCT card_type_code FROM Customers_Cards", "sub_ques": "what are the different card type codes"}
{"db_id": "customers_card_transactions", "sub_sql": "select count distinct card_type_code from customers_cards", "question": "Show the number of card types.", "sub_sql_type": "null agg col col col col col col", "sub_sql_new": "select count distinct card type code from customers_cards", "query": "SELECT count(DISTINCT card_type_code) FROM Customers_Cards", "sub_ques": "show the number of card types"}
{"db_id": "customers_card_transactions", "sub_sql": "select count distinct card_type_code from customers_cards", "question": "How many different card types are there?", "sub_sql_type": "null agg col col col col col col", "sub_sql_new": "select count distinct card type code from customers_cards", "query": "SELECT count(DISTINCT card_type_code) FROM Customers_Cards", "sub_ques": "how many different card types"}
{"db_id": "customers_card_transactions", "sub_sql": "select distinct transaction_type from financial_transactions", "question": "Show all transaction types.", "sub_sql_type": "null col col col col col", "sub_sql_new": "select distinct transaction type from financial_transactions", "query": "SELECT DISTINCT transaction_type FROM Financial_Transactions", "sub_ques": "show all transaction types"}
{"db_id": "customers_card_transactions", "sub_sql": "select distinct transaction_type from financial_transactions", "question": "What are the different types of transactions?", "sub_sql_type": "null col col col col col", "sub_sql_new": "select distinct transaction type from financial_transactions", "query": "SELECT DISTINCT transaction_type FROM Financial_Transactions", "sub_ques": "what are the different types of transactions"}
{"db_id": "customers_card_transactions", "sub_sql": "select count distinct transaction_type from financial_transactions", "question": "Show the number of transaction types.", "sub_sql_type": "null agg col col col col col", "sub_sql_new": "select count distinct transaction type from financial_transactions", "query": "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions", "sub_ques": "show the number of transaction types"}
{"db_id": "customers_card_transactions", "sub_sql": "select count distinct transaction_type from financial_transactions", "question": "How many different types of transactions are there?", "sub_sql_type": "null agg col col col col col", "sub_sql_new": "select count distinct transaction type from financial_transactions", "query": "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions", "sub_ques": "how many different types of transactions"}
{"db_id": "customers_card_transactions", "sub_sql": "select avg transaction_amount , sum transaction_amount from financial_transactions", "question": "What is the average and total transaction amount?", "sub_sql_type": "null agg col col null agg col col col col", "sub_sql_new": "select avg transaction amount , sum transaction amount from financial_transactions", "query": "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions", "sub_ques": "what is the average and total transaction amount"}
{"db_id": "customers_card_transactions", "sub_sql": "select avg transaction_amount , sum transaction_amount from financial_transactions", "question": "Return the average transaction amount, as well as the total amount of all transactions.", "sub_sql_type": "null agg col col null agg col col col col", "sub_sql_new": "select avg transaction amount , sum transaction amount from financial_transactions", "query": "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions", "sub_ques": "average transaction amount , as well as the total amount of all transactions"}
{"db_id": "customers_card_transactions", "sub_sql": "select t2.card_type_code , count customers_cards group by t2.card_type_code", "question": "Show the card type codes and the number of transactions.", "sub_sql_type": "null col col col null agg col", "sub_sql_new": "select card type code , count customers_cards", "query": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code", "sub_ques": "show the card type codes and the number of transactions"}
{"db_id": "customers_card_transactions", "sub_sql": "select t2.card_type_code , count customers_cards group by t2.card_type_code", "question": "What are the different card types, and how many transactions have been made with each?", "sub_sql_type": "null col col col null agg col", "sub_sql_new": "select card type code , count customers_cards", "query": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code", "sub_ques": "what are the different card types , and how many transactions"}
{"db_id": "customers_card_transactions", "sub_sql": "select transaction_type , count financial_transactions group by transaction_type", "question": "Show the transaction type and the number of transactions.", "sub_sql_type": "null col col null agg col", "sub_sql_new": "select transaction type , count financial_transactions", "query": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type", "sub_ques": "show the transaction type and the number of transactions"}
{"db_id": "customers_card_transactions", "sub_sql": "select transaction_type , count financial_transactions group by transaction_type", "question": "What are the different transaction types, and how many transactions of each have taken place?", "sub_sql_type": "null col col null agg col", "sub_sql_new": "select transaction type , count financial_transactions", "query": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type", "sub_ques": "what are the different transaction types and how many transactions of each have"}
{"db_id": "customers_card_transactions", "sub_sql": "select transaction_type from financial_transactions", "question": "What is the transaction type that has processed the greatest total amount in transactions?", "sub_sql_type": "null col col col col", "sub_sql_new": "select transaction type from financial_transactions", "query": "SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1", "sub_ques": "what is the transaction type"}
{"db_id": "customers_card_transactions", "sub_sql": "group by transaction_type order by sum transaction_amount desc limit 1", "question": "What is the transaction type that has processed the greatest total amount in transactions?", "sub_sql_type": "null null agg col col null null limv", "sub_sql_new": "order by sum transaction amount desc limit 1", "query": "SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1", "sub_ques": "the transaction type that has processed the greatest total amount in transactions"}
{"db_id": "customers_card_transactions", "sub_sql": "select transaction_type from financial_transactions", "question": "Return the type of transaction with the highest total amount.", "sub_sql_type": "null col col col col", "sub_sql_new": "select transaction type from financial_transactions", "query": "SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1", "sub_ques": "return the type of transaction"}
{"db_id": "customers_card_transactions", "sub_sql": "group by transaction_type order by sum transaction_amount desc limit 1", "question": "Return the type of transaction with the highest total amount.", "sub_sql_type": "null null agg col col null null limv", "sub_sql_new": "order by sum transaction amount desc limit 1", "query": "SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1", "sub_ques": "the type of transaction with the highest total amount"}
{"db_id": "customers_card_transactions", "sub_sql": "select account_id , count financial_transactions group by account_id", "question": "Show the account id and the number of transactions for each account", "sub_sql_type": "null col col null agg col", "sub_sql_new": "select account id , count financial_transactions", "query": "SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id", "sub_ques": "show the account id and the number of transactions for each account"}
{"db_id": "customers_card_transactions", "sub_sql": "select account_id , count financial_transactions group by account_id", "question": "What are the different account ids that have made financial transactions, as well as how many transactions correspond to each?", "sub_sql_type": "null col col null agg col", "sub_sql_new": "select account id , count financial_transactions", "query": "SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id", "sub_ques": "what are the different account ids as well as how many transactions"}
{"db_id": "race_track", "sub_sql": "select count track", "question": "How many tracks do we have?", "sub_sql_type": "null agg col", "sub_sql_new": "select count track", "query": "SELECT count(*) FROM track", "sub_ques": "how many tracks"}
{"db_id": "race_track", "sub_sql": "select count track", "question": "Count the number of tracks.", "sub_sql_type": "null agg col", "sub_sql_new": "select count track", "query": "SELECT count(*) FROM track", "sub_ques": "count the number of tracks"}
{"db_id": "race_track", "sub_sql": "select name , location from track", "question": "Show the name and location for all tracks.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , location from track", "query": "SELECT name ,  LOCATION FROM track", "sub_ques": "show the name and location for all tracks"}
{"db_id": "race_track", "sub_sql": "select name , location from track", "question": "What are the names and locations of all tracks?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , location from track", "query": "SELECT name ,  LOCATION FROM track", "sub_ques": "what are the names and locations of all tracks"}
{"db_id": "race_track", "sub_sql": "select name , seating from track", "question": "Show names and seatings, ordered by seating for all tracks opened after 2000.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , seating from track", "query": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating", "sub_ques": "show names and seatings"}
{"db_id": "race_track", "sub_sql": "where year_opened > 2000", "question": "Show names and seatings, ordered by seating for all tracks opened after 2000.", "sub_sql_type": "null col op op value", "sub_sql_new": "where year_opened more than 2000", "query": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating", "sub_ques": "tracks opened after 2000"}
{"db_id": "race_track", "sub_sql": "order by seating", "question": "Show names and seatings, ordered by seating for all tracks opened after 2000.", "sub_sql_type": "null null col", "sub_sql_new": "order by seating", "query": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating", "sub_ques": "ordered by seating for all tracks"}
{"db_id": "race_track", "sub_sql": "select name , seating from track", "question": "What are the names and seatings for all tracks opened after 2000, ordered by seating?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , seating from track", "query": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating", "sub_ques": "what are the names and seatings for all tracks"}
{"db_id": "race_track", "sub_sql": "where year_opened > 2000", "question": "What are the names and seatings for all tracks opened after 2000, ordered by seating?", "sub_sql_type": "null col op op value", "sub_sql_new": "where year_opened more than 2000", "query": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating", "sub_ques": "tracks opened after 2000"}
{"db_id": "race_track", "sub_sql": "order by seating", "question": "What are the names and seatings for all tracks opened after 2000, ordered by seating?", "sub_sql_type": "null null col", "sub_sql_new": "order by seating", "query": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating", "sub_ques": "ordered by seating"}
{"db_id": "race_track", "sub_sql": "select name , location , seating from track", "question": "What is the name, location and seating for the most recently opened track?", "sub_sql_type": "null col null col null col col col", "sub_sql_new": "select name , location , seating from track", "query": "SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1", "sub_ques": "what is the name , location and seating for track"}
{"db_id": "race_track", "sub_sql": "order by year_opened desc limit 1", "question": "What is the name, location and seating for the most recently opened track?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by year_opened desc limit 1", "query": "SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1", "sub_ques": "the most recently opened track"}
{"db_id": "race_track", "sub_sql": "select name , location , seating from track", "question": "Return the name, location, and seating of the track that was opened in the most recent year.", "sub_sql_type": "null col null col null col col col", "sub_sql_new": "select name , location , seating from track", "query": "SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1", "sub_ques": "return the name , location , and seating of the track"}
{"db_id": "race_track", "sub_sql": "order by year_opened desc limit 1", "question": "Return the name, location, and seating of the track that was opened in the most recent year.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by year_opened desc limit 1", "query": "SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1", "sub_ques": "opened in the most recent year"}
{"db_id": "race_track", "sub_sql": "select min seating , max seating , avg seating from track", "question": "What is the minimum, maximum, and average seating for all tracks.", "sub_sql_type": "null agg col null agg col null agg col col col", "sub_sql_new": "select min seating , max seating , avg seating from track", "query": "SELECT min(seating) ,  max(seating) ,  avg(seating) FROM track", "sub_ques": "what is the minimum , maximum , and average seating for all tracks"}
{"db_id": "race_track", "sub_sql": "select min seating , max seating , avg seating from track", "question": "Return the minimum, maximum, and average seating across all tracks.", "sub_sql_type": "null agg col null agg col null agg col col col", "sub_sql_new": "select min seating , max seating , avg seating from track", "query": "SELECT min(seating) ,  max(seating) ,  avg(seating) FROM track", "sub_ques": "return the minimum , maximum , and average seating across all tracks"}
{"db_id": "race_track", "sub_sql": "select name , location , year_opened from track", "question": "Show the name, location, open year for all tracks with a seating higher than the average.", "sub_sql_type": "null col null col null col col col", "sub_sql_new": "select name , location , year_opened from track", "query": "SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)", "sub_ques": "show the name , location , open year for all tracks"}
{"db_id": "race_track", "sub_sql": "where seating > select avg seating", "question": "Show the name, location, open year for all tracks with a seating higher than the average.", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where seating more than select avg seating", "query": "SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)", "sub_ques": "seating higher than the average"}
{"db_id": "race_track", "sub_sql": "select name , location , year_opened from track", "question": "What are the names, locations, and years of opening for tracks with seating higher than average?", "sub_sql_type": "null col null col null col col col", "sub_sql_new": "select name , location , year_opened from track", "query": "SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)", "sub_ques": "what are the names , locations , and years of opening for tracks"}
{"db_id": "race_track", "sub_sql": "where seating > select avg seating", "question": "What are the names, locations, and years of opening for tracks with seating higher than average?", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where seating more than select avg seating", "query": "SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)", "sub_ques": "seating higher than average"}
{"db_id": "race_track", "sub_sql": "select distinct location from track", "question": "What are distinct locations where tracks are located?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct location from track", "query": "SELECT DISTINCT LOCATION FROM track", "sub_ques": "what are distinct locations where tracks"}
{"db_id": "race_track", "sub_sql": "select distinct location from track", "question": "Give the different locations of tracks.", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct location from track", "query": "SELECT DISTINCT LOCATION FROM track", "sub_ques": "give the different locations of tracks"}
{"db_id": "race_track", "sub_sql": "select count race", "question": "How many races are there?", "sub_sql_type": "null agg col", "sub_sql_new": "select count race", "query": "SELECT count(*) FROM race", "sub_ques": "how many races"}
{"db_id": "race_track", "sub_sql": "select count race", "question": "Count the number of races.", "sub_sql_type": "null agg col", "sub_sql_new": "select count race", "query": "SELECT count(*) FROM race", "sub_ques": "count the number of races"}
{"db_id": "race_track", "sub_sql": "select distinct class from race", "question": "What are the distinct classes that races can have?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct class from race", "query": "SELECT DISTINCT CLASS FROM race", "sub_ques": "what are the distinct classes that races"}
{"db_id": "race_track", "sub_sql": "select distinct class from race", "question": "Return the different classes of races.", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct class from race", "query": "SELECT DISTINCT CLASS FROM race", "sub_ques": "return the different classes of races"}
{"db_id": "race_track", "sub_sql": "select name , class , date from race", "question": "Show name, class, and date for all races.", "sub_sql_type": "null col null col null col col col", "sub_sql_new": "select name , class , date from race", "query": "SELECT name ,  CLASS ,  date FROM race", "sub_ques": "show name , class , and date for all races"}
{"db_id": "race_track", "sub_sql": "select name , class , date from race", "question": "What are the names, classes, and dates for all races?", "sub_sql_type": "null col null col null col col col", "sub_sql_new": "select name , class , date from race", "query": "SELECT name ,  CLASS ,  date FROM race", "sub_ques": "what are the names , classes , and dates for all races"}
{"db_id": "race_track", "sub_sql": "select class , count race group by class", "question": "Show the race class and number of races in each class.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select class , count race", "query": "SELECT CLASS ,  count(*) FROM race GROUP BY CLASS", "sub_ques": "show the race class and number of races in each class"}
{"db_id": "race_track", "sub_sql": "select class , count race group by class", "question": "What are the different classes of races, and how many races correspond to each?", "sub_sql_type": "null col null agg col", "sub_sql_new": "select class , count race", "query": "SELECT CLASS ,  count(*) FROM race GROUP BY CLASS", "sub_ques": "what are the different classes of races , and how many races"}
{"db_id": "race_track", "sub_sql": "select class from race", "question": "What is the race class with most number of races.", "sub_sql_type": "null col col col", "sub_sql_new": "select class from race", "query": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1", "sub_ques": "what is the race class"}
{"db_id": "race_track", "sub_sql": "group by class order by count race desc limit 1", "question": "What is the race class with most number of races.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count race desc limit 1", "query": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the race class with most number of races"}
{"db_id": "race_track", "sub_sql": "select class from race", "question": "Give the class of races that is most common.", "sub_sql_type": "null col col col", "sub_sql_new": "select class from race", "query": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1", "sub_ques": "give the class of races"}
{"db_id": "race_track", "sub_sql": "group by class order by count race desc limit 1", "question": "Give the class of races that is most common.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count race desc limit 1", "query": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the class of races that is most common"}
{"db_id": "race_track", "sub_sql": "select class from race", "question": "List the race class with at least two races.", "sub_sql_type": "null col col col", "sub_sql_new": "select class from race", "query": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2", "sub_ques": "list the race class"}
{"db_id": "race_track", "sub_sql": "group by class having count race >= 2", "question": "List the race class with at least two races.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2", "sub_ques": "race class with at least two races"}
{"db_id": "race_track", "sub_sql": "select class from race", "question": "What are the classes of races that have two or more corresponding races?", "sub_sql_type": "null col col col", "sub_sql_new": "select class from race", "query": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2", "sub_ques": "what are the classes of races"}
{"db_id": "race_track", "sub_sql": "group by class having count race >= 2", "question": "What are the classes of races that have two or more corresponding races?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2", "sub_ques": "classes of races that have two or more corresponding races"}
{"db_id": "race_track", "sub_sql": "select name from track", "question": "Show all track names that have had no races.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from track", "query": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)", "sub_ques": "show all track names"}
{"db_id": "race_track", "sub_sql": "select name from track", "question": "Return the names of tracks that have no had any races.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from track", "query": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)", "sub_ques": "return the names of tracks"}
{"db_id": "race_track", "sub_sql": "track not in race", "question": "Return the names of tracks that have no had any races.", "sub_sql_type": "tab op op tab", "sub_sql_new": "track not in race", "query": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)", "sub_ques": "tracks that have no had any races"}
{"db_id": "race_track", "sub_sql": "select year_opened from track", "question": "Show year where a track with a seating at least 5000 opened and a track with seating no more than 4000 opened.", "sub_sql_type": "null col col col", "sub_sql_new": "select year_opened from track", "query": "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000", "sub_ques": "show year where a track"}
{"db_id": "race_track", "sub_sql": "select year_opened from track", "question": "What are the years of opening for tracks with seating between 4000 and 5000?", "sub_sql_type": "null col col col", "sub_sql_new": "select year_opened from track", "query": "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000", "sub_ques": "what are the years of opening for tracks"}
{"db_id": "race_track", "sub_sql": "select t2.name , count race group by t1.track_id from track", "question": "Show the name of track and the number of races in each track.", "sub_sql_type": "null col null agg col tab", "sub_sql_new": "select name , count race from null track", "query": "SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id", "sub_ques": "show the name of track and the number of races in each track"}
{"db_id": "race_track", "sub_sql": "select t2.name from track", "question": "Show the name of track with most number of races.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from track", "query": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "show the name of track"}
{"db_id": "race_track", "sub_sql": "group by t1.track_id order by count race desc limit 1", "question": "Show the name of track with most number of races.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count race desc limit 1", "query": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "track with most number of races"}
{"db_id": "race_track", "sub_sql": "select t2.name from track", "question": "What is the name of the track that has had the greatest number of races?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from track", "query": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "what is the name of the track"}
{"db_id": "race_track", "sub_sql": "group by t1.track_id order by count race desc limit 1", "question": "What is the name of the track that has had the greatest number of races?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count race desc limit 1", "query": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the track that has had the greatest number of races"}
{"db_id": "race_track", "sub_sql": "select t1.name , t1.date , t2.name from race , track", "question": "Show the name and date for each race and its track name.", "sub_sql_type": "null col null col null col col col null col", "sub_sql_new": "select name , date , name from race , track", "query": "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id", "sub_ques": "show the name and date for each race and its track name"}
{"db_id": "race_track", "sub_sql": "select t1.name , t1.date , t2.name from race , track", "question": "What are the names and dates of races, and the names of the tracks where they are held?", "sub_sql_type": "null col null col null col col col null col", "sub_sql_new": "select name , date , name from race , track", "query": "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id", "sub_ques": "what are the names and dates of races , and the names of the tracks"}
{"db_id": "race_track", "sub_sql": "select t2.name , t2.location from track", "question": "Show the name and location of track with 1 race.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , location from track", "query": "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1", "sub_ques": "show the name and location of track"}
{"db_id": "race_track", "sub_sql": "group by t1.track_id having count race = 1", "question": "Show the name and location of track with 1 race.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1", "sub_ques": "track with 1 race"}
{"db_id": "race_track", "sub_sql": "select t2.name , t2.location from track", "question": "What are the names and locations of tracks that have had exactly 1 race?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , location from track", "query": "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1", "sub_ques": "what are the names and locations of tracks"}
{"db_id": "race_track", "sub_sql": "group by t1.track_id having count race = 1", "question": "What are the names and locations of tracks that have had exactly 1 race?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1", "sub_ques": "tracks that have had exactly 1 race"}
{"db_id": "coffee_shop", "sub_sql": "select count member", "question": "How many members have the black membership card?", "sub_sql_type": "null agg col", "sub_sql_new": "select count member", "query": "SELECT count(*) FROM member WHERE Membership_card  =  'Black'", "sub_ques": "how many members"}
{"db_id": "coffee_shop", "sub_sql": "where membership_card = black", "question": "How many members have the black membership card?", "sub_sql_type": "null col op op value", "sub_sql_new": "where membership_card equal to black", "query": "SELECT count(*) FROM member WHERE Membership_card  =  'Black'", "sub_ques": "members have the black membership card"}
{"db_id": "coffee_shop", "sub_sql": "select count member , address group by address", "question": "Find the number of members living in each address.", "sub_sql_type": "null agg col null col", "sub_sql_new": "select count member , address", "query": "SELECT count(*) ,  address FROM member GROUP BY address", "sub_ques": "the number of members living in each address"}
{"db_id": "coffee_shop", "sub_sql": "select name from member", "question": "Give me the names of members whose address is in Harford or Waterbury.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from member", "query": "SELECT name FROM member WHERE address  =  'Harford' OR address  =  'Waterbury'", "sub_ques": "give me the names of members"}
{"db_id": "coffee_shop", "sub_sql": "where address = harford", "question": "Give me the names of members whose address is in Harford or Waterbury.", "sub_sql_type": "null col op op value", "sub_sql_new": "where address equal to harford", "query": "SELECT name FROM member WHERE address  =  'Harford' OR address  =  'Waterbury'", "sub_ques": "members whose address is in harford"}
{"db_id": "coffee_shop", "sub_sql": "select name , member_id from member", "question": "Find the ids and names of members who are under age 30 or with black membership card.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , member_id from member", "query": "SELECT name ,  member_id FROM member WHERE Membership_card  =  'Black' OR age  <  30", "sub_ques": "find the ids and names of members"}
{"db_id": "coffee_shop", "sub_sql": "where membership_card = black", "question": "Find the ids and names of members who are under age 30 or with black membership card.", "sub_sql_type": "null col op op value", "sub_sql_new": "where membership_card equal to black", "query": "SELECT name ,  member_id FROM member WHERE Membership_card  =  'Black' OR age  <  30", "sub_ques": "members with black membership card"}
{"db_id": "coffee_shop", "sub_sql": "select time_of_purchase , age , address from member", "question": "Find the purchase time, age and address of each member, and show the results in the order of purchase time.", "sub_sql_type": "null col null col null col col col", "sub_sql_new": "select time_of_purchase , age , address from member", "query": "SELECT Time_of_purchase ,  age ,  address FROM member ORDER BY Time_of_purchase", "sub_ques": "find the purchase time , age and address of each member"}
{"db_id": "coffee_shop", "sub_sql": "order by time_of_purchase", "question": "Find the purchase time, age and address of each member, and show the results in the order of purchase time.", "sub_sql_type": "null null col", "sub_sql_new": "order by time_of_purchase", "query": "SELECT Time_of_purchase ,  age ,  address FROM member ORDER BY Time_of_purchase", "sub_ques": "in the order of purchase"}
{"db_id": "coffee_shop", "sub_sql": "select membership_card from member", "question": "Which membership card has more than 5 members?", "sub_sql_type": "null col col col", "sub_sql_new": "select membership_card from member", "query": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5", "sub_ques": "which membership card"}
{"db_id": "coffee_shop", "sub_sql": "group by membership_card having count member > 5", "question": "Which membership card has more than 5 members?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5", "sub_ques": "membership card has more than 5 members"}
{"db_id": "coffee_shop", "sub_sql": "select count member", "question": "How many members are not living in Hartford?", "sub_sql_type": "null agg col", "sub_sql_new": "select count member", "query": "SELECT count(*) FROM member WHERE address != 'Hartford'", "sub_ques": "how many members"}
{"db_id": "coffee_shop", "sub_sql": "where address != hartford", "question": "How many members are not living in Hartford?", "sub_sql_type": "null col op op op value", "sub_sql_new": "where address not equal to hartford", "query": "SELECT count(*) FROM member WHERE address != 'Hartford'", "sub_ques": "members are not living in hartford"}
{"db_id": "coffee_shop", "sub_sql": "select address from shop", "question": "Show the shop addresses ordered by their opening year.", "sub_sql_type": "null col col col", "sub_sql_new": "select address from shop", "query": "SELECT address FROM shop ORDER BY open_year", "sub_ques": "show the shop addresses"}
{"db_id": "coffee_shop", "sub_sql": "order by open_year", "question": "Show the shop addresses ordered by their opening year.", "sub_sql_type": "null null col", "sub_sql_new": "order by open_year", "query": "SELECT address FROM shop ORDER BY open_year", "sub_ques": "ordered by their opening year"}
{"db_id": "coffee_shop", "sub_sql": "select avg num_of_staff , avg score from shop", "question": "What are the average score and average staff number of all shops?", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select avg num_of_staff , avg score from shop", "query": "SELECT avg(num_of_staff) ,  avg(score) FROM shop", "sub_ques": "what are the average score and average staff number of all shops"}
{"db_id": "coffee_shop", "sub_sql": "select shop_id , address from shop", "question": "Find the id and address of the shops whose score is below the average score.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select shop_id , address from shop", "query": "SELECT shop_id ,  address FROM shop WHERE score  <  (SELECT avg(score) FROM shop)", "sub_ques": "find the id and address of the shops"}
{"db_id": "coffee_shop", "sub_sql": "where score < select avg score", "question": "Find the id and address of the shops whose score is below the average score.", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where score less than select avg score", "query": "SELECT shop_id ,  address FROM shop WHERE score  <  (SELECT avg(score) FROM shop)", "sub_ques": "score is below the average score"}
{"db_id": "coffee_shop", "sub_sql": "select address , num_of_staff from shop", "question": "Find the address and staff number of the shops that do not have any happy hour.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select address , num_of_staff from shop", "query": "SELECT address ,  num_of_staff FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM happy_hour)", "sub_ques": "find the address and staff number of the shops "}
{"db_id": "coffee_shop", "sub_sql": "shop not in happy_hour", "question": "Find the address and staff number of the shops that do not have any happy hour.", "sub_sql_type": "tab op op tab tab", "sub_sql_new": "shop not in happy hour", "query": "SELECT address ,  num_of_staff FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM happy_hour)", "sub_ques": "shops that do not have any happy hour"}
{"db_id": "coffee_shop", "sub_sql": "select t1.address , t1.shop_id from shop", "question": "What are the id and address of the shops which have a happy hour in May?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select address , shop_id from shop", "query": "SELECT t1.address ,  t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id  =  t2.shop_id WHERE MONTH  =  'May'", "sub_ques": "what are the id and address"}
{"db_id": "coffee_shop", "sub_sql": "where month = may", "question": "What are the id and address of the shops which have a happy hour in May?", "sub_sql_type": "null col op op value", "sub_sql_new": "where month equal to may", "query": "SELECT t1.address ,  t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id  =  t2.shop_id WHERE MONTH  =  'May'", "sub_ques": "in may"}
{"db_id": "coffee_shop", "sub_sql": "select shop_id , count happy_hour group by shop_id", "question": "which shop has happy hour most frequently? List its id and number of happy hours.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select shop_id , count happy_hour", "query": "SELECT shop_id ,  count(*) FROM happy_hour GROUP BY shop_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "list its id and number of happy hours"}
{"db_id": "coffee_shop", "sub_sql": "group by shop_id order by count happy_hour desc limit 1", "question": "which shop has happy hour most frequently? List its id and number of happy hours.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count happy_hour desc limit 1", "query": "SELECT shop_id ,  count(*) FROM happy_hour GROUP BY shop_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "shop has happy hour most frequently"}
{"db_id": "coffee_shop", "sub_sql": "select month from happy_hour", "question": "Which month has the most happy hours?", "sub_sql_type": "null col col col", "sub_sql_new": "select month from happy_hour", "query": "SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY count(*) DESC LIMIT 1", "sub_ques": "which month"}
{"db_id": "coffee_shop", "sub_sql": "group by month order by count happy_hour desc limit 1", "question": "Which month has the most happy hours?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count happy_hour desc limit 1", "query": "SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY count(*) DESC LIMIT 1", "sub_ques": "month has the most happy hours"}
{"db_id": "coffee_shop", "sub_sql": "select month from happy_hour", "question": "Which months have more than 2 happy hours?", "sub_sql_type": "null col col col", "sub_sql_new": "select month from happy_hour", "query": "SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING count(*)  >  2", "sub_ques": "which months"}
{"db_id": "coffee_shop", "sub_sql": "group by month having count happy_hour > 2", "question": "Which months have more than 2 happy hours?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING count(*)  >  2", "sub_ques": "months have more than 2 happy hours"}
{"db_id": "chinook_1", "sub_sql": "select count album", "question": "How many albums are there?", "sub_sql_type": "null agg col", "sub_sql_new": "select count album", "query": "SELECT count(*) FROM ALBUM", "sub_ques": "how many albums"}
{"db_id": "chinook_1", "sub_sql": "select count album", "question": "Find the number of albums.", "sub_sql_type": "null agg col", "sub_sql_new": "select count album", "query": "SELECT count(*) FROM ALBUM", "sub_ques": "find the number of albums"}
{"db_id": "chinook_1", "sub_sql": "select name from genre", "question": "List the names of all music genres.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from genre", "query": "SELECT Name FROM GENRE", "sub_ques": "list the names of all music genres"}
{"db_id": "chinook_1", "sub_sql": "select name from genre", "question": "What are the names of different music genres?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from genre", "query": "SELECT Name FROM GENRE", "sub_ques": "what are the names of different music genres"}
{"db_id": "chinook_1", "sub_sql": "where state = ny", "question": "Find all the customer information in state NY.", "sub_sql_type": "null col op op value", "sub_sql_new": "where state equal to ny", "query": "SELECT * FROM CUSTOMER WHERE State  =  \\\\\\\"NY\\\\\\\"", "sub_ques": "customer information in state ny"}
{"db_id": "chinook_1", "sub_sql": "where state = ny", "question": "What is all the customer information for customers in NY state?", "sub_sql_type": "null col op op value", "sub_sql_new": "where state equal to ny", "query": "SELECT * FROM CUSTOMER WHERE State  =  \\\\\\\"NY\\\\\\\"", "sub_ques": "customer information for customers in ny state"}
{"db_id": "chinook_1", "sub_sql": "select firstname , lastname from employee", "question": "What are the first names and last names of the employees who live in Calgary city.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select firstname , lastname from employee", "query": "SELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \\\\\\\"Calgary\\\\\\\"", "sub_ques": "what are the first names and last names of the employees"}
{"db_id": "chinook_1", "sub_sql": "where city = calgary", "question": "What are the first names and last names of the employees who live in Calgary city.", "sub_sql_type": "null col op op value", "sub_sql_new": "where city equal to calgary", "query": "SELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \\\\\\\"Calgary\\\\\\\"", "sub_ques": "employees who live in calgary city"}
{"db_id": "chinook_1", "sub_sql": "select firstname , lastname from employee", "question": "Find the full names of employees living in the city of Calgary.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select firstname , lastname from employee", "query": "SELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \\\\\\\"Calgary\\\\\\\"", "sub_ques": "find the full names of employees"}
{"db_id": "chinook_1", "sub_sql": "where city = calgary", "question": "Find the full names of employees living in the city of Calgary.", "sub_sql_type": "null col op op value", "sub_sql_new": "where city equal to calgary", "query": "SELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \\\\\\\"Calgary\\\\\\\"", "sub_ques": "employees living in the city of calgary"}
{"db_id": "chinook_1", "sub_sql": "select distinct billingcountry from invoice", "question": "What are the distinct billing countries of the invoices?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct billingcountry from invoice", "query": "SELECT distinct(BillingCountry) FROM INVOICE", "sub_ques": "what are the distinct billing countries of the invoices"}
{"db_id": "chinook_1", "sub_sql": "select distinct billingcountry from invoice", "question": "Find the different billing countries for all invoices.", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct billingcountry from invoice", "query": "SELECT distinct(BillingCountry) FROM INVOICE", "sub_ques": "find the different billing countries for all"}
{"db_id": "chinook_1", "sub_sql": "select name from artist", "question": "Find the names of all artists that have \\\\\\\"a\\\\\\\" in their names.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from artist", "query": "SELECT Name FROM ARTIST WHERE Name LIKE \\\\\\\"%a%\\\\\\\"", "sub_ques": "find the names of all artists"}
{"db_id": "chinook_1", "sub_sql": "where name like a", "question": "Find the names of all artists that have \\\\\\\"a\\\\\\\" in their names.", "sub_sql_type": "null col op value", "sub_sql_new": "where name like a", "query": "SELECT Name FROM ARTIST WHERE Name LIKE \\\\\\\"%a%\\\\\\\"", "sub_ques": "artists that have `` a '' in their names"}
{"db_id": "chinook_1", "sub_sql": "select name from artist", "question": "What are the names of artist who have the letter 'a' in their names?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from artist", "query": "SELECT Name FROM ARTIST WHERE Name LIKE \\\\\\\"%a%\\\\\\\"", "sub_ques": "what are the names of artist"}
{"db_id": "chinook_1", "sub_sql": "where name like a", "question": "What are the names of artist who have the letter 'a' in their names?", "sub_sql_type": "null col op value", "sub_sql_new": "where name like a", "query": "SELECT Name FROM ARTIST WHERE Name LIKE \\\\\\\"%a%\\\\\\\"", "sub_ques": "artist who have the letter 'a ' in their names"}
{"db_id": "chinook_1", "sub_sql": "select title from album", "question": "Find the title of all the albums of the artist \\\\\\\"AC/DC\\\\\\\".", "sub_sql_type": "null col col col", "sub_sql_new": "select title from album", "query": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \\\\\\\"AC/DC\\\\\\\"", "sub_ques": "find the title of all the albums"}
{"db_id": "chinook_1", "sub_sql": "where t2.name = ac/dc", "question": "Find the title of all the albums of the artist \\\\\\\"AC/DC\\\\\\\".", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to ac/dc", "query": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \\\\\\\"AC/DC\\\\\\\"", "sub_ques": "artist `` ac/dc"}
{"db_id": "chinook_1", "sub_sql": "select title from album", "question": "What are the titles of albums by the artist \\\\\\\"AC/DC\\\\\\\"?", "sub_sql_type": "null col col col", "sub_sql_new": "select title from album", "query": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \\\\\\\"AC/DC\\\\\\\"", "sub_ques": "what are the titles of albums"}
{"db_id": "chinook_1", "sub_sql": "where t2.name = ac/dc", "question": "What are the titles of albums by the artist \\\\\\\"AC/DC\\\\\\\"?", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to ac/dc", "query": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \\\\\\\"AC/DC\\\\\\\"", "sub_ques": "artist `` ac/dc"}
{"db_id": "chinook_1", "sub_sql": "select count albums", "question": "Hom many albums does the artist \\\\\\\"Metallica\\\\\\\" have?", "sub_sql_type": "null agg col", "sub_sql_new": "select count albums", "query": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \\\\\\\"Metallica\\\\\\\"", "sub_ques": "hom many albums"}
{"db_id": "chinook_1", "sub_sql": "where t2.name = metallica", "question": "Hom many albums does the artist \\\\\\\"Metallica\\\\\\\" have?", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to metallica", "query": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \\\\\\\"Metallica\\\\\\\"", "sub_ques": "artist `` metallica"}
{"db_id": "chinook_1", "sub_sql": "select count albums", "question": "Find the number of albums by the artist \\\\\\\"Metallica\\\\\\\".", "sub_sql_type": "null agg col", "sub_sql_new": "select count albums", "query": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \\\\\\\"Metallica\\\\\\\"", "sub_ques": "the number of albums"}
{"db_id": "chinook_1", "sub_sql": "where t2.name = metallica", "question": "Find the number of albums by the artist \\\\\\\"Metallica\\\\\\\".", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to metallica", "query": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \\\\\\\"Metallica\\\\\\\"", "sub_ques": "artist `` metallica"}
{"db_id": "chinook_1", "sub_sql": "select t2.name from artist", "question": "Which artist does the album \\\\\\\"Balls to the Wall\\\\\\\" belong to?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from artist", "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \\\\\\\"Balls to the Wall\\\\\\\"", "sub_ques": "which artist"}
{"db_id": "chinook_1", "sub_sql": "where t1.title = ballstothewall", "question": "Which artist does the album \\\\\\\"Balls to the Wall\\\\\\\" belong to?", "sub_sql_type": "null col op op value", "sub_sql_new": "where title equal to ballstothewall", "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \\\\\\\"Balls to the Wall\\\\\\\"", "sub_ques": "album `` balls to the wall"}
{"db_id": "chinook_1", "sub_sql": "select t2.name from artist", "question": "Find the name of the artist who made the album \\\\\\\"Balls to the Wall\\\\\\\".", "sub_sql_type": "null col col col", "sub_sql_new": "select name from artist", "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \\\\\\\"Balls to the Wall\\\\\\\"", "sub_ques": "find the name of the artist"}
{"db_id": "chinook_1", "sub_sql": "where t1.title = ballstothewall", "question": "Find the name of the artist who made the album \\\\\\\"Balls to the Wall\\\\\\\".", "sub_sql_type": "null col op op value", "sub_sql_new": "where title equal to ballstothewall", "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \\\\\\\"Balls to the Wall\\\\\\\"", "sub_ques": "album `` balls to the wall"}
{"db_id": "chinook_1", "sub_sql": "select t2.name from artist", "question": "Which artist has the most albums?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from artist", "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "which artist"}
{"db_id": "chinook_1", "sub_sql": "group by t2.name order by count albums desc limit 1", "question": "Which artist has the most albums?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count albums desc limit 1", "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "artist has the most albums"}
{"db_id": "chinook_1", "sub_sql": "select t2.name from artist", "question": "What is the name of the artist with the greatest number of albums?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from artist", "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "what is the name of the artist"}
{"db_id": "chinook_1", "sub_sql": "group by t2.name order by count albums desc limit 1", "question": "What is the name of the artist with the greatest number of albums?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count albums desc limit 1", "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "the name of the artist with the greatest number of albums"}
{"db_id": "chinook_1", "sub_sql": "select name from track", "question": "Find the names of all the tracks that contain the word \\\\\\\"you\\\\\\\".", "sub_sql_type": "null col col col", "sub_sql_new": "select name from track", "query": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'", "sub_ques": "find the names of all the tracks"}
{"db_id": "chinook_1", "sub_sql": "where name like you", "question": "Find the names of all the tracks that contain the word \\\\\\\"you\\\\\\\".", "sub_sql_type": "null col op value", "sub_sql_new": "where name like you", "query": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'", "sub_ques": "names of all the tracks that contain the word `` you"}
{"db_id": "chinook_1", "sub_sql": "select name from track", "question": "What are the names of tracks that contain the the word you in them?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from track", "query": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'", "sub_ques": "what are the names of tracks"}
{"db_id": "chinook_1", "sub_sql": "where name like you", "question": "What are the names of tracks that contain the the word you in them?", "sub_sql_type": "null col op value", "sub_sql_new": "where name like you", "query": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'", "sub_ques": "names of tracks that contain the the word you"}
{"db_id": "chinook_1", "sub_sql": "select avg unitprice from track", "question": "What is the average unit price of all the tracks?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select avg unitprice from track", "query": "SELECT AVG(UnitPrice) FROM TRACK", "sub_ques": "what is the average unit price of all the tracks"}
{"db_id": "chinook_1", "sub_sql": "select avg unitprice from track", "question": "Find the average unit price for a track.", "sub_sql_type": "null agg col col col", "sub_sql_new": "select avg unitprice from track", "query": "SELECT AVG(UnitPrice) FROM TRACK", "sub_ques": "find the average unit price for a track"}
{"db_id": "chinook_1", "sub_sql": "select max milliseconds , min milliseconds from track", "question": "What are the durations of the longest and the shortest tracks in milliseconds?", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select max milliseconds , min milliseconds from track", "query": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK", "sub_ques": "what are the durations of the longest and the shortest tracks in milliseconds"}
{"db_id": "chinook_1", "sub_sql": "select max milliseconds , min milliseconds from track", "question": "Find the maximum and minimum durations of tracks in milliseconds.", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select max milliseconds , min milliseconds from track", "query": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK", "sub_ques": "find the maximum and minimum durations of tracks in milliseconds"}
{"db_id": "chinook_1", "sub_sql": "select t1.title , t2.albumid , count track , track group by t2.albumid", "question": "Show the album names, ids and the number of tracks for each album.", "sub_sql_type": "null col null col null agg col null col", "sub_sql_new": "select title , albumid , count track , track", "query": "SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID", "sub_ques": "show the album names , ids and the number of tracks for each album"}
{"db_id": "chinook_1", "sub_sql": "select t1.title , t2.albumid , from album , track group by t2.albumid", "question": "What are the names and ids of the different albums, and how many tracks are on each?", "sub_sql_type": "null col null col null col col null col", "sub_sql_new": "select title , albumid , from album , track", "query": "SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID", "sub_ques": "what are the names and ids of the different albums"}
{"db_id": "chinook_1", "sub_sql": "select t1.name from genre", "question": "What is the name of the most common genre in all tracks?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from genre", "query": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "what is the name of genre"}
{"db_id": "chinook_1", "sub_sql": "group by t2.genreid order by count track desc limit 1", "question": "What is the name of the most common genre in all tracks?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count track desc limit 1", "query": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "the most common genre in all tracks"}
{"db_id": "chinook_1", "sub_sql": "select t1.name from genre", "question": "Find the name of the genre that is most frequent across all tracks.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from genre", "query": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "find the name of the genre"}
{"db_id": "chinook_1", "sub_sql": "group by t2.genreid order by count track desc limit 1", "question": "Find the name of the genre that is most frequent across all tracks.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count track desc limit 1", "query": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "genre that is most frequent across all tracks"}
{"db_id": "chinook_1", "sub_sql": "select t1.name from mediatype", "question": "What is the least common media type in all tracks?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from mediatype", "query": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1", "sub_ques": "What is media type"}
{"db_id": "chinook_1", "sub_sql": "group by t2.mediatypeid order by count track asc limit 1", "question": "What is the least common media type in all tracks?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count track asc limit 1", "query": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1", "sub_ques": "the least common media type in all tracks"}
{"db_id": "chinook_1", "sub_sql": "select t1.name from mediatype", "question": "What is the name of the media type that is least common across all tracks?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from mediatype", "query": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1", "sub_ques": "what is the name of the media type"}
{"db_id": "chinook_1", "sub_sql": "group by t2.mediatypeid order by count track asc limit 1", "question": "What is the name of the media type that is least common across all tracks?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count track asc limit 1", "query": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1", "sub_ques": "the media type that is least common across all tracks"}
{"db_id": "chinook_1", "sub_sql": "select t1.title , t2.albumid from album , track", "question": "Show the album names and ids for albums that contain tracks with unit price bigger than 1.", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select title , albumid from album , track", "query": "SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID", "sub_ques": "show the album names and ids for albums that contain tracks"}
{"db_id": "chinook_1", "sub_sql": "where t2.unitprice > 1", "question": "Show the album names and ids for albums that contain tracks with unit price bigger than 1.", "sub_sql_type": "null col op op value", "sub_sql_new": "where unitprice more than 1", "query": "SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID", "sub_ques": "tracks with unit price bigger than 1"}
{"db_id": "chinook_1", "sub_sql": "select t1.title , t2.albumid from album , track", "question": "What are the titles and ids for albums containing tracks with unit price greater than 1?", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select title , albumid from album , track", "query": "SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID", "sub_ques": "what are the titles and ids for albums"}
{"db_id": "chinook_1", "sub_sql": "where t2.unitprice > 1", "question": "What are the titles and ids for albums containing tracks with unit price greater than 1?", "sub_sql_type": "null col op op value", "sub_sql_new": "where unitprice more than 1", "query": "SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID", "sub_ques": "tracks with unit price greater than 1"}
{"db_id": "chinook_1", "sub_sql": "select count track", "question": "How many tracks belong to rock genre?", "sub_sql_type": "null agg col", "sub_sql_new": "select count track", "query": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \\\\\\\"Rock\\\\\\\"", "sub_ques": "how many tracks belong to "}
{"db_id": "chinook_1", "sub_sql": "where t1.name = rock", "question": "How many tracks belong to rock genre?", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to rock", "query": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \\\\\\\"Rock\\\\\\\"", "sub_ques": "belong to rock genre"}
{"db_id": "chinook_1", "sub_sql": "select count track", "question": "Count the number of tracks that are part of the rock genre.", "sub_sql_type": "null agg col", "sub_sql_new": "select count track", "query": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \\\\\\\"Rock\\\\\\\"", "sub_ques": "count the number of tracks"}
{"db_id": "chinook_1", "sub_sql": "where t1.name = rock", "question": "Count the number of tracks that are part of the rock genre.", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to rock", "query": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \\\\\\\"Rock\\\\\\\"", "sub_ques": "tracks that are part of the rock genre"}
{"db_id": "chinook_1", "sub_sql": "select avg unitprice from track", "question": "What is the average unit price of tracks that belong to Jazz genre?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select avg unitprice from track", "query": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \\\\\\\"Jazz\\\\\\\"", "sub_ques": "what is the average unit price of tracks"}
{"db_id": "chinook_1", "sub_sql": "where t1.name = jazz", "question": "What is the average unit price of tracks that belong to Jazz genre?", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to jazz", "query": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \\\\\\\"Jazz\\\\\\\"", "sub_ques": "tracks that belong to jazz genre"}
{"db_id": "chinook_1", "sub_sql": "select avg unitprice from track", "question": "Find the average unit price of jazz tracks.", "sub_sql_type": "null agg col col col", "sub_sql_new": "select avg unitprice from track", "query": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \\\\\\\"Jazz\\\\\\\"", "sub_ques": "find the average unit price of jazz tracks"}
{"db_id": "chinook_1", "sub_sql": "where t1.name = jazz", "question": "Find the average unit price of jazz tracks.", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to jazz", "query": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \\\\\\\"Jazz\\\\\\\"", "sub_ques": "jazz tracks"}
{"db_id": "chinook_1", "sub_sql": "select firstname , lastname from customer", "question": "What is the first name and last name of the customer that has email \\\\\\\"luisg@embraer.com.br\\\\\\\"?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select firstname , lastname from customer", "query": "SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  \\\\\\\"luisg@embraer.com.br\\\\\\\"", "sub_ques": "what is the first name and last name of the customer"}
{"db_id": "chinook_1", "sub_sql": "where email = luisg@embraer.com.br", "question": "What is the first name and last name of the customer that has email \\\\\\\"luisg@embraer.com.br\\\\\\\"?", "sub_sql_type": "null col op op value", "sub_sql_new": "where email equal to luisg@embraer.com.br", "query": "SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  \\\\\\\"luisg@embraer.com.br\\\\\\\"", "sub_ques": "customer that has email luisg@embraer.com.br"}
{"db_id": "chinook_1", "sub_sql": "select firstname , lastname from customer", "question": "Find the full name of the customer with the email \\\\\\\"luisg@embraer.com.br\\\\\\\".", "sub_sql_type": "null col null col col col", "sub_sql_new": "select firstname , lastname from customer", "query": "SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  \\\\\\\"luisg@embraer.com.br\\\\\\\"", "sub_ques": "find the full name of the customer"}
{"db_id": "chinook_1", "sub_sql": "where email = luisg@embraer.com.br", "question": "Find the full name of the customer with the email \\\\\\\"luisg@embraer.com.br\\\\\\\".", "sub_sql_type": "null col op op value", "sub_sql_new": "where email equal to luisg@embraer.com.br", "query": "SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  \\\\\\\"luisg@embraer.com.br\\\\\\\"", "sub_ques": "customer with the email luisg@embraer.com.br"}
{"db_id": "chinook_1", "sub_sql": "select count customer", "question": "How many customers have email that contains \\\\\\\"gmail.com\\\\\\\"?", "sub_sql_type": "null agg col", "sub_sql_new": "select count customer", "query": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \\\\\\\"%gmail.com%\\\\\\\"", "sub_ques": "how many customers"}
{"db_id": "chinook_1", "sub_sql": "where email like gmail.com", "question": "How many customers have email that contains \\\\\\\"gmail.com\\\\\\\"?", "sub_sql_type": "null col op value", "sub_sql_new": "where email like gmail.com", "query": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \\\\\\\"%gmail.com%\\\\\\\"", "sub_ques": "customers have email that contains `` gmail.com"}
{"db_id": "chinook_1", "sub_sql": "select count customer", "question": "Count the number of customers that have an email containing \\\\\\\"gmail.com\\\\\\\".", "sub_sql_type": "null agg col", "sub_sql_new": "select count customer", "query": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \\\\\\\"%gmail.com%\\\\\\\"", "sub_ques": "count the number of customers"}
{"db_id": "chinook_1", "sub_sql": "where email like gmail.com", "question": "Count the number of customers that have an email containing \\\\\\\"gmail.com\\\\\\\".", "sub_sql_type": "null col op value", "sub_sql_new": "where email like gmail.com", "query": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \\\\\\\"%gmail.com%\\\\\\\"", "sub_ques": "customers that have an email containing `` gmail.com"}
{"db_id": "chinook_1", "sub_sql": "select t2.firstname , t2.lastname from employee", "question": "What is the first name and last name employee helps the customer with first name Leonie?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select firstname , lastname from employee", "query": "SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  \\\\\\\"Leonie\\\\\\\"", "sub_ques": "what is the first name and last name employee"}
{"db_id": "chinook_1", "sub_sql": "where t1.firstname = leonie", "question": "What is the first name and last name employee helps the customer with first name Leonie?", "sub_sql_type": "null col op op value", "sub_sql_new": "where firstname equal to leonie", "query": "SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  \\\\\\\"Leonie\\\\\\\"", "sub_ques": "customer with first name leonie"}
{"db_id": "chinook_1", "sub_sql": "select t2.firstname , t2.lastname from employee", "question": "Find the full names of employees who help customers with the first name Leonie.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select firstname , lastname from employee", "query": "SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  \\\\\\\"Leonie\\\\\\\"", "sub_ques": "find the full names of employees"}
{"db_id": "chinook_1", "sub_sql": "where t1.firstname = leonie", "question": "Find the full names of employees who help customers with the first name Leonie.", "sub_sql_type": "null col op op value", "sub_sql_new": "where firstname equal to leonie", "query": "SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  \\\\\\\"Leonie\\\\\\\"", "sub_ques": "customers with the first name leonie"}
{"db_id": "chinook_1", "sub_sql": "select t2.city from employee", "question": "What city does the employee who helps the customer with postal code 70174 live in?", "sub_sql_type": "null col col col", "sub_sql_new": "select city from employee", "query": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \\\\\\\"70174\\\\\\\"", "sub_ques": "what city does the employee"}
{"db_id": "chinook_1", "sub_sql": "where t1.postalcode = 70174", "question": "What city does the employee who helps the customer with postal code 70174 live in?", "sub_sql_type": "null col op op value", "sub_sql_new": "where postalcode equal to 70174", "query": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \\\\\\\"70174\\\\\\\"", "sub_ques": "customer with postal code 70174"}
{"db_id": "chinook_1", "sub_sql": "select t2.city from employee", "question": "Find the cities corresponding to employees who help customers with the postal code 70174.", "sub_sql_type": "null col col col", "sub_sql_new": "select city from employee", "query": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \\\\\\\"70174\\\\\\\"", "sub_ques": "find the cities corresponding to employees"}
{"db_id": "chinook_1", "sub_sql": "where t1.postalcode = 70174", "question": "Find the cities corresponding to employees who help customers with the postal code 70174.", "sub_sql_type": "null col op op value", "sub_sql_new": "where postalcode equal to 70174", "query": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \\\\\\\"70174\\\\\\\"", "sub_ques": "customers with the postal code 70174"}
{"db_id": "chinook_1", "sub_sql": "select count distinct city from employee", "question": "How many distinct cities does the employees live in?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct city from employee", "query": "SELECT COUNT(DISTINCT city) FROM EMPLOYEE", "sub_ques": "how many distinct cities does the employees"}
{"db_id": "chinook_1", "sub_sql": "select count distinct city from employee", "question": "Find the number of different cities that employees live in.", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct city from employee", "query": "SELECT COUNT(DISTINCT city) FROM EMPLOYEE", "sub_ques": "the number of different cities that employees live in"}
{"db_id": "chinook_1", "sub_sql": "select t2.invoicedate from invoice", "question": "Find all invoice dates corresponding to customers with first name Astrid and last name Gruber.", "sub_sql_type": "null col col col", "sub_sql_new": "select invoicedate from invoice", "query": "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  \\\\\\\"Astrid\\\\\\\" AND LastName  =  \\\\\\\"Gruber\\\\\\\"", "sub_ques": "find all invoice dates"}
{"db_id": "chinook_1", "sub_sql": "where t1.firstname = astrid", "question": "Find all invoice dates corresponding to customers with first name Astrid and last name Gruber.", "sub_sql_type": "null col op op value", "sub_sql_new": "where firstname equal to astrid", "query": "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  \\\\\\\"Astrid\\\\\\\" AND LastName  =  \\\\\\\"Gruber\\\\\\\"", "sub_ques": "customers with first name astrid"}
{"db_id": "chinook_1", "sub_sql": "select t2.invoicedate from invoice", "question": "What are the invoice dates for customers with the first name Astrid and the last name Gruber?", "sub_sql_type": "null col col col", "sub_sql_new": "select invoicedate from invoice", "query": "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  \\\\\\\"Astrid\\\\\\\" AND LastName  =  \\\\\\\"Gruber\\\\\\\"", "sub_ques": "what are the invoice dates"}
{"db_id": "chinook_1", "sub_sql": "where t1.firstname = astrid", "question": "What are the invoice dates for customers with the first name Astrid and the last name Gruber?", "sub_sql_type": "null col op op value", "sub_sql_new": "where firstname equal to astrid", "query": "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  \\\\\\\"Astrid\\\\\\\" AND LastName  =  \\\\\\\"Gruber\\\\\\\"", "sub_ques": "customers with the first name astrid"}
{"db_id": "chinook_1", "sub_sql": "select distinct t1.firstname from customer", "question": "Find the first names of all customers that live in Brazil and have an invoice.", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct firstname from customer", "query": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \\\\\\\"Brazil\\\\\\\"", "sub_ques": "find the first names of all customers"}
{"db_id": "chinook_1", "sub_sql": "where t1.country = brazil", "question": "Find the first names of all customers that live in Brazil and have an invoice.", "sub_sql_type": "null col op op value", "sub_sql_new": "where country equal to brazil", "query": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \\\\\\\"Brazil\\\\\\\"", "sub_ques": "customers that live in brazil"}
{"db_id": "chinook_1", "sub_sql": "select distinct t1.firstname from customer", "question": "What are the different first names for customers from Brazil who have also had an invoice?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct firstname from customer", "query": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \\\\\\\"Brazil\\\\\\\"", "sub_ques": "what are the different first names for customers"}
{"db_id": "chinook_1", "sub_sql": "where t1.country = brazil", "question": "What are the different first names for customers from Brazil who have also had an invoice?", "sub_sql_type": "null col op op value", "sub_sql_new": "where country equal to brazil", "query": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \\\\\\\"Brazil\\\\\\\"", "sub_ques": "customers from brazil"}
{"db_id": "chinook_1", "sub_sql": "select distinct t1.address from customer", "question": "Find the address of all customers that live in Germany and have invoice.", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct address from customer", "query": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \\\\\\\"Germany\\\\\\\"", "sub_ques": "find the address of all customers"}
{"db_id": "chinook_1", "sub_sql": "where t1.country = germany", "question": "Find the address of all customers that live in Germany and have invoice.", "sub_sql_type": "null col op op value", "sub_sql_new": "where country equal to germany", "query": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \\\\\\\"Germany\\\\\\\"", "sub_ques": "customers that live in germany"}
{"db_id": "chinook_1", "sub_sql": "select distinct t1.address from customer", "question": "What are the addresses of customers living in Germany who have had an invoice?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct address from customer", "query": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \\\\\\\"Germany\\\\\\\"", "sub_ques": "what are the addresses of customers"}
{"db_id": "chinook_1", "sub_sql": "where t1.country = germany", "question": "What are the addresses of customers living in Germany who have had an invoice?", "sub_sql_type": "null col op op value", "sub_sql_new": "where country equal to germany", "query": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \\\\\\\"Germany\\\\\\\"", "sub_ques": "customers living in germany"}
{"db_id": "chinook_1", "sub_sql": "select phone from employee", "question": "List the phone numbers of all employees.", "sub_sql_type": "null col col col", "sub_sql_new": "select phone from employee", "query": "SELECT Phone FROM EMPLOYEE", "sub_ques": "list the phone numbers of all employees"}
{"db_id": "chinook_1", "sub_sql": "select phone from employee", "question": "What are the phone numbers for each employee?", "sub_sql_type": "null col col col", "sub_sql_new": "select phone from employee", "query": "SELECT Phone FROM EMPLOYEE", "sub_ques": "what are the phone numbers for each employee"}
{"db_id": "chinook_1", "sub_sql": "select count track", "question": "How many tracks are in the AAC audio file media type?", "sub_sql_type": "null agg col", "sub_sql_new": "select count track", "query": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \\\\\\\"AAC audio file\\\\\\\"", "sub_ques": "how many tracks"}
{"db_id": "chinook_1", "sub_sql": "where t1.name = aacaudiofile", "question": "How many tracks are in the AAC audio file media type?", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to aacaudiofile", "query": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \\\\\\\"AAC audio file\\\\\\\"", "sub_ques": "aac audio file media type"}
{"db_id": "chinook_1", "sub_sql": "select count track", "question": "Count the number of tracks that are of the media type \\\\\\\"AAC audio file\\\\\\\".", "sub_sql_type": "null agg col", "sub_sql_new": "select count track", "query": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \\\\\\\"AAC audio file\\\\\\\"", "sub_ques": "count the number of tracks"}
{"db_id": "chinook_1", "sub_sql": "where t1.name = aacaudiofile", "question": "Count the number of tracks that are of the media type \\\\\\\"AAC audio file\\\\\\\".", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to aacaudiofile", "query": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \\\\\\\"AAC audio file\\\\\\\"", "sub_ques": "the media type aac audio file"}
{"db_id": "chinook_1", "sub_sql": "select avg milliseconds from track", "question": "What is the average duration in milliseconds of tracks that belong to Latin or Pop genre?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select avg milliseconds from track", "query": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \\\\\\\"Latin\\\\\\\" OR T1.Name  =  \\\\\\\"Pop\\\\\\\"", "sub_ques": "what is the average duration in milliseconds of tracks"}
{"db_id": "chinook_1", "sub_sql": "where t1.name = latin", "question": "What is the average duration in milliseconds of tracks that belong to Latin or Pop genre?", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to latin", "query": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \\\\\\\"Latin\\\\\\\" OR T1.Name  =  \\\\\\\"Pop\\\\\\\"", "sub_ques": "tracks that belong to latin"}
{"db_id": "chinook_1", "sub_sql": "select avg milliseconds from track", "question": "Find the average millisecond length of Latin and Pop tracks.", "sub_sql_type": "null agg col col col", "sub_sql_new": "select avg milliseconds from track", "query": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \\\\\\\"Latin\\\\\\\" OR T1.Name  =  \\\\\\\"Pop\\\\\\\"", "sub_ques": "find the average millisecond length"}
{"db_id": "chinook_1", "sub_sql": "where t1.name = latin", "question": "Find the average millisecond length of Latin and Pop tracks.", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to latin", "query": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \\\\\\\"Latin\\\\\\\" OR T1.Name  =  \\\\\\\"Pop\\\\\\\"", "sub_ques": "latin tracks"}
{"db_id": "chinook_1", "sub_sql": "select t1.firstname , t1.supportrepid from customer", "question": "Please show the employee first names and ids of employees who serve at least 10 customers.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select firstname , supportrepid from customer", "query": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10", "sub_ques": "show the employee first names and ids of employees"}
{"db_id": "chinook_1", "sub_sql": "group by t1.supportrepid having count customer >= 10", "question": "Please show the employee first names and ids of employees who serve at least 10 customers.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10", "sub_ques": "ids of employees who serve at least 10 customers"}
{"db_id": "chinook_1", "sub_sql": "select t1.firstname , t1.supportrepid from customer", "question": "What are the first names and support rep ids for employees serving 10 or more customers?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select firstname , supportrepid from customer", "query": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10", "sub_ques": "what are the first names and support rep ids for employees"}
{"db_id": "chinook_1", "sub_sql": "group by t1.supportrepid having count customer >= 10", "question": "What are the first names and support rep ids for employees serving 10 or more customers?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10", "sub_ques": "support rep ids for employees serving 10 or more customers"}
{"db_id": "chinook_1", "sub_sql": "select t1.lastname from customer", "question": "Please show the employee last names that serves no more than 20 customers.", "sub_sql_type": "null col col col", "sub_sql_new": "select lastname from customer", "query": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20", "sub_ques": "show the employee last names"}
{"db_id": "chinook_1", "sub_sql": "group by t1.supportrepid having count customer <= 20", "question": "Please show the employee last names that serves no more than 20 customers.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20", "sub_ques": "that serves no more than 20 customers"}
{"db_id": "chinook_1", "sub_sql": "select t1.lastname from customer", "question": "What are the last names of employees who serve at most 20 customers?", "sub_sql_type": "null col col col", "sub_sql_new": "select lastname from customer", "query": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20", "sub_ques": "what are the last names of employees"}
{"db_id": "chinook_1", "sub_sql": "group by t1.supportrepid having count customer <= 20", "question": "What are the last names of employees who serve at most 20 customers?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20", "sub_ques": "who serve at most 20 customers"}
{"db_id": "chinook_1", "sub_sql": "select title from album", "question": "Please list all album titles in alphabetical order.", "sub_sql_type": "null col col col", "sub_sql_new": "select title from album", "query": "SELECT Title FROM ALBUM ORDER BY Title", "sub_ques": "list all album titles"}
{"db_id": "chinook_1", "sub_sql": "order by title", "question": "Please list all album titles in alphabetical order.", "sub_sql_type": "null null col", "sub_sql_new": "order by title", "query": "SELECT Title FROM ALBUM ORDER BY Title", "sub_ques": "titles in alphabetical order"}
{"db_id": "chinook_1", "sub_sql": "select title from album", "question": "What are all the album titles, in alphabetical order?", "sub_sql_type": "null col col col", "sub_sql_new": "select title from album", "query": "SELECT Title FROM ALBUM ORDER BY Title", "sub_ques": "what are all the album titles"}
{"db_id": "chinook_1", "sub_sql": "order by title", "question": "What are all the album titles, in alphabetical order?", "sub_sql_type": "null null col", "sub_sql_new": "order by title", "query": "SELECT Title FROM ALBUM ORDER BY Title", "sub_ques": "the album titles , in alphabetical order"}
{"db_id": "chinook_1", "sub_sql": "select t2.name , t1.artistid from artist , album", "question": "Please list the name and id of all artists that have at least 3 albums in alphabetical order.", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select name , artistid from artist , album", "query": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name", "sub_ques": "list the name and id of all artists"}
{"db_id": "chinook_1", "sub_sql": "group by t1.artistid having count album >= 3", "question": "Please list the name and id of all artists that have at least 3 albums in alphabetical order.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name", "sub_ques": "id of all artists that have at least 3 albums"}
{"db_id": "chinook_1", "sub_sql": "order by t2.name", "question": "Please list the name and id of all artists that have at least 3 albums in alphabetical order.", "sub_sql_type": "null null col", "sub_sql_new": "order by name", "query": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name", "sub_ques": "the name in alphabetical order"}
{"db_id": "chinook_1", "sub_sql": "select t2.name , t1.artistid from artist , album", "question": "What are the names and ids of artists with 3 or more albums, listed in alphabetical order?", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select name , artistid from artist , album", "query": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name", "sub_ques": "what are the names and ids of artists"}
{"db_id": "chinook_1", "sub_sql": "group by t1.artistid having count album >= 3", "question": "What are the names and ids of artists with 3 or more albums, listed in alphabetical order?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name", "sub_ques": "ids of artists with 3 or more albums"}
{"db_id": "chinook_1", "sub_sql": "order by t2.name", "question": "What are the names and ids of artists with 3 or more albums, listed in alphabetical order?", "sub_sql_type": "null null col", "sub_sql_new": "order by name", "query": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name", "sub_ques": "the names listed in alphabetical order"}
{"db_id": "chinook_1", "sub_sql": "select avg t2.unitprice from track", "question": "What is the average unit price of rock tracks?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select avg unitprice from track", "query": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \\\\\\\"Rock\\\\\\\"", "sub_ques": "what is the average unit price of rock tracks"}
{"db_id": "chinook_1", "sub_sql": "select avg t2.unitprice from track", "question": "Find the average unit price of tracks from the Rock genre.", "sub_sql_type": "null agg col col col", "sub_sql_new": "select avg unitprice from track", "query": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \\\\\\\"Rock\\\\\\\"", "sub_ques": "find the average unit price of tracks"}
{"db_id": "chinook_1", "sub_sql": "where t1.name = rock", "question": "Find the average unit price of tracks from the Rock genre.", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to rock", "query": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \\\\\\\"Rock\\\\\\\"", "sub_ques": "the rock genre"}
{"db_id": "chinook_1", "sub_sql": "select max milliseconds , min milliseconds from track", "question": "What are the duration of the longest and shortest pop tracks in milliseconds?", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select max milliseconds , min milliseconds from track", "query": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \\\\\\\"Pop\\\\\\\"", "sub_ques": "What are the duration of longest and shortest pop tracks in milliseconds"}
{"db_id": "chinook_1", "sub_sql": "where t1.name = pop", "question": "What are the duration of the longest and shortest pop tracks in milliseconds?", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to pop", "query": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \\\\\\\"Pop\\\\\\\"", "sub_ques": "pop tracks"}
{"db_id": "chinook_1", "sub_sql": "select max milliseconds , min milliseconds from track", "question": "Find the maximum and minimum millisecond lengths of pop tracks.", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select max milliseconds , min milliseconds from track", "query": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \\\\\\\"Pop\\\\\\\"", "sub_ques": "find the maximum and minimum millisecond lengths of pop tracks"}
{"db_id": "chinook_1", "sub_sql": "where t1.name = pop", "question": "Find the maximum and minimum millisecond lengths of pop tracks.", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to pop", "query": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \\\\\\\"Pop\\\\\\\"", "sub_ques": "pop tracks"}
{"db_id": "chinook_1", "sub_sql": "select birthdate from employee", "question": "What are the birth dates of employees living in Edmonton?", "sub_sql_type": "null col col col", "sub_sql_new": "select birthdate from employee", "query": "SELECT BirthDate FROM EMPLOYEE WHERE City  =  \\\\\\\"Edmonton\\\\\\\"", "sub_ques": "what are the birth dates of employees"}
{"db_id": "chinook_1", "sub_sql": "where city = edmonton", "question": "What are the birth dates of employees living in Edmonton?", "sub_sql_type": "null col op op value", "sub_sql_new": "where city equal to edmonton", "query": "SELECT BirthDate FROM EMPLOYEE WHERE City  =  \\\\\\\"Edmonton\\\\\\\"", "sub_ques": "employees living in edmonton"}
{"db_id": "chinook_1", "sub_sql": "select birthdate from employee", "question": "Find the birth dates corresponding to employees who live in the city of Edmonton.", "sub_sql_type": "null col col col", "sub_sql_new": "select birthdate from employee", "query": "SELECT BirthDate FROM EMPLOYEE WHERE City  =  \\\\\\\"Edmonton\\\\\\\"", "sub_ques": "find the birth dates corresponding to employees"}
{"db_id": "chinook_1", "sub_sql": "where city = edmonton", "question": "Find the birth dates corresponding to employees who live in the city of Edmonton.", "sub_sql_type": "null col op op value", "sub_sql_new": "where city equal to edmonton", "query": "SELECT BirthDate FROM EMPLOYEE WHERE City  =  \\\\\\\"Edmonton\\\\\\\"", "sub_ques": "employees who live in the city of edmonton"}
{"db_id": "chinook_1", "sub_sql": "select distinct unitprice from track", "question": "What are the distinct unit prices of all tracks?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct unitprice from track", "query": "SELECT distinct(UnitPrice) FROM TRACK", "sub_ques": "what are the distinct unit prices of all"}
{"db_id": "chinook_1", "sub_sql": "select distinct unitprice from track", "question": "Find the distinct unit prices for tracks.", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct unitprice from track", "query": "SELECT distinct(UnitPrice) FROM TRACK", "sub_ques": "find the distinct unit prices for tracks"}
{"db_id": "chinook_1", "sub_sql": "select count artist", "question": "How many artists do not have any album?", "sub_sql_type": "null agg col", "sub_sql_new": "select count artist", "query": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)", "sub_ques": "how many artists"}
{"db_id": "chinook_1", "sub_sql": "artist not in album", "question": "How many artists do not have any album?", "sub_sql_type": "op op", "sub_sql_new": "artist tab not in album tab", "query": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)", "sub_ques": "artists do not have any album"}
{"db_id": "chinook_1", "sub_sql": "select count artist", "question": "Cound the number of artists who have not released an album.", "sub_sql_type": "null agg col", "sub_sql_new": "select count artist", "query": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)", "sub_ques": "the number of artists who have"}
{"db_id": "chinook_1", "sub_sql": "artist not in album", "question": "Cound the number of artists who have not released an album.", "sub_sql_type": "op op", "sub_sql_new": "artist tab not in album tab", "query": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)", "sub_ques": "artists who have not released an album"}
{"db_id": "insurance_fnol", "sub_sql": "select customer_phone from available_policies", "question": "Find all the phone numbers.", "sub_sql_type": "null col col col", "sub_sql_new": "select customer_phone from available_policies", "query": "SELECT customer_phone FROM available_policies", "sub_ques": "find all the phone numbers"}
{"db_id": "insurance_fnol", "sub_sql": "select customer_phone from available_policies", "question": "What are all the phone numbers?", "sub_sql_type": "null col col col", "sub_sql_new": "select customer_phone from available_policies", "query": "SELECT customer_phone FROM available_policies", "sub_ques": "what are all the phone"}
{"db_id": "insurance_fnol", "sub_sql": "select customer_phone from available_policies", "question": "What are the customer phone numbers under the policy \\\\\\\"Life Insurance\\\\\\\"?", "sub_sql_type": "null col col col", "sub_sql_new": "select customer_phone from available_policies", "query": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  \\\\\\\"Life Insurance\\\\\\\"", "sub_ques": "what are the customer phone numbers"}
{"db_id": "insurance_fnol", "sub_sql": "where policy_type_code = lifeinsurance", "question": "What are the customer phone numbers under the policy \\\\\\\"Life Insurance\\\\\\\"?", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where policy type code equal to lifeinsurance", "query": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  \\\\\\\"Life Insurance\\\\\\\"", "sub_ques": "policy life insurance"}
{"db_id": "insurance_fnol", "sub_sql": "select customer_phone from available_policies", "question": "What are the phone numbers of customers using the policy with the code \\\\\\\"Life Insurance\\\\\\\"?", "sub_sql_type": "null col col col", "sub_sql_new": "select customer_phone from available_policies", "query": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  \\\\\\\"Life Insurance\\\\\\\"", "sub_ques": "what are the phone numbers of customers"}
{"db_id": "insurance_fnol", "sub_sql": "where policy_type_code = lifeinsurance", "question": "What are the phone numbers of customers using the policy with the code \\\\\\\"Life Insurance\\\\\\\"?", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where policy type code equal to lifeinsurance", "query": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  \\\\\\\"Life Insurance\\\\\\\"", "sub_ques": "policy with the code life insurance"}
{"db_id": "insurance_fnol", "sub_sql": "select policy_type_code from available_policies", "question": "Which policy type has the most records in the database?", "sub_sql_type": "null col col col col col", "sub_sql_new": "select policy type code from available_policies", "query": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1", "sub_ques": "which policy type"}
{"db_id": "insurance_fnol", "sub_sql": "group by policy_type_code order by count record desc limit 1", "question": "Which policy type has the most records in the database?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count record desc limit 1", "query": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1", "sub_ques": "policy type has the most records in the database"}
{"db_id": "insurance_fnol", "sub_sql": "select policy_type_code from available_policies", "question": "Which policy type appears most frequently in the available policies?", "sub_sql_type": "null col col col col col", "sub_sql_new": "select policy type code from available_policies", "query": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1", "sub_ques": "which olicy type"}
{"db_id": "insurance_fnol", "sub_sql": "group by policy_type_code order by count available_policies desc limit 1", "question": "Which policy type appears most frequently in the available policies?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count available_policies desc limit 1", "query": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1", "sub_ques": "policy type appears most frequently in the available policies"}
{"db_id": "insurance_fnol", "sub_sql": "select customer_phone from available_policies", "question": "What are all the customer phone numbers under the most popular policy type?", "sub_sql_type": "null col col col", "sub_sql_new": "select customer_phone from available_policies", "query": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)", "sub_ques": "what are all the customer phone"}
{"db_id": "insurance_fnol", "sub_sql": "group by policy_type_code order by count available_policies desc limit 1", "question": "What are all the customer phone numbers under the most popular policy type?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count available_policies desc limit 1", "query": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)", "sub_ques": "the most popular policy type"}
{"db_id": "insurance_fnol", "sub_sql": "select customer_phone from available_policies", "question": "Find the phone numbers of customers using the most common policy type among the available policies.", "sub_sql_type": "null col col col", "sub_sql_new": "select customer_phone from available_policies", "query": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)", "sub_ques": "find the phone numbers of customers"}
{"db_id": "insurance_fnol", "sub_sql": "group by policy_type_code order by count available_policies desc limit 1", "question": "Find the phone numbers of customers using the most common policy type among the available policies.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count available_policies desc limit 1", "query": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)", "sub_ques": "the most common policy type among the available policies"}
{"db_id": "insurance_fnol", "sub_sql": "select policy_type_code from available_policies", "question": "Find the policy type used by more than 4 customers.", "sub_sql_type": "null col col col col col", "sub_sql_new": "select policy type code from available_policies", "query": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*)  >  4", "sub_ques": "find the policy type"}
{"db_id": "insurance_fnol", "sub_sql": "group by policy_type_code having count available_policies > 4", "question": "Find the policy type used by more than 4 customers.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*)  >  4", "sub_ques": "policy type used by more than 4 customers"}
{"db_id": "insurance_fnol", "sub_sql": "select policy_type_code from available_policies", "question": "Find the policy types more than 4 customers use. Show their type code.", "sub_sql_type": "null col col col col col", "sub_sql_new": "select policy type code from available_policies", "query": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*)  >  4", "sub_ques": "show their type code"}
{"db_id": "insurance_fnol", "sub_sql": "group by policy_type_code having count available_policies > 4", "question": "Find the policy types more than 4 customers use. Show their type code.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*)  >  4", "sub_ques": "find the policy types more than 4 customers use "}
{"db_id": "insurance_fnol", "sub_sql": "select sum settlement_amount , avg settlement_amount from settlements", "question": "Find the total and average amount of settlements.", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select sum settlement_amount , avg settlement_amount from settlements", "query": "SELECT sum(settlement_amount) ,  avg(settlement_amount) FROM settlements", "sub_ques": "find the total and average amount of settlements"}
{"db_id": "insurance_fnol", "sub_sql": "select sum settlement_amount , avg settlement_amount from settlements", "question": "Return the sum and average of all settlement amounts.", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select sum settlement_amount , avg settlement_amount from settlements", "query": "SELECT sum(settlement_amount) ,  avg(settlement_amount) FROM settlements", "sub_ques": "return the sum and average of all settlement amounts"}
{"db_id": "insurance_fnol", "sub_sql": "select t2.service_name from services", "question": "Find the name of services that have been used for more than 2 times in first notification of loss.", "sub_sql_type": "null col col col", "sub_sql_new": "select service_name from services", "query": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2", "sub_ques": "find the name of services"}
{"db_id": "insurance_fnol", "sub_sql": "group by t1.service_id having count services > 2", "question": "Find the name of services that have been used for more than 2 times in first notification of loss.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2", "sub_ques": "services that have been used for more than 2 times"}
{"db_id": "insurance_fnol", "sub_sql": "select t2.service_name from services", "question": "Which services have been used more than twice in first notification of loss? Return the service name.", "sub_sql_type": "null col col col", "sub_sql_new": "select service_name from services", "query": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2", "sub_ques": "return the service name"}
{"db_id": "insurance_fnol", "sub_sql": "group by t1.service_id having count services > 2", "question": "Which services have been used more than twice in first notification of loss? Return the service name.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2", "sub_ques": "services have been used more than twice"}
{"db_id": "insurance_fnol", "sub_sql": "select t1.effective_date from claims", "question": "What is the effective date of the claim that has the largest amount of total settlement?", "sub_sql_type": "null col col col", "sub_sql_new": "select effective_date from claims", "query": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1", "sub_ques": "what is the effective date of the claim"}
{"db_id": "insurance_fnol", "sub_sql": "group by t1.claim_id order by sum t2.settlement_amount desc limit 1", "question": "What is the effective date of the claim that has the largest amount of total settlement?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by sum settlement_amount desc limit 1", "query": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1", "sub_ques": "has the largest amount of total settlement"}
{"db_id": "insurance_fnol", "sub_sql": "select t1.effective_date from claims", "question": "Find the claim that has the largest total settlement amount. Return the effective date of the claim.", "sub_sql_type": "null col col col", "sub_sql_new": "select effective_date from claims", "query": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1", "sub_ques": "return the effective date of the claim"}
{"db_id": "insurance_fnol", "sub_sql": "group by t1.claim_id order by sum t2.settlement_amount desc limit 1", "question": "Find the claim that has the largest total settlement amount. Return the effective date of the claim.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by sum settlement_amount desc limit 1", "query": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1", "sub_ques": "claim that has the largest total settlement amount"}
{"db_id": "insurance_fnol", "sub_sql": "select count customers_policies", "question": "How many policies are listed for the customer named \\\\\\\"Dayana Robel\\\\\\\"?", "sub_sql_type": "null agg col", "sub_sql_new": "select count customers_policies", "query": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \\\\\\\"Dayana Robel\\\\\\\"", "sub_ques": "how many policies are listed for the customer"}
{"db_id": "insurance_fnol", "sub_sql": "where t1.customer_name = dayanarobel", "question": "How many policies are listed for the customer named \\\\\\\"Dayana Robel\\\\\\\"?", "sub_sql_type": "null col op op value", "sub_sql_new": "where customer_name equal to dayanarobel", "query": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \\\\\\\"Dayana Robel\\\\\\\"", "sub_ques": "customer named dayana robel"}
{"db_id": "insurance_fnol", "sub_sql": "select count customers_policies", "question": "Count the total number of policies used by the customer named \\\\\\\"Dayana Robel\\\\\\\".", "sub_sql_type": "null agg col", "sub_sql_new": "select count customers_policies", "query": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \\\\\\\"Dayana Robel\\\\\\\"", "sub_ques": "count the total number of policies used by the customer"}
{"db_id": "insurance_fnol", "sub_sql": "where t1.customer_name = dayanarobel", "question": "Count the total number of policies used by the customer named \\\\\\\"Dayana Robel\\\\\\\".", "sub_sql_type": "null col op op value", "sub_sql_new": "where customer_name equal to dayanarobel", "query": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \\\\\\\"Dayana Robel\\\\\\\"", "sub_ques": "customer named dayana robel"}
{"db_id": "insurance_fnol", "sub_sql": "select t1.customer_name from customers", "question": "What is the name of the customer who has the most policies listed?", "sub_sql_type": "null col col col", "sub_sql_new": "select customer_name from customers", "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1", "sub_ques": "what is the name of the customer"}
{"db_id": "insurance_fnol", "sub_sql": "group by t1.customer_name order by count customers_policies desc limit 1", "question": "What is the name of the customer who has the most policies listed?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count customers_policies desc limit 1", "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the name of the customer who has the most policies listed"}
{"db_id": "insurance_fnol", "sub_sql": "select t1.customer_name from customers", "question": "Which customer uses the most policies? Give me the customer name.", "sub_sql_type": "null col col col", "sub_sql_new": "select customer_name from customers", "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1", "sub_ques": "give me the customer name"}
{"db_id": "insurance_fnol", "sub_sql": "group by t1.customer_name order by count customers_policies desc limit 1", "question": "Which customer uses the most policies? Give me the customer name.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count customers_policies desc limit 1", "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1", "sub_ques": "customer uses the most policies ?"}
{"db_id": "insurance_fnol", "sub_sql": "select distinct t3.policy_type_code from available_policies", "question": "What are all the policy types of the customer named \\\\\\\"Dayana Robel\\\\\\\"?", "sub_sql_type": "null col col col col col col", "sub_sql_new": "select distinct policy type code from available_policies", "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \\\\\\\"Dayana Robel\\\\\\\"", "sub_ques": "what are all the policy types"}
{"db_id": "insurance_fnol", "sub_sql": "where t1.customer_name = dayanarobel", "question": "What are all the policy types of the customer named \\\\\\\"Dayana Robel\\\\\\\"?", "sub_sql_type": "null col op op value", "sub_sql_new": "where customer_name equal to dayanarobel", "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \\\\\\\"Dayana Robel\\\\\\\"", "sub_ques": "customer named dayana robel"}
{"db_id": "insurance_fnol", "sub_sql": "select distinct t3.policy_type_code from available_policies", "question": "Tell me the types of the policy used by the customer named \\\\\\\"Dayana Robel\\\\\\\".", "sub_sql_type": "null col col col col col col", "sub_sql_new": "select distinct policy type code from available_policies", "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \\\\\\\"Dayana Robel\\\\\\\"", "sub_ques": "tell me the types of the policy used by the customer"}
{"db_id": "insurance_fnol", "sub_sql": "where t1.customer_name = dayanarobel", "question": "Tell me the types of the policy used by the customer named \\\\\\\"Dayana Robel\\\\\\\".", "sub_sql_type": "null col op op value", "sub_sql_new": "where customer_name equal to dayanarobel", "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \\\\\\\"Dayana Robel\\\\\\\"", "sub_ques": "customer name dayana robel"}
{"db_id": "insurance_fnol", "sub_sql": "select distinct t3.policy_type_code from available_policies", "question": "What are all the policy types of the customer that has the most policies listed?", "sub_sql_type": "null col col col col col col", "sub_sql_new": "select distinct policy type code from available_policies", "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)", "sub_ques": "what are all the policy types of the customer"}
{"db_id": "insurance_fnol", "sub_sql": "group by t1.customer_name order by count customers_policies desc limit 1", "question": "What are all the policy types of the customer that has the most policies listed?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count customers_policies desc limit 1", "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)", "sub_ques": "the customer that has the most policies listed"}
{"db_id": "insurance_fnol", "sub_sql": "select distinct t3.policy_type_code from available_policies", "question": "List all the policy types used by the customer enrolled in the most policies.", "sub_sql_type": "null col col col col col col", "sub_sql_new": "select distinct policy type code from available_policies", "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)", "sub_ques": "list all the policy types used by the customer"}
{"db_id": "insurance_fnol", "sub_sql": "group by t1.customer_name order by count customers_policies desc limit 1", "question": "List all the policy types used by the customer enrolled in the most policies.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count customers_policies desc limit 1", "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)", "sub_ques": "the customer enrolled in the most policies"}
{"db_id": "insurance_fnol", "sub_sql": "select service_name from services", "question": "List all the services in the alphabetical order.", "sub_sql_type": "null col col col", "sub_sql_new": "select service_name from services", "query": "SELECT service_name FROM services ORDER BY service_name", "sub_ques": "list all the services"}
{"db_id": "insurance_fnol", "sub_sql": "order by service_name", "question": "List all the services in the alphabetical order.", "sub_sql_type": "null null col", "sub_sql_new": "order by service_name", "query": "SELECT service_name FROM services ORDER BY service_name", "sub_ques": "the services in the alphabetical order"}
{"db_id": "insurance_fnol", "sub_sql": "select service_name from services", "question": "Give me a list of all the service names sorted alphabetically.", "sub_sql_type": "null col col col", "sub_sql_new": "select service_name from services", "query": "SELECT service_name FROM services ORDER BY service_name", "sub_ques": "give me a list of all the service names"}
{"db_id": "insurance_fnol", "sub_sql": "order by service_name", "question": "Give me a list of all the service names sorted alphabetically.", "sub_sql_type": "null null col", "sub_sql_new": "order by service_name", "query": "SELECT service_name FROM services ORDER BY service_name", "sub_ques": "the service names sorted alphabetically"}
{"db_id": "insurance_fnol", "sub_sql": "select count services", "question": "How many services are there?", "sub_sql_type": "null agg col", "sub_sql_new": "select count services", "query": "SELECT count(*) FROM services", "sub_ques": "how many services"}
{"db_id": "insurance_fnol", "sub_sql": "select count services", "question": "Count the total number of available services.", "sub_sql_type": "null agg col", "sub_sql_new": "select count services", "query": "SELECT count(*) FROM services", "sub_ques": "count the total number of available services"}
{"db_id": "insurance_fnol", "sub_sql": "select t1.customer_name from customers", "question": "Find the names of customers who have used either the service \\\\\\\"Close a policy\\\\\\\" or the service \\\\\\\"Upgrade a policy\\\\\\\".", "sub_sql_type": "null col col col", "sub_sql_new": "select customer_name from customers", "query": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \\\\\\\"Close a policy\\\\\\\" OR t3.service_name  =  \\\\\\\"Upgrade a policy\\\\\\\"", "sub_ques": "find the names of customers"}
{"db_id": "insurance_fnol", "sub_sql": "where t3.service_name = closeapolicy", "question": "Find the names of customers who have used either the service \\\\\\\"Close a policy\\\\\\\" or the service \\\\\\\"Upgrade a policy\\\\\\\".", "sub_sql_type": "null col op op value", "sub_sql_new": "where service_name equal to closeapolicy", "query": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \\\\\\\"Close a policy\\\\\\\" OR t3.service_name  =  \\\\\\\"Upgrade a policy\\\\\\\"", "sub_ques": "service `` close a policy '' or the service"}
{"db_id": "insurance_fnol", "sub_sql": "where t3.service_name = closeapolicy", "question": "Which customers have used the service named \\\\\\\"Close a policy\\\\\\\" or \\\\\\\"Upgrade a policy\\\\\\\"? Give me the customer names.", "sub_sql_type": "null col op op value", "sub_sql_new": "where service_name equal to closeapolicy", "query": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \\\\\\\"Close a policy\\\\\\\" OR t3.service_name  =  \\\\\\\"Upgrade a policy\\\\\\\"", "sub_ques": "service named close a policy"}
{"db_id": "insurance_fnol", "sub_sql": "select customer_id from customers", "question": "Find the IDs of customers whose name contains \\\\\\\"Diana\\\\\\\".", "sub_sql_type": "null col col col", "sub_sql_new": "select customer_id from customers", "query": "SELECT customer_id FROM customers WHERE customer_name LIKE \\\\\\\"%Diana%\\\\\\\"", "sub_ques": "find the ids of customers"}
{"db_id": "insurance_fnol", "sub_sql": "where customer_name like diana", "question": "Find the IDs of customers whose name contains \\\\\\\"Diana\\\\\\\".", "sub_sql_type": "null col op value", "sub_sql_new": "where customer_name like diana", "query": "SELECT customer_id FROM customers WHERE customer_name LIKE \\\\\\\"%Diana%\\\\\\\"", "sub_ques": "whose name contains `` diana"}
{"db_id": "insurance_fnol", "sub_sql": "select customer_id from customers", "question": "What are the IDs of customers who have \\\\\\\"Diana\\\\\\\" in part of their names?", "sub_sql_type": "null col col col", "sub_sql_new": "select customer_id from customers", "query": "SELECT customer_id FROM customers WHERE customer_name LIKE \\\\\\\"%Diana%\\\\\\\"", "sub_ques": "what are the ids of customers"}
{"db_id": "insurance_fnol", "sub_sql": "where customer_name like diana", "question": "What are the IDs of customers who have \\\\\\\"Diana\\\\\\\" in part of their names?", "sub_sql_type": "null col op value", "sub_sql_new": "where customer_name like diana", "query": "SELECT customer_id FROM customers WHERE customer_name LIKE \\\\\\\"%Diana%\\\\\\\"", "sub_ques": "customers who have diana '' in part of their names"}
{"db_id": "insurance_fnol", "sub_sql": "select max settlement_amount , min settlement_amount from settlements", "question": "What are the maximum and minimum settlement amount on record?", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select max settlement_amount , min settlement_amount from settlements", "query": "SELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements", "sub_ques": "what are the maximum and minimum settlement amount"}
{"db_id": "insurance_fnol", "sub_sql": "select max settlement_amount , min settlement_amount from settlements", "question": "Find the maximum and minimum settlement amount.", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select max settlement_amount , min settlement_amount from settlements", "query": "SELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements", "sub_ques": "find the maximum and minimum settlement amount"}
{"db_id": "insurance_fnol", "sub_sql": "select customer_id , customer_name from customers", "question": "List all the customers in increasing order of IDs.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select customer_id , customer_name from customers", "query": "SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC", "sub_ques": "list all the customers"}
{"db_id": "insurance_fnol", "sub_sql": "order by customer_id asc", "question": "List all the customers in increasing order of IDs.", "sub_sql_type": "null null col null", "sub_sql_new": "order by customer_id asc", "query": "SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC", "sub_ques": "customers in increasing order of ids"}
{"db_id": "insurance_fnol", "sub_sql": "order by customer_id asc", "question": "What is the ordered list of customer ids?", "sub_sql_type": "null null col null", "sub_sql_new": "order by customer_id asc", "query": "SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC", "sub_ques": "the ordered list of customer ids"}
{"db_id": "insurance_fnol", "sub_sql": "select t2.date_opened , t2.date_closed from customers_policies", "question": "Retrieve the open and close dates of all the policies associated with the customer whose name contains \\\\\\\"Diana\\\\\\\"", "sub_sql_type": "null col null col col col", "sub_sql_new": "select date_opened , date_closed from customers_policies", "query": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \\\\\\\"%Diana%\\\\\\\"", "sub_ques": "retrieve the open and close dates of all the policies associated with the customer"}
{"db_id": "insurance_fnol", "sub_sql": "where t1.customer_name like diana", "question": "Retrieve the open and close dates of all the policies associated with the customer whose name contains \\\\\\\"Diana\\\\\\\"", "sub_sql_type": "null col op value", "sub_sql_new": "where customer_name like diana", "query": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \\\\\\\"%Diana%\\\\\\\"", "sub_ques": "customer whose name contains `` diana"}
{"db_id": "insurance_fnol", "sub_sql": "select t2.date_opened , t2.date_closed from customers_policies", "question": "What are the open and close dates of all the policies used by the customer who have \\\\\\\"Diana\\\\\\\" in part of their names?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select date_opened , date_closed from customers_policies", "query": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \\\\\\\"%Diana%\\\\\\\"", "sub_ques": "what are the open and close dates of all the policies used by the customer"}
{"db_id": "insurance_fnol", "sub_sql": "where t1.customer_name like diana", "question": "What are the open and close dates of all the policies used by the customer who have \\\\\\\"Diana\\\\\\\" in part of their names?", "sub_sql_type": "null col op value", "sub_sql_new": "where customer_name like diana", "query": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \\\\\\\"%Diana%\\\\\\\"", "sub_ques": "customer who have `` diana '' in part of their names"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "select count enzyme", "question": "How many kinds of enzymes are there?", "sub_sql_type": "null agg col", "sub_sql_new": "select count enzyme", "query": "SELECT count(*) FROM enzyme", "sub_ques": "how many kinds of enzymes"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "select count enzyme", "question": "What is the total count of enzymes?", "sub_sql_type": "null agg col", "sub_sql_new": "select count enzyme", "query": "SELECT count(*) FROM enzyme", "sub_ques": "what is the total count of enzymes"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "select name from enzyme", "question": "List the name of enzymes in descending lexicographical order.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from enzyme", "query": "SELECT name FROM enzyme ORDER BY name DESC", "sub_ques": "list the name of enzymes"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "order by name desc", "question": "List the name of enzymes in descending lexicographical order.", "sub_sql_type": "null null col null", "sub_sql_new": "order by name desc", "query": "SELECT name FROM enzyme ORDER BY name DESC", "sub_ques": "the name of enzymes in descending lexicographical order"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "select name from enzyme", "question": "What are the names of enzymes in descending order?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from enzyme", "query": "SELECT name FROM enzyme ORDER BY name DESC", "sub_ques": "what are the names of enzymes"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "order by name desc", "question": "What are the names of enzymes in descending order?", "sub_sql_type": "null null col null", "sub_sql_new": "order by name desc", "query": "SELECT name FROM enzyme ORDER BY name DESC", "sub_ques": "the names of enzymes in descending order"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "select name , location from enzyme", "question": "List the names and the locations that the enzymes can make an effect.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , location from enzyme", "query": "SELECT name ,  LOCATION FROM enzyme", "sub_ques": "list the names and the locations that the enzymes"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "select name , location from enzyme", "question": "What are the names and locations of all enzymes listed?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , location from enzyme", "query": "SELECT name ,  LOCATION FROM enzyme", "sub_ques": "what are the names and locations of all enzymes"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "select max omim from enzyme", "question": "What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select max omim from enzyme", "query": "SELECT max(OMIM) FROM enzyme", "sub_ques": "what is the maximum online mendelian inheritance in man ( omim ) value of the enzymes"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "select max omim from enzyme", "question": "What is the maximum OMIM value in the database?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select max omim from enzyme", "query": "SELECT max(OMIM) FROM enzyme", "sub_ques": "what is the maximum omim"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "select product , chromosome , porphyria from enzyme", "question": "What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'?", "sub_sql_type": "null col null col null col col col", "sub_sql_new": "select product , chromosome , porphyria from enzyme", "query": "SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'", "sub_ques": "what is the product , chromosome and porphyria related to the enzymes"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "where location = cytosol", "question": "What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'?", "sub_sql_type": "null col op op value", "sub_sql_new": "where location equal to cytosol", "query": "SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'", "sub_ques": "enzymes which take effect at the location cytosol"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "select product , chromosome , porphyria from enzyme", "question": "What is the product, chromosome, and porphyria of the enzymes located at 'Cytosol'?", "sub_sql_type": "null col null col null col col col", "sub_sql_new": "select product , chromosome , porphyria from enzyme", "query": "SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'", "sub_ques": "what is the product , chromosome , and porphyria of the enzymes"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "where location = cytosol", "question": "What is the product, chromosome, and porphyria of the enzymes located at 'Cytosol'?", "sub_sql_type": "null col op op value", "sub_sql_new": "where location equal to cytosol", "query": "SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'", "sub_ques": "enzymes located at cytosol"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "select name from enzyme", "question": "What are the names of enzymes who does not produce 'Heme'?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from enzyme", "query": "SELECT name FROM enzyme WHERE product != 'Heme'", "sub_ques": "what are the names of enzymes"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "where product != heme", "question": "What are the names of enzymes who does not produce 'Heme'?", "sub_sql_type": "null col op op op value", "sub_sql_new": "where product not equal to heme", "query": "SELECT name FROM enzyme WHERE product != 'Heme'", "sub_ques": "enzymes who does not produce 'heme"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "select name from enzyme", "question": "What are the names of enzymes whose product is not 'Heme'?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from enzyme", "query": "SELECT name FROM enzyme WHERE product != 'Heme'", "sub_ques": "what are the names of enzymes"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "where product != heme", "question": "What are the names of enzymes whose product is not 'Heme'?", "sub_sql_type": "null col op op op value", "sub_sql_new": "where product not equal to heme", "query": "SELECT name FROM enzyme WHERE product != 'Heme'", "sub_ques": "enzymes whose product is not Heme"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "select name , trade_name from medicine", "question": "What are the names and trade names of the medicines which has 'Yes' value in the FDA record?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , trade_name from medicine", "query": "SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'", "sub_ques": "what are the names and trade names of the medicines"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "where fda_approved = yes", "question": "What are the names and trade names of the medicines which has 'Yes' value in the FDA record?", "sub_sql_type": "null col op op value", "sub_sql_new": "where fda_approved equal to yes", "query": "SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'", "sub_ques": "medicines which has 'yes ' value in the fda record"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "select name , trade_name from medicine", "question": "What are the names and trade names of the medcines that are FDA approved?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , trade_name from medicine", "query": "SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'", "sub_ques": "what are the names and trade names"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "where fda_approved = yes", "question": "What are the names and trade names of the medcines that are FDA approved?", "sub_sql_type": "null col op op value", "sub_sql_new": "where fda_approved equal to yes", "query": "SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'", "sub_ques": "fda approved"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "select t1.name from enzyme", "question": "What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from enzyme", "query": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'", "sub_ques": "what are the names of enzymes"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "where t3.name = amisulpride", "question": "What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'?", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to amisulpride", "query": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'", "sub_ques": "medicine named amisulpride"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "select t1.name from enzyme", "question": "What are the names of the enzymes used in the medicine  Amisulpride that acts as inhibitors?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from enzyme", "query": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'", "sub_ques": "what are the names of the enzymes"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "where t3.name = amisulpride", "question": "What are the names of the enzymes used in the medicine  Amisulpride that acts as inhibitors?", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to amisulpride", "query": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'", "sub_ques": "medicine amisulpride"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "select t1.id , t1.name from medicine", "question": "What are the ids and names of the medicine that can interact with two or more enzymes?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select id , name from medicine", "query": "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2", "sub_ques": "what are the ids and names of the medicine"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "group by t1.id having count medicine_enzyme_interaction >= 2", "question": "What are the ids and names of the medicine that can interact with two or more enzymes?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2", "sub_ques": "ids that can interact with two or more enzymes"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "select t1.id , t1.name from medicine", "question": "For every medicine id, what are the names of the medicines that can interact with more than one enzyme?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select id , name from medicine", "query": "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2", "sub_ques": "id , what are the names of the medicines"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "group by t1.id having count medicine_enzyme_interaction >= 2", "question": "For every medicine id, what are the names of the medicines that can interact with more than one enzyme?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2", "sub_ques": "medicine id , that can interact with more than one enzyme"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "select t1.id , t1.name , t1.fda_approved from medicine", "question": "What are the ids, names and FDA approval status of medicines in descending order of the number of enzymes that it can interact with.", "sub_sql_type": "null col null col null col col col", "sub_sql_new": "select id , name , fda_approved from medicine", "query": "SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC", "sub_ques": "what are the ids , names and fda approval status of medicines"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "group by t1.id order by count medicine_enzyme_interaction desc", "question": "What are the ids, names and FDA approval status of medicines in descending order of the number of enzymes that it can interact with.", "sub_sql_type": "null null agg col null", "sub_sql_new": "order by count medicine_enzyme_interaction desc", "query": "SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC", "sub_ques": "the ids , in descending order of the number"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "select t1.id , t1.name , t1.fda_approved from medicine", "question": "What are the ids, names, and FDA approval status for medicines ordered by descending number of possible enzyme interactions?", "sub_sql_type": "null col null col null col col col", "sub_sql_new": "select id , name , fda_approved from medicine", "query": "SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC", "sub_ques": "what are the ids , names , and fda approval status for medicines"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "group by t1.id order by count medicine_enzyme_interaction desc", "question": "What are the ids, names, and FDA approval status for medicines ordered by descending number of possible enzyme interactions?", "sub_sql_type": "null null agg col null", "sub_sql_new": "order by count medicine_enzyme_interaction desc", "query": "SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC", "sub_ques": "the ids for medicines ordered by descending number"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "select t1.id , t1.name from enzyme", "question": "What is the id and name of the enzyme with most number of medicines that can interact as 'activator'?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select id , name from enzyme", "query": "SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "what is the id and name of the enzyme"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "group by t1.id order by count medicine_enzyme_interaction desc limit 1", "question": "What is the id and name of the enzyme with most number of medicines that can interact as 'activator'?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count medicine_enzyme_interaction desc limit 1", "query": "SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the id of the enzyme with most number of medicines"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "select t1.id , t1.name from enzyme", "question": "What is the id and name of the enzyme that can interact with the most medicines as an activator?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select id , name from enzyme", "query": "SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "what is the id and name of the enzyme"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "select t1.interaction_type from medicine_enzyme_interaction", "question": "What is the interaction type of the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?", "sub_sql_type": "null col col col col", "sub_sql_new": "select interaction type from medicine_enzyme_interaction", "query": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'", "sub_ques": "what is the interaction type of the enzyme"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "where t3.name = alasynthase", "question": "What is the interaction type of the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to alasynthase", "query": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'", "sub_ques": "enzyme named ala synthase"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "select t1.interaction_type from medicine_enzyme_interaction", "question": "What is the type of interaction for the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?", "sub_sql_type": "null col col col col", "sub_sql_new": "select interaction type from medicine_enzyme_interaction", "query": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'", "sub_ques": "what is the type of interaction for the enzyme"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "where t3.name = alasynthase", "question": "What is the type of interaction for the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to alasynthase", "query": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'", "sub_ques": "enzyme named ala synthase"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "group by interaction_type order by count medicine_enzyme_interaction desc limit 1", "question": "What is the most common interaction type between enzymes and medicine? And how many are there?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count medicine_enzyme_interaction desc limit 1", "query": "SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the most common interaction type between enzymes and medicine ? and how many"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "group by interaction_type order by count medicine_enzyme_interaction desc limit 1", "question": "What are the most common types of interactions between enzymes and medicine, and how many types are there?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count medicine_enzyme_interaction desc limit 1", "query": "SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the most common types of interactions between enzymes and medicine"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "select count medicine", "question": "How many medicines have the FDA approval status 'No' ?", "sub_sql_type": "null agg col", "sub_sql_new": "select count medicine", "query": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'", "sub_ques": "how many medicines"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "where fda_approved = no", "question": "How many medicines have the FDA approval status 'No' ?", "sub_sql_type": "null col op op value", "sub_sql_new": "where fda_approved equal to no", "query": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'", "sub_ques": "medicines have the fda approval status no"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "select count medicine", "question": "How many medicines were not approved by the FDA?", "sub_sql_type": "null agg col", "sub_sql_new": "select count medicine", "query": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'", "sub_ques": "how many medicines"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "where fda_approved = no", "question": "How many medicines were not approved by the FDA?", "sub_sql_type": "null col op op value", "sub_sql_new": "where fda_approved equal to no", "query": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'", "sub_ques": "medicines were not approved by the fda"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "select count enzyme", "question": "How many enzymes do not have any interactions?", "sub_sql_type": "null agg col", "sub_sql_new": "select count enzyme", "query": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );", "sub_ques": "how many enzymes"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "select count enzyme", "question": "What is the count of enzymes without any interactions?", "sub_sql_type": "null agg col", "sub_sql_new": "select count enzyme", "query": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );", "sub_ques": "what is the count of enzymes"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "select t1.id , t1.trade_name from medicine", "question": "What is the id and trade name of the medicines can interact with at least 3 enzymes?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select id , trade_name from medicine", "query": "SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3", "sub_ques": "what is the id and trade name of the medicines"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "group by t1.id having count medicine_enzyme_interaction >= 3", "question": "What is the id and trade name of the medicines can interact with at least 3 enzymes?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3", "sub_ques": "id can interact with at least 3 enzymes"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "select t1.id , t1.trade_name from medicine", "question": "What are the ids and trade names of the medicine that can interact with at least 3 enzymes?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select id , trade_name from medicine", "query": "SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3", "sub_ques": "what are the ids and trade names of the medicine"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "select distinct t1.name , t1.location , t1.product from enzyme", "question": "What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?", "sub_sql_type": "null col col null col null col col col", "sub_sql_new": "select distinct name , location , product from enzyme", "query": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'", "sub_ques": "what are the distinct name , location and products of the enzymes"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "where t2.interaction_type = inhibitor", "question": "What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where interaction type equal to inhibitor", "query": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'", "sub_ques": "which has any inhibitor interaction"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "select distinct t1.name , t1.location , t1.product from enzyme", "question": "What are the different names, locations, and products of the enzymes that are capable inhibitor interactions?", "sub_sql_type": "null col col null col null col col col", "sub_sql_new": "select distinct name , location , product from enzyme", "query": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'", "sub_ques": "what are the different names , locations , and products of the enzymes"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "where t2.interaction_type = inhibitor", "question": "What are the different names, locations, and products of the enzymes that are capable inhibitor interactions?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where interaction type equal to inhibitor", "query": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'", "sub_ques": "that are capable inhibitor interactions"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "select count distinct fda_approved from medicine", "question": "How many distinct FDA approval statuses are there for the medicines?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct fda_approved from medicine", "query": "SELECT count(DISTINCT FDA_approved) FROM medicine", "sub_ques": "how many distinct fda approval statuses are there for the medicines"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "select count distinct fda_approved from medicine", "question": "How many different FDA approval statuses exist for medicines?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct fda_approved from medicine", "query": "SELECT count(DISTINCT FDA_approved) FROM medicine", "sub_ques": "how many different fda approval statuses exist for medicines"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "select name from enzyme", "question": "Which enzyme names have the substring \\\\\\\"ALA\\\\\\\"?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from enzyme", "query": "SELECT name FROM enzyme WHERE name LIKE \\\\\\\"%ALA%\\\\\\\"", "sub_ques": "which enzyme names"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "where name like ala", "question": "Which enzyme names have the substring \\\\\\\"ALA\\\\\\\"?", "sub_sql_type": "null col op value", "sub_sql_new": "where name like ala", "query": "SELECT name FROM enzyme WHERE name LIKE \\\\\\\"%ALA%\\\\\\\"", "sub_ques": "enzyme names have the substring `` ala"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "select name from enzyme", "question": "What are the names of enzymes that include the string 'ALA'?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from enzyme", "query": "SELECT name FROM enzyme WHERE name LIKE \\\\\\\"%ALA%\\\\\\\"", "sub_ques": "what are the names of enzymes"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "where name like ala", "question": "What are the names of enzymes that include the string 'ALA'?", "sub_sql_type": "null col op value", "sub_sql_new": "where name like ala", "query": "SELECT name FROM enzyme WHERE name LIKE \\\\\\\"%ALA%\\\\\\\"", "sub_ques": "names of enzymes that include the string ala"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "select trade_name , count medicine group by trade_name", "question": "find the number of medicines offered by each trade.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select trade_name , count medicine", "query": "SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name", "sub_ques": "find the number of medicines offered by each trade"}
{"db_id": "medicine_enzyme_interaction", "sub_sql": "select trade_name , count medicine group by trade_name", "question": "How many medicines are offered by each trade name?", "sub_sql_type": "null col null agg col", "sub_sql_new": "select trade_name , count medicine", "query": "SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name", "sub_ques": "how many medicines are offered by each trade name"}
{"db_id": "university_basketball", "sub_sql": "select school , nickname from university", "question": "List all schools and their nicknames in the order of founded year.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select school , nickname from university", "query": "SELECT school ,  nickname FROM university ORDER BY founded", "sub_ques": "list all schools and their nicknames"}
{"db_id": "university_basketball", "sub_sql": "order by founded", "question": "List all schools and their nicknames in the order of founded year.", "sub_sql_type": "null null col", "sub_sql_new": "order by founded", "query": "SELECT school ,  nickname FROM university ORDER BY founded", "sub_ques": "in the order of founded year"}
{"db_id": "university_basketball", "sub_sql": "select school , nickname from university", "question": "What are the different schools and their nicknames, ordered by their founding years?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select school , nickname from university", "query": "SELECT school ,  nickname FROM university ORDER BY founded", "sub_ques": "what are the different schools and their nicknames"}
{"db_id": "university_basketball", "sub_sql": "order by founded", "question": "What are the different schools and their nicknames, ordered by their founding years?", "sub_sql_type": "null null col", "sub_sql_new": "order by founded", "query": "SELECT school ,  nickname FROM university ORDER BY founded", "sub_ques": "ordered by their founding years"}
{"db_id": "university_basketball", "sub_sql": "select school , location from university", "question": "List all public schools and their locations.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select school , location from university", "query": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'", "sub_ques": "list all public schools and their locations"}
{"db_id": "university_basketball", "sub_sql": "select school , location from university", "question": "What are the public schools and what are their locations?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select school , location from university", "query": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'", "sub_ques": "what are the public schools and what are their locations"}
{"db_id": "university_basketball", "sub_sql": "order by enrollment desc limit 1", "question": "When was the school with the largest enrollment founded?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by enrollment desc limit 1", "query": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1", "sub_ques": "school with the largest enrollment"}
{"db_id": "university_basketball", "sub_sql": "select founded from university", "question": "Return the founded year for the school with the largest enrollment.", "sub_sql_type": "null col col col", "sub_sql_new": "select founded from university", "query": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1", "sub_ques": "return the founded year for the school"}
{"db_id": "university_basketball", "sub_sql": "order by enrollment desc limit 1", "question": "Return the founded year for the school with the largest enrollment.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by enrollment desc limit 1", "query": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1", "sub_ques": "the largest enrollment"}
{"db_id": "university_basketball", "sub_sql": "select founded from university", "question": "Find the founded year of the newest non public school.", "sub_sql_type": "null col col col", "sub_sql_new": "select founded from university", "query": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1", "sub_ques": "find the founded year of school"}
{"db_id": "university_basketball", "sub_sql": "order by founded desc limit 1", "question": "Find the founded year of the newest non public school.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by founded desc limit 1", "query": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1", "sub_ques": "the founded year of the newest"}
{"db_id": "university_basketball", "sub_sql": "order by founded desc limit 1", "question": "What is the founded year of the non public school that was founded most recently?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by founded desc limit 1", "query": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1", "sub_ques": "school that was founded most recently"}
{"db_id": "university_basketball", "sub_sql": "select count distinct school_id from basketball_match", "question": "How many schools are in the basketball match?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct school_id from basketball_match", "query": "SELECT count(DISTINCT school_id) FROM basketball_match", "sub_ques": "how many schools are in the basketball match"}
{"db_id": "university_basketball", "sub_sql": "select count distinct school_id from basketball_match", "question": "Count the number of schools that have had basketball matches.", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct school_id from basketball_match", "query": "SELECT count(DISTINCT school_id) FROM basketball_match", "sub_ques": "count the number of schools that have had basketball matches"}
{"db_id": "university_basketball", "sub_sql": "select acc_percent from basketball_match", "question": "What is the acc percent score in the competition?", "sub_sql_type": "null col col col", "sub_sql_new": "select acc_percent from basketball_match", "query": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1", "sub_ques": "what is the highest acc percent"}
{"db_id": "university_basketball", "sub_sql": "order by acc_percent desc limit 1", "question": "What is the highest acc percent score in the competition?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by acc_percent desc limit 1", "query": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1", "sub_ques": "the highest acc percent"}
{"db_id": "university_basketball", "sub_sql": "select acc_percent from basketball_match", "question": "Return the highest acc percent across all basketball matches.", "sub_sql_type": "null col col col", "sub_sql_new": "select acc_percent from basketball_match", "query": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1", "sub_ques": "return the acc percent"}
{"db_id": "university_basketball", "sub_sql": "order by acc_percent desc limit 1", "question": "Return the highest acc percent across all basketball matches.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by acc_percent desc limit 1", "query": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1", "sub_ques": "the highest acc percent"}
{"db_id": "university_basketball", "sub_sql": "select t1.primary_conference from university", "question": "What is the primary conference of the school that has the lowest acc percent score in the competition?", "sub_sql_type": "null col col col", "sub_sql_new": "select primary_conference from university", "query": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1", "sub_ques": "what is the primary conference"}
{"db_id": "university_basketball", "sub_sql": "order by t2.acc_percent limit 1", "question": "What is the primary conference of the school that has the lowest acc percent score in the competition?", "sub_sql_type": "null null col null limv", "sub_sql_new": "order by acc_percent limit 1", "query": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1", "sub_ques": "the lowest acc percent"}
{"db_id": "university_basketball", "sub_sql": "select t1.primary_conference from university", "question": "Return the primary conference of the school with the lowest acc percentage score.", "sub_sql_type": "null col col col", "sub_sql_new": "select primary_conference from university", "query": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1", "sub_ques": "return the primary conference"}
{"db_id": "university_basketball", "sub_sql": "order by t2.acc_percent limit 1", "question": "Return the primary conference of the school with the lowest acc percentage score.", "sub_sql_type": "null null col null limv", "sub_sql_new": "order by acc_percent limit 1", "query": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1", "sub_ques": "the lowest acc percentage score"}
{"db_id": "university_basketball", "sub_sql": "select t2.team_name , t2.acc_regular_season from basketball_match", "question": "What is the team name and acc regular season score of the school that was founded for the longest time?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select team_name , acc_regular_season from basketball_match", "query": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1", "sub_ques": "what is the team name and acc regular season"}
{"db_id": "university_basketball", "sub_sql": "order by t1.founded limit 1", "question": "What is the team name and acc regular season score of the school that was founded for the longest time?", "sub_sql_type": "null null col null limv", "sub_sql_new": "order by founded limit 1", "query": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1", "sub_ques": "school that was founded for the longest time"}
{"db_id": "university_basketball", "sub_sql": "select t2.team_name , t2.acc_regular_season from basketball_match", "question": "Return the name of the team and the acc during the regular season for the school that was founded the earliest.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select team_name , acc_regular_season from basketball_match", "query": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1", "sub_ques": "return the name of the team and the acc during the regular season"}
{"db_id": "university_basketball", "sub_sql": "order by t1.founded limit 1", "question": "Return the name of the team and the acc during the regular season for the school that was founded the earliest.", "sub_sql_type": "null null col null limv", "sub_sql_new": "order by founded limit 1", "query": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1", "sub_ques": "school that was founded the earliest"}
{"db_id": "university_basketball", "sub_sql": "select t2.all_games , t1.location from basketball_match , university", "question": "Find the location and all games score of the school that has Clemson as its team name.", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select all_games , location from basketball_match , university", "query": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'", "sub_ques": "find the location and all games score of the school"}
{"db_id": "university_basketball", "sub_sql": "where team_name = clemson", "question": "Find the location and all games score of the school that has Clemson as its team name.", "sub_sql_type": "null col op op value", "sub_sql_new": "where team_name equal to clemson", "query": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'", "sub_ques": "clemson as its team name"}
{"db_id": "university_basketball", "sub_sql": "select t2.all_games , t1.location from basketball_match , university", "question": "What are the all games score and location of the school called Clemson?", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select all_games , location from basketball_match , university", "query": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'", "sub_ques": "what are the all games score and location"}
{"db_id": "university_basketball", "sub_sql": "where team_name = clemson", "question": "What are the all games score and location of the school called Clemson?", "sub_sql_type": "null col op op value", "sub_sql_new": "where team_name equal to clemson", "query": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'", "sub_ques": "called clemson"}
{"db_id": "university_basketball", "sub_sql": "select avg enrollment from university", "question": "What are the average enrollment size of the universities that are founded before 1850?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select avg enrollment from university", "query": "SELECT avg(enrollment) FROM university WHERE founded  <  1850", "sub_ques": "what are the average enrollment size of the universities"}
{"db_id": "university_basketball", "sub_sql": "where founded < 1850", "question": "What are the average enrollment size of the universities that are founded before 1850?", "sub_sql_type": "null col op op value", "sub_sql_new": "where founded less than 1850", "query": "SELECT avg(enrollment) FROM university WHERE founded  <  1850", "sub_ques": "universities that are founded before 1850"}
{"db_id": "university_basketball", "sub_sql": "select avg enrollment from university", "question": "Return the average enrollment of universities founded before 1850.", "sub_sql_type": "null agg col col col", "sub_sql_new": "select avg enrollment from university", "query": "SELECT avg(enrollment) FROM university WHERE founded  <  1850", "sub_ques": "return the average enrollment of universities"}
{"db_id": "university_basketball", "sub_sql": "where founded < 1850", "question": "Return the average enrollment of universities founded before 1850.", "sub_sql_type": "null col op op value", "sub_sql_new": "where founded less than 1850", "query": "SELECT avg(enrollment) FROM university WHERE founded  <  1850", "sub_ques": "universities founded before 1850"}
{"db_id": "university_basketball", "sub_sql": "select enrollment , primary_conference from university", "question": "Show the enrollment and primary_conference of the oldest college.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select enrollment , primary_conference from university", "query": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1", "sub_ques": "show the enrollment and primary_conference"}
{"db_id": "university_basketball", "sub_sql": "order by founded limit 1", "question": "Show the enrollment and primary_conference of the oldest college.", "sub_sql_type": "null null col null limv", "sub_sql_new": "order by founded limit 1", "query": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1", "sub_ques": "the oldest college"}
{"db_id": "university_basketball", "sub_sql": "select enrollment , primary_conference from university", "question": "What are the enrollment and primary conference for the university which was founded the earliest?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select enrollment , primary_conference from university", "query": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1", "sub_ques": "what are the enrollment and primary conference for the university"}
{"db_id": "university_basketball", "sub_sql": "order by founded limit 1", "question": "What are the enrollment and primary conference for the university which was founded the earliest?", "sub_sql_type": "null null col null limv", "sub_sql_new": "order by founded limit 1", "query": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1", "sub_ques": "university which was founded the earliest"}
{"db_id": "university_basketball", "sub_sql": "select sum enrollment , min enrollment from university", "question": "What is the total and minimum enrollment of all schools?", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select sum enrollment , min enrollment from university", "query": "SELECT sum(enrollment) ,  min(enrollment) FROM university", "sub_ques": "what is the total and minimum enrollment"}
{"db_id": "university_basketball", "sub_sql": "select sum enrollment , min enrollment from university", "question": "Return the total and minimum enrollments across all schools.", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select sum enrollment , min enrollment from university", "query": "SELECT sum(enrollment) ,  min(enrollment) FROM university", "sub_ques": "return the total and minimum enrollments"}
{"db_id": "university_basketball", "sub_sql": "select sum enrollment , affiliation from university", "question": "Find the total student enrollment for different affiliation type schools.", "sub_sql_type": "null agg col null col col col", "sub_sql_new": "select sum enrollment , affiliation from university", "query": "SELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation", "sub_ques": "find the total student enrollment for different affiliation"}
{"db_id": "university_basketball", "sub_sql": "select sum enrollment , affiliation from university", "question": "What are the total enrollments of universities of each affiliation type?", "sub_sql_type": "null agg col null col col col", "sub_sql_new": "select sum enrollment , affiliation from university", "query": "SELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation", "sub_ques": "what are the total enrollments of universities of each affiliation"}
{"db_id": "university_basketball", "sub_sql": "select count university", "question": "How many schools do not participate in the basketball match?", "sub_sql_type": "null agg col", "sub_sql_new": "select count university", "query": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)", "sub_ques": "how many schools"}
{"db_id": "university_basketball", "sub_sql": "select count university", "question": "Count the number of universities that do not participate in the baketball match.", "sub_sql_type": "null agg col", "sub_sql_new": "select count university", "query": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)", "sub_ques": "count the number of universities "}
{"db_id": "university_basketball", "sub_sql": "select school from university", "question": "Find the schools that were either founded after 1850 or public.", "sub_sql_type": "null col col col", "sub_sql_new": "select school from university", "query": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'", "sub_ques": "find the schools"}
{"db_id": "university_basketball", "sub_sql": "where founded > 1850", "question": "Find the schools that were either founded after 1850 or public.", "sub_sql_type": "null col op op value", "sub_sql_new": "where founded more than 1850", "query": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'", "sub_ques": "founded after 1850"}
{"db_id": "university_basketball", "sub_sql": "select school from university", "question": "What are the schools that were either founded before 1850 or are public?", "sub_sql_type": "null col col col", "sub_sql_new": "select school from university", "query": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'", "sub_ques": "what are the schools"}
{"db_id": "university_basketball", "sub_sql": "where founded > 1850", "question": "What are the schools that were either founded before 1850 or are public?", "sub_sql_type": "null col op op value", "sub_sql_new": "where founded more than 1850", "query": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'", "sub_ques": "founded before 1850"}
{"db_id": "university_basketball", "sub_sql": "select count distinct affiliation from university", "question": "Find how many different affiliation types there are.", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct affiliation from university", "query": "SELECT count(DISTINCT affiliation) FROM university", "sub_ques": "how many different affiliation"}
{"db_id": "university_basketball", "sub_sql": "select count distinct affiliation from university", "question": "Count the number of different affiliation types.", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct affiliation from university", "query": "SELECT count(DISTINCT affiliation) FROM university", "sub_ques": "count the number of different affiliation"}
{"db_id": "university_basketball", "sub_sql": "select count university", "question": "Find how many school locations have the word 'NY'.", "sub_sql_type": "null agg col", "sub_sql_new": "select count university", "query": "SELECT count(*) FROM university WHERE LOCATION LIKE \\\\\\\"%NY%\\\\\\\"", "sub_ques": "how many school locations have"}
{"db_id": "university_basketball", "sub_sql": "where location like ny", "question": "Find how many school locations have the word 'NY'.", "sub_sql_type": "null col op value", "sub_sql_new": "where location like ny", "query": "SELECT count(*) FROM university WHERE LOCATION LIKE \\\\\\\"%NY%\\\\\\\"", "sub_ques": "locations have the word ny"}
{"db_id": "university_basketball", "sub_sql": "select count university", "question": "How many universities have a location that contains NY?", "sub_sql_type": "null agg col", "sub_sql_new": "select count university", "query": "SELECT count(*) FROM university WHERE LOCATION LIKE \\\\\\\"%NY%\\\\\\\"", "sub_ques": "how many universities"}
{"db_id": "university_basketball", "sub_sql": "where location like ny", "question": "How many universities have a location that contains NY?", "sub_sql_type": "null col op value", "sub_sql_new": "where location like ny", "query": "SELECT count(*) FROM university WHERE LOCATION LIKE \\\\\\\"%NY%\\\\\\\"", "sub_ques": "universities have a location that contains ny"}
{"db_id": "university_basketball", "sub_sql": "select t2.team_name from basketball_match", "question": "Find the team names of the universities whose enrollments are smaller than the average enrollment size.", "sub_sql_type": "null col col col", "sub_sql_new": "select team_name from basketball_match", "query": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)", "sub_ques": "find the team names"}
{"db_id": "university_basketball", "sub_sql": "where enrollment < select avg enrollment", "question": "Find the team names of the universities whose enrollments are smaller than the average enrollment size.", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where enrollment less than select avg enrollment", "query": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)", "sub_ques": "enrollments are smaller than the average enrollment"}
{"db_id": "university_basketball", "sub_sql": "select t2.team_name from basketball_match", "question": "What are the names of teams from universities that have a below average enrollment?", "sub_sql_type": "null col col col", "sub_sql_new": "select team_name from basketball_match", "query": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)", "sub_ques": "what are the names of teams"}
{"db_id": "university_basketball", "sub_sql": "where enrollment < select avg enrollment", "question": "What are the names of teams from universities that have a below average enrollment?", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where enrollment less than select avg enrollment", "query": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)", "sub_ques": "that have a below average enrollment"}
{"db_id": "university_basketball", "sub_sql": "where enrollment > 20000", "question": "Find the number of universities that have over a 20000 enrollment size for each affiliation type.", "sub_sql_type": "null col op op value", "sub_sql_new": "where enrollment more than 20000", "query": "SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation", "sub_ques": "universities that have over a 20000 enrollment"}
{"db_id": "university_basketball", "sub_sql": "where enrollment > 20000", "question": "What are the different affiliations, and how many schools with each have an enrollment size of above 20000?", "sub_sql_type": "null col op op value", "sub_sql_new": "where enrollment more than 20000", "query": "SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation", "sub_ques": "enrollment size of above 20000"}
{"db_id": "university_basketball", "sub_sql": "select sum enrollment , affiliation from university", "question": "Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type.", "sub_sql_type": "null agg col null col col col", "sub_sql_new": "select sum enrollment , affiliation from university", "query": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation", "sub_ques": "total number of students enrolled in the colleges for each affiliation"}
{"db_id": "university_basketball", "sub_sql": "where founded > 1850", "question": "Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type.", "sub_sql_type": "null col op op value", "sub_sql_new": "where founded more than 1850", "query": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation", "sub_ques": "founded after the year of 1850"}
{"db_id": "university_basketball", "sub_sql": "select sum enrollment , affiliation from university", "question": "What are the different affiliations, and what is the total enrollment of schools founded after 1850 for each enrollment type?", "sub_sql_type": "null agg col null col col col", "sub_sql_new": "select sum enrollment , affiliation from university", "query": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation", "sub_ques": "what are the different affiliations , and what is the total enrollment of schools"}
{"db_id": "university_basketball", "sub_sql": "where founded > 1850", "question": "What are the different affiliations, and what is the total enrollment of schools founded after 1850 for each enrollment type?", "sub_sql_type": "null col op op value", "sub_sql_new": "where founded more than 1850", "query": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation", "sub_ques": "founded after 1850"}
{"db_id": "university_basketball", "sub_sql": "select max enrollment from university", "question": "What is the maximum enrollment across all schools?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select max enrollment from university", "query": "SELECT max(Enrollment) FROM university", "sub_ques": "what is the maximum enrollment"}
{"db_id": "university_basketball", "sub_sql": "select max enrollment from university", "question": "Return the maximum enrollment across all schools.", "sub_sql_type": "null agg col col col", "sub_sql_new": "select max enrollment from university", "query": "SELECT max(Enrollment) FROM university", "sub_ques": "return the maximum enrollment"}
{"db_id": "university_basketball", "sub_sql": "select team_name from basketball_match", "question": "List names of all teams in the basketball competition, ordered by all home scores in descending order.", "sub_sql_type": "null col col col", "sub_sql_new": "select team_name from basketball_match", "query": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC", "sub_ques": "list names of all teams in the basketball competition"}
{"db_id": "university_basketball", "sub_sql": "order by all_home desc", "question": "List names of all teams in the basketball competition, ordered by all home scores in descending order.", "sub_sql_type": "null null col null", "sub_sql_new": "order by all_home desc", "query": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC", "sub_ques": "ordered by all home scores in descending order"}
{"db_id": "university_basketball", "sub_sql": "select team_name from basketball_match", "question": "What are the names of all the teams in the basketball competition, sorted by all home scores in descending order?", "sub_sql_type": "null col col col", "sub_sql_new": "select team_name from basketball_match", "query": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC", "sub_ques": "what are the names of all the teams"}
{"db_id": "university_basketball", "sub_sql": "order by all_home desc", "question": "What are the names of all the teams in the basketball competition, sorted by all home scores in descending order?", "sub_sql_type": "null null col null", "sub_sql_new": "order by all_home desc", "query": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC", "sub_ques": "sorted by all home scores in descending order"}
{"db_id": "phone_1", "sub_sql": "select model_name from chip_model", "question": "the names of models that launched between 2002 and 2004.", "sub_sql_type": "null col col col col", "sub_sql_new": "select model_name from chip model", "query": "SELECT Model_name FROM chip_model WHERE Launch_year BETWEEN 2002 AND 2004;", "sub_ques": "names of models"}
{"db_id": "phone_1", "sub_sql": "select model_name , ram_mib from chip_model", "question": "Which model has the least amount of RAM? List the model name and the amount of RAM.", "sub_sql_type": "null col null col col col col", "sub_sql_new": "select model_name , ram_mib from chip model", "query": "SELECT Model_name ,  RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT 1;", "sub_ques": "list the model name and the amount of ram"}
{"db_id": "phone_1", "sub_sql": "order by ram_mib asc limit 1", "question": "Which model has the least amount of RAM? List the model name and the amount of RAM.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by ram_mib asc limit 1", "query": "SELECT Model_name ,  RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT 1;", "sub_ques": "model has the least amount of ram"}
{"db_id": "phone_1", "sub_sql": "select chip_model , screen_mode from phone", "question": "What are the chip model and screen mode of the phone with hardware model name \\\\\\\"LG-P760\\\\\\\"?", "sub_sql_type": "null col col null col col col col", "sub_sql_new": "select chip model , screen mode from phone", "query": "SELECT chip_model ,  screen_mode FROM phone WHERE Hardware_Model_name = \\\\\\\"LG-P760\\\\\\\";", "sub_ques": "what are the chip model and screen mode of the phone"}
{"db_id": "phone_1", "sub_sql": "where hardware_model_name = lg-p760", "question": "What are the chip model and screen mode of the phone with hardware model name \\\\\\\"LG-P760\\\\\\\"?", "sub_sql_type": "null col op op value", "sub_sql_new": "where hardware_model_name equal to lg-p760", "query": "SELECT chip_model ,  screen_mode FROM phone WHERE Hardware_Model_name = \\\\\\\"LG-P760\\\\\\\";", "sub_ques": "phone with hardware model name `` lg-p760"}
{"db_id": "phone_1", "sub_sql": "select count phone", "question": "How many phone hardware models are produced by the company named \\\\\\\"Nokia Corporation\\\\\\\"?", "sub_sql_type": "null agg col", "sub_sql_new": "select count phone", "query": "SELECT count(*) FROM phone WHERE Company_name = \\\\\\\"Nokia Corporation\\\\\\\";", "sub_ques": "how many phone hardware models"}
{"db_id": "phone_1", "sub_sql": "where company_name = nokiacorporation", "question": "How many phone hardware models are produced by the company named \\\\\\\"Nokia Corporation\\\\\\\"?", "sub_sql_type": "null col op op value", "sub_sql_new": "where company_name equal to nokiacorporation", "query": "SELECT count(*) FROM phone WHERE Company_name = \\\\\\\"Nokia Corporation\\\\\\\";", "sub_ques": "phone hardware models are produced by the company named"}
{"db_id": "phone_1", "sub_sql": "select max t1.ram_mib , min t1.ram_mib from chip_model", "question": "What is maximum and minimum RAM size of phone produced by company named \\\\\\\"Nokia Corporation\\\\\\\"?", "sub_sql_type": "null agg col null agg col col col col", "sub_sql_new": "select max ram_mib , min ram_mib from chip model", "query": "SELECT max(T1.RAM_MiB) ,  min(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \\\\\\\"Nokia Corporation\\\\\\\";", "sub_ques": "what is maximum and minimum ram"}
{"db_id": "phone_1", "sub_sql": "where t2.company_name = nokiacorporation", "question": "What is maximum and minimum RAM size of phone produced by company named \\\\\\\"Nokia Corporation\\\\\\\"?", "sub_sql_type": "null col op op value", "sub_sql_new": "where company_name equal to nokiacorporation", "query": "SELECT max(T1.RAM_MiB) ,  min(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \\\\\\\"Nokia Corporation\\\\\\\";", "sub_ques": "phone produced by company named nokia corporation"}
{"db_id": "phone_1", "sub_sql": "select avg t1.rom_mib from chip_model", "question": "What is the average ROM size of phones produced by the company named \\\\\\\"Nokia Corporation\\\\\\\"?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select avg rom_mib from chip model", "query": "SELECT avg(T1.ROM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \\\\\\\"Nokia Corporation\\\\\\\";", "sub_ques": "what is the average rom size of phone"}
{"db_id": "phone_1", "sub_sql": "where t2.company_name = nokiacorporation", "question": "What is the average ROM size of phones produced by the company named \\\\\\\"Nokia Corporation\\\\\\\"?", "sub_sql_type": "null col op op value", "sub_sql_new": "where company_name equal to nokiacorporation", "query": "SELECT avg(T1.ROM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \\\\\\\"Nokia Corporation\\\\\\\";", "sub_ques": "phones produced by the company named nokia corporation"}
{"db_id": "phone_1", "sub_sql": "select t2.hardware_model_name , t2.company_name from phone", "question": "List the hardware model name and company name for all the phones that were launched in year 2002 or have RAM size greater than 32.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select hardware_model_name , company_name from phone", "query": "SELECT T2.Hardware_Model_name ,  T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 OR T1.RAM_MiB  >  32;", "sub_ques": "list the hardware model name and company name for all the phones"}
{"db_id": "phone_1", "sub_sql": "where t1.launch_year = 2002", "question": "List the hardware model name and company name for all the phones that were launched in year 2002 or have RAM size greater than 32.", "sub_sql_type": "null col op op value", "sub_sql_new": "where launch_year equal to 2002", "query": "SELECT T2.Hardware_Model_name ,  T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 OR T1.RAM_MiB  >  32;", "sub_ques": "launched in year 2002"}
{"db_id": "phone_1", "sub_sql": "select hardware_model_name , company_name from phone", "question": "Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select hardware_model_name , company_name from phone", "query": "SELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full';", "sub_ques": "list the hardware model name and company name"}
{"db_id": "phone_1", "sub_sql": "where accreditation_type like full", "question": "Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name.", "sub_sql_type": "null col op value", "sub_sql_new": "where accreditation_type like full", "query": "SELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full';", "sub_ques": "phones that have word 'full ' in their accreditation types"}
{"db_id": "phone_1", "sub_sql": "select t1.char_cells , t1.pixels , t1.hardware_colours from screen_mode", "question": "Find the Char cells, Pixels and Hardware colours for the screen of the phone whose hardware model name is \\\\\\\"LG-P760\\\\\\\".", "sub_sql_type": "null col null col null col col col col", "sub_sql_new": "select char_cells , pixels , hardware_colours from screen mode", "query": "SELECT T1.Char_cells ,  T1.Pixels ,  T1.Hardware_colours FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Hardware_Model_name = \\\\\\\"LG-P760\\\\\\\";", "sub_ques": "find the char cells , pixels and hardware colours"}
{"db_id": "phone_1", "sub_sql": "where t2.hardware_model_name = lg-p760", "question": "Find the Char cells, Pixels and Hardware colours for the screen of the phone whose hardware model name is \\\\\\\"LG-P760\\\\\\\".", "sub_sql_type": "null col op op value", "sub_sql_new": "where hardware_model_name equal to lg-p760", "query": "SELECT T1.Char_cells ,  T1.Pixels ,  T1.Hardware_colours FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Hardware_Model_name = \\\\\\\"LG-P760\\\\\\\";", "sub_ques": "phone whose hardware model name is `` lg-p760"}
{"db_id": "phone_1", "sub_sql": "select t2.hardware_model_name , t2.company_name from phone", "question": "List the hardware model name and company name for the phone whose screen mode type is \\\\\\\"Graphics.\\\\\\\"", "sub_sql_type": "null col null col col col", "sub_sql_new": "select hardware_model_name , company_name from phone", "query": "SELECT T2.Hardware_Model_name ,  T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \\\\\\\"Graphics\\\\\\\";", "sub_ques": "list the hardware model name and company name for the phone"}
{"db_id": "phone_1", "sub_sql": "where t1.type = graphics", "question": "List the hardware model name and company name for the phone whose screen mode type is \\\\\\\"Graphics.\\\\\\\"", "sub_sql_type": "null col op op value", "sub_sql_new": "where type equal to graphics", "query": "SELECT T2.Hardware_Model_name ,  T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \\\\\\\"Graphics\\\\\\\";", "sub_ques": "type is `` graphics"}
{"db_id": "phone_1", "sub_sql": "select company_name , count * from phone group by company_name", "question": "Find the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company.", "sub_sql_type": "null col null agg col col col", "sub_sql_new": "select company_name , count * from phone", "query": "SELECT Company_name ,  count(*) FROM phone GROUP BY Company_name ORDER BY count(*) ASC LIMIT 1;", "sub_ques": "list the company name and the number of phone model produced by that company"}
{"db_id": "phone_1", "sub_sql": "group by company_name order by count phone asc limit 1", "question": "Find the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count phone asc limit 1", "query": "SELECT Company_name ,  count(*) FROM phone GROUP BY Company_name ORDER BY count(*) ASC LIMIT 1;", "sub_ques": "the name of the company that has the least number of phone models"}
{"db_id": "phone_1", "sub_sql": "select company_name from phone", "question": "List the name of the company that produced more than one phone model.", "sub_sql_type": "null col col col", "sub_sql_new": "select company_name from phone", "query": "SELECT Company_name FROM phone GROUP BY Company_name HAVING count(*)  >  1;", "sub_ques": "list the name of the company"}
{"db_id": "phone_1", "sub_sql": "group by company_name having count phone > 1", "question": "List the name of the company that produced more than one phone model.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT Company_name FROM phone GROUP BY Company_name HAVING count(*)  >  1;", "sub_ques": "name of the company that produced more than one phone"}
{"db_id": "phone_1", "sub_sql": "select max used_kb , min used_kb , avg used_kb from screen_mode", "question": "List the maximum, minimum and average number of used kb in screen mode.", "sub_sql_type": "null agg col col null agg col col null agg col col col col col", "sub_sql_new": "select max used kb , min used kb , avg used kb from screen mode", "query": "SELECT max(used_kb) , min(used_kb) , avg(used_kb) FROM screen_mode;", "sub_ques": "list the maximum , minimum and average number of used kb"}
{"db_id": "phone_1", "sub_sql": "select t2.hardware_model_name from phone", "question": "List the name of the phone model launched in year 2002 and with the highest RAM size.", "sub_sql_type": "null col col col", "sub_sql_new": "select hardware_model_name from phone", "query": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1;", "sub_ques": "list the name of the phone model"}
{"db_id": "phone_1", "sub_sql": "where t1.launch_year = 2002", "question": "List the name of the phone model launched in year 2002 and with the highest RAM size.", "sub_sql_type": "null col op op value", "sub_sql_new": "where launch_year equal to 2002", "query": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1;", "sub_ques": "launched in year 2002"}
{"db_id": "phone_1", "sub_sql": "order by t1.ram_mib desc limit 1", "question": "List the name of the phone model launched in year 2002 and with the highest RAM size.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by ram_mib desc limit 1", "query": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1;", "sub_ques": "the highest ram size"}
{"db_id": "phone_1", "sub_sql": "select t1.wifi , t3.type from chip_model , screen_mode", "question": "What are the wifi and screen mode type of the hardware model named \\\\\\\"LG-P760\\\\\\\"?", "sub_sql_type": "null col null col col col col null col col", "sub_sql_new": "select wifi , type from chip model , screen mode", "query": "SELECT T1.WiFi , T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = \\\\\\\"LG-P760\\\\\\\";", "sub_ques": "what are the wifi and screen mode type"}
{"db_id": "phone_1", "sub_sql": "where t2.hardware_model_name = lg-p760", "question": "What are the wifi and screen mode type of the hardware model named \\\\\\\"LG-P760\\\\\\\"?", "sub_sql_type": "null col op op value", "sub_sql_new": "where hardware_model_name equal to lg-p760", "query": "SELECT T1.WiFi , T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = \\\\\\\"LG-P760\\\\\\\";", "sub_ques": "hardware model named `` lg-p760"}
{"db_id": "phone_1", "sub_sql": "select t2.hardware_model_name from phone", "question": "List the hardware model name for the phones that have screen mode type \\\\\\\"Text\\\\\\\" or RAM size greater than 32.", "sub_sql_type": "null col col col", "sub_sql_new": "select hardware_model_name from phone", "query": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T3.Type = \\\\\\\"Text\\\\\\\" OR T1.RAM_MiB  >  32;", "sub_ques": "list the hardware model name for the phones"}
{"db_id": "phone_1", "sub_sql": "where t3.type = text", "question": "List the hardware model name for the phones that have screen mode type \\\\\\\"Text\\\\\\\" or RAM size greater than 32.", "sub_sql_type": "null col op op value", "sub_sql_new": "where type equal to text", "query": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T3.Type = \\\\\\\"Text\\\\\\\" OR T1.RAM_MiB  >  32;", "sub_ques": "type `` text"}
{"db_id": "phone_1", "sub_sql": "select distinct t2.hardware_model_name from phone", "question": "List the hardware model name for the phones that were produced by \\\\\\\"Nokia Corporation\\\\\\\" or whose screen mode type is \\\\\\\"Graphics.\\\\\\\"", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct hardware_model_name from phone", "query": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \\\\\\\"Graphics\\\\\\\" OR t2.Company_name  =  \\\\\\\"Nokia Corporation\\\\\\\"", "sub_ques": "list the hardware model name for the phones"}
{"db_id": "phone_1", "sub_sql": "where t1.type = graphics", "question": "List the hardware model name for the phones that were produced by \\\\\\\"Nokia Corporation\\\\\\\" or whose screen mode type is \\\\\\\"Graphics.\\\\\\\"", "sub_sql_type": "null col op op value", "sub_sql_new": "where type equal to graphics", "query": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \\\\\\\"Graphics\\\\\\\" OR t2.Company_name  =  \\\\\\\"Nokia Corporation\\\\\\\"", "sub_ques": "type is `` graphics"}
{"db_id": "phone_1", "sub_sql": "select distinct t2.hardware_model_name from phone", "question": "List the hardware model name for the phons that were produced by \\\\\\\"Nokia Corporation\\\\\\\" but whose screen mode type is not Text.", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct hardware_model_name from phone", "query": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE t2.Company_name  =  \\\\\\\"Nokia Corporation\\\\\\\" AND T1.Type != \\\\\\\"Text\\\\\\\";", "sub_ques": "list the hardware model name"}
{"db_id": "phone_1", "sub_sql": "where t2.company_name = nokiacorporation", "question": "List the hardware model name for the phons that were produced by \\\\\\\"Nokia Corporation\\\\\\\" but whose screen mode type is not Text.", "sub_sql_type": "null col op op value", "sub_sql_new": "where company_name equal to nokiacorporation", "query": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE t2.Company_name  =  \\\\\\\"Nokia Corporation\\\\\\\" AND T1.Type != \\\\\\\"Text\\\\\\\";", "sub_ques": "that were produced by nokia corporation"}
{"db_id": "phone_1", "sub_sql": "select distinct t2.hardware_model_name , t2.company_name from phone", "question": "List the phone hardware model and company name for the phones whose screen usage in kb is between 10 and 15.", "sub_sql_type": "null col col null col col col", "sub_sql_new": "select distinct hardware_model_name , company_name from phone", "query": "SELECT DISTINCT T2.Hardware_Model_name , T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.used_kb BETWEEN 10 AND 15;", "sub_ques": "list the phone hardware model and company name for the phones"}
{"db_id": "phone_1", "sub_sql": "select accreditation_type , count phone group by accreditation_type", "question": "Find the number of phones for each accreditation type.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select accreditation_type , count phone", "query": "SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type", "sub_ques": "the number of phones for each accreditation type"}
{"db_id": "phone_1", "sub_sql": "select accreditation_type , count phone group by accreditation_type", "question": "How many phones belongs to each accreditation type?", "sub_sql_type": "null col null agg col", "sub_sql_new": "select accreditation_type , count phone", "query": "SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type", "sub_ques": "how many phones belongs to each accreditation type"}
{"db_id": "phone_1", "sub_sql": "select accreditation_level from phone", "question": "Find the accreditation level that more than 3 phones use.", "sub_sql_type": "null col col col", "sub_sql_new": "select accreditation_level from phone", "query": "SELECT Accreditation_level FROM phone GROUP BY Accreditation_level HAVING count(*)  >  3", "sub_ques": "find the accreditation level"}
{"db_id": "phone_1", "sub_sql": "group by accreditation_level having count phone > 3", "question": "Find the accreditation level that more than 3 phones use.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT Accreditation_level FROM phone GROUP BY Accreditation_level HAVING count(*)  >  3", "sub_ques": "accreditation level that more than 3 phones"}
{"db_id": "phone_1", "sub_sql": "select count chip_model", "question": "How many models do not have the wifi function?", "sub_sql_type": "null agg col col", "sub_sql_new": "select count chip model", "query": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'", "sub_ques": "how many models"}
{"db_id": "phone_1", "sub_sql": "where wifi = no", "question": "How many models do not have the wifi function?", "sub_sql_type": "null col op op value", "sub_sql_new": "where wifi equal to no", "query": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'", "sub_ques": "do not have the wifi function"}
{"db_id": "phone_1", "sub_sql": "select count chip_model", "question": "Count the number of chip model that do not have wifi.", "sub_sql_type": "null agg col col", "sub_sql_new": "select count chip model", "query": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'", "sub_ques": "count the number of chip model"}
{"db_id": "phone_1", "sub_sql": "where wifi = no", "question": "Count the number of chip model that do not have wifi.", "sub_sql_type": "null col op op value", "sub_sql_new": "where wifi equal to no", "query": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'", "sub_ques": "that do not have wifi"}
{"db_id": "phone_1", "sub_sql": "select model_name from chip_model", "question": "List all the model names sorted by their launch year.", "sub_sql_type": "null col col col col", "sub_sql_new": "select model_name from chip model", "query": "SELECT model_name FROM chip_model ORDER BY launch_year", "sub_ques": "list all the model names"}
{"db_id": "phone_1", "sub_sql": "order by launch_year", "question": "List all the model names sorted by their launch year.", "sub_sql_type": "null null col", "sub_sql_new": "order by launch_year", "query": "SELECT model_name FROM chip_model ORDER BY launch_year", "sub_ques": "sorted by their launch year"}
{"db_id": "phone_1", "sub_sql": "select avg ram_mib from chip_model", "question": "Find the average ram mib size of the chip models that are never used by any phone.", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select avg ram_mib from chip model", "query": "SELECT avg(RAM_MiB) FROM chip_model WHERE model_name NOT IN (SELECT chip_model FROM phone)", "sub_ques": "find the average ram mib size of the chip models"}
{"db_id": "match_season", "sub_sql": "select count country", "question": "How many countries are there in total?", "sub_sql_type": "null agg col", "sub_sql_new": "select count country", "query": "SELECT count(*) FROM country", "sub_ques": "how many countries are there in total"}
{"db_id": "match_season", "sub_sql": "select count country", "question": "Count the number of countries.", "sub_sql_type": "null agg col", "sub_sql_new": "select count country", "query": "SELECT count(*) FROM country", "sub_ques": "count the number of countries"}
{"db_id": "match_season", "sub_sql": "select country_name , capital from country", "question": "Show the country name and capital of all countries.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select country_name , capital from country", "query": "SELECT Country_name ,  Capital FROM country", "sub_ques": "show the country name and capital of all countries"}
{"db_id": "match_season", "sub_sql": "select country_name , capital from country", "question": "What are the names and capitals of each country?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select country_name , capital from country", "query": "SELECT Country_name ,  Capital FROM country", "sub_ques": "what are the names and capitals of each country"}
{"db_id": "match_season", "sub_sql": "select official_native_language from country", "question": "Show all official native languages that contain the word \\\\\\\"English\\\\\\\".", "sub_sql_type": "null col col col", "sub_sql_new": "select official_native_language from country", "query": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \\\\\\\"%English%\\\\\\\"", "sub_ques": "show all official native languages"}
{"db_id": "match_season", "sub_sql": "where official_native_language like english", "question": "Show all official native languages that contain the word \\\\\\\"English\\\\\\\".", "sub_sql_type": "null col op value", "sub_sql_new": "where official_native_language like english", "query": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \\\\\\\"%English%\\\\\\\"", "sub_ques": "official native languages that contain the word `` english"}
{"db_id": "match_season", "sub_sql": "select official_native_language from country", "question": "What are the official native languages that contain the string \\\\\\\"English\\\\\\\".", "sub_sql_type": "null col col col", "sub_sql_new": "select official_native_language from country", "query": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \\\\\\\"%English%\\\\\\\"", "sub_ques": "what are the official native languages"}
{"db_id": "match_season", "sub_sql": "where official_native_language like english", "question": "What are the official native languages that contain the string \\\\\\\"English\\\\\\\".", "sub_sql_type": "null col op value", "sub_sql_new": "where official_native_language like english", "query": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \\\\\\\"%English%\\\\\\\"", "sub_ques": "official native languages that contain the string `` english"}
{"db_id": "match_season", "sub_sql": "select distinct position from match_season", "question": "Show all distinct positions of matches.", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct position from match_season", "query": "SELECT DISTINCT POSITION FROM match_season", "sub_ques": "show all distinct positions"}
{"db_id": "match_season", "sub_sql": "select distinct position from match_season", "question": "What are the different positions for match season?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct position from match_season", "query": "SELECT DISTINCT POSITION FROM match_season", "sub_ques": "what are the different positions"}
{"db_id": "match_season", "sub_sql": "select player from match_season", "question": "Show the players from college UCLA.", "sub_sql_type": "null col col col", "sub_sql_new": "select player from match_season", "query": "SELECT Player FROM match_season WHERE College  =  \\\\\\\"UCLA\\\\\\\"", "sub_ques": "show the players"}
{"db_id": "match_season", "sub_sql": "where college = ucla", "question": "Show the players from college UCLA.", "sub_sql_type": "null col op op value", "sub_sql_new": "where college equal to ucla", "query": "SELECT Player FROM match_season WHERE College  =  \\\\\\\"UCLA\\\\\\\"", "sub_ques": "players from college ucla"}
{"db_id": "match_season", "sub_sql": "select player from match_season", "question": "Who are the players from UCLA?", "sub_sql_type": "null col col col", "sub_sql_new": "select player from match_season", "query": "SELECT Player FROM match_season WHERE College  =  \\\\\\\"UCLA\\\\\\\"", "sub_ques": "who are the players"}
{"db_id": "match_season", "sub_sql": "where college = ucla", "question": "Who are the players from UCLA?", "sub_sql_type": "null col op op value", "sub_sql_new": "where college equal to ucla", "query": "SELECT Player FROM match_season WHERE College  =  \\\\\\\"UCLA\\\\\\\"", "sub_ques": "players from ucla"}
{"db_id": "match_season", "sub_sql": "select distinct position from match_season", "question": "Show the distinct position of players from college UCLA or Duke.", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct position from match_season", "query": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \\\\\\\"UCLA\\\\\\\" OR College  =  \\\\\\\"Duke\\\\\\\"", "sub_ques": "show the distinct position"}
{"db_id": "match_season", "sub_sql": "where college = ucla", "question": "Show the distinct position of players from college UCLA or Duke.", "sub_sql_type": "null col op op value", "sub_sql_new": "where college equal to ucla", "query": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \\\\\\\"UCLA\\\\\\\" OR College  =  \\\\\\\"Duke\\\\\\\"", "sub_ques": "players from college ucla"}
{"db_id": "match_season", "sub_sql": "select distinct position from match_season", "question": "What are the different positions of players from UCLA or Duke colleges?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct position from match_season", "query": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \\\\\\\"UCLA\\\\\\\" OR College  =  \\\\\\\"Duke\\\\\\\"", "sub_ques": "what are the different positions"}
{"db_id": "match_season", "sub_sql": "where college = ucla", "question": "What are the different positions of players from UCLA or Duke colleges?", "sub_sql_type": "null col op op value", "sub_sql_new": "where college equal to ucla", "query": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \\\\\\\"UCLA\\\\\\\" OR College  =  \\\\\\\"Duke\\\\\\\"", "sub_ques": "players from ucla colleges"}
{"db_id": "match_season", "sub_sql": "select draft_pick_number , draft_class from match_season", "question": "Show the draft pick numbers and draft classes of players whose positions are defenders.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select draft_pick_number , draft_class from match_season", "query": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \\\\\\\"Defender\\\\\\\"", "sub_ques": "show the draft pick numbers and draft classes"}
{"db_id": "match_season", "sub_sql": "where position = defender", "question": "Show the draft pick numbers and draft classes of players whose positions are defenders.", "sub_sql_type": "null col op op value", "sub_sql_new": "where position equal to defender", "query": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \\\\\\\"Defender\\\\\\\"", "sub_ques": "whose positions are defenders"}
{"db_id": "match_season", "sub_sql": "select draft_pick_number , draft_class from match_season", "question": "What are the draft pick numbers and draft classes for players who play the Defender position?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select draft_pick_number , draft_class from match_season", "query": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \\\\\\\"Defender\\\\\\\"", "sub_ques": "what are the draft pick numbers and draft classes"}
{"db_id": "match_season", "sub_sql": "where position = defender", "question": "What are the draft pick numbers and draft classes for players who play the Defender position?", "sub_sql_type": "null col op op value", "sub_sql_new": "where position equal to defender", "query": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \\\\\\\"Defender\\\\\\\"", "sub_ques": "who play the defender position"}
{"db_id": "match_season", "sub_sql": "select count distinct team from match_season", "question": "How many distinct teams are involved in match seasons?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct team from match_season", "query": "SELECT count(DISTINCT Team) FROM match_season", "sub_ques": "how many distinct teams"}
{"db_id": "match_season", "sub_sql": "select count distinct team from match_season", "question": "Count the number of different teams involved in match season.", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct team from match_season", "query": "SELECT count(DISTINCT Team) FROM match_season", "sub_ques": "count the number of different teams"}
{"db_id": "match_season", "sub_sql": "select player , years_played from player", "question": "Show the players and the years played.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select player , years_played from player", "query": "SELECT Player ,  Years_Played FROM player", "sub_ques": "show the players and the years played"}
{"db_id": "match_season", "sub_sql": "select player , years_played from player", "question": "Who are the different players and how many years has each played?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select player , years_played from player", "query": "SELECT Player ,  Years_Played FROM player", "sub_ques": "Who are the different players and how many years has each played"}
{"db_id": "match_season", "sub_sql": "select name from team", "question": "Show all team names.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from team", "query": "SELECT Name FROM Team", "sub_ques": "show all team names"}
{"db_id": "match_season", "sub_sql": "select name from team", "question": "What are the names of all teams?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from team", "query": "SELECT Name FROM Team", "sub_ques": "what are the names of all teams"}
{"db_id": "match_season", "sub_sql": "select t2.season , t2.player , t1.country_name from match_season , country", "question": "Show the season, the player, and the name of the country that player belongs to.", "sub_sql_type": "null col null col null col col col null col", "sub_sql_new": "select season , player , country_name from match_season , country", "query": "SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country", "sub_ques": "show the season , the player , and the name of the country that player"}
{"db_id": "match_season", "sub_sql": "select t2.season , t2.player , t1.country_name from match_season , country", "question": "For each player, what are their name, season, and country that they belong to?", "sub_sql_type": "null col null col null col col col null col", "sub_sql_new": "select season , player , country_name from match_season , country", "query": "SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country", "sub_ques": "for each player , what are their name , season ,  and country that they belong to"}
{"db_id": "match_season", "sub_sql": "select t2.player from match_season", "question": "Which players are from Indonesia?", "sub_sql_type": "null col col col", "sub_sql_new": "select player from match_season", "query": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \\\\\\\"Indonesia\\\\\\\"", "sub_ques": "which players"}
{"db_id": "match_season", "sub_sql": "where t1.country_name = indonesia", "question": "Which players are from Indonesia?", "sub_sql_type": "null col op op value", "sub_sql_new": "where country_name equal to indonesia", "query": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \\\\\\\"Indonesia\\\\\\\"", "sub_ques": "are from indonesia"}
{"db_id": "match_season", "sub_sql": "select t2.player from match_season", "question": "Who are the players from Indonesia?", "sub_sql_type": "null col col col", "sub_sql_new": "select player from match_season", "query": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \\\\\\\"Indonesia\\\\\\\"", "sub_ques": "who are the players"}
{"db_id": "match_season", "sub_sql": "where t1.country_name = indonesia", "question": "Who are the players from Indonesia?", "sub_sql_type": "null col op op value", "sub_sql_new": "where country_name equal to indonesia", "query": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \\\\\\\"Indonesia\\\\\\\"", "sub_ques": "from indonesia"}
{"db_id": "match_season", "sub_sql": "select distinct t2.position from match_season", "question": "What are the distinct positions of the players from a country whose capital is Dublin?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct position from match_season", "query": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  \\\\\\\"Dublin\\\\\\\"", "sub_ques": "what are the distinct positions"}
{"db_id": "match_season", "sub_sql": "where t1.capital = dublin", "question": "What are the distinct positions of the players from a country whose capital is Dublin?", "sub_sql_type": "null col op op value", "sub_sql_new": "where capital equal to dublin", "query": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  \\\\\\\"Dublin\\\\\\\"", "sub_ques": "country whose capital is dublin"}
{"db_id": "match_season", "sub_sql": "select distinct t2.position from match_season", "question": "Give the different positions of players who play for the country with the capital Dublin.", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct position from match_season", "query": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  \\\\\\\"Dublin\\\\\\\"", "sub_ques": "give the different positions"}
{"db_id": "match_season", "sub_sql": "where t1.capital = dublin", "question": "Give the different positions of players who play for the country with the capital Dublin.", "sub_sql_type": "null col op op value", "sub_sql_new": "where capital equal to dublin", "query": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  \\\\\\\"Dublin\\\\\\\"", "sub_ques": "country with the capital dublin"}
{"db_id": "match_season", "sub_sql": "select t1.official_native_language from country", "question": "What are the official languages of the countries of players from Maryland or Duke college?", "sub_sql_type": "null col col col", "sub_sql_new": "select official_native_language from country", "query": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \\\\\\\"Maryland\\\\\\\" OR T2.College  =  \\\\\\\"Duke\\\\\\\"", "sub_ques": "what are the official languages of the countries"}
{"db_id": "match_season", "sub_sql": "where t2.college = maryland", "question": "What are the official languages of the countries of players from Maryland or Duke college?", "sub_sql_type": "null col op op value", "sub_sql_new": "where college equal to maryland", "query": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \\\\\\\"Maryland\\\\\\\" OR T2.College  =  \\\\\\\"Duke\\\\\\\"", "sub_ques": "from maryland college"}
{"db_id": "match_season", "sub_sql": "select t1.official_native_language from country", "question": "Return the official native languages of countries who have players from Maryland or Duke colleges.", "sub_sql_type": "null col col col", "sub_sql_new": "select official_native_language from country", "query": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \\\\\\\"Maryland\\\\\\\" OR T2.College  =  \\\\\\\"Duke\\\\\\\"", "sub_ques": "return the official native languages of countries"}
{"db_id": "match_season", "sub_sql": "select count distinct t1.official_native_language from country", "question": "How many distinct official languages are there among countries of players whose positions are defenders.", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct official_native_language from country", "query": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \\\\\\\"Defender\\\\\\\"", "sub_ques": "how many distinct official languages are there among countries"}
{"db_id": "match_season", "sub_sql": "where t2.position = defender", "question": "How many distinct official languages are there among countries of players whose positions are defenders.", "sub_sql_type": "null col op op value", "sub_sql_new": "where position equal to defender", "query": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \\\\\\\"Defender\\\\\\\"", "sub_ques": "whose positions are defenders"}
{"db_id": "match_season", "sub_sql": "select count distinct t1.official_native_language from country", "question": "Count the number of different official languages corresponding to countries that players who play Defender are from.", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct official_native_language from country", "query": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \\\\\\\"Defender\\\\\\\"", "sub_ques": "count the number of different official languages corresponding to countries"}
{"db_id": "match_season", "sub_sql": "where t2.position = defender", "question": "Count the number of different official languages corresponding to countries that players who play Defender are from.", "sub_sql_type": "null col op op value", "sub_sql_new": "where position equal to defender", "query": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \\\\\\\"Defender\\\\\\\"", "sub_ques": "who play defender are from"}
{"db_id": "match_season", "sub_sql": "select t1.season , t1.player , t2.name from match_season , team", "question": "Show the season, the player, and the name of the team that players belong to.", "sub_sql_type": "null col null col null col col col null col", "sub_sql_new": "select season , player , name from match_season , team", "query": "SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id", "sub_ques": "show the season , the player , and the name of the team that players"}
{"db_id": "match_season", "sub_sql": "select t1.season , t1.player , t2.name from match_season , team", "question": "Who are the different players, what season do they play in, and what is the name of the team they are on?", "sub_sql_type": "null col null col null col col col null col", "sub_sql_new": "select season , player , name from match_season , team", "query": "SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id", "sub_ques": "Who are the different players , what season do they play in , and what is the name of the team"}
{"db_id": "match_season", "sub_sql": "select t1.position from match_season", "question": "Show the positions of the players from the team with name \\\\\\\"Ryley Goldner\\\\\\\".", "sub_sql_type": "null col col col", "sub_sql_new": "select position from match_season", "query": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \\\\\\\"Ryley Goldner\\\\\\\"", "sub_ques": "show the positions of the players from the team "}
{"db_id": "match_season", "sub_sql": "where t2.name = ryleygoldner", "question": "Show the positions of the players from the team with name \\\\\\\"Ryley Goldner\\\\\\\".", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to ryleygoldner", "query": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \\\\\\\"Ryley Goldner\\\\\\\"", "sub_ques": "team with name ryleygoldner"}
{"db_id": "match_season", "sub_sql": "select t1.position from match_season", "question": "Return the positions of players on the team Ryley Goldner.", "sub_sql_type": "null col col col", "sub_sql_new": "select position from match_season", "query": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \\\\\\\"Ryley Goldner\\\\\\\"", "sub_ques": "return the positions of players"}
{"db_id": "match_season", "sub_sql": "where t2.name = ryleygoldner", "question": "Return the positions of players on the team Ryley Goldner.", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to ryleygoldner", "query": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \\\\\\\"Ryley Goldner\\\\\\\"", "sub_ques": "team ryley goldner"}
{"db_id": "match_season", "sub_sql": "select count distinct t1.college from match_season", "question": "How many distinct colleges are associated with players from the team with name \\\\\\\"Columbus Crew\\\\\\\".", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct college from match_season", "query": "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \\\\\\\"Columbus Crew\\\\\\\"", "sub_ques": "how many distinct colleges"}
{"db_id": "match_season", "sub_sql": "where t2.name = columbuscrew", "question": "How many distinct colleges are associated with players from the team with name \\\\\\\"Columbus Crew\\\\\\\".", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to columbuscrew", "query": "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \\\\\\\"Columbus Crew\\\\\\\"", "sub_ques": "team with name columbuscrew"}
{"db_id": "match_season", "sub_sql": "select count distinct t1.college from match_season", "question": "Count the number of different colleges that players who play for Columbus Crew are from.", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct college from match_season", "query": "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \\\\\\\"Columbus Crew\\\\\\\"", "sub_ques": "count the number of different colleges"}
{"db_id": "match_season", "sub_sql": "where t2.name = columbuscrew", "question": "Count the number of different colleges that players who play for Columbus Crew are from.", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to columbuscrew", "query": "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \\\\\\\"Columbus Crew\\\\\\\"", "sub_ques": "columbus crew are from"}
{"db_id": "match_season", "sub_sql": "select t1.player , t1.years_played from player", "question": "Show the players and years played for players from team \\\\\\\"Columbus Crew\\\\\\\".", "sub_sql_type": "null col null col col col", "sub_sql_new": "select player , years_played from player", "query": "SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \\\\\\\"Columbus Crew\\\\\\\"", "sub_ques": "show the players and years played for players"}
{"db_id": "match_season", "sub_sql": "where t2.name = columbuscrew", "question": "Show the players and years played for players from team \\\\\\\"Columbus Crew\\\\\\\".", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to columbuscrew", "query": "SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \\\\\\\"Columbus Crew\\\\\\\"", "sub_ques": "from team `` columbus crew"}
{"db_id": "match_season", "sub_sql": "select t1.player , t1.years_played from player", "question": "What are the players who played for Columbus Crew, and how many years did each play for?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select player , years_played from player", "query": "SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \\\\\\\"Columbus Crew\\\\\\\"", "sub_ques": "what are the players, and how many years did each play"}
{"db_id": "match_season", "sub_sql": "where t2.name = columbuscrew", "question": "What are the players who played for Columbus Crew, and how many years did each play for?", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to columbuscrew", "query": "SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \\\\\\\"Columbus Crew\\\\\\\"", "sub_ques": "players who played for columbus crew"}
{"db_id": "match_season", "sub_sql": "select player from match_season", "question": "Return all players sorted by college in ascending alphabetical order.", "sub_sql_type": "null col col col", "sub_sql_new": "select player from match_season", "query": "SELECT player FROM match_season ORDER BY College ASC", "sub_ques": "return all players"}
{"db_id": "match_season", "sub_sql": "order by college asc", "question": "Return all players sorted by college in ascending alphabetical order.", "sub_sql_type": "null null col null", "sub_sql_new": "order by college asc", "query": "SELECT player FROM match_season ORDER BY College ASC", "sub_ques": "sorted by college in ascending alphabetical order"}
{"db_id": "match_season", "sub_sql": "select player from match_season", "question": "What are all the players who played in match season, sorted by college in ascending alphabetical order?", "sub_sql_type": "null col col col", "sub_sql_new": "select player from match_season", "query": "SELECT player FROM match_season ORDER BY College ASC", "sub_ques": "what are all the players"}
{"db_id": "match_season", "sub_sql": "order by college asc", "question": "What are all the players who played in match season, sorted by college in ascending alphabetical order?", "sub_sql_type": "null null col null", "sub_sql_new": "order by college asc", "query": "SELECT player FROM match_season ORDER BY College ASC", "sub_ques": "sorted by college in ascending alphabetical order"}
{"db_id": "match_season", "sub_sql": "select position from match_season", "question": "Show the most common position of players in match seasons.", "sub_sql_type": "null col col col", "sub_sql_new": "select position from match_season", "query": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1", "sub_ques": "show the most common position"}
{"db_id": "match_season", "sub_sql": "group by position order by count match_season desc limit 1", "question": "Show the most common position of players in match seasons.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count match_season desc limit 1", "query": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the most common position"}
{"db_id": "match_season", "sub_sql": "select position from match_season", "question": "What is the position that is most common among players in match seasons?", "sub_sql_type": "null col col col", "sub_sql_new": "select position from match_season", "query": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1", "sub_ques": "what is the position"}
{"db_id": "match_season", "sub_sql": "group by position order by count match_season desc limit 1", "question": "What is the position that is most common among players in match seasons?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count match_season desc limit 1", "query": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the position that is most common among players in match seasons"}
{"db_id": "match_season", "sub_sql": "select college from match_season", "question": "Show the top 3 most common colleges of players in match seasons.", "sub_sql_type": "null col col col", "sub_sql_new": "select college from match_season", "query": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3", "sub_ques": "show the colleges"}
{"db_id": "match_season", "sub_sql": "group by college order by count match_season desc limit 3", "question": "Show the top 3 most common colleges of players in match seasons.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count match_season desc limit 3", "query": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3", "sub_ques": "the top 3 most common colleges"}
{"db_id": "match_season", "sub_sql": "select college from match_season", "question": "What are the three colleges from which the most players are from?", "sub_sql_type": "null col col col", "sub_sql_new": "select college from match_season", "query": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3", "sub_ques": "what are the three colleges"}
{"db_id": "match_season", "sub_sql": "group by college order by count match_season desc limit 3", "question": "What are the three colleges from which the most players are from?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count match_season desc limit 3", "query": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3", "sub_ques": "the three colleges from which the most players are from"}
{"db_id": "match_season", "sub_sql": "select college from match_season", "question": "Show the name of colleges that have at least two players.", "sub_sql_type": "null col col col", "sub_sql_new": "select college from match_season", "query": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2", "sub_ques": "show the name of colleges"}
{"db_id": "match_season", "sub_sql": "group by college having count match_season >= 2", "question": "Show the name of colleges that have at least two players.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2", "sub_ques": "colleges that have at least two players"}
{"db_id": "match_season", "sub_sql": "select college from match_season", "question": "What are the names of all colleges that have two or more players?", "sub_sql_type": "null col col col", "sub_sql_new": "select college from match_season", "query": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2", "sub_ques": "what are the names of all colleges"}
{"db_id": "match_season", "sub_sql": "group by college having count match_season >= 2", "question": "What are the names of all colleges that have two or more players?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2", "sub_ques": "colleges that have two or more players"}
{"db_id": "match_season", "sub_sql": "select college from match_season", "question": "Show the name of colleges that have at least two players in descending alphabetical order.", "sub_sql_type": "null col col col", "sub_sql_new": "select college from match_season", "query": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC", "sub_ques": "show the name of colleges"}
{"db_id": "match_season", "sub_sql": "group by college having count match_season >= 2", "question": "Show the name of colleges that have at least two players in descending alphabetical order.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC", "sub_ques": "colleges that have at least two players"}
{"db_id": "match_season", "sub_sql": "order by college desc", "question": "Show the name of colleges that have at least two players in descending alphabetical order.", "sub_sql_type": "null null col null", "sub_sql_new": "order by college desc", "query": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC", "sub_ques": "in descending alphabetical order"}
{"db_id": "match_season", "sub_sql": "select college from match_season", "question": "What are the names of colleges that have two or more players, listed in descending alphabetical order?", "sub_sql_type": "null col col col", "sub_sql_new": "select college from match_season", "query": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC", "sub_ques": "what are the names of colleges"}
{"db_id": "match_season", "sub_sql": "group by college having count match_season >= 2", "question": "What are the names of colleges that have two or more players, listed in descending alphabetical order?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC", "sub_ques": "colleges that have two or more players"}
{"db_id": "match_season", "sub_sql": "order by college desc", "question": "What are the names of colleges that have two or more players, listed in descending alphabetical order?", "sub_sql_type": "null null col null", "sub_sql_new": "order by college desc", "query": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC", "sub_ques": "colleges listed in descending alphabetical order"}
{"db_id": "match_season", "sub_sql": "select name from team", "question": "What are the names of teams that do no have match season record?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from team", "query": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)", "sub_ques": "what are the names of teams"}
{"db_id": "match_season", "sub_sql": "select name from team", "question": "Return the names of teams that have no match season record.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from team", "query": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)", "sub_ques": "return the names of teams"}
{"db_id": "climbing", "sub_sql": "select count climber", "question": "How many climbers are there?", "sub_sql_type": "null agg col", "sub_sql_new": "select count climber", "query": "SELECT count(*) FROM climber", "sub_ques": "how many climbers"}
{"db_id": "climbing", "sub_sql": "select count climber", "question": "Count the number of climbers.", "sub_sql_type": "null agg col", "sub_sql_new": "select count climber", "query": "SELECT count(*) FROM climber", "sub_ques": "count the number of climbers"}
{"db_id": "climbing", "sub_sql": "select name from climber", "question": "List the names of climbers in descending order of points.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from climber", "query": "SELECT Name FROM climber ORDER BY Points DESC", "sub_ques": "list the names of climbers"}
{"db_id": "climbing", "sub_sql": "order by points desc", "question": "List the names of climbers in descending order of points.", "sub_sql_type": "null null col null", "sub_sql_new": "order by points desc", "query": "SELECT Name FROM climber ORDER BY Points DESC", "sub_ques": "in descending order of points"}
{"db_id": "climbing", "sub_sql": "select name from climber", "question": "What are the names of the climbers, ordered by points descending?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from climber", "query": "SELECT Name FROM climber ORDER BY Points DESC", "sub_ques": "what are the names of the climbers"}
{"db_id": "climbing", "sub_sql": "order by points desc", "question": "What are the names of the climbers, ordered by points descending?", "sub_sql_type": "null null col null", "sub_sql_new": "order by points desc", "query": "SELECT Name FROM climber ORDER BY Points DESC", "sub_ques": "ordered by points descending"}
{"db_id": "climbing", "sub_sql": "select name from climber", "question": "List the names of climbers whose country is not Switzerland.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from climber", "query": "SELECT Name FROM climber WHERE Country != \\\\\\\"Switzerland\\\\\\\"", "sub_ques": "list the names of climbers"}
{"db_id": "climbing", "sub_sql": "where country != switzerland", "question": "List the names of climbers whose country is not Switzerland.", "sub_sql_type": "null col op op op value", "sub_sql_new": "where country not equal to switzerland", "query": "SELECT Name FROM climber WHERE Country != \\\\\\\"Switzerland\\\\\\\"", "sub_ques": "climbers whose country is not switzerland"}
{"db_id": "climbing", "sub_sql": "select name from climber", "question": "What are the names of climbers who are not from the country of Switzerland?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from climber", "query": "SELECT Name FROM climber WHERE Country != \\\\\\\"Switzerland\\\\\\\"", "sub_ques": "what are the names of climbers"}
{"db_id": "climbing", "sub_sql": "where country != switzerland", "question": "What are the names of climbers who are not from the country of Switzerland?", "sub_sql_type": "null col op op op value", "sub_sql_new": "where country not equal to switzerland", "query": "SELECT Name FROM climber WHERE Country != \\\\\\\"Switzerland\\\\\\\"", "sub_ques": "climbers who are not from the country of switzerland"}
{"db_id": "climbing", "sub_sql": "select max points from climber", "question": "What is the maximum point for climbers whose country is United Kingdom?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select max points from climber", "query": "SELECT max(Points) FROM climber WHERE Country  =  \\\\\\\"United Kingdom\\\\\\\"", "sub_ques": "what is the maximum point for climbers"}
{"db_id": "climbing", "sub_sql": "where country = unitedkingdom", "question": "What is the maximum point for climbers whose country is United Kingdom?", "sub_sql_type": "null col op op value", "sub_sql_new": "where country equal to unitedkingdom", "query": "SELECT max(Points) FROM climber WHERE Country  =  \\\\\\\"United Kingdom\\\\\\\"", "sub_ques": "climbers whose country is united kingdom"}
{"db_id": "climbing", "sub_sql": "select max points from climber", "question": "Return the maximum number of points for climbers from the United Kingdom.", "sub_sql_type": "null agg col col col", "sub_sql_new": "select max points from climber", "query": "SELECT max(Points) FROM climber WHERE Country  =  \\\\\\\"United Kingdom\\\\\\\"", "sub_ques": "return the maximum number of points for climbers"}
{"db_id": "climbing", "sub_sql": "where country = unitedkingdom", "question": "Return the maximum number of points for climbers from the United Kingdom.", "sub_sql_type": "null col op op value", "sub_sql_new": "where country equal to unitedkingdom", "query": "SELECT max(Points) FROM climber WHERE Country  =  \\\\\\\"United Kingdom\\\\\\\"", "sub_ques": "climbers from the united kingdom"}
{"db_id": "climbing", "sub_sql": "select count distinct country from climber", "question": "How many distinct countries are the climbers from?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct country from climber", "query": "SELECT COUNT(DISTINCT Country) FROM climber", "sub_ques": "how many distinct countries are the climbers"}
{"db_id": "climbing", "sub_sql": "select count distinct country from climber", "question": "Count the number of different countries that climbers are from.", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct country from climber", "query": "SELECT COUNT(DISTINCT Country) FROM climber", "sub_ques": "count the number of different countries that climbers"}
{"db_id": "climbing", "sub_sql": "select name from mountain", "question": "What are the names of mountains in ascending alphabetical order?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from mountain", "query": "SELECT Name FROM mountain ORDER BY Name ASC", "sub_ques": "what are the names of mountains"}
{"db_id": "climbing", "sub_sql": "order by name asc", "question": "What are the names of mountains in ascending alphabetical order?", "sub_sql_type": "null null col null", "sub_sql_new": "order by name asc", "query": "SELECT Name FROM mountain ORDER BY Name ASC", "sub_ques": "the names of mountains in ascending alphabetical order"}
{"db_id": "climbing", "sub_sql": "select name from mountain", "question": "Give the names of mountains in alphabetical order.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from mountain", "query": "SELECT Name FROM mountain ORDER BY Name ASC", "sub_ques": "give the names of mountains"}
{"db_id": "climbing", "sub_sql": "order by name asc", "question": "Give the names of mountains in alphabetical order.", "sub_sql_type": "null null col null", "sub_sql_new": "order by name asc", "query": "SELECT Name FROM mountain ORDER BY Name ASC", "sub_ques": "the names of mountains in alphabetical order"}
{"db_id": "climbing", "sub_sql": "select country from mountain", "question": "What are the countries of mountains with height bigger than 5000?", "sub_sql_type": "null col col col", "sub_sql_new": "select country from mountain", "query": "SELECT Country FROM mountain WHERE Height  >  5000", "sub_ques": "what are the countries of mountains"}
{"db_id": "climbing", "sub_sql": "where height > 5000", "question": "What are the countries of mountains with height bigger than 5000?", "sub_sql_type": "null col op op value", "sub_sql_new": "where height more than 5000", "query": "SELECT Country FROM mountain WHERE Height  >  5000", "sub_ques": "mountains with height bigger than 5000"}
{"db_id": "climbing", "sub_sql": "select country from mountain", "question": "Return the countries of the mountains that have a height larger than 5000.", "sub_sql_type": "null col col col", "sub_sql_new": "select country from mountain", "query": "SELECT Country FROM mountain WHERE Height  >  5000", "sub_ques": "return the countries of the mountains"}
{"db_id": "climbing", "sub_sql": "where height > 5000", "question": "Return the countries of the mountains that have a height larger than 5000.", "sub_sql_type": "null col op op value", "sub_sql_new": "where height more than 5000", "query": "SELECT Country FROM mountain WHERE Height  >  5000", "sub_ques": "mountains that have a height larger than 5000"}
{"db_id": "climbing", "sub_sql": "select name from mountain", "question": "What is the name of the highest mountain?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from mountain", "query": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1", "sub_ques": "what is the name of the highest mountain"}
{"db_id": "climbing", "sub_sql": "order by height desc limit 1", "question": "What is the name of the highest mountain?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by height desc limit 1", "query": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1", "sub_ques": "the highest mountain"}
{"db_id": "climbing", "sub_sql": "select name from mountain", "question": "Return the name of the mountain with the greatest height.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from mountain", "query": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1", "sub_ques": "return the name of the mountain"}
{"db_id": "climbing", "sub_sql": "order by height desc limit 1", "question": "Return the name of the mountain with the greatest height.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by height desc limit 1", "query": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1", "sub_ques": "the greatest height"}
{"db_id": "climbing", "sub_sql": "select distinct range from mountain", "question": "List the distinct ranges of the mountains with the top 3 prominence.", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct range from mountain", "query": "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3", "sub_ques": "list the distinct ranges of the mountains"}
{"db_id": "climbing", "sub_sql": "order by prominence desc limit 3", "question": "List the distinct ranges of the mountains with the top 3 prominence.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by prominence desc limit 3", "query": "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3", "sub_ques": "the top 3 prominence"}
{"db_id": "climbing", "sub_sql": "select distinct range from mountain", "question": "What are the different ranges of the 3 mountains with the highest prominence?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct range from mountain", "query": "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3", "sub_ques": "what are the different ranges of mountains"}
{"db_id": "climbing", "sub_sql": "order by prominence desc limit 3", "question": "What are the different ranges of the 3 mountains with the highest prominence?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by prominence desc limit 3", "query": "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3", "sub_ques": "the 3 mountains with the highest prominence"}
{"db_id": "climbing", "sub_sql": "select t1.name , t2.name from climber , mountain", "question": "Show names of climbers and the names of mountains they climb.", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select name , name from climber , mountain", "query": "SELECT T1.Name ,  T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID", "sub_ques": "show names of climbers and the names of mountains"}
{"db_id": "climbing", "sub_sql": "select t1.name , t2.name from climber , mountain", "question": "What are the names of climbers and the corresponding names of mountains that they climb?", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select name , name from climber , mountain", "query": "SELECT T1.Name ,  T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID", "sub_ques": "what are the names of climbers and the corresponding names of mountains"}
{"db_id": "climbing", "sub_sql": "select t1.name , t2.height from climber , mountain", "question": "Show the names of climbers and the heights of mountains they climb.", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select name , height from climber , mountain", "query": "SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID", "sub_ques": "show the names of climbers and the heights of mountains"}
{"db_id": "climbing", "sub_sql": "select t1.name , t2.height from climber , mountain", "question": "What are the names of climbers and the corresponding heights of the mountains that they climb?", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select name , height from climber , mountain", "query": "SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID", "sub_ques": "what are the names of climbers and the corresponding heights of the mountains"}
{"db_id": "climbing", "sub_sql": "select t2.height from mountain", "question": "Show the height of the mountain climbed by the climber with the maximum points.", "sub_sql_type": "null col col col", "sub_sql_new": "select height from mountain", "query": "SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1", "sub_ques": "show the height of the mountain"}
{"db_id": "climbing", "sub_sql": "order by t1.points desc limit 1", "question": "Show the height of the mountain climbed by the climber with the maximum points.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by points desc limit 1", "query": "SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1", "sub_ques": "the climber with the maximum points"}
{"db_id": "climbing", "sub_sql": "select t2.height from mountain", "question": "What is the height of the mountain climbined by the climbing who had the most points?", "sub_sql_type": "null col col col", "sub_sql_new": "select height from mountain", "query": "SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1", "sub_ques": "what is the height of the mountain"}
{"db_id": "climbing", "sub_sql": "order by t1.points desc limit 1", "question": "What is the height of the mountain climbined by the climbing who had the most points?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by points desc limit 1", "query": "SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1", "sub_ques": "the most points"}
{"db_id": "climbing", "sub_sql": "select distinct t2.name from mountain", "question": "Show the distinct names of mountains climbed by climbers from country \\\\\\\"West Germany\\\\\\\".", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct name from mountain", "query": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \\\\\\\"West Germany\\\\\\\"", "sub_ques": "show the distinct names of mountains"}
{"db_id": "climbing", "sub_sql": "where t1.country = westgermany", "question": "Show the distinct names of mountains climbed by climbers from country \\\\\\\"West Germany\\\\\\\".", "sub_sql_type": "null col op op value", "sub_sql_new": "where country equal to westgermany", "query": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \\\\\\\"West Germany\\\\\\\"", "sub_ques": "climbers from country west germany"}
{"db_id": "climbing", "sub_sql": "select distinct t2.name from mountain", "question": "What are the different names of mountains ascended by climbers from the country of West Germany?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct name from mountain", "query": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \\\\\\\"West Germany\\\\\\\"", "sub_ques": "what are the different names of mountains"}
{"db_id": "climbing", "sub_sql": "where t1.country = westgermany", "question": "What are the different names of mountains ascended by climbers from the country of West Germany?", "sub_sql_type": "null col op op value", "sub_sql_new": "where country equal to westgermany", "query": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \\\\\\\"West Germany\\\\\\\"", "sub_ques": "climbers from the country west germany"}
{"db_id": "climbing", "sub_sql": "select t1.time from climber", "question": "Show the times used by climbers to climb mountains in Country Uganda.", "sub_sql_type": "null col col col", "sub_sql_new": "select time from climber", "query": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  \\\\\\\"Uganda\\\\\\\"", "sub_ques": "show the times used by climbers"}
{"db_id": "climbing", "sub_sql": "where t2.country = uganda", "question": "Show the times used by climbers to climb mountains in Country Uganda.", "sub_sql_type": "null col op op value", "sub_sql_new": "where country equal to uganda", "query": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  \\\\\\\"Uganda\\\\\\\"", "sub_ques": "mountains in country uganda"}
{"db_id": "climbing", "sub_sql": "select t1.time from climber", "question": "What are the times used by climbers who climbed mountains in the country of Uganda?", "sub_sql_type": "null col col col", "sub_sql_new": "select time from climber", "query": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  \\\\\\\"Uganda\\\\\\\"", "sub_ques": "what are the times used by climbers"}
{"db_id": "climbing", "sub_sql": "where t2.country = uganda", "question": "What are the times used by climbers who climbed mountains in the country of Uganda?", "sub_sql_type": "null col op op value", "sub_sql_new": "where country equal to uganda", "query": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  \\\\\\\"Uganda\\\\\\\"", "sub_ques": "mountains in the country of uganda"}
{"db_id": "climbing", "sub_sql": "select country , count climber group by country", "question": "Please show the countries and the number of climbers from each country.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select country , count climber", "query": "SELECT Country ,  COUNT(*) FROM climber GROUP BY Country", "sub_ques": "show the countries and the number of climbers from each country"}
{"db_id": "climbing", "sub_sql": "select country , count climber group by country", "question": "How many climbers are from each country?", "sub_sql_type": "null col null agg col", "sub_sql_new": "select country , count climber", "query": "SELECT Country ,  COUNT(*) FROM climber GROUP BY Country", "sub_ques": "how many climbers are from each country"}
{"db_id": "climbing", "sub_sql": "select country from mountain", "question": "List the countries that have more than one mountain.", "sub_sql_type": "null col col col", "sub_sql_new": "select country from mountain", "query": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  1", "sub_ques": "list the countries "}
{"db_id": "climbing", "sub_sql": "group by country having count mountain > 1", "question": "List the countries that have more than one mountain.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  1", "sub_ques": "countries that have more than one mountain"}
{"db_id": "climbing", "sub_sql": "select country from mountain", "question": "Which countries have more than one mountain?", "sub_sql_type": "null col col col", "sub_sql_new": "select country from mountain", "query": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  1", "sub_ques": "which countries"}
{"db_id": "climbing", "sub_sql": "group by country having count mountain > 1", "question": "Which countries have more than one mountain?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  1", "sub_ques": "countries have more than one mountain"}
{"db_id": "climbing", "sub_sql": "select name from mountain", "question": "List the names of mountains that do not have any climber.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from mountain", "query": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)", "sub_ques": "list the names of mountains"}
{"db_id": "climbing", "sub_sql": "select name from mountain", "question": "What are the names of countains that no climber has climbed?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from mountain", "query": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)", "sub_ques": "what are the names of countains"}
{"db_id": "climbing", "sub_sql": "select range from mountain", "question": "Show the range that has the most number of mountains.", "sub_sql_type": "null col col col", "sub_sql_new": "select range from mountain", "query": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "show the range of mountains"}
{"db_id": "climbing", "sub_sql": "group by range order by count mountain desc limit 1", "question": "Show the range that has the most number of mountains.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count mountain desc limit 1", "query": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "the range that has the most number of mountains"}
{"db_id": "climbing", "sub_sql": "select range from mountain", "question": "Which range contains the most mountains?", "sub_sql_type": "null col col col", "sub_sql_new": "select range from mountain", "query": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "which range "}
{"db_id": "climbing", "sub_sql": "group by range order by count mountain desc limit 1", "question": "Which range contains the most mountains?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count mountain desc limit 1", "query": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "range contains the most mountains"}
{"db_id": "climbing", "sub_sql": "select name from mountain", "question": "Show the names of mountains with height more than 5000 or prominence more than 1000.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from mountain", "query": "SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000", "sub_ques": "show the names of mountains"}
{"db_id": "climbing", "sub_sql": "where height > 5000", "question": "Show the names of mountains with height more than 5000 or prominence more than 1000.", "sub_sql_type": "null col op op value", "sub_sql_new": "where height more than 5000", "query": "SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000", "sub_ques": "mountains with height more than 5000"}
{"db_id": "climbing", "sub_sql": "select name from mountain", "question": "What are the names of mountains that have a height of over 5000 or a prominence of over 1000?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from mountain", "query": "SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000", "sub_ques": "what are the names of mountains"}
{"db_id": "climbing", "sub_sql": "where height > 5000", "question": "What are the names of mountains that have a height of over 5000 or a prominence of over 1000?", "sub_sql_type": "null col op op value", "sub_sql_new": "where height more than 5000", "query": "SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000", "sub_ques": "mountains that have a height of over 5000"}
{"db_id": "body_builder", "sub_sql": "select count body_builder", "question": "How many body builders are there?", "sub_sql_type": "null agg col", "sub_sql_new": "select count body_builder", "query": "SELECT count(*) FROM body_builder", "sub_ques": "how many body builders are there"}
{"db_id": "body_builder", "sub_sql": "select total from body_builder", "question": "List the total scores of body builders in ascending order.", "sub_sql_type": "null col col col", "sub_sql_new": "select total from body_builder", "query": "SELECT Total FROM body_builder ORDER BY Total ASC", "sub_ques": "list the total scores of body builders"}
{"db_id": "body_builder", "sub_sql": "order by total asc", "question": "List the total scores of body builders in ascending order.", "sub_sql_type": "null null col null", "sub_sql_new": "order by total asc", "query": "SELECT Total FROM body_builder ORDER BY Total ASC", "sub_ques": "the total of body builders in ascending order"}
{"db_id": "body_builder", "sub_sql": "select snatch , clean_jerk from body_builder", "question": "List the snatch score and clean jerk score of body builders in ascending order of snatch score.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select snatch , clean_jerk from body_builder", "query": "SELECT Snatch ,  Clean_Jerk FROM body_builder ORDER BY Snatch ASC", "sub_ques": "list the snatch score and clean jerk score of body builders"}
{"db_id": "body_builder", "sub_sql": "order by snatch asc", "question": "List the snatch score and clean jerk score of body builders in ascending order of snatch score.", "sub_sql_type": "null null col null", "sub_sql_new": "order by snatch asc", "query": "SELECT Snatch ,  Clean_Jerk FROM body_builder ORDER BY Snatch ASC", "sub_ques": "in ascending order of snatch"}
{"db_id": "body_builder", "sub_sql": "select avg snatch from body_builder", "question": "What is the average snatch score of body builders?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select avg snatch from body_builder", "query": "SELECT avg(Snatch) FROM body_builder", "sub_ques": "what is the average snatch"}
{"db_id": "body_builder", "sub_sql": "select clean_jerk from body_builder", "question": "What are the clean and jerk score of the body builder with the highest total score?", "sub_sql_type": "null col col col", "sub_sql_new": "select clean_jerk from body_builder", "query": "SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1", "sub_ques": "what are the clean and jerk"}
{"db_id": "body_builder", "sub_sql": "order by total desc limit 1", "question": "What are the clean and jerk score of the body builder with the highest total score?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by total desc limit 1", "query": "SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1", "sub_ques": "the highest total score"}
{"db_id": "body_builder", "sub_sql": "select birth_date from people", "question": "What are the birthdays of people in ascending order of height?", "sub_sql_type": "null col col col", "sub_sql_new": "select birth_date from people", "query": "SELECT Birth_Date FROM People ORDER BY Height ASC", "sub_ques": "what are the birthdays of people"}
{"db_id": "body_builder", "sub_sql": "order by height asc", "question": "What are the birthdays of people in ascending order of height?", "sub_sql_type": "null null col null", "sub_sql_new": "order by height asc", "query": "SELECT Birth_Date FROM People ORDER BY Height ASC", "sub_ques": "in ascending order of height"}
{"db_id": "body_builder", "sub_sql": "select t2.name from people", "question": "What are the names of body builders?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from people", "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID", "sub_ques": "what are the names of body builders"}
{"db_id": "body_builder", "sub_sql": "select t2.name from people", "question": "What are the names of body builders whose total score is higher than 300?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from people", "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  >  300", "sub_ques": "what are the names"}
{"db_id": "body_builder", "sub_sql": "where t1.total > 300", "question": "What are the names of body builders whose total score is higher than 300?", "sub_sql_type": "null col op op value", "sub_sql_new": "where total more than 300", "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  >  300", "sub_ques": "total score is higher than 300"}
{"db_id": "body_builder", "sub_sql": "select t2.name from people", "question": "What is the name of the body builder with the greatest body weight?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from people", "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1", "sub_ques": "what is the name"}
{"db_id": "body_builder", "sub_sql": "order by t2.weight desc limit 1", "question": "What is the name of the body builder with the greatest body weight?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by weight desc limit 1", "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1", "sub_ques": "the greatest body weight"}
{"db_id": "body_builder", "sub_sql": "select t2.birth_date , t2.birth_place from people", "question": "What are the birth date and birth place of the body builder with the highest total points?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select birth_date , birth_place from people", "query": "SELECT T2.Birth_Date ,  T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC LIMIT 1", "sub_ques": "what are the birth date and birth place"}
{"db_id": "body_builder", "sub_sql": "order by t1.total desc limit 1", "question": "What are the birth date and birth place of the body builder with the highest total points?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by total desc limit 1", "query": "SELECT T2.Birth_Date ,  T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC LIMIT 1", "sub_ques": "the highest total points"}
{"db_id": "body_builder", "sub_sql": "select t2.height from people", "question": "What are the heights of body builders with total score smaller than 315?", "sub_sql_type": "null col col col", "sub_sql_new": "select height from people", "query": "SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  <  315", "sub_ques": "what are the heights"}
{"db_id": "body_builder", "sub_sql": "where t1.total < 315", "question": "What are the heights of body builders with total score smaller than 315?", "sub_sql_type": "null col op op value", "sub_sql_new": "where total less than 315", "query": "SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  <  315", "sub_ques": "total score smaller than 315"}
{"db_id": "body_builder", "sub_sql": "select avg t1.total from body_builder", "question": "What is the average total score of body builders with height bigger than 200?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select avg total from body_builder", "query": "SELECT avg(T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  200", "sub_ques": "what is the average total score"}
{"db_id": "body_builder", "sub_sql": "where t2.height > 200", "question": "What is the average total score of body builders with height bigger than 200?", "sub_sql_type": "null col op op value", "sub_sql_new": "where height more than 200", "query": "SELECT avg(T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  200", "sub_ques": "height bigger than 200"}
{"db_id": "body_builder", "sub_sql": "select t2.name from people", "question": "What are the names of body builders in descending order of total scores?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from people", "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC", "sub_ques": "what are the names"}
{"db_id": "body_builder", "sub_sql": "order by t1.total desc", "question": "What are the names of body builders in descending order of total scores?", "sub_sql_type": "null null col null", "sub_sql_new": "order by total desc", "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC", "sub_ques": "in descending order of total scores"}
{"db_id": "body_builder", "sub_sql": "select birth_place , count people group by birth_place", "question": "List each birth place along with the number of people from there.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select birth_place , count people", "query": "SELECT Birth_Place ,  COUNT(*) FROM people GROUP BY Birth_Place", "sub_ques": "list each birth place along with the number of people"}
{"db_id": "body_builder", "sub_sql": "select birth_place from people", "question": "What is the most common birth place of people?", "sub_sql_type": "null col col col", "sub_sql_new": "select birth_place from people", "query": "SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "what is the birth place of people"}
{"db_id": "body_builder", "sub_sql": "group by birth_place order by count people desc limit 1", "question": "What is the most common birth place of people?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count people desc limit 1", "query": "SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "the most common birth place of people"}
{"db_id": "body_builder", "sub_sql": "select birth_place from people", "question": "What are the birth places that are shared by at least two people?", "sub_sql_type": "null col col col", "sub_sql_new": "select birth_place from people", "query": "SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*)  >=  2", "sub_ques": "what are the birth places"}
{"db_id": "body_builder", "sub_sql": "group by birth_place having count people >= 2", "question": "What are the birth places that are shared by at least two people?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*)  >=  2", "sub_ques": "birth places that are shared by at least two people"}
{"db_id": "body_builder", "sub_sql": "select height , weight from people", "question": "List the height and weight of people in descending order of height.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select height , weight from people", "query": "SELECT Height ,  Weight FROM people ORDER BY Height DESC", "sub_ques": "list the height and weight of people"}
{"db_id": "body_builder", "sub_sql": "order by height desc", "question": "List the height and weight of people in descending order of height.", "sub_sql_type": "null null col null", "sub_sql_new": "order by height desc", "query": "SELECT Height ,  Weight FROM people ORDER BY Height DESC", "sub_ques": "in descending order of height"}
{"db_id": "body_builder", "sub_sql": "select count distinct birth_place from people", "question": "How many distinct birth places are there?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct birth_place from people", "query": "SELECT count(DISTINCT Birth_Place) FROM people", "sub_ques": "how many distinct birth places"}
{"db_id": "body_builder", "sub_sql": "select count people", "question": "How many persons are not body builders?", "sub_sql_type": "null agg col", "sub_sql_new": "select count people", "query": "SELECT count(*) FROM people WHERE people_id NOT IN (SELECT People_ID FROM body_builder)", "sub_ques": "how many persons"}
{"db_id": "body_builder", "sub_sql": "select t2.weight from people", "question": "List the weight of the body builders who have snatch score higher than 140 or have the height greater than 200.", "sub_sql_type": "null col col col", "sub_sql_new": "select weight from people", "query": "SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T1.snatch  >  140 OR T2.height  >  200;", "sub_ques": "list the weight"}
{"db_id": "body_builder", "sub_sql": "where t1.snatch > 140", "question": "List the weight of the body builders who have snatch score higher than 140 or have the height greater than 200.", "sub_sql_type": "null col op op value", "sub_sql_new": "where snatch more than 140", "query": "SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T1.snatch  >  140 OR T2.height  >  200;", "sub_ques": "snatch score higher than 140"}
{"db_id": "body_builder", "sub_sql": "select t1.total from body_builder", "question": "What are the total scores of the body builders whose birthday contains the string \\\\\\\"January\\\\\\\" ?", "sub_sql_type": "null col col col", "sub_sql_new": "select total from body_builder", "query": "SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T2.Birth_Date LIKE \\\\\\\"%January%\\\\\\\";", "sub_ques": "what are the total scores"}
{"db_id": "body_builder", "sub_sql": "where t2.birth_date like january", "question": "What are the total scores of the body builders whose birthday contains the string \\\\\\\"January\\\\\\\" ?", "sub_sql_type": "null col op value", "sub_sql_new": "where birth_date like january", "query": "SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T2.Birth_Date LIKE \\\\\\\"%January%\\\\\\\";", "sub_ques": "whose birthday contains the string january"}
{"db_id": "body_builder", "sub_sql": "select min snatch from body_builder", "question": "What is the minimum snatch score?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select min snatch from body_builder", "query": "SELECT min(snatch) FROM body_builder", "sub_ques": "what is the minimum snatch"}
{"db_id": "election_representative", "sub_sql": "select count election", "question": "How many elections are there?", "sub_sql_type": "null agg col", "sub_sql_new": "select count election", "query": "SELECT count(*) FROM election", "sub_ques": "how many elections"}
{"db_id": "election_representative", "sub_sql": "select votes from election", "question": "List the votes of elections in descending order.", "sub_sql_type": "null col col col", "sub_sql_new": "select votes from election", "query": "SELECT Votes FROM election ORDER BY Votes DESC", "sub_ques": "list the votes of elections"}
{"db_id": "election_representative", "sub_sql": "order by votes desc", "question": "List the votes of elections in descending order.", "sub_sql_type": "null null col null", "sub_sql_new": "order by votes desc", "query": "SELECT Votes FROM election ORDER BY Votes DESC", "sub_ques": "the votes of elections in descending order"}
{"db_id": "election_representative", "sub_sql": "select date , vote_percent from election", "question": "List the dates and vote percents of elections.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select date , vote_percent from election", "query": "SELECT Date ,  Vote_Percent FROM election", "sub_ques": "list the dates and vote percents of elections"}
{"db_id": "election_representative", "sub_sql": "select min vote_percent , max vote_percent from election", "question": "What are the minimum and maximum vote percents of elections?", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select min vote_percent , max vote_percent from election", "query": "SELECT min(Vote_Percent) ,  max(Vote_Percent) FROM election", "sub_ques": "what are the minimum and maximum vote percents of elections"}
{"db_id": "election_representative", "sub_sql": "select name , party from representative", "question": "What are the names and parties of representatives?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , party from representative", "query": "SELECT Name ,  Party FROM representative", "sub_ques": "what are the names and parties of representatives"}
{"db_id": "election_representative", "sub_sql": "select name from representative", "question": "What are the names of representatives whose party is not \\\\\\\"Republican\\\\\\\"?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from representative", "query": "SELECT Name FROM Representative WHERE Party != \\\\\\\"Republican\\\\\\\"", "sub_ques": "what are the names of representatives"}
{"db_id": "election_representative", "sub_sql": "where party != republican", "question": "What are the names of representatives whose party is not \\\\\\\"Republican\\\\\\\"?", "sub_sql_type": "null col op op op value", "sub_sql_new": "where party not equal to republican", "query": "SELECT Name FROM Representative WHERE Party != \\\\\\\"Republican\\\\\\\"", "sub_ques": "representatives whose party is not `` republican"}
{"db_id": "election_representative", "sub_sql": "select lifespan from representative", "question": "What are the life spans of representatives from New York state or Indiana state?", "sub_sql_type": "null col col col", "sub_sql_new": "select lifespan from representative", "query": "SELECT Lifespan FROM representative WHERE State  =  \\\\\\\"New York\\\\\\\" OR State  =  \\\\\\\"Indiana\\\\\\\"", "sub_ques": "what are the life spans of representatives"}
{"db_id": "election_representative", "sub_sql": "where state = newyork", "question": "What are the life spans of representatives from New York state or Indiana state?", "sub_sql_type": "null col op op value", "sub_sql_new": "where state equal to newyork", "query": "SELECT Lifespan FROM representative WHERE State  =  \\\\\\\"New York\\\\\\\" OR State  =  \\\\\\\"Indiana\\\\\\\"", "sub_ques": "representatives from new york state or indiana state"}
{"db_id": "election_representative", "sub_sql": "select t2.name , t1.date from representative , election", "question": "What are the names of representatives and the dates of elections they participated in.", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select name , date from representative , election", "query": "SELECT T2.Name ,  T1.Date FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID", "sub_ques": "what are the names of representatives and the dates of elections"}
{"db_id": "election_representative", "sub_sql": "select t2.name from representative", "question": "What are the names of representatives with more than 10000 votes in election?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from representative", "query": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE Votes  >  10000", "sub_ques": "what are the names of representatives"}
{"db_id": "election_representative", "sub_sql": "where votes > 10000", "question": "What are the names of representatives with more than 10000 votes in election?", "sub_sql_type": "null col op op value", "sub_sql_new": "where votes more than 10000", "query": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE Votes  >  10000", "sub_ques": "with more than 10000 votes in election"}
{"db_id": "election_representative", "sub_sql": "select t2.name from representative", "question": "What are the names of representatives in descending order of votes?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from representative", "query": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes DESC", "sub_ques": "what are the names of representatives"}
{"db_id": "election_representative", "sub_sql": "order by votes desc", "question": "What are the names of representatives in descending order of votes?", "sub_sql_type": "null null col null", "sub_sql_new": "order by votes desc", "query": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes DESC", "sub_ques": "in descending order of votes"}
{"db_id": "election_representative", "sub_sql": "select t2.party from representative", "question": "What is the party of the representative that has the smallest number of votes.", "sub_sql_type": "null col col col", "sub_sql_new": "select party from representative", "query": "SELECT T2.Party FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes ASC LIMIT 1", "sub_ques": "what is the party of the representative"}
{"db_id": "election_representative", "sub_sql": "order by votes asc limit 1", "question": "What is the party of the representative that has the smallest number of votes.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by votes asc limit 1", "query": "SELECT T2.Party FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes ASC LIMIT 1", "sub_ques": "the smallest number of votes"}
{"db_id": "election_representative", "sub_sql": "select t2.lifespan from representative", "question": "What are the lifespans of representatives in descending order of vote percent?", "sub_sql_type": "null col col col", "sub_sql_new": "select lifespan from representative", "query": "SELECT T2.Lifespan FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY Vote_Percent DESC", "sub_ques": "what are the lifespans of representatives"}
{"db_id": "election_representative", "sub_sql": "order by vote_percent desc", "question": "What are the lifespans of representatives in descending order of vote percent?", "sub_sql_type": "null null col null", "sub_sql_new": "order by vote_percent desc", "query": "SELECT T2.Lifespan FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY Vote_Percent DESC", "sub_ques": "in descending order of vote percent"}
{"db_id": "election_representative", "sub_sql": "select avg t1.votes from election", "question": "What is the average number of votes of representatives from party \\\\\\\"Republican\\\\\\\"?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select avg votes from election", "query": "SELECT avg(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE T2.Party  =  \\\\\\\"Republican\\\\\\\"", "sub_ques": "what is the average number of votes"}
{"db_id": "election_representative", "sub_sql": "where t2.party = republican", "question": "What is the average number of votes of representatives from party \\\\\\\"Republican\\\\\\\"?", "sub_sql_type": "null col op op value", "sub_sql_new": "where party equal to republican", "query": "SELECT avg(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE T2.Party  =  \\\\\\\"Republican\\\\\\\"", "sub_ques": "representatives from party `` republican"}
{"db_id": "election_representative", "sub_sql": "select party , count representative group by party", "question": "What are the different parties of representative? Show the party name and the number of representatives in each party.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select party , count representative", "query": "SELECT Party ,  COUNT(*) FROM representative GROUP BY Party", "sub_ques": "show the party name and the number of representatives in each party"}
{"db_id": "election_representative", "sub_sql": "select party , count representative group by party", "question": "What is the party that has the largest number of representatives?", "sub_sql_type": "null col null agg col", "sub_sql_new": "select party , count representative", "query": "SELECT Party ,  COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "what is the party that has the largest number of representatives"}
{"db_id": "election_representative", "sub_sql": "group by party order by count representative desc limit 1", "question": "What is the party that has the largest number of representatives?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count representative desc limit 1", "query": "SELECT Party ,  COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "the party that has the largest number of representatives"}
{"db_id": "election_representative", "sub_sql": "select party from representative", "question": "What parties have at least three representatives?", "sub_sql_type": "null col col col", "sub_sql_new": "select party from representative", "query": "SELECT Party FROM representative GROUP BY Party HAVING COUNT(*)  >=  3", "sub_ques": "what parties"}
{"db_id": "election_representative", "sub_sql": "group by party having count representative >= 3", "question": "What parties have at least three representatives?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT Party FROM representative GROUP BY Party HAVING COUNT(*)  >=  3", "sub_ques": "parties have at least three representatives"}
{"db_id": "election_representative", "sub_sql": "select state from representative", "question": "What states have at least two representatives?", "sub_sql_type": "null col col col", "sub_sql_new": "select state from representative", "query": "SELECT State FROM representative GROUP BY State HAVING COUNT(*)  >=  2", "sub_ques": "what states"}
{"db_id": "election_representative", "sub_sql": "group by state having count representative >= 2", "question": "What states have at least two representatives?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT State FROM representative GROUP BY State HAVING COUNT(*)  >=  2", "sub_ques": "states have at least two representatives"}
{"db_id": "election_representative", "sub_sql": "select name from representative", "question": "List the names of representatives that have not participated in elections listed here.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from representative", "query": "SELECT Name FROM representative WHERE Representative_ID NOT IN (SELECT Representative_ID FROM election)", "sub_ques": "list the names of representatives"}
{"db_id": "election_representative", "sub_sql": "select count distinct party from representative", "question": "How many distinct parties are there for representatives?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct party from representative", "query": "SELECT count(DISTINCT Party) FROM representative", "sub_ques": "how many distinct parties are there for representatives"}
{"db_id": "apartment_rentals", "sub_sql": "select count apartment_bookings", "question": "How many apartment bookings are there in total?", "sub_sql_type": "null agg col", "sub_sql_new": "select count apartment_bookings", "query": "SELECT count(*) FROM Apartment_Bookings", "sub_ques": "how many apartment bookings are there in total"}
{"db_id": "apartment_rentals", "sub_sql": "select count apartment_bookings", "question": "Count the total number of apartment bookings.", "sub_sql_type": "null agg col", "sub_sql_new": "select count apartment_bookings", "query": "SELECT count(*) FROM Apartment_Bookings", "sub_ques": "count the total number of apartment bookings"}
{"db_id": "apartment_rentals", "sub_sql": "select booking_start_date , booking_end_date from apartment_bookings", "question": "Show the start dates and end dates of all the apartment bookings.", "sub_sql_type": "null col col col null col col col col col", "sub_sql_new": "select booking start date , booking end date from apartment_bookings", "query": "SELECT booking_start_date ,  booking_end_date FROM Apartment_Bookings", "sub_ques": "show the start dates and end dates"}
{"db_id": "apartment_rentals", "sub_sql": "select booking_start_date , booking_end_date from apartment_bookings", "question": "What are the start date and end date of each apartment booking?", "sub_sql_type": "null col col col null col col col col col", "sub_sql_new": "select booking start date , booking end date from apartment_bookings", "query": "SELECT booking_start_date ,  booking_end_date FROM Apartment_Bookings", "sub_ques": "what are the start date and end date"}
{"db_id": "apartment_rentals", "sub_sql": "select distinct building_description from apartment_buildings", "question": "Show all distinct building descriptions.", "sub_sql_type": "null col col col col col", "sub_sql_new": "select distinct building description from apartment_buildings", "query": "SELECT DISTINCT building_description FROM Apartment_Buildings", "sub_ques": "show all distinct building descriptions"}
{"db_id": "apartment_rentals", "sub_sql": "select distinct building_description from apartment_buildings", "question": "Give me a list of all the distinct building descriptions.", "sub_sql_type": "null col col col col col", "sub_sql_new": "select distinct building description from apartment_buildings", "query": "SELECT DISTINCT building_description FROM Apartment_Buildings", "sub_ques": "list of all the distinct building descriptions"}
{"db_id": "apartment_rentals", "sub_sql": "select building_short_name from apartment_buildings", "question": "Show the short names of the buildings managed by \\\\\\\"Emma\\\\\\\".", "sub_sql_type": "null col col col col col", "sub_sql_new": "select building short name from apartment_buildings", "query": "SELECT building_short_name FROM Apartment_Buildings WHERE building_manager\\\\t =  \\\\\\\"Emma\\\\\\\"", "sub_ques": "show the short names of the buildings"}
{"db_id": "apartment_rentals", "sub_sql": "where building_manager = emma", "question": "Show the short names of the buildings managed by \\\\\\\"Emma\\\\\\\".", "sub_sql_type": "null col col op op value", "sub_sql_new": "where building manager equal to emma", "query": "SELECT building_short_name FROM Apartment_Buildings WHERE building_manager\\\\t =  \\\\\\\"Emma\\\\\\\"", "sub_ques": "buildings managed by `` emma"}
{"db_id": "apartment_rentals", "sub_sql": "select building_short_name from apartment_buildings", "question": "Which buildings does \\\\\\\"Emma\\\\\\\" manage? Give me the short names of the buildings.", "sub_sql_type": "null col col col col col", "sub_sql_new": "select building short name from apartment_buildings", "query": "SELECT building_short_name FROM Apartment_Buildings WHERE building_manager\\\\t =  \\\\\\\"Emma\\\\\\\"", "sub_ques": "give me the short names of the buildings"}
{"db_id": "apartment_rentals", "sub_sql": "where building_manager = emma", "question": "Which buildings does \\\\\\\"Emma\\\\\\\" manage? Give me the short names of the buildings.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where building manager equal to emma", "query": "SELECT building_short_name FROM Apartment_Buildings WHERE building_manager\\\\t =  \\\\\\\"Emma\\\\\\\"", "sub_ques": "buildings does `` emma '' manage"}
{"db_id": "apartment_rentals", "sub_sql": "select building_address , building_phone from apartment_buildings", "question": "Show the addresses and phones of all the buildings managed by \\\\\\\"Brenden\\\\\\\".", "sub_sql_type": "null col col null col col col col", "sub_sql_new": "select building address , building phone from apartment_buildings", "query": "SELECT building_address ,  building_phone FROM Apartment_Buildings WHERE building_manager\\\\t =  \\\\\\\"Brenden\\\\\\\"", "sub_ques": "show the addresses and phones of all the buildings"}
{"db_id": "apartment_rentals", "sub_sql": "where building_manager = brenden", "question": "Show the addresses and phones of all the buildings managed by \\\\\\\"Brenden\\\\\\\".", "sub_sql_type": "null col col op op value", "sub_sql_new": "where building manager equal to brenden", "query": "SELECT building_address ,  building_phone FROM Apartment_Buildings WHERE building_manager\\\\t =  \\\\\\\"Brenden\\\\\\\"", "sub_ques": "buildings managed by `` brenden"}
{"db_id": "apartment_rentals", "sub_sql": "select building_address , building_phone from apartment_buildings", "question": "What are the address and phone number of the buildings managed by \\\\\\\"Brenden\\\\\\\"?", "sub_sql_type": "null col col null col col col col", "sub_sql_new": "select building address , building phone from apartment_buildings", "query": "SELECT building_address ,  building_phone FROM Apartment_Buildings WHERE building_manager\\\\t =  \\\\\\\"Brenden\\\\\\\"", "sub_ques": "what are the address and phone number of the buildings"}
{"db_id": "apartment_rentals", "sub_sql": "where building_manager = brenden", "question": "What are the address and phone number of the buildings managed by \\\\\\\"Brenden\\\\\\\"?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where building manager equal to brenden", "query": "SELECT building_address ,  building_phone FROM Apartment_Buildings WHERE building_manager\\\\t =  \\\\\\\"Brenden\\\\\\\"", "sub_ques": "buildings managed by `` brenden"}
{"db_id": "apartment_rentals", "sub_sql": "select building_full_name from apartment_buildings", "question": "What are the building full names that contain the word \\\\\\\"court\\\\\\\"?", "sub_sql_type": "null col col col col col", "sub_sql_new": "select building full name from apartment_buildings", "query": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \\\\\\\"%court%\\\\\\\"", "sub_ques": "what are the building full names"}
{"db_id": "apartment_rentals", "sub_sql": "where building_full_name like court", "question": "What are the building full names that contain the word \\\\\\\"court\\\\\\\"?", "sub_sql_type": "null col col col op value", "sub_sql_new": "where building full name like court", "query": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \\\\\\\"%court%\\\\\\\"", "sub_ques": "building full names that contain the word `` court"}
{"db_id": "apartment_rentals", "sub_sql": "select building_full_name from apartment_buildings", "question": "Find all the building full names containing the word \\\\\\\"court\\\\\\\".", "sub_sql_type": "null col col col col col", "sub_sql_new": "select building full name from apartment_buildings", "query": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \\\\\\\"%court%\\\\\\\"", "sub_ques": "find all building full names"}
{"db_id": "apartment_rentals", "sub_sql": "where building_full_name like court", "question": "Find all the building full names containing the word \\\\\\\"court\\\\\\\".", "sub_sql_type": "null col col col op value", "sub_sql_new": "where building full name like court", "query": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \\\\\\\"%court%\\\\\\\"", "sub_ques": "building full names containing the word `` court"}
{"db_id": "apartment_rentals", "sub_sql": "select min bathroom_count , max bathroom_count from apartments", "question": "What is the minimum and maximum number of bathrooms of all the apartments?", "sub_sql_type": "null agg col col null agg col col col col", "sub_sql_new": "select min bathroom count , max bathroom count from apartments", "query": "SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments", "sub_ques": "what is the minimum and maximum number of bathrooms of all the apartments"}
{"db_id": "apartment_rentals", "sub_sql": "select min bathroom_count , max bathroom_count from apartments", "question": "Give me the minimum and maximum bathroom count among all the apartments.", "sub_sql_type": "null agg col col null agg col col col col", "sub_sql_new": "select min bathroom count , max bathroom count from apartments", "query": "SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments", "sub_ques": "give me the minimum and maximum bathroom count among all the apartments"}
{"db_id": "apartment_rentals", "sub_sql": "select avg bedroom_count from apartments", "question": "What is the average number of bedrooms of all apartments?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select avg bedroom count from apartments", "query": "SELECT avg(bedroom_count) FROM Apartments", "sub_ques": "what is the average number of bedrooms of all apartments"}
{"db_id": "apartment_rentals", "sub_sql": "select avg bedroom_count from apartments", "question": "Find the average number of bedrooms of all the apartments.", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select avg bedroom count from apartments", "query": "SELECT avg(bedroom_count) FROM Apartments", "sub_ques": "find the average number of bedrooms of all the apartments"}
{"db_id": "apartment_rentals", "sub_sql": "select apt_number , room_count from apartments", "question": "Return the apartment number and the number of rooms for each apartment.", "sub_sql_type": "null col col null col col col col", "sub_sql_new": "select apartment number , room count from apartments", "query": "SELECT apt_number ,  room_count FROM Apartments", "sub_ques": "return the apartment number and the number of rooms for each apartment"}
{"db_id": "apartment_rentals", "sub_sql": "select apt_number , room_count from apartments", "question": "What are the apartment number and the room count of each apartment?", "sub_sql_type": "null col col null col col col col", "sub_sql_new": "select apartment number , room count from apartments", "query": "SELECT apt_number ,  room_count FROM Apartments", "sub_ques": "what are the apartment number and the room count of each apartment"}
{"db_id": "apartment_rentals", "sub_sql": "select avg room_count from apartments", "question": "What is the average number of rooms of apartments with type code \\\\\\\"Studio\\\\\\\"?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select avg room count from apartments", "query": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \\\\\\\"Studio\\\\\\\"", "sub_ques": "what is the average number of rooms of apartments"}
{"db_id": "apartment_rentals", "sub_sql": "where apt_type_code = studio", "question": "What is the average number of rooms of apartments with type code \\\\\\\"Studio\\\\\\\"?", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where apartment type code equal to studio", "query": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \\\\\\\"Studio\\\\\\\"", "sub_ques": "apartments with type code `` studio"}
{"db_id": "apartment_rentals", "sub_sql": "select avg room_count from apartments", "question": "Find the average room count of the apartments that have the \\\\\\\"Studio\\\\\\\" type code.", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select avg room count from apartments", "query": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \\\\\\\"Studio\\\\\\\"", "sub_ques": "find the average room count of the apartments"}
{"db_id": "apartment_rentals", "sub_sql": "where apt_type_code = studio", "question": "Find the average room count of the apartments that have the \\\\\\\"Studio\\\\\\\" type code.", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where apartment type code equal to studio", "query": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \\\\\\\"Studio\\\\\\\"", "sub_ques": "apartments that have the `` studio '' type code"}
{"db_id": "apartment_rentals", "sub_sql": "select apt_number from apartments", "question": "Return the apartment numbers of the apartments with type code \\\\\\\"Flat\\\\\\\".", "sub_sql_type": "null col col col col", "sub_sql_new": "select apartment number from apartments", "query": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \\\\\\\"Flat\\\\\\\"", "sub_ques": "reutrn the apartment numbers of the apartments"}
{"db_id": "apartment_rentals", "sub_sql": "where apt_type_code = flat", "question": "Return the apartment numbers of the apartments with type code \\\\\\\"Flat\\\\\\\".", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where apartment type code equal to flat", "query": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \\\\\\\"Flat\\\\\\\"", "sub_ques": "apartments with type code `` flat"}
{"db_id": "apartment_rentals", "sub_sql": "select apt_number from apartments", "question": "Which apartments have type code \\\\\\\"Flat\\\\\\\"? Give me their apartment numbers.", "sub_sql_type": "null col col col col", "sub_sql_new": "select apartment number from apartments", "query": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \\\\\\\"Flat\\\\\\\"", "sub_ques": "give me their apartment numbers"}
{"db_id": "apartment_rentals", "sub_sql": "where apt_type_code = flat", "question": "Which apartments have type code \\\\\\\"Flat\\\\\\\"? Give me their apartment numbers.", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where apartment type code equal to flat", "query": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \\\\\\\"Flat\\\\\\\"", "sub_ques": "apartments have type code `` flat"}
{"db_id": "apartment_rentals", "sub_sql": "select guest_first_name , guest_last_name from guests", "question": "Return the first names and last names of all guests", "sub_sql_type": "null col col col null col col col col col", "sub_sql_new": "select guest first name , guest last name from guests", "query": "SELECT guest_first_name ,  guest_last_name FROM Guests", "sub_ques": "return the first names and last names of all guests"}
{"db_id": "apartment_rentals", "sub_sql": "select guest_first_name , guest_last_name from guests", "question": "What are the first names and last names of all the guests?", "sub_sql_type": "null col col col null col col col col col", "sub_sql_new": "select guest first name , guest last name from guests", "query": "SELECT guest_first_name ,  guest_last_name FROM Guests", "sub_ques": "what are the first names and last names of all the guests"}
{"db_id": "apartment_rentals", "sub_sql": "select date_of_birth from guests", "question": "Return the date of birth for all the guests with gender code \\\\\\\"Male\\\\\\\".", "sub_sql_type": "null col col col col col", "sub_sql_new": "select date of birth from guests", "query": "SELECT date_of_birth FROM Guests WHERE gender_code  =  \\\\\\\"Male\\\\\\\"", "sub_ques": "return the date of birth for all the guests"}
{"db_id": "apartment_rentals", "sub_sql": "where gender_code = male", "question": "Return the date of birth for all the guests with gender code \\\\\\\"Male\\\\\\\".", "sub_sql_type": "null col col op op value", "sub_sql_new": "where gender code equal to male", "query": "SELECT date_of_birth FROM Guests WHERE gender_code  =  \\\\\\\"Male\\\\\\\"", "sub_ques": "guests with gender code `` male"}
{"db_id": "apartment_rentals", "sub_sql": "select date_of_birth from guests", "question": "What are dates of birth of all the guests whose gender is \\\\\\\"Male\\\\\\\"?", "sub_sql_type": "null col col col col col", "sub_sql_new": "select date of birth from guests", "query": "SELECT date_of_birth FROM Guests WHERE gender_code  =  \\\\\\\"Male\\\\\\\"", "sub_ques": "what are dates of birth of all the guests"}
{"db_id": "apartment_rentals", "sub_sql": "where gender_code = male", "question": "What are dates of birth of all the guests whose gender is \\\\\\\"Male\\\\\\\"?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where gender code equal to male", "query": "SELECT date_of_birth FROM Guests WHERE gender_code  =  \\\\\\\"Male\\\\\\\"", "sub_ques": "guests whose gender is `` male"}
{"db_id": "apartment_rentals", "sub_sql": "select t2.apt_number , t1.booking_start_date , t1.booking_end_date from apartments , apartment_bookings", "question": "Show the apartment numbers, start dates, and end dates of all the apartment bookings.", "sub_sql_type": "null col col null col col col null col col col col col null col", "sub_sql_new": "select apartment number , booking start date , booking end date from apartments , apartment_bookings", "query": "SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_end_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id", "sub_ques": "show the apartment numbers , start dates , and end dates of all the apartment"}
{"db_id": "apartment_rentals", "sub_sql": "select t2.apt_number , t1.booking_start_date , t1.booking_end_date from apartments , apartment_bookings", "question": "What are the apartment number, start date, and end date of each apartment booking?", "sub_sql_type": "null col col null col col col null col col col col col null col", "sub_sql_new": "select apartment number , booking start date , booking end date from apartments , apartment_bookings", "query": "SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_end_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id", "sub_ques": "what are the apartment number , start date , and end date of each apartment"}
{"db_id": "apartment_rentals", "sub_sql": "select t1.booking_start_date , t1.booking_end_date from apartment_bookings", "question": "What are the booking start and end dates of the apartments with type code \\\\\\\"Duplex\\\\\\\"?", "sub_sql_type": "null col col col null col col col col col", "sub_sql_new": "select booking start date , booking end date from apartment_bookings", "query": "SELECT T1.booking_start_date ,  T1.booking_end_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_type_code  =  \\\\\\\"Duplex\\\\\\\"", "sub_ques": "what are the booking start and end dates"}
{"db_id": "apartment_rentals", "sub_sql": "where t2.apt_type_code = duplex", "question": "What are the booking start and end dates of the apartments with type code \\\\\\\"Duplex\\\\\\\"?", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where apartment type code equal to duplex", "query": "SELECT T1.booking_start_date ,  T1.booking_end_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_type_code  =  \\\\\\\"Duplex\\\\\\\"", "sub_ques": "apartments with type code `` duplex"}
{"db_id": "apartment_rentals", "sub_sql": "select t1.booking_start_date , t1.booking_end_date from apartment_bookings", "question": "Return the booking start date and end date for the apartments that have type code \\\\\\\"Duplex\\\\\\\".", "sub_sql_type": "null col col col null col col col col col", "sub_sql_new": "select booking start date , booking end date from apartment_bookings", "query": "SELECT T1.booking_start_date ,  T1.booking_end_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_type_code  =  \\\\\\\"Duplex\\\\\\\"", "sub_ques": "booking start date and end date"}
{"db_id": "apartment_rentals", "sub_sql": "where t2.apt_type_code = duplex", "question": "Return the booking start date and end date for the apartments that have type code \\\\\\\"Duplex\\\\\\\".", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where apartment type code equal to duplex", "query": "SELECT T1.booking_start_date ,  T1.booking_end_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_type_code  =  \\\\\\\"Duplex\\\\\\\"", "sub_ques": "apartments that have type code `` duplex"}
{"db_id": "apartment_rentals", "sub_sql": "select t1.booking_start_date , t1.booking_end_date from apartment_bookings", "question": "What are the booking start and end dates of the apartments with more than 2 bedrooms?", "sub_sql_type": "null col col col null col col col col col", "sub_sql_new": "select booking start date , booking end date from apartment_bookings", "query": "SELECT T1.booking_start_date ,  T1.booking_end_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2", "sub_ques": "what are the booking start and end dates"}
{"db_id": "apartment_rentals", "sub_sql": "where t2.bedroom_count > 2", "question": "What are the booking start and end dates of the apartments with more than 2 bedrooms?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where bedroom count more than 2", "query": "SELECT T1.booking_start_date ,  T1.booking_end_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2", "sub_ques": "apartments with more than 2 bedrooms"}
{"db_id": "apartment_rentals", "sub_sql": "select t1.booking_start_date , t1.booking_end_date from apartment_bookings", "question": "Find the booking start date and end date for the apartments that have more than two bedrooms.", "sub_sql_type": "null col col col null col col col col col", "sub_sql_new": "select booking start date , booking end date from apartment_bookings", "query": "SELECT T1.booking_start_date ,  T1.booking_end_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2", "sub_ques": "find the booking start date and end date"}
{"db_id": "apartment_rentals", "sub_sql": "where t2.bedroom_count > 2", "question": "Find the booking start date and end date for the apartments that have more than two bedrooms.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where bedroom count more than 2", "query": "SELECT T1.booking_start_date ,  T1.booking_end_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2", "sub_ques": "apartments that have more than two bedrooms"}
{"db_id": "apartment_rentals", "sub_sql": "select t1.booking_status_code from apartment_bookings", "question": "What is the booking status code of the apartment with apartment number \\\\\\\"Suite 634\\\\\\\"?", "sub_sql_type": "null col col col col col", "sub_sql_new": "select booking status code from apartment_bookings", "query": "SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  \\\\\\\"Suite 634\\\\\\\"", "sub_ques": "what is the booking status code"}
{"db_id": "apartment_rentals", "sub_sql": "where t2.apt_number = suite634", "question": "What is the booking status code of the apartment with apartment number \\\\\\\"Suite 634\\\\\\\"?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where apartment number equal to suite634", "query": "SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  \\\\\\\"Suite 634\\\\\\\"", "sub_ques": "apartment with apartment number"}
{"db_id": "apartment_rentals", "sub_sql": "where t2.apt_number = suite634", "question": "Tell me the booking status code for the apartment with number \\\\\\\"Suite 634\\\\\\\".", "sub_sql_type": "null col col op op value", "sub_sql_new": "where apartment number equal to suite634", "query": "SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  \\\\\\\"Suite 634\\\\\\\"", "sub_ques": "apartment with number suite 634"}
{"db_id": "apartment_rentals", "sub_sql": "select distinct t2.apt_number from apartments", "question": "Show the distinct apartment numbers of the apartments that have bookings with status code \\\\\\\"Confirmed\\\\\\\".", "sub_sql_type": "null col col col col col", "sub_sql_new": "select distinct apartment number from apartments", "query": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \\\\\\\"Confirmed\\\\\\\"", "sub_ques": "show the distinct apartment numbers of the apartments"}
{"db_id": "apartment_rentals", "sub_sql": "where t1.booking_status_code = confirmed", "question": "Show the distinct apartment numbers of the apartments that have bookings with status code \\\\\\\"Confirmed\\\\\\\".", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where booking status code equal to confirmed", "query": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \\\\\\\"Confirmed\\\\\\\"", "sub_ques": "bookings with status code `` confirmed"}
{"db_id": "apartment_rentals", "sub_sql": "select distinct t2.apt_number from apartments", "question": "Which apartments have bookings with status code \\\\\\\"Confirmed\\\\\\\"? Return their apartment numbers.", "sub_sql_type": "null col col col col col", "sub_sql_new": "select distinct apartment number from apartments", "query": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \\\\\\\"Confirmed\\\\\\\"", "sub_ques": "return their apartment numbers"}
{"db_id": "apartment_rentals", "sub_sql": "where t1.booking_status_code = confirmed", "question": "Which apartments have bookings with status code \\\\\\\"Confirmed\\\\\\\"? Return their apartment numbers.", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where booking status code equal to confirmed", "query": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \\\\\\\"Confirmed\\\\\\\"", "sub_ques": "bookings with status code `` confirmed"}
{"db_id": "apartment_rentals", "sub_sql": "select avg room_count from apartments", "question": "Show the average room count of the apartments that have booking status code \\\\\\\"Provisional\\\\\\\".", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select avg room count from apartments", "query": "SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \\\\\\\"Provisional\\\\\\\"", "sub_ques": "show the average room count of the apartments"}
{"db_id": "apartment_rentals", "sub_sql": "where t1.booking_status_code = provisional", "question": "Show the average room count of the apartments that have booking status code \\\\\\\"Provisional\\\\\\\".", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where booking status code equal to provisional", "query": "SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \\\\\\\"Provisional\\\\\\\"", "sub_ques": "booking status code `` provisional"}
{"db_id": "apartment_rentals", "sub_sql": "select avg room_count from apartments", "question": "What is the average room count of the apartments whose booking status code is \\\\\\\"Provisional\\\\\\\"?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select avg room count from apartments", "query": "SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \\\\\\\"Provisional\\\\\\\"", "sub_ques": "what is the average room count of the apartments"}
{"db_id": "apartment_rentals", "sub_sql": "where t1.booking_status_code = provisional", "question": "What is the average room count of the apartments whose booking status code is \\\\\\\"Provisional\\\\\\\"?", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where booking status code equal to provisional", "query": "SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \\\\\\\"Provisional\\\\\\\"", "sub_ques": "booking status code is `` provisional"}
{"db_id": "apartment_rentals", "sub_sql": "select t2.guest_first_name , t1.booking_start_date , t1.booking_end_date from guests , apartment_bookings", "question": "Show the guest first names, start dates, and end dates of all the apartment bookings.", "sub_sql_type": "null col col col null col col col null col col col col col null col", "sub_sql_new": "select guest first name , booking start date , booking end date from guests , apartment_bookings", "query": "SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_end_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id", "sub_ques": "show the guest first names , start dates , and end dates"}
{"db_id": "apartment_rentals", "sub_sql": "select t2.guest_first_name , t1.booking_start_date , t1.booking_end_date from guests , apartment_bookings", "question": "What are the guest first name, start date, and end date of each apartment booking?", "sub_sql_type": "null col col col null col col col null col col col col col null col", "sub_sql_new": "select guest first name , booking start date , booking end date from guests , apartment_bookings", "query": "SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_end_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id", "sub_ques": "what are the guest first name , start date , and end date"}
{"db_id": "apartment_rentals", "sub_sql": "select t1.booking_start_date , t1.booking_end_date from apartment_bookings", "question": "Show the start dates and end dates of all the apartment bookings made by guests with gender code \\\\\\\"Female\\\\\\\".", "sub_sql_type": "null col col col null col col col col col", "sub_sql_new": "select booking start date , booking end date from apartment_bookings", "query": "SELECT T1.booking_start_date ,  T1.booking_end_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T2.gender_code  =  \\\\\\\"Female\\\\\\\"", "sub_ques": "show the start dates and end dates of all the apartment bookings"}
{"db_id": "apartment_rentals", "sub_sql": "where t2.gender_code = female", "question": "Show the start dates and end dates of all the apartment bookings made by guests with gender code \\\\\\\"Female\\\\\\\".", "sub_sql_type": "null col col op op value", "sub_sql_new": "where gender code equal to female", "query": "SELECT T1.booking_start_date ,  T1.booking_end_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T2.gender_code  =  \\\\\\\"Female\\\\\\\"", "sub_ques": "guests with gender code `` female"}
{"db_id": "apartment_rentals", "sub_sql": "select t1.booking_start_date , t1.booking_end_date from apartment_bookings", "question": "What are the start date and end date of the apartment bookings made by female guests (gender code \\\\\\\"Female\\\\\\\")?", "sub_sql_type": "null col col col null col col col col col", "sub_sql_new": "select booking start date , booking end date from apartment_bookings", "query": "SELECT T1.booking_start_date ,  T1.booking_end_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T2.gender_code  =  \\\\\\\"Female\\\\\\\"", "sub_ques": "what are the start date and end date of the apartment bookings"}
{"db_id": "apartment_rentals", "sub_sql": "where t2.gender_code = female", "question": "What are the start date and end date of the apartment bookings made by female guests (gender code \\\\\\\"Female\\\\\\\")?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where gender code equal to female", "query": "SELECT T1.booking_start_date ,  T1.booking_end_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T2.gender_code  =  \\\\\\\"Female\\\\\\\"", "sub_ques": "female guests ( gender code `` female"}
{"db_id": "apartment_rentals", "sub_sql": "select t2.guest_first_name , t2.guest_last_name from guests", "question": "Show the first names and last names of all the guests that have apartment bookings with status code \\\\\\\"Confirmed\\\\\\\".", "sub_sql_type": "null col col col null col col col col col", "sub_sql_new": "select guest first name , guest last name from guests", "query": "SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  \\\\\\\"Confirmed\\\\\\\"", "sub_ques": "show the first names and last names of all the guests"}
{"db_id": "apartment_rentals", "sub_sql": "where t1.booking_status_code = confirmed", "question": "Show the first names and last names of all the guests that have apartment bookings with status code \\\\\\\"Confirmed\\\\\\\".", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where booking status code equal to confirmed", "query": "SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  \\\\\\\"Confirmed\\\\\\\"", "sub_ques": "bookings with status code `` confirmed"}
{"db_id": "apartment_rentals", "sub_sql": "select t2.guest_first_name , t2.guest_last_name from guests", "question": "Which guests have apartment bookings with status code \\\\\\\"Confirmed\\\\\\\"? Return their first names and last names.", "sub_sql_type": "null col col col null col col col col col", "sub_sql_new": "select guest first name , guest last name from guests", "query": "SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  \\\\\\\"Confirmed\\\\\\\"", "sub_ques": "return their first names and last names"}
{"db_id": "apartment_rentals", "sub_sql": "where t1.booking_status_code = confirmed", "question": "Which guests have apartment bookings with status code \\\\\\\"Confirmed\\\\\\\"? Return their first names and last names.", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where booking status code equal to confirmed", "query": "SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  \\\\\\\"Confirmed\\\\\\\"", "sub_ques": "bookings with status code `` confirmed"}
{"db_id": "apartment_rentals", "sub_sql": "select t1.facility_code from apartment_facilities", "question": "Show the facility codes of apartments with more than 4 bedrooms.", "sub_sql_type": "null col col col col", "sub_sql_new": "select facility code from apartment_facilities", "query": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4", "sub_ques": "show the facility codes of apartments"}
{"db_id": "apartment_rentals", "sub_sql": "where t2.bedroom_count > 4", "question": "Show the facility codes of apartments with more than 4 bedrooms.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where bedroom count more than 4", "query": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4", "sub_ques": "apartments with more than 4 bedrooms"}
{"db_id": "apartment_rentals", "sub_sql": "select t1.facility_code from apartment_facilities", "question": "What are the facility codes of the apartments with more than four bedrooms?", "sub_sql_type": "null col col col col", "sub_sql_new": "select facility code from apartment_facilities", "query": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4", "sub_ques": "what are the facility codes of the apartments"}
{"db_id": "apartment_rentals", "sub_sql": "where t2.bedroom_count > 4", "question": "What are the facility codes of the apartments with more than four bedrooms?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where bedroom count more than 4", "query": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4", "sub_ques": "apartments with more than four bedrooms"}
{"db_id": "apartment_rentals", "sub_sql": "select sum t2.room_count from apartments", "question": "Show the total number of rooms of all apartments with facility code \\\\\\\"Gym\\\\\\\".", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select sum room count from apartments", "query": "SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  \\\\\\\"Gym\\\\\\\"", "sub_ques": "show the total number of rooms of all apartments"}
{"db_id": "apartment_rentals", "sub_sql": "where t1.facility_code = gym", "question": "Show the total number of rooms of all apartments with facility code \\\\\\\"Gym\\\\\\\".", "sub_sql_type": "null col col op op value", "sub_sql_new": "where facility code equal to gym", "query": "SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  \\\\\\\"Gym\\\\\\\"", "sub_ques": "facility code `` gym"}
{"db_id": "apartment_rentals", "sub_sql": "select sum t2.room_count from apartments", "question": "Find the total number of rooms in the apartments that have facility code \\\\\\\"Gym\\\\\\\".", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select sum room count from apartments", "query": "SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  \\\\\\\"Gym\\\\\\\"", "sub_ques": "find the total number of rooms in the apartments"}
{"db_id": "apartment_rentals", "sub_sql": "where t1.facility_code = gym", "question": "Find the total number of rooms in the apartments that have facility code \\\\\\\"Gym\\\\\\\".", "sub_sql_type": "null col col op op value", "sub_sql_new": "where facility code equal to gym", "query": "SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  \\\\\\\"Gym\\\\\\\"", "sub_ques": "facility code `` gym"}
{"db_id": "apartment_rentals", "sub_sql": "select sum t2.room_count from apartments", "question": "Show the total number of rooms of the apartments in the building with short name \\\\\\\"Columbus Square\\\\\\\".", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select sum room count from apartments", "query": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \\\\\\\"Columbus Square\\\\\\\"", "sub_ques": "show the total number of rooms of the apartments"}
{"db_id": "apartment_rentals", "sub_sql": "where t1.building_short_name = columbus square", "question": "Show the total number of rooms of the apartments in the building with short name \\\\\\\"Columbus Square\\\\\\\".", "sub_sql_type": "null col col col op op value value", "sub_sql_new": "where building short name equal to columbus square", "query": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \\\\\\\"Columbus Square\\\\\\\"", "sub_ques": "building with short name columbus square"}
{"db_id": "apartment_rentals", "sub_sql": "select sum t2.room_count from apartments", "question": "How many rooms in total are there in the apartments in the building with short name \\\\\\\"Columbus Square\\\\\\\"?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select sum room count from apartments", "query": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \\\\\\\"Columbus Square\\\\\\\"", "sub_ques": "how many rooms in total are there in the apartments"}
{"db_id": "apartment_rentals", "sub_sql": "where t1.building_short_name = columbussquare", "question": "How many rooms in total are there in the apartments in the building with short name \\\\\\\"Columbus Square\\\\\\\"?", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where building short name equal to columbussquare", "query": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \\\\\\\"Columbus Square\\\\\\\"", "sub_ques": "building with short name columbus square"}
{"db_id": "apartment_rentals", "sub_sql": "select t1.building_address from apartment_buildings", "question": "Show the addresses of the buildings that have apartments with more than 2 bathrooms.", "sub_sql_type": "null col col col col", "sub_sql_new": "select building address from apartment_buildings", "query": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2", "sub_ques": "show the addresses of the buildings"}
{"db_id": "apartment_rentals", "sub_sql": "where t2.bathroom_count > 2", "question": "Show the addresses of the buildings that have apartments with more than 2 bathrooms.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where bathroom count more than 2", "query": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2", "sub_ques": "apartments with more than 2 bathrooms"}
{"db_id": "apartment_rentals", "sub_sql": "select t1.building_address from apartment_buildings", "question": "Which buildings have apartments that have more than two bathrooms? Give me the addresses of the buildings.", "sub_sql_type": "null col col col col", "sub_sql_new": "select building address from apartment_buildings", "query": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2", "sub_ques": "give me the addresses of the buildings"}
{"db_id": "apartment_rentals", "sub_sql": "where t2.bathroom_count > 2", "question": "Which buildings have apartments that have more than two bathrooms? Give me the addresses of the buildings.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where bathroom count more than 2", "query": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2", "sub_ques": "apartments that have more than two bathrooms"}
{"db_id": "apartment_rentals", "sub_sql": "select t2.apt_type_code , t2.apt_number from apartments", "question": "Show the apartment type codes and apartment numbers in the buildings managed by \\\\\\\"Kyle\\\\\\\".", "sub_sql_type": "null col col col null col col col col", "sub_sql_new": "select apartment type code , apartment number from apartments", "query": "SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  \\\\\\\"Kyle\\\\\\\"", "sub_ques": "show the apartment type codes and apartment numbers"}
{"db_id": "apartment_rentals", "sub_sql": "where t1.building_manager = kyle", "question": "Show the apartment type codes and apartment numbers in the buildings managed by \\\\\\\"Kyle\\\\\\\".", "sub_sql_type": "null col col op op value", "sub_sql_new": "where building manager equal to kyle", "query": "SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  \\\\\\\"Kyle\\\\\\\"", "sub_ques": "buildings managed by `` kyle"}
{"db_id": "apartment_rentals", "sub_sql": "select t2.apt_type_code , t2.apt_number from apartments", "question": "What apartment type codes and apartment numbers do the buildings managed by \\\\\\\"Kyle\\\\\\\" have?", "sub_sql_type": "null col col col null col col col col", "sub_sql_new": "select apartment type code , apartment number from apartments", "query": "SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  \\\\\\\"Kyle\\\\\\\"", "sub_ques": "what apartment type codes and apartment numbers"}
{"db_id": "apartment_rentals", "sub_sql": "where t1.building_manager = kyle", "question": "What apartment type codes and apartment numbers do the buildings managed by \\\\\\\"Kyle\\\\\\\" have?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where building manager equal to kyle", "query": "SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  \\\\\\\"Kyle\\\\\\\"", "sub_ques": "buildings managed by `` kyle"}
{"db_id": "apartment_rentals", "sub_sql": "select booking_status_code , count apartment_bookings group by booking_status_code", "question": "Show the booking status code and the corresponding number of bookings.", "sub_sql_type": "null col col col null agg col", "sub_sql_new": "select booking status code , count apartment_bookings", "query": "SELECT \\\\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code", "sub_ques": "show the booking status code and the corresponding number of bookings"}
{"db_id": "apartment_rentals", "sub_sql": "select apt_number from apartments", "question": "Return all the apartment numbers sorted by the room count in ascending order.", "sub_sql_type": "null col col col col", "sub_sql_new": "select apartment number from apartments", "query": "SELECT apt_number FROM Apartments ORDER BY room_count ASC", "sub_ques": "return all the apartment numbers"}
{"db_id": "apartment_rentals", "sub_sql": "order by room_count asc", "question": "Return all the apartment numbers sorted by the room count in ascending order.", "sub_sql_type": "null null col col null", "sub_sql_new": "order by room count asc", "query": "SELECT apt_number FROM Apartments ORDER BY room_count ASC", "sub_ques": "sorted by the room count in ascending order"}
{"db_id": "apartment_rentals", "sub_sql": "order by room_count asc", "question": "Sort the apartment numbers in ascending order of room count.", "sub_sql_type": "null null col col null", "sub_sql_new": "order by room count asc", "query": "SELECT apt_number FROM Apartments ORDER BY room_count ASC", "sub_ques": "in ascending order of room count"}
{"db_id": "apartment_rentals", "sub_sql": "select apt_number from apartments", "question": "Return the apartment number with the largest number of bedrooms.", "sub_sql_type": "null col col col col", "sub_sql_new": "select apartment number from apartments", "query": "SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1", "sub_ques": "return the apartment number"}
{"db_id": "apartment_rentals", "sub_sql": "order by bedroom_count desc limit 1", "question": "Return the apartment number with the largest number of bedrooms.", "sub_sql_type": "null null col col null null limv", "sub_sql_new": "order by bedroom count desc limit 1", "query": "SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1", "sub_ques": "the largest number of bedrooms"}
{"db_id": "apartment_rentals", "sub_sql": "select apt_number from apartments", "question": "What is the apartment number of the apartment with the most beds?", "sub_sql_type": "null col col col col", "sub_sql_new": "select apartment number from apartments", "query": "SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1", "sub_ques": "what is the apartment number of the apartment"}
{"db_id": "apartment_rentals", "sub_sql": "order by bedroom_count desc limit 1", "question": "What is the apartment number of the apartment with the most beds?", "sub_sql_type": "null null col col null null limv", "sub_sql_new": "order by bedroom count desc limit 1", "query": "SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1", "sub_ques": "the apartment with the most beds"}
{"db_id": "apartment_rentals", "sub_sql": "select apt_type_code , count apartments group by apt_type_code", "question": "Show the apartment type codes and the corresponding number of apartments sorted by the number of apartments in ascending order.", "sub_sql_type": "null col col col null agg col", "sub_sql_new": "select apartment type code , count apartments", "query": "SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC", "sub_ques": "show the apartment type codes and the corresponding number of apartments"}
{"db_id": "apartment_rentals", "sub_sql": "group by apt_type_code order by count apartments asc", "question": "Show the apartment type codes and the corresponding number of apartments sorted by the number of apartments in ascending order.", "sub_sql_type": "null null agg col null", "sub_sql_new": "order by count apartments asc", "query": "SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC", "sub_ques": "the apartment type codes sorted by the number of apartments"}
{"db_id": "apartment_rentals", "sub_sql": "select apt_type_code , count * from apartments group by apt_type_code", "question": "Return each apartment type code with the number of apartments having that apartment type, in ascending order of the number of apartments.", "sub_sql_type": "null col col col null agg col col col", "sub_sql_new": "select apartment type code , count * from apartments", "query": "SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC", "sub_ques": "return each apartment type code with the number of apartments having that apartment type"}
{"db_id": "apartment_rentals", "sub_sql": "group by apt_type_code order by count apartments asc", "question": "Return each apartment type code with the number of apartments having that apartment type, in ascending order of the number of apartments.", "sub_sql_type": "null null agg col null", "sub_sql_new": "order by count apartments asc", "query": "SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC", "sub_ques": "in ascending order of the number of apartments"}
{"db_id": "apartment_rentals", "sub_sql": "select apt_type_code from apartments", "question": "Show the top 3 apartment type codes sorted by the average number of rooms in descending order.", "sub_sql_type": "null col col col col col", "sub_sql_new": "select apartment type code from apartments", "query": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3", "sub_ques": "show the apartment type codes"}
{"db_id": "apartment_rentals", "sub_sql": "group by apt_type_code order by avg room_count desc limit 3", "question": "Show the top 3 apartment type codes sorted by the average number of rooms in descending order.", "sub_sql_type": "null null agg col col null null limv", "sub_sql_new": "order by avg room count desc limit 3", "query": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3", "sub_ques": "the top 3 apartment type codes sorted by the average number of rooms"}
{"db_id": "apartment_rentals", "sub_sql": "select apt_type_code from apartments", "question": "What are the top three apartment types in terms of the average room count? Give me the", "sub_sql_type": "null col col col col col", "sub_sql_new": "select apartment type code from apartments", "query": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3", "sub_ques": "what are the apartment types"}
{"db_id": "apartment_rentals", "sub_sql": "group by apt_type_code order by avg room_count desc limit 3", "question": "What are the top three apartment types in terms of the average room count? Give me the", "sub_sql_type": "null null agg col col null null limv", "sub_sql_new": "order by avg room count desc limit 3", "query": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3", "sub_ques": "the top three apartment types in terms of the average room count"}
{"db_id": "apartment_rentals", "sub_sql": "select apt_type_code , bathroom_count , bedroom_count from apartments", "question": "Show the apartment type code that has the largest number of total rooms, together with the number of bathrooms and number of bedrooms.", "sub_sql_type": "null col col col null col col null col col col col", "sub_sql_new": "select apartment type code , bathroom count , bedroom count from apartments", "query": "SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1", "sub_ques": "show the apartment type code , together with the number of bathrooms and number of bedrooms"}
{"db_id": "apartment_rentals", "sub_sql": "group by apt_type_code order by sum room_count desc limit 1", "question": "Show the apartment type code that has the largest number of total rooms, together with the number of bathrooms and number of bedrooms.", "sub_sql_type": "null null agg col col null null limv", "sub_sql_new": "order by sum room count desc limit 1", "query": "SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1", "sub_ques": "the apartment type code that has the largest number of total rooms"}
{"db_id": "apartment_rentals", "sub_sql": "select apt_type_code , bathroom_count , bedroom_count from apartments", "question": "Which apartment type has the largest number of total rooms? Return the apartment type code, its number of bathrooms and number of bedrooms.", "sub_sql_type": "null col col col null col col null col col col col", "sub_sql_new": "select apartment type code , bathroom count , bedroom count from apartments", "query": "SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1", "sub_ques": "return the apartment type code , its number of bathrooms and number of bedrooms"}
{"db_id": "apartment_rentals", "sub_sql": "group by apt_type_code order by sum room_count desc limit 1", "question": "Which apartment type has the largest number of total rooms? Return the apartment type code, its number of bathrooms and number of bedrooms.", "sub_sql_type": "null null agg col col null null limv", "sub_sql_new": "order by sum room count desc limit 1", "query": "SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1", "sub_ques": "apartment type has the largest number of total rooms"}
{"db_id": "apartment_rentals", "sub_sql": "group by apt_type_code order by count apartment desc limit 1", "question": "Show the most common apartment type code.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count apartment desc limit 1", "query": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the most common apartment type code"}
{"db_id": "apartment_rentals", "sub_sql": "select apt_type_code from apartments", "question": "Which apartment type code appears the most often?", "sub_sql_type": "null col col col col col", "sub_sql_new": "select apartment type code from apartments", "query": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1", "sub_ques": "which apartment type code"}
{"db_id": "apartment_rentals", "sub_sql": "group by apt_type_code order by count apartment desc limit 1", "question": "Which apartment type code appears the most often?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count apartment desc limit 1", "query": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1", "sub_ques": "type code appears the most often"}
{"db_id": "apartment_rentals", "sub_sql": "select apt_type_code from apartments", "question": "Show the most common apartment type code among apartments with more than 1 bathroom.", "sub_sql_type": "null col col col col col", "sub_sql_new": "select apartment type code from apartments", "query": "SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1", "sub_ques": "show the most common apartment type code among apartments"}
{"db_id": "apartment_rentals", "sub_sql": "where bathroom_count > 1", "question": "Show the most common apartment type code among apartments with more than 1 bathroom.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where bathroom count more than 1", "query": "SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1", "sub_ques": "apartments with more than 1 bathroom"}
{"db_id": "apartment_rentals", "sub_sql": "group by apt_type_code order by count apartments desc limit 1", "question": "Show the most common apartment type code among apartments with more than 1 bathroom.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count apartments desc limit 1", "query": "SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the most common apartment type code among apartments"}
{"db_id": "apartment_rentals", "sub_sql": "select apt_type_code from apartments", "question": "Which apartment type code is the most common among apartments with more than one bathroom?", "sub_sql_type": "null col col col col col", "sub_sql_new": "select apartment type code from apartments", "query": "SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1", "sub_ques": "which apartment type code"}
{"db_id": "apartment_rentals", "sub_sql": "where bathroom_count > 1", "question": "Which apartment type code is the most common among apartments with more than one bathroom?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where bathroom count more than 1", "query": "SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1", "sub_ques": "apartments with more than one bathroom"}
{"db_id": "apartment_rentals", "sub_sql": "group by apt_type_code order by count apartments desc limit 1", "question": "Which apartment type code is the most common among apartments with more than one bathroom?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count apartments desc limit 1", "query": "SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1", "sub_ques": "apartment type code is the most common among apartments"}
{"db_id": "apartment_rentals", "sub_sql": "select apt_type_code , max room_count , min room_count from apartments", "question": "Show each apartment type code, and the maximum and minimum number of rooms for each type.", "sub_sql_type": "null col col col null agg col col null agg col col col col", "sub_sql_new": "select apartment type code , max room count , min room count from apartments", "query": "SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code", "sub_ques": "show each apartment type code , and the maximum and minimum number of rooms for each type"}
{"db_id": "apartment_rentals", "sub_sql": "select apt_type_code , max room_count , min room_count from apartments", "question": "Return each apartment type code along with the maximum and minimum number of rooms among each type.", "sub_sql_type": "null col col col null agg col col null agg col col col col", "sub_sql_new": "select apartment type code , max room count , min room count from apartments", "query": "SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code", "sub_ques": "return each apartment type code along with the maximum and minimum number of rooms among each type"}
{"db_id": "apartment_rentals", "sub_sql": "select gender_code , count guests group by gender_code", "question": "Show each gender code and the corresponding count of guests sorted by the count in descending order.", "sub_sql_type": "null col col null agg col", "sub_sql_new": "select gender code , count guests", "query": "SELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC", "sub_ques": "show each gender code and the corresponding count of guests"}
{"db_id": "apartment_rentals", "sub_sql": "group by gender_code order by count guests desc", "question": "Show each gender code and the corresponding count of guests sorted by the count in descending order.", "sub_sql_type": "null null agg col null", "sub_sql_new": "order by count guests desc", "query": "SELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC", "sub_ques": "gender code and the corresponding count of guests sorted by the count"}
{"db_id": "apartment_rentals", "sub_sql": "group by gender_code order by count guests desc", "question": "Sort the gender codes in descending order of their corresponding number of guests. Return both the gender codes and counts.", "sub_sql_type": "null null agg col null", "sub_sql_new": "order by count guests desc", "query": "SELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC", "sub_ques": "sort the gender codes in descending order of their corresponding number of guests"}
{"db_id": "apartment_rentals", "sub_sql": "select count apartments", "question": "How many apartments do not have any facility?", "sub_sql_type": "null agg col", "sub_sql_new": "select count apartments", "query": "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)", "sub_ques": "how many apartments"}
{"db_id": "apartment_rentals", "sub_sql": "select count apartments", "question": "Find the number of apartments that have no facility.", "sub_sql_type": "null agg col", "sub_sql_new": "select count apartments", "query": "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)", "sub_ques": "find the number of apartments"}
{"db_id": "game_injury", "sub_sql": "select count game", "question": "How many games are held after season 2007?", "sub_sql_type": "null agg col", "sub_sql_new": "select count game", "query": "SELECT count(*) FROM game WHERE season  >  2007", "sub_ques": "how many games"}
{"db_id": "game_injury", "sub_sql": "where season > 2007", "question": "How many games are held after season 2007?", "sub_sql_type": "null col op op value", "sub_sql_new": "where season more than 2007", "query": "SELECT count(*) FROM game WHERE season  >  2007", "sub_ques": "games are held after season 2007"}
{"db_id": "game_injury", "sub_sql": "select date from game", "question": "List the dates of games by the home team name in descending order.", "sub_sql_type": "null col col col", "sub_sql_new": "select date from game", "query": "SELECT Date FROM game ORDER BY home_team DESC", "sub_ques": "list the dates of games"}
{"db_id": "game_injury", "sub_sql": "order by home_team desc", "question": "List the dates of games by the home team name in descending order.", "sub_sql_type": "null null col null", "sub_sql_new": "order by home_team desc", "query": "SELECT Date FROM game ORDER BY home_team DESC", "sub_ques": "the home team name in descending order"}
{"db_id": "game_injury", "sub_sql": "select season , home_team , away_team from game", "question": "List the season, home team, away team of all the games.", "sub_sql_type": "null col null col null col col col", "sub_sql_new": "select season , home_team , away_team from game", "query": "SELECT season ,  home_team ,  away_team FROM game", "sub_ques": "list the season , home team , away team of all the games"}
{"db_id": "game_injury", "sub_sql": "select max home_games , min home_games , avg home_games from stadium", "question": "What are the maximum, minimum and average home games each stadium held?", "sub_sql_type": "null agg col null agg col null agg col col col", "sub_sql_new": "select max home_games , min home_games , avg home_games from stadium", "query": "SELECT max(home_games) ,  min(home_games) ,  avg(home_games) FROM stadium", "sub_ques": "what are the maximum , minimum and average home games each stadium"}
{"db_id": "game_injury", "sub_sql": "select average_attendance from stadium", "question": "What is the average attendance of stadiums with capacity percentage higher than 100%?", "sub_sql_type": "null col col col", "sub_sql_new": "select average_attendance from stadium", "query": "SELECT average_attendance FROM stadium WHERE capacity_percentage  >  100", "sub_ques": "what is the average attendance of stadiums"}
{"db_id": "game_injury", "sub_sql": "where capacity_percentage > 100", "question": "What is the average attendance of stadiums with capacity percentage higher than 100%?", "sub_sql_type": "null col op op value", "sub_sql_new": "where capacity_percentage more than 100", "query": "SELECT average_attendance FROM stadium WHERE capacity_percentage  >  100", "sub_ques": "stadiums with capacity percentage higher than 100"}
{"db_id": "game_injury", "sub_sql": "select player , number_of_matches , source from injury_accident", "question": "What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'?", "sub_sql_type": "null col null col null col col col", "sub_sql_new": "select player , number_of_matches , source from injury_accident", "query": "SELECT player ,  number_of_matches ,  SOURCE FROM injury_accident WHERE injury != 'Knee problem'", "sub_ques": "what are the player name , number of matches , and information source for players"}
{"db_id": "game_injury", "sub_sql": "where injury != kneeproblem", "question": "What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'?", "sub_sql_type": "null col op op op value", "sub_sql_new": "where injury not equal to kneeproblem", "query": "SELECT player ,  number_of_matches ,  SOURCE FROM injury_accident WHERE injury != 'Knee problem'", "sub_ques": "who do not suffer from injury of knee problem"}
{"db_id": "game_injury", "sub_sql": "select t1.season from game", "question": "What is the season of the game which causes the player 'Walter Samuel' to get injured?", "sub_sql_type": "null col col col", "sub_sql_new": "select season from game", "query": "SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id WHERE T2.player  =  'Walter Samuel'", "sub_ques": "what is the season of the game"}
{"db_id": "game_injury", "sub_sql": "where t2.player = waltersamuel", "question": "What is the season of the game which causes the player 'Walter Samuel' to get injured?", "sub_sql_type": "null col op op value", "sub_sql_new": "where player equal to waltersamuel", "query": "SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id WHERE T2.player  =  'Walter Samuel'", "sub_ques": "player walter samuel"}
{"db_id": "game_injury", "sub_sql": "select t1.id , t1.score , t1.date from game", "question": "What are the ids, scores, and dates of the games which caused at least two injury accidents?", "sub_sql_type": "null col null col null col col col", "sub_sql_new": "select id , score , date from game", "query": "SELECT T1.id ,  T1.score ,  T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2", "sub_ques": "what are the ids , scores , and dates of the games"}
{"db_id": "game_injury", "sub_sql": "group by t1.id having count injury_accident >= 2", "question": "What are the ids, scores, and dates of the games which caused at least two injury accidents?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T1.id ,  T1.score ,  T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2", "sub_ques": "ids which caused at least two injury accidents"}
{"db_id": "game_injury", "sub_sql": "select t1.id , t1.name from stadium", "question": "What are the id and name of the stadium where the most injury accidents happened?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select id , name from stadium", "query": "SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "what are the id and name of the stadium"}
{"db_id": "game_injury", "sub_sql": "group by t1.id order by count injury_accident desc limit 1", "question": "What are the id and name of the stadium where the most injury accidents happened?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count injury_accident desc limit 1", "query": "SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the stadium where the most injury accidents happened"}
{"db_id": "game_injury", "sub_sql": "select t1.id , t1.name from stadium", "question": "Find the id and name of the stadium where the largest number of injury accidents occurred.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select id , name from stadium", "query": "SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "find the id and name of the stadium"}
{"db_id": "game_injury", "sub_sql": "group by t1.id order by count injury_accident desc limit 1", "question": "Find the id and name of the stadium where the largest number of injury accidents occurred.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count injury_accident desc limit 1", "query": "SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the stadium where the largest number of injury accidents occurred"}
{"db_id": "game_injury", "sub_sql": "select t1.season , t2.name from game , stadium", "question": "In which season and which stadium did any player have an injury of 'Foot injury' or 'Knee problem'?", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select season , name from game , stadium", "query": "SELECT T1.season ,  T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.injury  =  'Foot injury' OR T3.injury  =  'Knee problem'", "sub_ques": "in which season and which stadium"}
{"db_id": "game_injury", "sub_sql": "where t3.injury = footinjury", "question": "In which season and which stadium did any player have an injury of 'Foot injury' or 'Knee problem'?", "sub_sql_type": "null col op op value", "sub_sql_new": "where injury equal to footinjury", "query": "SELECT T1.season ,  T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.injury  =  'Foot injury' OR T3.injury  =  'Knee problem'", "sub_ques": "have an injury of foot injury"}
{"db_id": "game_injury", "sub_sql": "select count distinct source from injury_accident", "question": "How many different kinds of information sources are there for injury accidents?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct source from injury_accident", "query": "SELECT count(DISTINCT SOURCE) FROM injury_accident", "sub_ques": "how many different kinds of information sources"}
{"db_id": "game_injury", "sub_sql": "select count game", "question": "How many games are free of injury accidents?", "sub_sql_type": "null agg col", "sub_sql_new": "select count game", "query": "SELECT count(*) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident )", "sub_ques": "how many games"}
{"db_id": "game_injury", "sub_sql": "select count distinct t1.injury from injury_accident", "question": "How many distinct kinds of injuries happened after season 2010?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct injury from injury_accident", "query": "SELECT count(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id  =  T2.id WHERE T2.season  >  2010", "sub_ques": "how many distinct kinds of injuries"}
{"db_id": "game_injury", "sub_sql": "where t2.season > 2010", "question": "How many distinct kinds of injuries happened after season 2010?", "sub_sql_type": "null col op op value", "sub_sql_new": "where season more than 2010", "query": "SELECT count(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id  =  T2.id WHERE T2.season  >  2010", "sub_ques": "happened after season 2010"}
{"db_id": "game_injury", "sub_sql": "select name from stadium", "question": "Which stadium name contains the substring \\\\\\\"Bank\\\\\\\"?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from stadium", "query": "SELECT name FROM stadium WHERE name LIKE \\\\\\\"%Bank%\\\\\\\"", "sub_ques": "which stadium name"}
{"db_id": "game_injury", "sub_sql": "where name like bank", "question": "Which stadium name contains the substring \\\\\\\"Bank\\\\\\\"?", "sub_sql_type": "null col op value", "sub_sql_new": "where name like bank", "query": "SELECT name FROM stadium WHERE name LIKE \\\\\\\"%Bank%\\\\\\\"", "sub_ques": "stadium name contains the substring `` bank"}
{"db_id": "game_injury", "sub_sql": "select t1.id , count stadium group by t1.id", "question": "How many games has each stadium held?", "sub_sql_type": "null col null agg col", "sub_sql_new": "select id , count stadium", "query": "SELECT T1.id ,  count(*) FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id GROUP BY T1.id", "sub_ques": "how many games has each stadium"}
{"db_id": "game_injury", "sub_sql": "select t1.date , t2.player from game , injury_accident", "question": "For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select date , player from game , injury_accident", "query": "SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC", "sub_ques": "find the date of the game and the name of the injured player in the game"}
{"db_id": "game_injury", "sub_sql": "order by t1.season desc", "question": "For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.", "sub_sql_type": "null null col null", "sub_sql_new": "order by season desc", "query": "SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC", "sub_ques": "in descending order of game season"}
{"db_id": "soccer_1", "sub_sql": "select t1.name , t2.name from country , league", "question": "List all country and league names.", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select name , name from country , league", "query": "SELECT T1.name ,  T2.name FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id", "sub_ques": "list all country and league names"}
{"db_id": "soccer_1", "sub_sql": "select count league", "question": "How many leagues are there in England?", "sub_sql_type": "null agg col", "sub_sql_new": "select count league", "query": "SELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id WHERE T1.name  =  \\\\\\\"England\\\\\\\"", "sub_ques": "how many leagues"}
{"db_id": "soccer_1", "sub_sql": "where t1.name = england", "question": "How many leagues are there in England?", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to england", "query": "SELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id WHERE T1.name  =  \\\\\\\"England\\\\\\\"", "sub_ques": "in england"}
{"db_id": "soccer_1", "sub_sql": "select avg weight from player", "question": "What is the average weight of all players?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select avg weight from player", "query": "SELECT avg(weight) FROM Player", "sub_ques": "what is the average weight of all players"}
{"db_id": "soccer_1", "sub_sql": "select max weight , min weight from player", "question": "What is the maximum and minimum weight of all players?", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select max weight , min weight from player", "query": "SELECT max(weight) ,  min(weight) FROM Player", "sub_ques": "what is the maximum and minimum weight of all players"}
{"db_id": "soccer_1", "sub_sql": "select distinct t1.player_name from player", "question": "List all player names who have an overall rating higher than the average.", "sub_sql_type": "null col col col col col", "sub_sql_new": "select distinct player name from player", "query": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating  >  ( SELECT avg(overall_rating) FROM Player_Attributes )", "sub_ques": "list all player names"}
{"db_id": "soccer_1", "sub_sql": "where t2.overall_rating > select avg overall_rating", "question": "List all player names who have an overall rating higher than the average.", "sub_sql_type": "null col col op op value value value", "sub_sql_new": "where overall rating more than select avg overall_rating", "query": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating  >  ( SELECT avg(overall_rating) FROM Player_Attributes )", "sub_ques": "overall rating higher than the average"}
{"db_id": "soccer_1", "sub_sql": "select distinct t1.player_name from player", "question": "What are the names of players who have the best dribbling?", "sub_sql_type": "null col col col col col", "sub_sql_new": "select distinct player name from player", "query": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.dribbling  =  ( SELECT max(overall_rating) FROM Player_Attributes)", "sub_ques": "what are the names of players"}
{"db_id": "soccer_1", "sub_sql": "select distinct t1.player_name from player", "question": "List the names of all players who have a crossing score higher than 90 and prefer their right foot.", "sub_sql_type": "null col col col col col", "sub_sql_new": "select distinct player name from player", "query": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.crossing  >  90 AND T2.preferred_foot  =  \\\\\\\"right\\\\\\\"", "sub_ques": "list the names of all players"}
{"db_id": "soccer_1", "sub_sql": "where t2.crossing > 90", "question": "List the names of all players who have a crossing score higher than 90 and prefer their right foot.", "sub_sql_type": "null col op op value", "sub_sql_new": "where crossing more than 90", "query": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.crossing  >  90 AND T2.preferred_foot  =  \\\\\\\"right\\\\\\\"", "sub_ques": "crossing score higher than 90"}
{"db_id": "soccer_1", "sub_sql": "select distinct t1.player_name from player", "question": "List the names of all left-footed players who have overall rating between 85 and 90.", "sub_sql_type": "null col col col col col", "sub_sql_new": "select distinct player name from player", "query": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.preferred_foot  =  \\\\\\\"left\\\\\\\" AND T2.overall_rating  >=  85 AND T2.overall_rating  <=  90", "sub_ques": "list the names of all players"}
{"db_id": "soccer_1", "sub_sql": "where t2.preferred_foot = left", "question": "List the names of all left-footed players who have overall rating between 85 and 90.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where preferred foot equal to left", "query": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.preferred_foot  =  \\\\\\\"left\\\\\\\" AND T2.overall_rating  >=  85 AND T2.overall_rating  <=  90", "sub_ques": "left-footed players"}
{"db_id": "soccer_1", "sub_sql": "select preferred_foot , avg overall_rating from player_attributes", "question": "What is the average rating for right-footed players and left-footed players?", "sub_sql_type": "null col col null agg col col col col", "sub_sql_new": "select preferred foot , avg overall rating from player_attributes", "query": "SELECT preferred_foot ,  avg(overall_rating) FROM Player_Attributes GROUP BY preferred_foot", "sub_ques": "what is the average rating for right-footed players and left-footed"}
{"db_id": "soccer_1", "sub_sql": "select preferred_foot , count player_attributes group by preferred_foot", "question": "Of all players with an overall rating greater than 80, how many are right-footed and left-footed?", "sub_sql_type": "null col col null agg col", "sub_sql_new": "select preferred foot , count player_attributes", "query": "SELECT preferred_foot ,  count(*) FROM Player_Attributes WHERE overall_rating  >  80 GROUP BY preferred_foot", "sub_ques": "how many are right-footed and left-footed"}
{"db_id": "soccer_1", "sub_sql": "where overall_rating > 80", "question": "Of all players with an overall rating greater than 80, how many are right-footed and left-footed?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where overall rating more than 80", "query": "SELECT preferred_foot ,  count(*) FROM Player_Attributes WHERE overall_rating  >  80 GROUP BY preferred_foot", "sub_ques": "overall rating greater than 80"}
{"db_id": "soccer_1", "sub_sql": "select distinct t1.player_name from player", "question": "Who are the top 3 players in terms of overall rating?", "sub_sql_type": "null col col col col col", "sub_sql_new": "select distinct player name from player", "query": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY overall_rating DESC LIMIT 3", "sub_ques": "who are the players"}
{"db_id": "soccer_1", "sub_sql": "order by overall_rating desc limit 3", "question": "Who are the top 3 players in terms of overall rating?", "sub_sql_type": "null null col col null null limv", "sub_sql_new": "order by overall rating desc limit 3", "query": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY overall_rating DESC LIMIT 3", "sub_ques": "the top 3 players in terms of overall rating"}
{"db_id": "soccer_1", "sub_sql": "select distinct t1.player_name , t1.birthday from player", "question": "List the names and birthdays of the top five players in terms of potential.", "sub_sql_type": "null col col col null col col col", "sub_sql_new": "select distinct player name , birthday from player", "query": "SELECT DISTINCT T1.player_name ,  T1.birthday FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY potential DESC LIMIT 5", "sub_ques": "list the names and birthdays of the players"}
{"db_id": "soccer_1", "sub_sql": "order by potential desc limit 5", "question": "List the names and birthdays of the top five players in terms of potential.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by potential desc limit 5", "query": "SELECT DISTINCT T1.player_name ,  T1.birthday FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY potential DESC LIMIT 5", "sub_ques": "the top five players in terms of potential"}
{"db_id": "performance_attendance", "sub_sql": "select count performance", "question": "How many performances are there?", "sub_sql_type": "null agg col", "sub_sql_new": "select count performance", "query": "SELECT count(*) FROM performance", "sub_ques": "how many performances"}
{"db_id": "performance_attendance", "sub_sql": "select host from performance", "question": "List the hosts of performances in ascending order of attendance.", "sub_sql_type": "null col col col", "sub_sql_new": "select host from performance", "query": "SELECT HOST FROM performance ORDER BY Attendance ASC", "sub_ques": "list the hosts of performances"}
{"db_id": "performance_attendance", "sub_sql": "order by attendance asc", "question": "List the hosts of performances in ascending order of attendance.", "sub_sql_type": "null null col null", "sub_sql_new": "order by attendance asc", "query": "SELECT HOST FROM performance ORDER BY Attendance ASC", "sub_ques": "in ascending order of attendance"}
{"db_id": "performance_attendance", "sub_sql": "select date , location from performance", "question": "What are the dates and locations of performances?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select date , location from performance", "query": "SELECT Date ,  LOCATION FROM performance", "sub_ques": "what are the dates and locations of performances"}
{"db_id": "performance_attendance", "sub_sql": "select attendance from performance", "question": "Show the attendances of the performances at location \\\\\\\"TD Garden\\\\\\\" or \\\\\\\"Bell Centre\\\\\\\"", "sub_sql_type": "null col col col", "sub_sql_new": "select attendance from performance", "query": "SELECT Attendance FROM performance WHERE LOCATION  =  \\\\\\\"TD Garden\\\\\\\" OR LOCATION  =  \\\\\\\"Bell Centre\\\\\\\"", "sub_ques": "show the attendances of the performances"}
{"db_id": "performance_attendance", "sub_sql": "where location = tdgarden", "question": "Show the attendances of the performances at location \\\\\\\"TD Garden\\\\\\\" or \\\\\\\"Bell Centre\\\\\\\"", "sub_sql_type": "null col op op value", "sub_sql_new": "where location equal to tdgarden", "query": "SELECT Attendance FROM performance WHERE LOCATION  =  \\\\\\\"TD Garden\\\\\\\" OR LOCATION  =  \\\\\\\"Bell Centre\\\\\\\"", "sub_ques": "performances at location td garden"}
{"db_id": "performance_attendance", "sub_sql": "select avg attendance from performance", "question": "What is the average number of attendees for performances?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select avg attendance from performance", "query": "SELECT avg(Attendance) FROM performance", "sub_ques": "what is the average number of attendees for performances"}
{"db_id": "performance_attendance", "sub_sql": "select date from performance", "question": "What is the date of the performance with the highest number of attendees?", "sub_sql_type": "null col col col", "sub_sql_new": "select date from performance", "query": "SELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1", "sub_ques": "what is the date of the performance"}
{"db_id": "performance_attendance", "sub_sql": "order by attendance desc limit 1", "question": "What is the date of the performance with the highest number of attendees?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by attendance desc limit 1", "query": "SELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1", "sub_ques": "the highest number of attendees"}
{"db_id": "performance_attendance", "sub_sql": "select location , count performance group by location", "question": "Show different locations and the number of performances at each location.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select location , count performance", "query": "SELECT LOCATION ,  COUNT(*) FROM performance GROUP BY LOCATION", "sub_ques": "show different locations and the number of performances at each location"}
{"db_id": "performance_attendance", "sub_sql": "group by location order by count performance desc limit 1", "question": "Show the most common location of performances.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count performance desc limit 1", "query": "SELECT LOCATION FROM performance GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "the most common location of performances"}
{"db_id": "performance_attendance", "sub_sql": "select location from performance", "question": "Show the locations that have at least two performances.", "sub_sql_type": "null col col col", "sub_sql_new": "select location from performance", "query": "SELECT LOCATION FROM performance GROUP BY LOCATION HAVING COUNT(*)  >=  2", "sub_ques": "show the locations that have at least two performances"}
{"db_id": "performance_attendance", "sub_sql": "group by location having count performance >= 2", "question": "Show the locations that have at least two performances.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT LOCATION FROM performance GROUP BY LOCATION HAVING COUNT(*)  >=  2", "sub_ques": "locations that have at least two performances"}
{"db_id": "performance_attendance", "sub_sql": "select t2.name , t3.location from member , performance", "question": "Show the names of members and the location of the performances they attended.", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select name , location from member , performance", "query": "SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID", "sub_ques": "show the names of members and the location of the performances"}
{"db_id": "performance_attendance", "sub_sql": "order by t2.name asc", "question": "Show the names of members and the location of performances they attended in ascending alphabetical order of their names.", "sub_sql_type": "null null col null", "sub_sql_new": "order by name asc", "query": "SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T2.Name ASC", "sub_ques": "in ascending alphabetical order of their names"}
{"db_id": "performance_attendance", "sub_sql": "select t3.date from performance", "question": "Show the dates of performances with attending members whose roles are \\\\\\\"Violin\\\\\\\".", "sub_sql_type": "null col col col", "sub_sql_new": "select date from performance", "query": "SELECT T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID WHERE T2.Role  =  \\\\\\\"Violin\\\\\\\"", "sub_ques": "show the dates of performances"}
{"db_id": "performance_attendance", "sub_sql": "where t2.role = violin", "question": "Show the dates of performances with attending members whose roles are \\\\\\\"Violin\\\\\\\".", "sub_sql_type": "null col op op value", "sub_sql_new": "where role equal to violin", "query": "SELECT T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID WHERE T2.Role  =  \\\\\\\"Violin\\\\\\\"", "sub_ques": "members whose roles are `` violin"}
{"db_id": "performance_attendance", "sub_sql": "select t2.name , t3.date from member , performance", "question": "Show the names of members and the dates of performances they attended in descending order of attendance of the performances.", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select name , date from member , performance", "query": "SELECT T2.Name ,  T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T3.Attendance DESC", "sub_ques": "show the names of members and the dates of performances"}
{"db_id": "performance_attendance", "sub_sql": "order by t3.attendance desc", "question": "Show the names of members and the dates of performances they attended in descending order of attendance of the performances.", "sub_sql_type": "null null col null", "sub_sql_new": "order by attendance desc", "query": "SELECT T2.Name ,  T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T3.Attendance DESC", "sub_ques": "order of attendance of the performances"}
{"db_id": "performance_attendance", "sub_sql": "select name from member", "question": "List the names of members who did not attend any performance.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from member", "query": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM member_attendance)", "sub_ques": "list the names of members"}
{"db_id": "college_2", "sub_sql": "select distinct building from classroom", "question": "Find the buildings which have rooms with capacity more than 50.", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct building from classroom", "query": "SELECT DISTINCT building FROM classroom WHERE capacity  >  50", "sub_ques": "find the buildings"}
{"db_id": "college_2", "sub_sql": "where capacity > 50", "question": "Find the buildings which have rooms with capacity more than 50.", "sub_sql_type": "null col op op value", "sub_sql_new": "where capacity more than 50", "query": "SELECT DISTINCT building FROM classroom WHERE capacity  >  50", "sub_ques": "capacity more than 50"}
{"db_id": "college_2", "sub_sql": "select distinct building from classroom", "question": "What are the distinct buildings with capacities of greater than 50?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct building from classroom", "query": "SELECT DISTINCT building FROM classroom WHERE capacity  >  50", "sub_ques": "what are the distinct buildings"}
{"db_id": "college_2", "sub_sql": "where capacity > 50", "question": "What are the distinct buildings with capacities of greater than 50?", "sub_sql_type": "null col op op value", "sub_sql_new": "where capacity more than 50", "query": "SELECT DISTINCT building FROM classroom WHERE capacity  >  50", "sub_ques": "capacities of greater than 50"}
{"db_id": "college_2", "sub_sql": "select count classroom", "question": "Count the number of rooms that are not in the Lamberton building.", "sub_sql_type": "null agg col", "sub_sql_new": "select count classroom", "query": "SELECT count(*) FROM classroom WHERE building != 'Lamberton'", "sub_ques": "count the number of rooms"}
{"db_id": "college_2", "sub_sql": "where building != lamberton", "question": "Count the number of rooms that are not in the Lamberton building.", "sub_sql_type": "null col op op op value", "sub_sql_new": "where building not equal to lamberton", "query": "SELECT count(*) FROM classroom WHERE building != 'Lamberton'", "sub_ques": "in the lamberton building"}
{"db_id": "college_2", "sub_sql": "select count classroom", "question": "How many classrooms are not in Lamberton?", "sub_sql_type": "null agg col", "sub_sql_new": "select count classroom", "query": "SELECT count(*) FROM classroom WHERE building != 'Lamberton'", "sub_ques": "how many classrooms"}
{"db_id": "college_2", "sub_sql": "where building != lamberton", "question": "How many classrooms are not in Lamberton?", "sub_sql_type": "null col op op op value", "sub_sql_new": "where building not equal to lamberton", "query": "SELECT count(*) FROM classroom WHERE building != 'Lamberton'", "sub_ques": "classrooms are not in lamberton"}
{"db_id": "college_2", "sub_sql": "select dept_name , building from department", "question": "What is the name and building of the departments whose budget is more than the average budget?", "sub_sql_type": "null col col null col col col", "sub_sql_new": "select department name , building from department", "query": "SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)", "sub_ques": "what is the name and building of the departments"}
{"db_id": "college_2", "sub_sql": "where budget > select avg budget", "question": "What is the name and building of the departments whose budget is more than the average budget?", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where budget more than select avg budget", "query": "SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)", "sub_ques": "budget is more than the average budget"}
{"db_id": "college_2", "sub_sql": "select dept_name , building from department", "question": "Give the name and building of the departments with greater than average budget.", "sub_sql_type": "null col col null col col col", "sub_sql_new": "select department name , building from department", "query": "SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)", "sub_ques": "give the name and building of the departments"}
{"db_id": "college_2", "sub_sql": "where budget > select avg budget", "question": "Give the name and building of the departments with greater than average budget.", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where budget more than select avg budget", "query": "SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)", "sub_ques": "with greater than average budget"}
{"db_id": "college_2", "sub_sql": "select building , room_number from classroom", "question": "Find the room number of the rooms which can sit 50 to 100 students and their buildings.", "sub_sql_type": "null col null col col col col", "sub_sql_new": "select building , room number from classroom", "query": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100", "sub_ques": "find the room number of the rooms"}
{"db_id": "college_2", "sub_sql": "select building , room_number from classroom", "question": "What are the room numbers and corresponding buildings for classrooms which can seat between 50 to 100 students?", "sub_sql_type": "null col null col col col col", "sub_sql_new": "select building , room number from classroom", "query": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100", "sub_ques": "what are the room numbers and corresponding buildings for classrooms"}
{"db_id": "college_2", "sub_sql": "select dept_name , building from department", "question": "Find the name and building of the department with the highest budget.", "sub_sql_type": "null col col null col col col", "sub_sql_new": "select department name , building from department", "query": "SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1", "sub_ques": "find the name and building of the department"}
{"db_id": "college_2", "sub_sql": "order by budget desc limit 1", "question": "Find the name and building of the department with the highest budget.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by budget desc limit 1", "query": "SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1", "sub_ques": "the highest budget"}
{"db_id": "college_2", "sub_sql": "select dept_name , building from department", "question": "What is the department name and corresponding building for the department with the greatest budget?", "sub_sql_type": "null col col null col col col", "sub_sql_new": "select department name , building from department", "query": "SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1", "sub_ques": "what is the department name and corresponding building for the department"}
{"db_id": "college_2", "sub_sql": "order by budget desc limit 1", "question": "What is the department name and corresponding building for the department with the greatest budget?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by budget desc limit 1", "query": "SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1", "sub_ques": "the greatest budget"}
{"db_id": "college_2", "sub_sql": "select name from student", "question": "What is the name of the student who has the highest total credits in the History department.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from student", "query": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1", "sub_ques": "what is the name of the student"}
{"db_id": "college_2", "sub_sql": "where dept_name = history", "question": "What is the name of the student who has the highest total credits in the History department.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where department name equal to history", "query": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1", "sub_ques": "in the history department"}
{"db_id": "college_2", "sub_sql": "order by tot_cred desc limit 1", "question": "What is the name of the student who has the highest total credits in the History department.", "sub_sql_type": "null null col col null null limv", "sub_sql_new": "order by total credits desc limit 1", "query": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1", "sub_ques": "has the highest total credits"}
{"db_id": "college_2", "sub_sql": "select name from student", "question": "Give the name of the student in the History department with the most credits.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from student", "query": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1", "sub_ques": "give the name of the student"}
{"db_id": "college_2", "sub_sql": "where dept_name = history", "question": "Give the name of the student in the History department with the most credits.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where department name equal to history", "query": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1", "sub_ques": "student in the history department"}
{"db_id": "college_2", "sub_sql": "order by tot_cred desc limit 1", "question": "Give the name of the student in the History department with the most credits.", "sub_sql_type": "null null col col null null limv", "sub_sql_new": "order by total credits desc limit 1", "query": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1", "sub_ques": "with the most credits"}
{"db_id": "college_2", "sub_sql": "select count classroom", "question": "How many rooms does the Lamberton building have?", "sub_sql_type": "null agg col", "sub_sql_new": "select count classroom", "query": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'", "sub_ques": "how many rooms"}
{"db_id": "college_2", "sub_sql": "where building = lamberton", "question": "How many rooms does the Lamberton building have?", "sub_sql_type": "null col op op value", "sub_sql_new": "where building equal to lamberton", "query": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'", "sub_ques": "lamberton building"}
{"db_id": "college_2", "sub_sql": "select count * from classroom", "question": "Count the number of classrooms in Lamberton.", "sub_sql_type": "null agg col col col", "sub_sql_new": "select count * from classroom", "query": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'", "sub_ques": "count the number of classrooms"}
{"db_id": "college_2", "sub_sql": "where building = lamberton", "question": "Count the number of classrooms in Lamberton.", "sub_sql_type": "null col op op value", "sub_sql_new": "where building equal to lamberton", "query": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'", "sub_ques": "classrooms in lamberton"}
{"db_id": "college_2", "sub_sql": "select count distinct s_id from advisor", "question": "How many students have advisors?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct s_id from advisor", "query": "SELECT count(DISTINCT s_id) FROM advisor", "sub_ques": "how many students have advisors"}
{"db_id": "college_2", "sub_sql": "select count distinct s_id from advisor", "question": "Count the number of students who have advisors.", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct s_id from advisor", "query": "SELECT count(DISTINCT s_id) FROM advisor", "sub_ques": "count the number of students who have advisors"}
{"db_id": "college_2", "sub_sql": "select count distinct dept_name from course", "question": "How many departments offer courses?", "sub_sql_type": "null agg col col col col col", "sub_sql_new": "select count distinct department name from course", "query": "SELECT count(DISTINCT dept_name) FROM course", "sub_ques": "how many departments offer courses"}
{"db_id": "college_2", "sub_sql": "select count distinct dept_name from course", "question": "Count the number of departments which offer courses.", "sub_sql_type": "null agg col col col col col", "sub_sql_new": "select count distinct department name from course", "query": "SELECT count(DISTINCT dept_name) FROM course", "sub_ques": "count the number of departments which offer courses"}
{"db_id": "college_2", "sub_sql": "select count distinct course_id from course", "question": "How many different courses offered by Physics department?", "sub_sql_type": "null agg col col col col col", "sub_sql_new": "select count distinct course id from course", "query": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'", "sub_ques": "how many different courses"}
{"db_id": "college_2", "sub_sql": "where dept_name = physics", "question": "How many different courses offered by Physics department?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where department name equal to physics", "query": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'", "sub_ques": "physics department"}
{"db_id": "college_2", "sub_sql": "select count distinct course_id from course", "question": "Count the number of courses in the Physics department.", "sub_sql_type": "null agg col col col col col", "sub_sql_new": "select count distinct course id from course", "query": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'", "sub_ques": "count the number of courses"}
{"db_id": "college_2", "sub_sql": "where dept_name = physics", "question": "Count the number of courses in the Physics department.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where department name equal to physics", "query": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'", "sub_ques": "physics department"}
{"db_id": "college_2", "sub_sql": "select t1.title from course", "question": "Find the title of courses that have two prerequisites?", "sub_sql_type": "null col col col", "sub_sql_new": "select title from course", "query": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2", "sub_ques": "find the title of courses"}
{"db_id": "college_2", "sub_sql": "group by t2.course_id having count prereq = 2", "question": "Find the title of courses that have two prerequisites?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2", "sub_ques": "courses that have two prerequisites"}
{"db_id": "college_2", "sub_sql": "select t1.title from course", "question": "What are the titles for courses with two prerequisites?", "sub_sql_type": "null col col col", "sub_sql_new": "select title from course", "query": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2", "sub_ques": "what are the titles for courses"}
{"db_id": "college_2", "sub_sql": "group by t2.course_id having count prereq = 2", "question": "What are the titles for courses with two prerequisites?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2", "sub_ques": "courses with two prerequisites"}
{"db_id": "college_2", "sub_sql": "select t1.title , t1.credits , t1.dept_name from course", "question": "Find the title, credit, and department name of courses that have more than one prerequisites?", "sub_sql_type": "null col null col null col col col col", "sub_sql_new": "select title , credits , department name from course", "query": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1", "sub_ques": "find the title , credit , and department name of courses"}
{"db_id": "college_2", "sub_sql": "group by t2.course_id having count prereq > 1", "question": "Find the title, credit, and department name of courses that have more than one prerequisites?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1", "sub_ques": "that have more than one prerequisites"}
{"db_id": "college_2", "sub_sql": "select t1.title , t1.credits , t1.dept_name from course", "question": "What is the title, credit value, and department name for courses with more than one prerequisite?", "sub_sql_type": "null col null col null col col col col", "sub_sql_new": "select title , credits , department name from course", "query": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1", "sub_ques": "what is the title , credit value , and department name for courses"}
{"db_id": "college_2", "sub_sql": "group by t2.course_id having count prereq > 1", "question": "What is the title, credit value, and department name for courses with more than one prerequisite?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1", "sub_ques": "courses with more than one prerequisite"}
{"db_id": "college_2", "sub_sql": "select count course", "question": "How many courses that do not have prerequisite?", "sub_sql_type": "null agg col", "sub_sql_new": "select count course", "query": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "sub_ques": "how many courses"}
{"db_id": "college_2", "sub_sql": "select count course", "question": "Count the number of courses without prerequisites.", "sub_sql_type": "null agg col", "sub_sql_new": "select count course", "query": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "sub_ques": "count the number of courses"}
{"db_id": "college_2", "sub_sql": "course not in prereq", "question": "Count the number of courses without prerequisites.", "sub_sql_type": "tab op op tab", "sub_sql_new": "course not in prerequisite", "query": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "sub_ques": "courses without prerequisites"}
{"db_id": "college_2", "sub_sql": "select title from course", "question": "Find the name of the courses that do not have any prerequisite?", "sub_sql_type": "null col col col", "sub_sql_new": "select title from course", "query": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "sub_ques": "find the name of the courses"}
{"db_id": "college_2", "sub_sql": "course not in prereq", "question": "Find the name of the courses that do not have any prerequisite?", "sub_sql_type": "tab op op tab", "sub_sql_new": "course not in prerequisite", "query": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "sub_ques": "courses that do not have any prerequisite"}
{"db_id": "college_2", "sub_sql": "select title from course", "question": "What are the titles of courses without prerequisites?", "sub_sql_type": "null col col col", "sub_sql_new": "select title from course", "query": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "sub_ques": "what are the titles of courses"}
{"db_id": "college_2", "sub_sql": "course not in prereq", "question": "What are the titles of courses without prerequisites?", "sub_sql_type": "tab op op tab", "sub_sql_new": "course not in prerequisite", "query": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "sub_ques": "courses without prerequisites"}
{"db_id": "college_2", "sub_sql": "select count distinct id from teaches", "question": "How many different instructors have taught some course?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct id from teaches", "query": "SELECT COUNT (DISTINCT id) FROM teaches", "sub_ques": "how many different instructors"}
{"db_id": "college_2", "sub_sql": "select count distinct id from teaches", "question": "Count the number of distinct instructors who have taught a course.", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct id from teaches", "query": "SELECT COUNT (DISTINCT id) FROM teaches", "sub_ques": "count the number of distinct instructors"}
{"db_id": "college_2", "sub_sql": "select sum budget from department", "question": "Find the total budgets of the Marketing or Finance department.", "sub_sql_type": "null agg col col col", "sub_sql_new": "select sum budget from department", "query": "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'", "sub_ques": "find the total budgets"}
{"db_id": "college_2", "sub_sql": "where dept_name = marketing or dept_name  =  finance", "question": "Find the total budgets of the Marketing or Finance department.", "sub_sql_type": "null col col op op value null col op value value value value", "sub_sql_new": "where department name equal to marketing or or dept_name  =  finance", "query": "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'", "sub_ques": "marketing or finance department"}
{"db_id": "college_2", "sub_sql": "select sum budget from department", "question": "What is the sum of budgets of the Marketing and Finance departments?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select sum budget from department", "query": "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'", "sub_ques": "what is the sum of budgets"}
{"db_id": "college_2", "sub_sql": "where dept_name = marketing or dept_name  =  finance", "question": "What is the sum of budgets of the Marketing and Finance departments?", "sub_sql_type": "null col col op op value null col op value value value value", "sub_sql_new": "where department name equal to marketing or or dept_name  =  finance", "query": "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'", "sub_ques": "marketing and finance departments"}
{"db_id": "college_2", "sub_sql": "select dept_name from instructor", "question": "Find the department name of the instructor whose name contains 'Soisalon'.", "sub_sql_type": "null col col col col", "sub_sql_new": "select department name from instructor", "query": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'", "sub_ques": "find the department name of the instructor"}
{"db_id": "college_2", "sub_sql": "where name like soisalon", "question": "Find the department name of the instructor whose name contains 'Soisalon'.", "sub_sql_type": "null col op value", "sub_sql_new": "where name like soisalon", "query": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'", "sub_ques": "find the instructor whose name"}
{"db_id": "college_2", "sub_sql": "select dept_name from instructor", "question": "What is the name of the department with an instructure who has a name like 'Soisalon'?", "sub_sql_type": "null col col col col", "sub_sql_new": "select department name from instructor", "query": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'", "sub_ques": "what is the name of the department"}
{"db_id": "college_2", "sub_sql": "where name like soisalon", "question": "What is the name of the department with an instructure who has a name like 'Soisalon'?", "sub_sql_type": "null col op value", "sub_sql_new": "where name like soisalon", "query": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'", "sub_ques": "instructure who has a name like soisalon"}
{"db_id": "college_2", "sub_sql": "select count classroom", "question": "How many rooms whose capacity is less than 50 does the Lamberton building have?", "sub_sql_type": "null agg col", "sub_sql_new": "select count classroom", "query": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50", "sub_ques": "how many rooms"}
{"db_id": "college_2", "sub_sql": "where building = lamberton", "question": "How many rooms whose capacity is less than 50 does the Lamberton building have?", "sub_sql_type": "null col op op value", "sub_sql_new": "where building equal to lamberton", "query": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50", "sub_ques": "lamberton building"}
{"db_id": "college_2", "sub_sql": "select count classroom", "question": "Count the number of rooms in Lamberton with capacity lower than 50.", "sub_sql_type": "null agg col", "sub_sql_new": "select count classroom", "query": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50", "sub_ques": "count the number of rooms"}
{"db_id": "college_2", "sub_sql": "where building = lamberton", "question": "Count the number of rooms in Lamberton with capacity lower than 50.", "sub_sql_type": "null col op op value", "sub_sql_new": "where building equal to lamberton", "query": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50", "sub_ques": "in lamberton"}
{"db_id": "college_2", "sub_sql": "select dept_name , budget from department", "question": "Find the name and budget of departments whose budgets are more than the average budget.", "sub_sql_type": "null col col null col col col", "sub_sql_new": "select department name , budget from department", "query": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)", "sub_ques": "find the name and budget of departments"}
{"db_id": "college_2", "sub_sql": "where budget > select avg budget", "question": "Find the name and budget of departments whose budgets are more than the average budget.", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where budget more than select avg budget", "query": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)", "sub_ques": "departments whose budgets are more than the average budget"}
{"db_id": "college_2", "sub_sql": "select dept_name , budget from department", "question": "What are the names and budgets of departments with budgets greater than the average?", "sub_sql_type": "null col col null col col col", "sub_sql_new": "select department name , budget from department", "query": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)", "sub_ques": "what are the names and budgets of departments"}
{"db_id": "college_2", "sub_sql": "where budget > select avg budget", "question": "What are the names and budgets of departments with budgets greater than the average?", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where budget more than select avg budget", "query": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)", "sub_ques": "departments with budgets greater than the average"}
{"db_id": "college_2", "sub_sql": "select name from instructor", "question": "what is the name of the instructor who is in Statistics department and earns the lowest salary?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from instructor", "query": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1", "sub_ques": "what is the name of the instructor"}
{"db_id": "college_2", "sub_sql": "where dept_name = statistics", "question": "what is the name of the instructor who is in Statistics department and earns the lowest salary?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where department name equal to statistics", "query": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1", "sub_ques": "instructor who is in statistics"}
{"db_id": "college_2", "sub_sql": "order by salary limit 1", "question": "what is the name of the instructor who is in Statistics department and earns the lowest salary?", "sub_sql_type": "null null col null limv", "sub_sql_new": "order by salary limit 1", "query": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1", "sub_ques": "earn the lowest salary"}
{"db_id": "college_2", "sub_sql": "select name from instructor", "question": "Give the name of the lowest earning instructor in the Statistics department.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from instructor", "query": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1", "sub_ques": "give the name of the instructor"}
{"db_id": "college_2", "sub_sql": "where dept_name = statistics", "question": "Give the name of the lowest earning instructor in the Statistics department.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where department name equal to statistics", "query": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1", "sub_ques": "instructor in the statistics department"}
{"db_id": "college_2", "sub_sql": "order by salary limit 1", "question": "Give the name of the lowest earning instructor in the Statistics department.", "sub_sql_type": "null null col null limv", "sub_sql_new": "order by salary limit 1", "query": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1", "sub_ques": "the lowest earning instructor"}
{"db_id": "college_2", "sub_sql": "select distinct t1.name from student", "question": "Find the name of students who took any class in the years of 2009 and 2010.", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct name from student", "query": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010", "sub_ques": "find the name of students"}
{"db_id": "college_2", "sub_sql": "where year = 2009 or year = 2010", "question": "Find the name of students who took any class in the years of 2009 and 2010.", "sub_sql_type": "null col op op value null col op value value", "sub_sql_new": "where year equal to 2009 or or year = 2010", "query": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010", "sub_ques": "in the years of 2009 and 2010"}
{"db_id": "college_2", "sub_sql": "select distinct t1.name from student", "question": "What are the names of the students who took classes in 2009 or 2010?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct name from student", "query": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010", "sub_ques": "what are the names of the students"}
{"db_id": "college_2", "sub_sql": "where year = 2009 or year = 2010", "question": "What are the names of the students who took classes in 2009 or 2010?", "sub_sql_type": "null col op op value null col op value value", "sub_sql_new": "where year equal to 2009 or or year = 2010", "query": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010", "sub_ques": "in 2009 or 2010"}
{"db_id": "college_2", "sub_sql": "select dept_name from course", "question": "Find the names of the top 3 departments that provide the largest amount of courses?", "sub_sql_type": "null col col col col", "sub_sql_new": "select department name from course", "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3", "sub_ques": "find the names of the departments"}
{"db_id": "college_2", "sub_sql": "group by dept_name order by count course desc limit 3", "question": "Find the names of the top 3 departments that provide the largest amount of courses?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count course desc limit 3", "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3", "sub_ques": "departments that provide the largest amount of courses"}
{"db_id": "college_2", "sub_sql": "select dept_name from course", "question": "What are the names of the 3 departments with the most courses?", "sub_sql_type": "null col col col col", "sub_sql_new": "select department name from course", "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3", "sub_ques": "what are the names of the departments"}
{"db_id": "college_2", "sub_sql": "group by dept_name order by count course desc limit 3", "question": "What are the names of the 3 departments with the most courses?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count course desc limit 3", "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3", "sub_ques": "the 3 departments with the most courses"}
{"db_id": "college_2", "sub_sql": "select dept_name from course", "question": "Find the name of the department that offers the highest total credits?", "sub_sql_type": "null col col col col", "sub_sql_new": "select department name from course", "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1", "sub_ques": "find the name of the department"}
{"db_id": "college_2", "sub_sql": "group by dept_name order by sum credits desc limit 1", "question": "Find the name of the department that offers the highest total credits?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by sum credits desc limit 1", "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1", "sub_ques": "the department that offers the highest total credits"}
{"db_id": "college_2", "sub_sql": "select dept_name from course", "question": "What is the name of the department with the most credits?", "sub_sql_type": "null col col col col", "sub_sql_new": "select department name from course", "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1", "sub_ques": "what is the name of the department"}
{"db_id": "college_2", "sub_sql": "group by dept_name order by sum credits desc limit 1", "question": "What is the name of the department with the most credits?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by sum credits desc limit 1", "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1", "sub_ques": "the name of the department with the most credits"}
{"db_id": "college_2", "sub_sql": "select title from course", "question": "List the names of all courses ordered by their titles and credits.", "sub_sql_type": "null col col col", "sub_sql_new": "select title from course", "query": "SELECT title FROM course ORDER BY title ,  credits", "sub_ques": "list the names of all courses"}
{"db_id": "college_2", "sub_sql": "order by title", "question": "List the names of all courses ordered by their titles and credits.", "sub_sql_type": "null null col", "sub_sql_new": "order by title", "query": "SELECT title FROM course ORDER BY title ,  credits", "sub_ques": "ordered by their titles"}
{"db_id": "college_2", "sub_sql": "select title from course", "question": "Given the titles of all courses, in order of titles and credits.", "sub_sql_type": "null col col col", "sub_sql_new": "select title from course", "query": "SELECT title FROM course ORDER BY title ,  credits", "sub_ques": "given titles of all courses"}
{"db_id": "college_2", "sub_sql": "order by title", "question": "Given the titles of all courses, in order of titles and credits.", "sub_sql_type": "null null col", "sub_sql_new": "order by title", "query": "SELECT title FROM course ORDER BY title ,  credits", "sub_ques": "in order of titles"}
{"db_id": "college_2", "sub_sql": "select dept_name from department", "question": "Which department has the lowest budget?", "sub_sql_type": "null col col col col", "sub_sql_new": "select department name from department", "query": "SELECT dept_name FROM department ORDER BY budget LIMIT 1", "sub_ques": "which department"}
{"db_id": "college_2", "sub_sql": "order by budget limit 1", "question": "Which department has the lowest budget?", "sub_sql_type": "null null col null limv", "sub_sql_new": "order by budget limit 1", "query": "SELECT dept_name FROM department ORDER BY budget LIMIT 1", "sub_ques": "has the lowest budget"}
{"db_id": "college_2", "sub_sql": "select dept_name from department", "question": "Give the name of the department with the lowest budget.", "sub_sql_type": "null col col col col", "sub_sql_new": "select department name from department", "query": "SELECT dept_name FROM department ORDER BY budget LIMIT 1", "sub_ques": "give the name of the department"}
{"db_id": "college_2", "sub_sql": "order by budget limit 1", "question": "Give the name of the department with the lowest budget.", "sub_sql_type": "null null col null limv", "sub_sql_new": "order by budget limit 1", "query": "SELECT dept_name FROM department ORDER BY budget LIMIT 1", "sub_ques": "with the lowest budget"}
{"db_id": "college_2", "sub_sql": "select dept_name , building from department", "question": "List the names and buildings of all departments sorted by the budget from large to small.", "sub_sql_type": "null col col null col col col", "sub_sql_new": "select department name , building from department", "query": "SELECT dept_name ,  building FROM department ORDER BY budget DESC", "sub_ques": "list the names and buildings of all departments"}
{"db_id": "college_2", "sub_sql": "order by budget desc", "question": "List the names and buildings of all departments sorted by the budget from large to small.", "sub_sql_type": "null null col null", "sub_sql_new": "order by budget desc", "query": "SELECT dept_name ,  building FROM department ORDER BY budget DESC", "sub_ques": "departments sorted by the budget from large to small"}
{"db_id": "college_2", "sub_sql": "select dept_name , building from department", "question": "What are the names and buildings of the deparments, sorted by budget descending?", "sub_sql_type": "null col col null col col col", "sub_sql_new": "select department name , building from department", "query": "SELECT dept_name ,  building FROM department ORDER BY budget DESC", "sub_ques": "what are the names and buildings"}
{"db_id": "college_2", "sub_sql": "order by budget desc", "question": "What are the names and buildings of the deparments, sorted by budget descending?", "sub_sql_type": "null null col null", "sub_sql_new": "order by budget desc", "query": "SELECT dept_name ,  building FROM department ORDER BY budget DESC", "sub_ques": "sorted by budget descending"}
{"db_id": "college_2", "sub_sql": "select name from instructor", "question": "Who is the instructor with the highest salary?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from instructor", "query": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1", "sub_ques": "who is the instructor"}
{"db_id": "college_2", "sub_sql": "order by salary desc limit 1", "question": "Who is the instructor with the highest salary?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by salary desc limit 1", "query": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1", "sub_ques": "with the highest salary"}
{"db_id": "college_2", "sub_sql": "select name from instructor", "question": "Give the name of the highest paid instructor.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from instructor", "query": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1", "sub_ques": "give the name of the instructor"}
{"db_id": "college_2", "sub_sql": "order by salary desc limit 1", "question": "Give the name of the highest paid instructor.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by salary desc limit 1", "query": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1", "sub_ques": "the highest paid instructor"}
{"db_id": "college_2", "sub_sql": "order by salary", "question": "List the information of all instructors ordered by their salary in ascending order.", "sub_sql_type": "null null col", "sub_sql_new": "order by salary", "query": "SELECT * FROM instructor ORDER BY salary", "sub_ques": "ordered by their salary in ascending order"}
{"db_id": "college_2", "sub_sql": "order by salary", "question": "Give all information regarding instructors, in order of salary from least to greatest.", "sub_sql_type": "null null col", "sub_sql_new": "order by salary", "query": "SELECT * FROM instructor ORDER BY salary", "sub_ques": "in order of salary from least to greatest"}
{"db_id": "college_2", "sub_sql": "select name , dept_name from student", "question": "Find the name of the students and their department names sorted by their total credits in ascending order.", "sub_sql_type": "null col null col col col col", "sub_sql_new": "select name , department name from student", "query": "SELECT name ,  dept_name FROM student ORDER BY tot_cred", "sub_ques": "find the name of the students and their department names"}
{"db_id": "college_2", "sub_sql": "order by tot_cred", "question": "Find the name of the students and their department names sorted by their total credits in ascending order.", "sub_sql_type": "null null col col", "sub_sql_new": "order by total credits", "query": "SELECT name ,  dept_name FROM student ORDER BY tot_cred", "sub_ques": "sorted by their total credits in ascending order"}
{"db_id": "college_2", "sub_sql": "select name , dept_name from student", "question": "What are the names of students and their respective departments, ordered by number of credits from least to greatest?", "sub_sql_type": "null col null col col col col", "sub_sql_new": "select name , department name from student", "query": "SELECT name ,  dept_name FROM student ORDER BY tot_cred", "sub_ques": "what are the names of students and their respective departments"}
{"db_id": "college_2", "sub_sql": "order by tot_cred", "question": "What are the names of students and their respective departments, ordered by number of credits from least to greatest?", "sub_sql_type": "null null col col", "sub_sql_new": "order by total credits", "query": "SELECT name ,  dept_name FROM student ORDER BY tot_cred", "sub_ques": "ordered by number of credits from least to greatest"}
{"db_id": "college_2", "sub_sql": "select t1.title , t3.name from course , instructor", "question": "list in alphabetic order all course names and their instructors' names in year 2008.", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select title , name from course , instructor", "query": "SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title", "sub_ques": "list all course names and their instructors ' names"}
{"db_id": "college_2", "sub_sql": "where year = 2008", "question": "list in alphabetic order all course names and their instructors' names in year 2008.", "sub_sql_type": "null col op op value", "sub_sql_new": "where year equal to 2008", "query": "SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title", "sub_ques": "in year 2008"}
{"db_id": "college_2", "sub_sql": "order by t1.title", "question": "list in alphabetic order all course names and their instructors' names in year 2008.", "sub_sql_type": "null null col", "sub_sql_new": "order by title", "query": "SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title", "sub_ques": "in alphabetic order all course names"}
{"db_id": "college_2", "sub_sql": "select t1.title , t3.name from course , instructor", "question": "Show all titles and their instructors' names for courses in 2008, in alphabetical order by title.", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select title , name from course , instructor", "query": "SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title", "sub_ques": "show all titles and their instructors ' names"}
{"db_id": "college_2", "sub_sql": "where year = 2008", "question": "Show all titles and their instructors' names for courses in 2008, in alphabetical order by title.", "sub_sql_type": "null col op op value", "sub_sql_new": "where year equal to 2008", "query": "SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title", "sub_ques": "in 2008"}
{"db_id": "college_2", "sub_sql": "order by t1.title", "question": "Show all titles and their instructors' names for courses in 2008, in alphabetical order by title.", "sub_sql_type": "null null col", "sub_sql_new": "order by title", "query": "SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title", "sub_ques": "in alphabetical order by title"}
{"db_id": "college_2", "sub_sql": "select t1.name from instructor", "question": "Find the name of instructors who are advising more than one student.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from instructor", "query": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1", "sub_ques": "find the name of instructors"}
{"db_id": "college_2", "sub_sql": "group by t2.i_id having count advisor > 1", "question": "Find the name of instructors who are advising more than one student.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1", "sub_ques": "instructors who are advising more than one student"}
{"db_id": "college_2", "sub_sql": "select t1.name from instructor", "question": "What are the names of instructors who advise more than one student?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from instructor", "query": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1", "sub_ques": "what are the names of instructors"}
{"db_id": "college_2", "sub_sql": "group by t2.i_id having count advisor > 1", "question": "What are the names of instructors who advise more than one student?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1", "sub_ques": "instructors who advise more than one student"}
{"db_id": "college_2", "sub_sql": "select t1.name from student", "question": "Find the name of the students who have more than one advisor?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from student", "query": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1", "sub_ques": "find the name of the students"}
{"db_id": "college_2", "sub_sql": "group by t2.s_id having count advisor > 1", "question": "Find the name of the students who have more than one advisor?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1", "sub_ques": "students who have more than one advisor"}
{"db_id": "college_2", "sub_sql": "select t1.name from student", "question": "What are the names of students who have more than one advisor?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from student", "query": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1", "sub_ques": "what are the names of students"}
{"db_id": "college_2", "sub_sql": "group by t2.s_id having count advisor > 1", "question": "What are the names of students who have more than one advisor?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1", "sub_ques": "students who have more than one advisor"}
{"db_id": "college_2", "sub_sql": "select count * , building from classroom group by building", "question": "Find the number of rooms with more than 50 capacity for each building.", "sub_sql_type": "null agg col null col col col", "sub_sql_new": "select count * , building from classroom", "query": "SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building", "sub_ques": "find the number of rooms"}
{"db_id": "college_2", "sub_sql": "where capacity > 50", "question": "Find the number of rooms with more than 50 capacity for each building.", "sub_sql_type": "null col op op value", "sub_sql_new": "where capacity more than 50", "query": "SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building", "sub_ques": "with more than 50 capacity"}
{"db_id": "college_2", "sub_sql": "select count classroom , building group by building", "question": "How many rooms in each building have a capacity of over 50?", "sub_sql_type": "null agg col null col", "sub_sql_new": "select count classroom , building", "query": "SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building", "sub_ques": "how many rooms in each building have"}
{"db_id": "college_2", "sub_sql": "where capacity > 50", "question": "How many rooms in each building have a capacity of over 50?", "sub_sql_type": "null col op op value", "sub_sql_new": "where capacity more than 50", "query": "SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building", "sub_ques": "have capacity of over 50"}
{"db_id": "college_2", "sub_sql": "select max capacity , avg capacity , building from classroom", "question": "Find the maximum and average capacity among rooms in each building.", "sub_sql_type": "null agg col null agg col null col col col", "sub_sql_new": "select max capacity , avg capacity , building from classroom", "query": "SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building", "sub_ques": "find the maximum and average capacity among rooms in each building"}
{"db_id": "college_2", "sub_sql": "select max capacity , avg capacity , building from classroom", "question": "What are the greatest and average capacity for rooms in each building?", "sub_sql_type": "null agg col null agg col null col col col", "sub_sql_new": "select max capacity , avg capacity , building from classroom", "query": "SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building", "sub_ques": "what are the greatest and average capacity for rooms in each building"}
{"db_id": "college_2", "sub_sql": "select title from course", "question": "Find the title of the course that is offered by more than one department.", "sub_sql_type": "null col col col", "sub_sql_new": "select title from course", "query": "SELECT title FROM course GROUP BY title HAVING count(*)  >  1", "sub_ques": "find the title of the course"}
{"db_id": "college_2", "sub_sql": "group by title having count course > 1", "question": "Find the title of the course that is offered by more than one department.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT title FROM course GROUP BY title HAVING count(*)  >  1", "sub_ques": "course that is offered by more than one department"}
{"db_id": "college_2", "sub_sql": "select title from course", "question": "What are the titles of courses that are offered in more than one department?", "sub_sql_type": "null col col col", "sub_sql_new": "select title from course", "query": "SELECT title FROM course GROUP BY title HAVING count(*)  >  1", "sub_ques": "what are the titles of courses"}
{"db_id": "college_2", "sub_sql": "group by title having count course > 1", "question": "What are the titles of courses that are offered in more than one department?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT title FROM course GROUP BY title HAVING count(*)  >  1", "sub_ques": "courses that are offered in more than one department"}
{"db_id": "college_2", "sub_sql": "select sum credits , dept_name from course", "question": "Find the total credits of courses provided by different department.", "sub_sql_type": "null agg col null col col col col", "sub_sql_new": "select sum credits , department name from course", "query": "SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name", "sub_ques": "find the total credits of courses provided by different department"}
{"db_id": "college_2", "sub_sql": "select sum credits , dept_name from course", "question": "How many total credits are offered by each department?", "sub_sql_type": "null agg col null col col col col", "sub_sql_new": "select sum credits , department name from course", "query": "SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name", "sub_ques": "how many total credits are offered by each department"}
{"db_id": "college_2", "sub_sql": "select min salary , dept_name from instructor", "question": "Find the minimum salary for the departments whose average salary is above the average payment of all instructors.", "sub_sql_type": "null agg col null col col col col", "sub_sql_new": "select min salary , department name from instructor", "query": "SELECT min(salary) ,  dept_name FROM instructor GROUP BY dept_name HAVING avg(salary)  >  (SELECT avg(salary) FROM instructor)", "sub_ques": "find the minimum salary for the departments"}
{"db_id": "college_2", "sub_sql": "group by dept_name having avg salary > select avg salary", "question": "Find the minimum salary for the departments whose average salary is above the average payment of all instructors.", "sub_sql_type": "null agg col", "sub_sql_new": "select avg salary", "query": "SELECT min(salary) ,  dept_name FROM instructor GROUP BY dept_name HAVING avg(salary)  >  (SELECT avg(salary) FROM instructor)", "sub_ques": "departments whose average salary is above the average payment of all instructors"}
{"db_id": "college_2", "sub_sql": "select min salary , dept_name from instructor", "question": "What is the lowest salary in departments with average salary greater than the overall average.", "sub_sql_type": "null agg col null col col col col", "sub_sql_new": "select min salary , department name from instructor", "query": "SELECT min(salary) ,  dept_name FROM instructor GROUP BY dept_name HAVING avg(salary)  >  (SELECT avg(salary) FROM instructor)", "sub_ques": "what is the lowest salary in departments with average salary"}
{"db_id": "college_2", "sub_sql": "group by dept_name having avg salary > select avg salary", "question": "What is the lowest salary in departments with average salary greater than the overall average.", "sub_sql_type": "null agg col", "sub_sql_new": "select avg salary", "query": "SELECT min(salary) ,  dept_name FROM instructor GROUP BY dept_name HAVING avg(salary)  >  (SELECT avg(salary) FROM instructor)", "sub_ques": "departments with average salary greater than the overall average"}
{"db_id": "college_2", "sub_sql": "select count section , semester , year group by semester", "question": "Find the number of courses provided in each semester and year.", "sub_sql_type": "null agg col null col null col", "sub_sql_new": "select count section , semester , year", "query": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR", "sub_ques": "find the number of courses provided in each semester and year"}
{"db_id": "college_2", "sub_sql": "select count section , semester , year group by semester", "question": "How many courses are provided in each semester and year?", "sub_sql_type": "null agg col null col null col", "sub_sql_new": "select count section , semester , year", "query": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR", "sub_ques": "how many courses are provided in each semester and year"}
{"db_id": "college_2", "sub_sql": "select year from section", "question": "Find the year which offers the largest number of courses.", "sub_sql_type": "null col col col", "sub_sql_new": "select year from section", "query": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "sub_ques": "find the year"}
{"db_id": "college_2", "sub_sql": "group by year order by count * desc limit 1", "question": "Find the year which offers the largest number of courses.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count * desc limit 1", "query": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "sub_ques": "find the year"}
{"db_id": "college_2", "sub_sql": "select year from section", "question": "Which year had the greatest number of courses?", "sub_sql_type": "null col col col", "sub_sql_new": "select year from section", "query": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "sub_ques": "which year"}
{"db_id": "college_2", "sub_sql": "group by year order by count section desc limit 1", "question": "Which year had the greatest number of courses?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count section desc limit 1", "query": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "sub_ques": "year had the greatest number of courses"}
{"db_id": "college_2", "sub_sql": "select semester , year from section", "question": "Find the year and semester when offers the largest number of courses.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select semester , year from section", "query": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1", "sub_ques": "find the year and semester"}
{"db_id": "college_2", "sub_sql": "order by count section desc limit 1", "question": "Find the year and semester when offers the largest number of courses.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count section desc limit 1", "query": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1", "sub_ques": "semester when the largest number of courses"}
{"db_id": "college_2", "sub_sql": "select semester , year from section", "question": "What is the year and semester with the most courses?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select semester , year from section", "query": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1", "sub_ques": "what is the year and semester"}
{"db_id": "college_2", "sub_sql": "order by count section desc limit 1", "question": "What is the year and semester with the most courses?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count section desc limit 1", "query": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1", "sub_ques": "semester with the most courses"}
{"db_id": "college_2", "sub_sql": "select dept_name from student", "question": "Find the name of department has the highest amount of students?", "sub_sql_type": "null col col col col", "sub_sql_new": "select department name from student", "query": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1", "sub_ques": "find the name of department"}
{"db_id": "college_2", "sub_sql": "group by dept_name order by count student desc limit 1", "question": "Find the name of department has the highest amount of students?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count student desc limit 1", "query": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the name of department has the highest amount of students"}
{"db_id": "college_2", "sub_sql": "select dept_name from student", "question": "What is the name of the deparment with the highest enrollment?", "sub_sql_type": "null col col col col", "sub_sql_new": "select department name from student", "query": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1", "sub_ques": "what is the name of the deparment"}
{"db_id": "college_2", "sub_sql": "group by dept_name order by count student desc limit 1", "question": "What is the name of the deparment with the highest enrollment?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count student desc limit 1", "query": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the name of the deparment with the highest enrollment"}
{"db_id": "college_2", "sub_sql": "select count * , dept_name from student group by dept_name", "question": "Find the total number of students in each department.", "sub_sql_type": "null agg col null col col col col", "sub_sql_new": "select count * , department name from student", "query": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name", "sub_ques": "find the total number of students in each department"}
{"db_id": "college_2", "sub_sql": "select count student , dept_name group by dept_name", "question": "How many students are in each department?", "sub_sql_type": "null agg col null col col", "sub_sql_new": "select count student , department name", "query": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name", "sub_ques": "how many students are in each department"}
{"db_id": "college_2", "sub_sql": "select semester , year from takes", "question": "Find the semester and year which has the least number of student taking any class.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select semester , year from takes", "query": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1", "sub_ques": "find the semester and year"}
{"db_id": "college_2", "sub_sql": "order by count takes limit 1", "question": "Find the semester and year which has the least number of student taking any class.", "sub_sql_type": "null null agg col null limv", "sub_sql_new": "order by count takes limit 1", "query": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1", "sub_ques": "year which has the least number of student taking any class"}
{"db_id": "college_2", "sub_sql": "select semester , year from takes", "question": "Which semeseter and year had the fewest students?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select semester , year from takes", "query": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1", "sub_ques": "which semeseter and year"}
{"db_id": "college_2", "sub_sql": "order by count takes limit 1", "question": "Which semeseter and year had the fewest students?", "sub_sql_type": "null null agg col null limv", "sub_sql_new": "order by count takes limit 1", "query": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1", "sub_ques": "the fewest students"}
{"db_id": "college_2", "sub_sql": "select i_id from advisor", "question": "What is the id of the instructor who advises of all students from History department?", "sub_sql_type": "null col col col", "sub_sql_new": "select i_id from advisor", "query": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'", "sub_ques": "what is the id of the instructor"}
{"db_id": "college_2", "sub_sql": "where t2.dept_name = history", "question": "What is the id of the instructor who advises of all students from History department?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where department name equal to history", "query": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'", "sub_ques": "students from history department"}
{"db_id": "college_2", "sub_sql": "select i_id from advisor", "question": "Give id of the instructor who advises students in the History department.", "sub_sql_type": "null col col col", "sub_sql_new": "select i_id from advisor", "query": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'", "sub_ques": "give id of the instructor"}
{"db_id": "college_2", "sub_sql": "where t2.dept_name = history", "question": "Give id of the instructor who advises students in the History department.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where department name equal to history", "query": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'", "sub_ques": "students in the history department"}
{"db_id": "college_2", "sub_sql": "select t2.name , t2.salary from instructor", "question": "Find the name and salary of the instructors who are advisors of any student from History department?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , salary from instructor", "query": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'", "sub_ques": "find the name and salary of the instructors"}
{"db_id": "college_2", "sub_sql": "where t3.dept_name = history", "question": "Find the name and salary of the instructors who are advisors of any student from History department?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where department name equal to history", "query": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'", "sub_ques": "student from history department"}
{"db_id": "college_2", "sub_sql": "select t2.name , t2.salary from instructor", "question": "What are the names and salaries of instructors who advises students in the History department?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , salary from instructor", "query": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'", "sub_ques": "what are the names and salaries of instructors"}
{"db_id": "college_2", "sub_sql": "where t3.dept_name = history", "question": "What are the names and salaries of instructors who advises students in the History department?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where department name equal to history", "query": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'", "sub_ques": "students in the history department"}
{"db_id": "college_2", "sub_sql": "select title from course", "question": "Find the name of the courses that do not have any prerequisite?", "sub_sql_type": "null col col col", "sub_sql_new": "select title from course", "query": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "sub_ques": "Find the name of the courses"}
{"db_id": "college_2", "sub_sql": "course not in prereq", "question": "Find the name of the courses that do not have any prerequisite?", "sub_sql_type": "tab op op tab", "sub_sql_new": "course not in prerequisite", "query": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "sub_ques": "courses that do not have any prerequisite"}
{"db_id": "college_2", "sub_sql": "select title from course", "question": "What are the names of courses without prerequisites?", "sub_sql_type": "null col col col", "sub_sql_new": "select title from course", "query": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "sub_ques": "what are the names of courses"}
{"db_id": "college_2", "sub_sql": "course not in prereq", "question": "What are the names of courses without prerequisites?", "sub_sql_type": "tab op op tab", "sub_sql_new": "course not in prerequisite", "query": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "sub_ques": "courses without prerequisites"}
{"db_id": "college_2", "sub_sql": "select title from course", "question": "What is the title of the prerequisite class of International Finance course?", "sub_sql_type": "null col col col", "sub_sql_new": "select title from course", "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')", "sub_ques": "what is the title of the prerequisite class"}
{"db_id": "college_2", "sub_sql": "where t2.title = internationalfinance", "question": "What is the title of the prerequisite class of International Finance course?", "sub_sql_type": "null col op op value", "sub_sql_new": "where title equal to internationalfinance", "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')", "sub_ques": "class of International Finance course"}
{"db_id": "college_2", "sub_sql": "select title from course", "question": "Give the title of the prerequisite to the course International Finance.", "sub_sql_type": "null col col col", "sub_sql_new": "select title from course", "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')", "sub_ques": "give the title of the prerequisite"}
{"db_id": "college_2", "sub_sql": "where t2.title = internationalfinance", "question": "Give the title of the prerequisite to the course International Finance.", "sub_sql_type": "null col op op value", "sub_sql_new": "where title equal to internationalfinance", "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')", "sub_ques": "the course International Finance"}
{"db_id": "college_2", "sub_sql": "select title from course", "question": "Find the title of course whose prerequisite is course Differential Geometry.", "sub_sql_type": "null col col col", "sub_sql_new": "select title from course", "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')", "sub_ques": "find the title of course"}
{"db_id": "college_2", "sub_sql": "where t2.title = differentialgeometry", "question": "Find the title of course whose prerequisite is course Differential Geometry.", "sub_sql_type": "null col op op value", "sub_sql_new": "where title equal to differentialgeometry", "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')", "sub_ques": "course whose prerequisite is course differential geometry"}
{"db_id": "college_2", "sub_sql": "select title from course", "question": "What is the title of the course with Differential Geometry as a prerequisite?", "sub_sql_type": "null col col col", "sub_sql_new": "select title from course", "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')", "sub_ques": "what is the title of the course"}
{"db_id": "college_2", "sub_sql": "where t2.title = differentialgeometry", "question": "What is the title of the course with Differential Geometry as a prerequisite?", "sub_sql_type": "null col op op value", "sub_sql_new": "where title equal to differentialgeometry", "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')", "sub_ques": "the course with differential geometry"}
{"db_id": "college_2", "sub_sql": "select name from student", "question": "Find the names of students who have taken any course in the fall semester of year 2003.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from student", "query": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)", "sub_ques": "find the names of students"}
{"db_id": "college_2", "sub_sql": "where semester = fall", "question": "Find the names of students who have taken any course in the fall semester of year 2003.", "sub_sql_type": "null col op op value", "sub_sql_new": "where semester equal to fall", "query": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)", "sub_ques": "in the fall semester"}
{"db_id": "college_2", "sub_sql": "select name from student", "question": "What are the names of students who took a course in the Fall of 2003?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from student", "query": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)", "sub_ques": "what are the names of students"}
{"db_id": "college_2", "sub_sql": "student in takes", "question": "What are the names of students who took a course in the Fall of 2003?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)", "sub_ques": "students who took a course"}
{"db_id": "college_2", "sub_sql": "where semester = fall and year = 2003", "question": "What are the names of students who took a course in the Fall of 2003?", "sub_sql_type": "null col op op value null col op value value", "sub_sql_new": "where semester equal to fall and and year = 2003", "query": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)", "sub_ques": "in the fall of 2003"}
{"db_id": "college_2", "sub_sql": "select t1.title from course", "question": "What is the title of the course that was offered at building Chandler during the fall semester in the year of 2010?", "sub_sql_type": "null col col col", "sub_sql_new": "select title from course", "query": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010", "sub_ques": "what is the title of the course"}
{"db_id": "college_2", "sub_sql": "where building = chandler", "question": "What is the title of the course that was offered at building Chandler during the fall semester in the year of 2010?", "sub_sql_type": "null col op op value", "sub_sql_new": "where building equal to chandler", "query": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010", "sub_ques": "course that was offered at building chandler"}
{"db_id": "college_2", "sub_sql": "select t1.title from course", "question": "Give the title of the course offered in Chandler during the Fall of 2010.", "sub_sql_type": "null col col col", "sub_sql_new": "select title from course", "query": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010", "sub_ques": "give the title of the course"}
{"db_id": "college_2", "sub_sql": "where building = chandler", "question": "Give the title of the course offered in Chandler during the Fall of 2010.", "sub_sql_type": "null col op op value", "sub_sql_new": "where building equal to chandler", "query": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010", "sub_ques": "course offered in chandler"}
{"db_id": "college_2", "sub_sql": "select t1.name from instructor", "question": "Find the name of the instructors who taught C Programming course before.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from instructor", "query": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'", "sub_ques": "find the name of the instructors"}
{"db_id": "college_2", "sub_sql": "where t3.title = cprogramming", "question": "Find the name of the instructors who taught C Programming course before.", "sub_sql_type": "null col op op value", "sub_sql_new": "where title equal to cprogramming", "query": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'", "sub_ques": "who taught c programming course"}
{"db_id": "college_2", "sub_sql": "select t1.name from instructor", "question": "What are the names of instructors who have taught C Programming courses?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from instructor", "query": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'", "sub_ques": "what are the names of instructors"}
{"db_id": "college_2", "sub_sql": "where t3.title = cprogramming", "question": "What are the names of instructors who have taught C Programming courses?", "sub_sql_type": "null col op op value", "sub_sql_new": "where title equal to cprogramming", "query": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'", "sub_ques": "who have taught c programming courses"}
{"db_id": "college_2", "sub_sql": "select t2.name , t2.salary from instructor", "question": "Find the name and salary of instructors who are advisors of the students from the Math department.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , salary from instructor", "query": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'", "sub_ques": "find the name and salary of instructors"}
{"db_id": "college_2", "sub_sql": "where t3.dept_name = math", "question": "Find the name and salary of instructors who are advisors of the students from the Math department.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where department name equal to math", "query": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'", "sub_ques": "students from the math department"}
{"db_id": "college_2", "sub_sql": "select t2.name , t2.salary from instructor", "question": "What are the names and salaries of instructors who advise students in the Math department?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , salary from instructor", "query": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'", "sub_ques": "what are the names and salaries of instructors"}
{"db_id": "college_2", "sub_sql": "where t3.dept_name = math", "question": "What are the names and salaries of instructors who advise students in the Math department?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where department name equal to math", "query": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'", "sub_ques": "students in the math department"}
{"db_id": "college_2", "sub_sql": "select t2.name from instructor", "question": "Find the name of instructors who are advisors of the students from the Math department, and sort the results by students' total credit.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from instructor", "query": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred", "sub_ques": "find the name of instructors"}
{"db_id": "college_2", "sub_sql": "where t3.dept_name = math", "question": "Find the name of instructors who are advisors of the students from the Math department, and sort the results by students' total credit.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where department name equal to math", "query": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred", "sub_ques": "students from the math department"}
{"db_id": "college_2", "sub_sql": "order by t3.tot_cred", "question": "Find the name of instructors who are advisors of the students from the Math department, and sort the results by students' total credit.", "sub_sql_type": "null null col col", "sub_sql_new": "order by total credits", "query": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred", "sub_ques": "sort the results by students ' total credit"}
{"db_id": "college_2", "sub_sql": "select t2.name from instructor", "question": "What are the names of all instructors who advise students in the math depart sorted by total credits of the student.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from instructor", "query": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred", "sub_ques": "what are the names of all instructors"}
{"db_id": "college_2", "sub_sql": "where t3.dept_name = math", "question": "What are the names of all instructors who advise students in the math depart sorted by total credits of the student.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where department name equal to math", "query": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred", "sub_ques": "students in the math depart"}
{"db_id": "college_2", "sub_sql": "order by t3.tot_cred", "question": "What are the names of all instructors who advise students in the math depart sorted by total credits of the student.", "sub_sql_type": "null null col col", "sub_sql_new": "order by total credits", "query": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred", "sub_ques": "sorted by total credits of the student"}
{"db_id": "college_2", "sub_sql": "select title from course", "question": "What is the course title of the prerequisite of course Mobile Computing?", "sub_sql_type": "null col col col", "sub_sql_new": "select title from course", "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')", "sub_ques": "what is the course title"}
{"db_id": "college_2", "sub_sql": "where t2.title = mobilecomputing", "question": "What is the course title of the prerequisite of course Mobile Computing?", "sub_sql_type": "null col op op value", "sub_sql_new": "where title equal to mobilecomputing", "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')", "sub_ques": "course Mobile Computing"}
{"db_id": "college_2", "sub_sql": "select title from course", "question": "What is the title of the course that is a prerequisite for Mobile Computing?", "sub_sql_type": "null col col col", "sub_sql_new": "select title from course", "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')", "sub_ques": "what is the title of the course"}
{"db_id": "college_2", "sub_sql": "where t2.title = mobilecomputing", "question": "What is the title of the course that is a prerequisite for Mobile Computing?", "sub_sql_type": "null col op op value", "sub_sql_new": "where title equal to mobilecomputing", "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')", "sub_ques": "course that is a prerequisite for Mobile Computing"}
{"db_id": "college_2", "sub_sql": "select t2.name from instructor", "question": "Find the name of instructor who is the advisor of the student who has the highest number of total credits.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from instructor", "query": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1", "sub_ques": "find the name of instructor"}
{"db_id": "college_2", "sub_sql": "order by t3.tot_cred desc limit 1", "question": "Find the name of instructor who is the advisor of the student who has the highest number of total credits.", "sub_sql_type": "null null col col null null limv", "sub_sql_new": "order by total credits desc limit 1", "query": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1", "sub_ques": "student who has the highest number of total credits"}
{"db_id": "college_2", "sub_sql": "select t2.name from instructor", "question": "What is the name of the instructor who advises the student with the greatest number of total credits?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from instructor", "query": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1", "sub_ques": "what is the name of the instructor"}
{"db_id": "college_2", "sub_sql": "order by t3.tot_cred desc limit 1", "question": "What is the name of the instructor who advises the student with the greatest number of total credits?", "sub_sql_type": "null null col col null null limv", "sub_sql_new": "order by total credits desc limit 1", "query": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1", "sub_ques": "with the greatest number of total credits"}
{"db_id": "college_2", "sub_sql": "select name from instructor", "question": "Find the name of instructors who didn't teach any courses?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from instructor", "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)", "sub_ques": "find the name of instructors"}
{"db_id": "college_2", "sub_sql": "instructor not in teaches", "question": "Find the name of instructors who didn't teach any courses?", "sub_sql_type": "tab op op tab", "sub_sql_new": "instructor not in teaches", "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)", "sub_ques": "instructors who didn't teach any courses"}
{"db_id": "college_2", "sub_sql": "select name from instructor", "question": "What are the names of instructors who didn't teach?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from instructor", "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)", "sub_ques": "what are the names of instructors"}
{"db_id": "college_2", "sub_sql": "instructor not in teaches", "question": "What are the names of instructors who didn't teach?", "sub_sql_type": "tab op op tab", "sub_sql_new": "instructor not in teaches", "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)", "sub_ques": "instructors who didn't teach"}
{"db_id": "college_2", "sub_sql": "select name from instructor", "question": "Find the names of instructors who didn't each any courses in any Spring semester.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from instructor", "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')", "sub_ques": "find the names of instructors"}
{"db_id": "college_2", "sub_sql": "instructor not in teaches", "question": "Find the names of instructors who didn't each any courses in any Spring semester.", "sub_sql_type": "tab op op tab", "sub_sql_new": "instructor not in teaches", "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')", "sub_ques": "instructors who didn't each any courses"}
{"db_id": "college_2", "sub_sql": "where semester = spring", "question": "Find the names of instructors who didn't each any courses in any Spring semester.", "sub_sql_type": "null col op op value", "sub_sql_new": "where semester equal to spring", "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')", "sub_ques": "in any spring semester"}
{"db_id": "college_2", "sub_sql": "select name from instructor", "question": "What are the names of instructors who didn't teach courses in the Spring?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from instructor", "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')", "sub_ques": "what are the names of instructors"}
{"db_id": "college_2", "sub_sql": "instructor not in teaches", "question": "What are the names of instructors who didn't teach courses in the Spring?", "sub_sql_type": "tab op op tab", "sub_sql_new": "instructor not in teaches", "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')", "sub_ques": "instructors who didn't teach courses"}
{"db_id": "college_2", "sub_sql": "where semester = spring", "question": "What are the names of instructors who didn't teach courses in the Spring?", "sub_sql_type": "null col op op value", "sub_sql_new": "where semester equal to spring", "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')", "sub_ques": "teach courses in the spring"}
{"db_id": "college_2", "sub_sql": "select dept_name from instructor", "question": "Find the name of the department which has the highest average salary of professors.", "sub_sql_type": "null col col col col", "sub_sql_new": "select department name from instructor", "query": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1", "sub_ques": "Find the name of the department"}
{"db_id": "college_2", "sub_sql": "group by dept_name order by avg salary desc limit 1", "question": "Find the name of the department which has the highest average salary of professors.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by avg salary desc limit 1", "query": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1", "sub_ques": "the name of the department which has the highest average salary"}
{"db_id": "college_2", "sub_sql": "select dept_name from instructor", "question": "Which department has the highest average instructor salary?", "sub_sql_type": "null col col col col", "sub_sql_new": "select department name from instructor", "query": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1", "sub_ques": "department has the highest average instructor"}
{"db_id": "college_2", "sub_sql": "group by dept_name order by avg salary desc limit 1", "question": "Which department has the highest average instructor salary?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by avg salary desc limit 1", "query": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1", "sub_ques": "department has the highest average instructor salary"}
{"db_id": "college_2", "sub_sql": "select avg t1.salary , count * from instructor", "question": "Find the number and averaged salary of all instructors who are in the department with the highest budget.", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select avg salary , count * from instructor", "query": "SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1", "sub_ques": "find the number and averaged salary of all instructors"}
{"db_id": "college_2", "sub_sql": "order by t2.budget desc limit 1", "question": "Find the number and averaged salary of all instructors who are in the department with the highest budget.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by budget desc limit 1", "query": "SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1", "sub_ques": "with the highest budget"}
{"db_id": "college_2", "sub_sql": "select avg t1.salary , count * from instructor", "question": "How many instructors are in the department with the highest budget, and what is their average salary?", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select avg salary , count * from instructor", "query": "SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1", "sub_ques": "how many instructors are in the department , and what is their average salary"}
{"db_id": "college_2", "sub_sql": "order by t2.budget desc limit 1", "question": "How many instructors are in the department with the highest budget, and what is their average salary?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by budget desc limit 1", "query": "SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1", "sub_ques": "department the highest budget"}
{"db_id": "college_2", "sub_sql": "select t3.title , t3.credits from course", "question": "What is the title and credits of the course that is taught in the largest classroom (with the highest capacity)?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select title , credits from course", "query": "SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)", "sub_ques": "what is the title and credits of the course"}
{"db_id": "college_2", "sub_sql": "select t3.title , t3.credits from course", "question": "Give the title and credits for the course that is taught in the classroom with the greatest capacity.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select title , credits from course", "query": "SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)", "sub_ques": "give the title and credits for the course"}
{"db_id": "college_2", "sub_sql": "select name from student", "question": "Find the name of students who didn't take any course from Biology department.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from student", "query": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')", "sub_ques": "find the name of students"}
{"db_id": "college_2", "sub_sql": "student not in takes", "question": "Find the name of students who didn't take any course from Biology department.", "sub_sql_type": "tab op op tab tab", "sub_sql_new": "student not in takes classes", "query": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')", "sub_ques": "students who didn't take any course"}
{"db_id": "college_2", "sub_sql": "where t2.dept_name = biology", "question": "Find the name of students who didn't take any course from Biology department.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where department name equal to biology", "query": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')", "sub_ques": "course from biology department"}
{"db_id": "college_2", "sub_sql": "select name from student", "question": "What are the names of students who haven't taken any Biology courses?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from student", "query": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')", "sub_ques": "what are the names of students"}
{"db_id": "college_2", "sub_sql": "student not in takes", "question": "What are the names of students who haven't taken any Biology courses?", "sub_sql_type": "tab op op tab tab", "sub_sql_new": "student not in takes classes", "query": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')", "sub_ques": "students who haven't taken any courses"}
{"db_id": "college_2", "sub_sql": "where t2.dept_name = biology", "question": "What are the names of students who haven't taken any Biology courses?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where department name equal to biology", "query": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')", "sub_ques": "taken any biology courses"}
{"db_id": "college_2", "sub_sql": "select count distinct t2.id , count distinct t3.id , t3.dept_name from student , instructor", "question": "Find the total number of students and total number of instructors for each department.", "sub_sql_type": "null agg col col null agg col col null col col col col null col", "sub_sql_new": "select count distinct id , count distinct id , department name from student , instructor", "query": "SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name", "sub_ques": "find the total number of students and total number of instructors for each department"}
{"db_id": "college_2", "sub_sql": "select count distinct t2.id , count distinct t3.id , t3.dept_name from student , instructor", "question": "How many students and instructors are in each department?", "sub_sql_type": "null agg col col null agg col col null col col col col null col", "sub_sql_new": "select count distinct id , count distinct id , department name from student , instructor", "query": "SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name", "sub_ques": "how many students and instructors are in each department"}
{"db_id": "college_2", "sub_sql": "select t1.name from student", "question": "Find the name of students who have taken the prerequisite course of the course with title International Finance.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from student", "query": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')", "sub_ques": "find the name of students"}
{"db_id": "college_2", "sub_sql": "where t3.title = internationalfinance", "question": "Find the name of students who have taken the prerequisite course of the course with title International Finance.", "sub_sql_type": "null col op op value", "sub_sql_new": "where title equal to internationalfinance", "query": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')", "sub_ques": "the course with title international finance"}
{"db_id": "college_2", "sub_sql": "select t1.name from student", "question": "What are the names of students who have taken the prerequisite for the course International Finance?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from student", "query": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')", "sub_ques": "what are the names of students"}
{"db_id": "college_2", "sub_sql": "where t3.title = internationalfinance", "question": "What are the names of students who have taken the prerequisite for the course International Finance?", "sub_sql_type": "null col op op value", "sub_sql_new": "where title equal to internationalfinance", "query": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')", "sub_ques": "the course international finance"}
{"db_id": "college_2", "sub_sql": "select name , salary from instructor", "question": "Find the name and salary of instructors whose salary is below the average salary of the instructors in the Physics department.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , salary from instructor", "query": "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')", "sub_ques": "find the name and salary of instructors"}
{"db_id": "college_2", "sub_sql": "where salary < select avg salary", "question": "Find the name and salary of instructors whose salary is below the average salary of the instructors in the Physics department.", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where salary less than select avg salary", "query": "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')", "sub_ques": "instructors whose salary is below the average salary of the instructors"}
{"db_id": "college_2", "sub_sql": "where dept_name = physics", "question": "Find the name and salary of instructors whose salary is below the average salary of the instructors in the Physics department.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where department name equal to physics", "query": "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')", "sub_ques": "in the physics"}
{"db_id": "college_2", "sub_sql": "select name , salary from instructor", "question": "What are the names and salaries for instructors who earn less than the average salary of instructors in the Physics department?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , salary from instructor", "query": "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')", "sub_ques": "what are the names and salaries for instructors"}
{"db_id": "college_2", "sub_sql": "where salary < select avg salary", "question": "What are the names and salaries for instructors who earn less than the average salary of instructors in the Physics department?", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where salary less than select avg salary", "query": "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')", "sub_ques": "instructors who earn less than the average salary of instructors"}
{"db_id": "college_2", "sub_sql": "where dept_name = physics", "question": "What are the names and salaries for instructors who earn less than the average salary of instructors in the Physics department?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where department name equal to physics", "query": "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')", "sub_ques": "in the physics"}
{"db_id": "college_2", "sub_sql": "select t3.name from student", "question": "Find the name of students who took some course offered by Statistics department.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from student", "query": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'", "sub_ques": "find the name of students"}
{"db_id": "college_2", "sub_sql": "where t1.dept_name = statistics", "question": "Find the name of students who took some course offered by Statistics department.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where department name equal to statistics", "query": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'", "sub_ques": "course offered by statistics department"}
{"db_id": "college_2", "sub_sql": "select t3.name from student", "question": "What are the names of students who have taken Statistics courses?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from student", "query": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'", "sub_ques": "what are the names of students"}
{"db_id": "college_2", "sub_sql": "where t1.dept_name = statistics", "question": "What are the names of students who have taken Statistics courses?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where department name equal to statistics", "query": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'", "sub_ques": "who have taken statistics courses"}
{"db_id": "college_2", "sub_sql": "select t2.building , t2.room_number , t2.semester , t2.year from section", "question": "Find the building, room number, semester and year of all courses offered by Psychology department sorted by course titles.", "sub_sql_type": "null col null col col null col null col col col", "sub_sql_new": "select building , room number , semester , year from section", "query": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title", "sub_ques": "find the building , room number , semester and year"}
{"db_id": "college_2", "sub_sql": "where t1.dept_name = psychology", "question": "Find the building, room number, semester and year of all courses offered by Psychology department sorted by course titles.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where department name equal to psychology", "query": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title", "sub_ques": "courses offered by psychology department"}
{"db_id": "college_2", "sub_sql": "order by t1.title", "question": "Find the building, room number, semester and year of all courses offered by Psychology department sorted by course titles.", "sub_sql_type": "null null col", "sub_sql_new": "order by title", "query": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title", "sub_ques": "sorted by course titles"}
{"db_id": "college_2", "sub_sql": "select t2.building , t2.room_number , t2.semester , t2.year from section", "question": "What are the building, room number, semester and year of courses in the Psychology department, sorted using course title?", "sub_sql_type": "null col null col col null col null col col col", "sub_sql_new": "select building , room number , semester , year from section", "query": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title", "sub_ques": "what are the building , room number , semester and year"}
{"db_id": "college_2", "sub_sql": "where t1.dept_name = psychology", "question": "What are the building, room number, semester and year of courses in the Psychology department, sorted using course title?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where department name equal to psychology", "query": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title", "sub_ques": "in the psychology department"}
{"db_id": "college_2", "sub_sql": "order by t1.title", "question": "What are the building, room number, semester and year of courses in the Psychology department, sorted using course title?", "sub_sql_type": "null null col", "sub_sql_new": "order by title", "query": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title", "sub_ques": "sorted using course"}
{"db_id": "college_2", "sub_sql": "select name from instructor", "question": "Find the names of all instructors in computer science department", "sub_sql_type": "null col col col", "sub_sql_new": "select name from instructor", "query": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'", "sub_ques": "find the names of all instructors"}
{"db_id": "college_2", "sub_sql": "where dept_name = comp.sci.", "question": "Find the names of all instructors in computer science department", "sub_sql_type": "null col col op op value", "sub_sql_new": "where department name equal to comp.sci.", "query": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'", "sub_ques": "instructors in computer science department"}
{"db_id": "college_2", "sub_sql": "select name from instructor", "question": "What are the names of all instructors in the Comp. Sci. department?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from instructor", "query": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'", "sub_ques": "what are the names of all instructors"}
{"db_id": "college_2", "sub_sql": "where dept_name = comp.sci.", "question": "What are the names of all instructors in the Comp. Sci. department?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where department name equal to comp.sci.", "query": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'", "sub_ques": "instructors in the comp . sci . department"}
{"db_id": "college_2", "sub_sql": "select name from instructor", "question": "Find the names of all instructors in Comp. Sci. department with salary > 80000.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from instructor", "query": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000", "sub_ques": "find the names of all instructors"}
{"db_id": "college_2", "sub_sql": "where dept_name = comp.sci.", "question": "Find the names of all instructors in Comp. Sci. department with salary > 80000.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where department name equal to comp.sci.", "query": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000", "sub_ques": "instructors in comp . sci . department"}
{"db_id": "college_2", "sub_sql": "select name from instructor", "question": "What are the names of the instructors in the Comp. Sci. department who earn more than 80000?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from instructor", "query": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000", "sub_ques": "what are the names of the instructors"}
{"db_id": "college_2", "sub_sql": "where dept_name = comp.sci.", "question": "What are the names of the instructors in the Comp. Sci. department who earn more than 80000?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where department name equal to comp.sci.", "query": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000", "sub_ques": "instructors in the comp . sci . department"}
{"db_id": "college_2", "sub_sql": "select name , course_id from instructor , teaches", "question": "Find the names of all instructors who have taught some course and the course_id.", "sub_sql_type": "null col null col col col col null col", "sub_sql_new": "select name , course id from instructor , teaches", "query": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID", "sub_ques": "find the names of all instructors"}
{"db_id": "college_2", "sub_sql": "select name , course_id from instructor , teaches", "question": "What are the names of all instructors who have taught a course, as well as the corresponding course id?", "sub_sql_type": "null col null col col col col null col", "sub_sql_new": "select name , course id from instructor , teaches", "query": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID", "sub_ques": "what are the names of all instructors"}
{"db_id": "college_2", "sub_sql": "select name , course_id from instructor , teaches", "question": "Find the names of all instructors in the Art department who have taught some course and the course_id.", "sub_sql_type": "null col null col col col col null col", "sub_sql_new": "select name , course id from instructor , teaches", "query": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'", "sub_ques": "find the names of all instructors in the art department"}
{"db_id": "college_2", "sub_sql": "where t1.dept_name = art", "question": "Find the names of all instructors in the Art department who have taught some course and the course_id.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where department name equal to art", "query": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'", "sub_ques": "instructors in the art department"}
{"db_id": "college_2", "sub_sql": "select name , course_id from instructor , teaches", "question": "What are the names of Art instructors who have taught a course, and the corresponding course id?", "sub_sql_type": "null col null col col col col null col", "sub_sql_new": "select name , course id from instructor , teaches", "query": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'", "sub_ques": "what are the names of art instructors and the corresponding course id"}
{"db_id": "college_2", "sub_sql": "where t1.dept_name = art", "question": "What are the names of Art instructors who have taught a course, and the corresponding course id?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where department name equal to art", "query": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'", "sub_ques": "art instructors"}
{"db_id": "college_2", "sub_sql": "select name from instructor", "question": "Find the names of all instructors whose name includes the substring \\\\u201cdar\\\\u201d.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from instructor", "query": "SELECT name FROM instructor WHERE name LIKE '%dar%'", "sub_ques": "find the names of all instructors"}
{"db_id": "college_2", "sub_sql": "where name like dar", "question": "Find the names of all instructors whose name includes the substring \\\\u201cdar\\\\u201d.", "sub_sql_type": "null col op value", "sub_sql_new": "where name like dar", "query": "SELECT name FROM instructor WHERE name LIKE '%dar%'", "sub_ques": "whose name includes the substring dar"}
{"db_id": "college_2", "sub_sql": "select name from instructor", "question": "What are the names of all instructors with names that include \\\\\\\"dar\\\\\\\"?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from instructor", "query": "SELECT name FROM instructor WHERE name LIKE '%dar%'", "sub_ques": "what are the names of all instructors"}
{"db_id": "college_2", "sub_sql": "where name like dar", "question": "What are the names of all instructors with names that include \\\\\\\"dar\\\\\\\"?", "sub_sql_type": "null col op value", "sub_sql_new": "where name like dar", "query": "SELECT name FROM instructor WHERE name LIKE '%dar%'", "sub_ques": "names of all instructors with names that include `` dar"}
{"db_id": "college_2", "sub_sql": "select distinct name from instructor", "question": "List in alphabetic order the names of all distinct instructors.", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct name from instructor", "query": "SELECT DISTINCT name FROM  instructor ORDER BY name", "sub_ques": "list names of all distinct"}
{"db_id": "college_2", "sub_sql": "order by name", "question": "List in alphabetic order the names of all distinct instructors.", "sub_sql_type": "null null col", "sub_sql_new": "order by name", "query": "SELECT DISTINCT name FROM  instructor ORDER BY name", "sub_ques": "in alphabetic order the names"}
{"db_id": "college_2", "sub_sql": "select distinct name from instructor", "question": "List the distinct names of the instructors, ordered by name.", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct name from instructor", "query": "SELECT DISTINCT name FROM  instructor ORDER BY name", "sub_ques": "list the distinct names of the instructors"}
{"db_id": "college_2", "sub_sql": "order by name", "question": "List the distinct names of the instructors, ordered by name.", "sub_sql_type": "null null col", "sub_sql_new": "order by name", "query": "SELECT DISTINCT name FROM  instructor ORDER BY name", "sub_ques": "ordered by name"}
{"db_id": "college_2", "sub_sql": "select distinct salary from instructor", "question": "Find the salaries of all distinct instructors that are less than the largest salary.", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct salary from instructor", "query": "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)", "sub_ques": "find the salaries of all distinct"}
{"db_id": "college_2", "sub_sql": "where salary < select max salary", "question": "Find the salaries of all distinct instructors that are less than the largest salary.", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where salary less than select max salary", "query": "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)", "sub_ques": "instructors that are less than the largest salary"}
{"db_id": "college_2", "sub_sql": "select distinct salary from instructor", "question": "What are the distinct salaries of all instructors who earned less than the maximum salary?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct salary from instructor", "query": "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)", "sub_ques": "what are the distinct salaries of all"}
{"db_id": "college_2", "sub_sql": "where salary < select max salary", "question": "What are the distinct salaries of all instructors who earned less than the maximum salary?", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where salary less than select max salary", "query": "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)", "sub_ques": "instructors who earned less than the maximum salary"}
{"db_id": "college_2", "sub_sql": "select count distinct id from teaches", "question": "Find the total number of instructors who teach a course in the Spring 2010 semester.", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct id from teaches", "query": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010", "sub_ques": "find the total number of instructors"}
{"db_id": "college_2", "sub_sql": "where semester = spring and year = 2010", "question": "Find the total number of instructors who teach a course in the Spring 2010 semester.", "sub_sql_type": "null col op op value null col op value value", "sub_sql_new": "where semester equal to spring and and year = 2010", "query": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010", "sub_ques": "teach a course in the spring 2010 semester"}
{"db_id": "college_2", "sub_sql": "select count distinct id from teaches", "question": "How many instructors teach a course in the Spring of 2010?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct id from teaches", "query": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010", "sub_ques": "how many instructors teach"}
{"db_id": "college_2", "sub_sql": "where semester = spring and year = 2010", "question": "How many instructors teach a course in the Spring of 2010?", "sub_sql_type": "null col op op value null col op value value", "sub_sql_new": "where semester equal to spring and and year = 2010", "query": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010", "sub_ques": "teach a course in the spring of 2010"}
{"db_id": "college_2", "sub_sql": "select dept_name , avg salary from instructor", "question": "Find the names and average salaries of all departments whose average salary is greater than 42000.", "sub_sql_type": "null col col null agg col col col", "sub_sql_new": "select department name , avg salary from instructor", "query": "SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000", "sub_ques": "find the names and average salaries of all departments"}
{"db_id": "college_2", "sub_sql": "group by dept_name having avg salary > 42000", "question": "Find the names and average salaries of all departments whose average salary is greater than 42000.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000", "sub_ques": "departments whose average salary is greater than 42000"}
{"db_id": "college_2", "sub_sql": "select dept_name , avg salary from instructor", "question": "What are the names and average salaries for departments with average salary higher than 42000?", "sub_sql_type": "null col col null agg col col col", "sub_sql_new": "select department name , avg salary from instructor", "query": "SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000", "sub_ques": "what are the names and average salaries for departments"}
{"db_id": "college_2", "sub_sql": "group by dept_name having avg salary > 42000", "question": "What are the names and average salaries for departments with average salary higher than 42000?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000", "sub_ques": "departments with average salary higher than 42000"}
{"db_id": "college_2", "sub_sql": "select name from instructor", "question": "Find names of instructors with salary greater than that of some (at least one) instructor in the Biology department.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from instructor", "query": "SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')", "sub_ques": "find names of instructors"}
{"db_id": "college_2", "sub_sql": "where salary > select min salary", "question": "Find names of instructors with salary greater than that of some (at least one) instructor in the Biology department.", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where salary more than select min salary", "query": "SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')", "sub_ques": "salary greater than that of some ( at least one ) instructor"}
{"db_id": "college_2", "sub_sql": "where dept_name = biology", "question": "Find names of instructors with salary greater than that of some (at least one) instructor in the Biology department.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where department name equal to biology", "query": "SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')", "sub_ques": "in the biology department"}
{"db_id": "college_2", "sub_sql": "select name from instructor", "question": "What are the names of instructors who earn more than at least one instructor from the Biology department?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from instructor", "query": "SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')", "sub_ques": "what are the names of instructors"}
{"db_id": "college_2", "sub_sql": "where salary > select min salary", "question": "What are the names of instructors who earn more than at least one instructor from the Biology department?", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where salary more than select min salary", "query": "SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')", "sub_ques": "who earn more than at least one instructor"}
{"db_id": "college_2", "sub_sql": "where dept_name = biology", "question": "What are the names of instructors who earn more than at least one instructor from the Biology department?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where department name equal to biology", "query": "SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')", "sub_ques": "from the biology department"}
{"db_id": "college_2", "sub_sql": "select name from instructor", "question": "Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from instructor", "query": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')", "sub_ques": "find the names of all instructors"}
{"db_id": "college_2", "sub_sql": "where salary > select max salary", "question": "Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department.", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where salary more than select max salary", "query": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')", "sub_ques": "whose salary is greater than the salary of all instructors"}
{"db_id": "college_2", "sub_sql": "where dept_name = biology", "question": "Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where department name equal to biology", "query": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')", "sub_ques": "in the biology department"}
{"db_id": "college_2", "sub_sql": "select name from instructor", "question": "What are the names of all instructors with a higher salary than any of the instructors in the Biology department?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from instructor", "query": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')", "sub_ques": "what are the names of all instructors"}
{"db_id": "college_2", "sub_sql": "where salary > select max salary", "question": "What are the names of all instructors with a higher salary than any of the instructors in the Biology department?", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where salary more than select max salary", "query": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')", "sub_ques": "instructors with a higher salary than any of the instructors"}
{"db_id": "college_2", "sub_sql": "where dept_name = biology", "question": "What are the names of all instructors with a higher salary than any of the instructors in the Biology department?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where department name equal to biology", "query": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')", "sub_ques": "in the biology department"}
{"db_id": "debate", "sub_sql": "select count * from debate", "question": "How many debates are there?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select count * from debate", "query": "SELECT count(*) FROM debate", "sub_ques": "how many debates are there"}
{"db_id": "debate", "sub_sql": "select venue from debate", "question": "List the venues of debates in ascending order of the number of audience.", "sub_sql_type": "null col col col", "sub_sql_new": "select venue from debate", "query": "SELECT Venue FROM debate ORDER BY Num_of_Audience ASC", "sub_ques": "list the venues of debates"}
{"db_id": "debate", "sub_sql": "order by num_of_audience asc", "question": "List the venues of debates in ascending order of the number of audience.", "sub_sql_type": "null null col null", "sub_sql_new": "order by num_of_audience asc", "query": "SELECT Venue FROM debate ORDER BY Num_of_Audience ASC", "sub_ques": "in ascending order of the number of audience"}
{"db_id": "debate", "sub_sql": "select date , venue from debate", "question": "What are the date and venue of each debate?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select date , venue from debate", "query": "SELECT Date ,  Venue FROM debate", "sub_ques": "what are the date and venue of each debate"}
{"db_id": "debate", "sub_sql": "select date from debate", "question": "List the dates of debates with number of audience bigger than 150", "sub_sql_type": "null col col col", "sub_sql_new": "select date from debate", "query": "SELECT Date FROM debate WHERE Num_of_Audience  >  150", "sub_ques": "list the dates of debates"}
{"db_id": "debate", "sub_sql": "where num_of_audience > 150", "question": "List the dates of debates with number of audience bigger than 150", "sub_sql_type": "null col op op value", "sub_sql_new": "where num_of_audience more than 150", "query": "SELECT Date FROM debate WHERE Num_of_Audience  >  150", "sub_ques": "debates with number of audience bigger than 150"}
{"db_id": "debate", "sub_sql": "select name from people", "question": "Show the names of people aged either 35 or 36.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from people", "query": "SELECT Name FROM  people WHERE Age  =  35 OR Age  =  36", "sub_ques": "show the names of people"}
{"db_id": "debate", "sub_sql": "where age = 35 or age = 36", "question": "Show the names of people aged either 35 or 36.", "sub_sql_type": "null col op op value null col op value value", "sub_sql_new": "where age equal to 35 or or age = 36", "query": "SELECT Name FROM  people WHERE Age  =  35 OR Age  =  36", "sub_ques": "people aged either 35 or 36"}
{"db_id": "debate", "sub_sql": "select party from people", "question": "What is the party of the youngest people?", "sub_sql_type": "null col col col", "sub_sql_new": "select party from people", "query": "SELECT Party FROM people ORDER BY Age ASC LIMIT 1", "sub_ques": "what is the party"}
{"db_id": "debate", "sub_sql": "order by age asc limit 1", "question": "What is the party of the youngest people?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by age asc limit 1", "query": "SELECT Party FROM people ORDER BY Age ASC LIMIT 1", "sub_ques": "the youngest people"}
{"db_id": "debate", "sub_sql": "select party , count people group by party", "question": "Show different parties of people along with the number of people in each party.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select party , count people", "query": "SELECT Party ,  COUNT(*) FROM people GROUP BY Party", "sub_ques": "show different parties of people along with the number of people in each party"}
{"db_id": "debate", "sub_sql": "select party from people", "question": "Show the party that has the most people.", "sub_sql_type": "null col col col", "sub_sql_new": "select party from people", "query": "SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "show the party"}
{"db_id": "debate", "sub_sql": "group by party order by count people desc limit 1", "question": "Show the party that has the most people.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count people desc limit 1", "query": "SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "the party that has the most people"}
{"db_id": "debate", "sub_sql": "select distinct venue from debate", "question": "Show the distinct venues of debates", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct venue from debate", "query": "SELECT DISTINCT Venue FROM debate", "sub_ques": "show the distinct venues of debates"}
{"db_id": "debate", "sub_sql": "select t3.name , t2.date , t2.venue from people , debate", "question": "Show the names of people, and dates and venues of debates they are on the affirmative side.", "sub_sql_type": "null col null col null col col col null col", "sub_sql_new": "select name , date , venue from people , debate", "query": "SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID", "sub_ques": "show the names of people , and dates and venues of debates"}
{"db_id": "debate", "sub_sql": "select t3.name , t2.date , t2.venue from people , debate", "question": "Show the names of people, and dates and venues of debates they are on the negative side, ordered in ascending alphabetical order of name.", "sub_sql_type": "null col null col null col col col null col", "sub_sql_new": "select name , date , venue from people , debate", "query": "SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Negative  =  T3.People_ID ORDER BY T3.Name ASC", "sub_ques": "show the names of people , and dates and venues of debates"}
{"db_id": "debate", "sub_sql": "order by t3.name asc", "question": "Show the names of people, and dates and venues of debates they are on the negative side, ordered in ascending alphabetical order of name.", "sub_sql_type": "null null col null", "sub_sql_new": "order by name asc", "query": "SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Negative  =  T3.People_ID ORDER BY T3.Name ASC", "sub_ques": "ordered in ascending alphabetical order of name"}
{"db_id": "debate", "sub_sql": "select t3.name from people", "question": "Show the names of people that are on affirmative side of debates with number of audience bigger than 200.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from people", "query": "SELECT T3.Name FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID WHERE T2.Num_of_Audience  >  200", "sub_ques": "show the names of people"}
{"db_id": "debate", "sub_sql": "where t2.num_of_audience > 200", "question": "Show the names of people that are on affirmative side of debates with number of audience bigger than 200.", "sub_sql_type": "null col op op value", "sub_sql_new": "where num_of_audience more than 200", "query": "SELECT T3.Name FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID WHERE T2.Num_of_Audience  >  200", "sub_ques": "debates with number of audience bigger than 200"}
{"db_id": "debate", "sub_sql": "select t2.name , count ebate_people group by t2.name", "question": "Show the names of people and the number of times they have been on the affirmative side of debates.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select name , count ebate_people", "query": "SELECT T2.Name ,  COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative  =  T2.People_ID GROUP BY T2.Name", "sub_ques": "show the names of people and the number of times they have been"}
{"db_id": "debate", "sub_sql": "select t2.name from people", "question": "Show the names of people who have been on the negative side of debates at least twice.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from people", "query": "SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "sub_ques": "show the names of people"}
{"db_id": "debate", "sub_sql": "group by t2.name having count ebate_people >= 2", "question": "Show the names of people who have been on the negative side of debates at least twice.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "sub_ques": "names of people who have been on the negative side of debates at least"}
{"db_id": "debate", "sub_sql": "select name from people", "question": "List the names of people that have not been on the affirmative side of debates.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from people", "query": "SELECT Name FROM people WHERE People_id NOT IN (SELECT Affirmative FROM debate_people)", "sub_ques": "list the names of people"}
{"db_id": "insurance_and_eClaims", "sub_sql": "select customer_details from customers", "question": "List the names of all the customers in alphabetical order.", "sub_sql_type": "null col col col", "sub_sql_new": "select customer_details from customers", "query": "SELECT customer_details FROM customers ORDER BY customer_details", "sub_ques": "List the names of all the customers"}
{"db_id": "insurance_and_eClaims", "sub_sql": "order by customer_details", "question": "List the names of all the customers in alphabetical order.", "sub_sql_type": "null null col", "sub_sql_new": "order by customer_details", "query": "SELECT customer_details FROM customers ORDER BY customer_details", "sub_ques": "the customers in alphabetical order"}
{"db_id": "insurance_and_eClaims", "sub_sql": "select customer_details from customers", "question": "Sort the customer names in alphabetical order.", "sub_sql_type": "null col col col", "sub_sql_new": "select customer_details from customers", "query": "SELECT customer_details FROM customers ORDER BY customer_details", "sub_ques": "the customer names"}
{"db_id": "insurance_and_eClaims", "sub_sql": "order by customer_details", "question": "Sort the customer names in alphabetical order.", "sub_sql_type": "null null col", "sub_sql_new": "order by customer_details", "query": "SELECT customer_details FROM customers ORDER BY customer_details", "sub_ques": "sort the customer names in alphabetical order"}
{"db_id": "insurance_and_eClaims", "sub_sql": "select policy_type_code from policies", "question": "Find all the policy type codes associated with the customer \\\\\\\"Dayana Robel\\\\\\\"", "sub_sql_type": "null col col col", "sub_sql_new": "select policy_type_code from policies", "query": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \\\\\\\"Dayana Robel\\\\\\\"", "sub_ques": "find all the policy type codes"}
{"db_id": "insurance_and_eClaims", "sub_sql": "where t2.customer_details = dayanarobel", "question": "Find all the policy type codes associated with the customer \\\\\\\"Dayana Robel\\\\\\\"", "sub_sql_type": "null col op op value", "sub_sql_new": "where customer_details equal to dayanarobel", "query": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \\\\\\\"Dayana Robel\\\\\\\"", "sub_ques": "with the customer `` dayana robel"}
{"db_id": "insurance_and_eClaims", "sub_sql": "select policy_type_code from policies", "question": "What are the type codes of the policies used by the customer \\\\\\\"Dayana Robel\\\\\\\"?", "sub_sql_type": "null col col col", "sub_sql_new": "select policy_type_code from policies", "query": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \\\\\\\"Dayana Robel\\\\\\\"", "sub_ques": "what are the type codes of the policies"}
{"db_id": "insurance_and_eClaims", "sub_sql": "where t2.customer_details = dayanarobel", "question": "What are the type codes of the policies used by the customer \\\\\\\"Dayana Robel\\\\\\\"?", "sub_sql_type": "null col op op value", "sub_sql_new": "where customer_details equal to dayanarobel", "query": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \\\\\\\"Dayana Robel\\\\\\\"", "sub_ques": "used by the customer `` dayana robel"}
{"db_id": "insurance_and_eClaims", "sub_sql": "select policy_type_code from policies", "question": "Which type of policy is most frequently used? Give me the policy type code.", "sub_sql_type": "null col col col", "sub_sql_new": "select policy_type_code from policies", "query": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1", "sub_ques": "give me the policy type code"}
{"db_id": "insurance_and_eClaims", "sub_sql": "group by policy_type_code order by count * desc limit 1", "question": "Which type of policy is most frequently used? Give me the policy type code.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count * desc limit 1", "query": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1", "sub_ques": "type of policy is most frequently used"}
{"db_id": "insurance_and_eClaims", "sub_sql": "select policy_type_code from policies", "question": "Find the type code of the most frequently used policy.", "sub_sql_type": "null col col col", "sub_sql_new": "select policy_type_code from policies", "query": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1", "sub_ques": "type code of the most frequently used policy"}
{"db_id": "insurance_and_eClaims", "sub_sql": "group by policy_type_code order by count * desc limit 1", "question": "Find the type code of the most frequently used policy.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count * desc limit 1", "query": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the type code of the most frequently used policy"}
{"db_id": "insurance_and_eClaims", "sub_sql": "select policy_type_code from policies", "question": "Find all the policy types that are used by more than 2 customers.", "sub_sql_type": "null col col col", "sub_sql_new": "select policy_type_code from policies", "query": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  2", "sub_ques": "find all the policy types"}
{"db_id": "insurance_and_eClaims", "sub_sql": "group by policy_type_code having count * > 2", "question": "Find all the policy types that are used by more than 2 customers.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  2", "sub_ques": "policy types that are used by more than 2"}
{"db_id": "insurance_and_eClaims", "sub_sql": "select policy_type_code from policies", "question": "Which types of policy are chosen by more than 2 customers? Give me the policy type codes.", "sub_sql_type": "null col col col", "sub_sql_new": "select policy_type_code from policies", "query": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  2", "sub_ques": "give me the policy type codes"}
{"db_id": "insurance_and_eClaims", "sub_sql": "group by policy_type_code having count * > 2", "question": "Which types of policy are chosen by more than 2 customers? Give me the policy type codes.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  2", "sub_ques": "policy are chosen by more than 2 customers"}
{"db_id": "insurance_and_eClaims", "sub_sql": "select sum amount_piad , avg amount_piad from claim_headers", "question": "Find the total and average amount paid in claim headers.", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select sum amount_piad , avg amount_piad from claim_headers", "query": "SELECT sum(amount_piad) ,  avg(amount_piad) FROM claim_headers", "sub_ques": "find the total and average amount paid"}
{"db_id": "insurance_and_eClaims", "sub_sql": "select sum amount_piad , avg amount_piad from claim_headers", "question": "What are the total amount and average amount paid in claim headers?", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select sum amount_piad , avg amount_piad from claim_headers", "query": "SELECT sum(amount_piad) ,  avg(amount_piad) FROM claim_headers", "sub_ques": "what are the total amount and average amount paid"}
{"db_id": "insurance_and_eClaims", "sub_sql": "select sum t1.amount_claimed from claim_headers", "question": "Find the total amount claimed in the most recently created document.", "sub_sql_type": "null agg col col col", "sub_sql_new": "select sum amount_claimed from claim_headers", "query": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)", "sub_ques": "find the total amount claimed"}
{"db_id": "insurance_and_eClaims", "sub_sql": "order by created_date limit 1", "question": "Find the total amount claimed in the most recently created document.", "sub_sql_type": "null null col null limv", "sub_sql_new": "order by created_date limit 1", "query": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)", "sub_ques": "the most recently created"}
{"db_id": "insurance_and_eClaims", "sub_sql": "select sum t1.amount_claimed from claim_headers", "question": "How much amount in total were claimed in the most recently created document?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select sum amount_claimed from claim_headers", "query": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)", "sub_ques": "how much amount in total"}
{"db_id": "insurance_and_eClaims", "sub_sql": "order by created_date limit 1", "question": "How much amount in total were claimed in the most recently created document?", "sub_sql_type": "null null col null limv", "sub_sql_new": "order by created_date limit 1", "query": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)", "sub_ques": "the most recently created"}
{"db_id": "insurance_and_eClaims", "sub_sql": "select t3.customer_details from customers", "question": "What is the name of the customer who has made the largest amount of claim in a single claim?", "sub_sql_type": "null col col col", "sub_sql_new": "select customer_details from customers", "query": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)", "sub_ques": "what is the name of the customer"}
{"db_id": "insurance_and_eClaims", "sub_sql": "where t1.amount_claimed = select max amount_claimed", "question": "What is the name of the customer who has made the largest amount of claim in a single claim?", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where amount_claimed equal to select max amount_claimed", "query": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)", "sub_ques": "who has made the largest amount of claim"}
{"db_id": "insurance_and_eClaims", "sub_sql": "select t3.customer_details from customers", "question": "Which customer made the largest amount of claim in a single claim? Return the customer details.", "sub_sql_type": "null col col col", "sub_sql_new": "select customer_details from customers", "query": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)", "sub_ques": "return the customer details"}
{"db_id": "insurance_and_eClaims", "sub_sql": "where t1.amount_claimed = select max amount_claimed", "question": "Which customer made the largest amount of claim in a single claim? Return the customer details.", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where amount_claimed equal to select max amount_claimed", "query": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)", "sub_ques": "customer made the largest amount of claim"}
{"db_id": "insurance_and_eClaims", "sub_sql": "select t3.customer_details from customers", "question": "What is the name of the customer who has made the minimum amount of payment in one claim?", "sub_sql_type": "null col col col", "sub_sql_new": "select customer_details from customers", "query": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)", "sub_ques": "What is the name of the customer"}
{"db_id": "insurance_and_eClaims", "sub_sql": "select t3.customer_details from customers", "question": "Which customer made the smallest amount of claim in one claim? Return the customer details.", "sub_sql_type": "null col col col", "sub_sql_new": "select customer_details from customers", "query": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)", "sub_ques": "return the customer details"}
{"db_id": "insurance_and_eClaims", "sub_sql": "where t1.amount_piad = select min amount_piad", "question": "Which customer made the smallest amount of claim in one claim? Return the customer details.", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where amount_piad equal to select min amount_piad", "query": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)", "sub_ques": "customer made the smallest amount of claim"}
{"db_id": "insurance_and_eClaims", "sub_sql": "select count claims_processing_stages", "question": "How many claim processing stages are there in total?", "sub_sql_type": "null agg col", "sub_sql_new": "select count claims_processing_stages", "query": "SELECT count(*) FROM claims_processing_stages", "sub_ques": "how many claim processing stages are there in total"}
{"db_id": "insurance_and_eClaims", "sub_sql": "select count claims_processing_stages", "question": "Find the number of distinct stages in claim processing.", "sub_sql_type": "null agg col", "sub_sql_new": "select count claims_processing_stages", "query": "SELECT count(*) FROM claims_processing_stages", "sub_ques": "Find the number of distinct stages in claim processing"}
{"db_id": "insurance_and_eClaims", "sub_sql": "select t2.claim_status_name from claims_processing_stages", "question": "What is the name of the claim processing stage that most of the claims are on?", "sub_sql_type": "null col col col", "sub_sql_new": "select claim_status_name from claims_processing_stages", "query": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "what is the name of the claim processing stage"}
{"db_id": "insurance_and_eClaims", "sub_sql": "group by t1.claim_stage_id order by count claims_processing_stages desc limit 1", "question": "What is the name of the claim processing stage that most of the claims are on?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count claims_processing_stages desc limit 1", "query": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "claim processing stage that most of the claims are on"}
{"db_id": "insurance_and_eClaims", "sub_sql": "select t2.claim_status_name from claims_processing_stages", "question": "Which claim processing stage has the most claims? Show the claim status name.", "sub_sql_type": "null col col col", "sub_sql_new": "select claim_status_name from claims_processing_stages", "query": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "show the claim status name"}
{"db_id": "insurance_and_eClaims", "sub_sql": "group by t1.claim_stage_id order by count claims_processing_stages desc limit 1", "question": "Which claim processing stage has the most claims? Show the claim status name.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count claims_processing_stages desc limit 1", "query": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "stage has the most claims"}
{"db_id": "insurance_and_eClaims", "sub_sql": "select customer_details from customers", "question": "Find the names of customers whose name contains \\\\\\\"Diana\\\\\\\".", "sub_sql_type": "null col col col", "sub_sql_new": "select customer_details from customers", "query": "SELECT customer_details FROM customers WHERE customer_details LIKE \\\\\\\"%Diana%\\\\\\\"", "sub_ques": "customers whose name contains `` diana"}
{"db_id": "insurance_and_eClaims", "sub_sql": "where customer_details like diana", "question": "Find the names of customers whose name contains \\\\\\\"Diana\\\\\\\".", "sub_sql_type": "null col op value", "sub_sql_new": "where customer_details like diana", "query": "SELECT customer_details FROM customers WHERE customer_details LIKE \\\\\\\"%Diana%\\\\\\\"", "sub_ques": "customers whose name contains `` diana"}
{"db_id": "insurance_and_eClaims", "sub_sql": "select customer_details from customers", "question": "Which customers have the substring \\\\\\\"Diana\\\\\\\" in their names? Return the customer details.", "sub_sql_type": "null col col col", "sub_sql_new": "select customer_details from customers", "query": "SELECT customer_details FROM customers WHERE customer_details LIKE \\\\\\\"%Diana%\\\\\\\"", "sub_ques": "return the customer details"}
{"db_id": "insurance_and_eClaims", "sub_sql": "where customer_details like diana", "question": "Which customers have the substring \\\\\\\"Diana\\\\\\\" in their names? Return the customer details.", "sub_sql_type": "null col op value", "sub_sql_new": "where customer_details like diana", "query": "SELECT customer_details FROM customers WHERE customer_details LIKE \\\\\\\"%Diana%\\\\\\\"", "sub_ques": "customers have the substring `` diana '' in their names"}
{"db_id": "insurance_and_eClaims", "sub_sql": "select distinct t2.customer_details from customers", "question": "Find the names of the customers who have an deputy policy.", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct customer_details from customers", "query": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \\\\\\\"Deputy\\\\\\\"", "sub_ques": "find the names of the customers"}
{"db_id": "insurance_and_eClaims", "sub_sql": "where t1.policy_type_code = deputy", "question": "Find the names of the customers who have an deputy policy.", "sub_sql_type": "null col op op value", "sub_sql_new": "where policy_type_code equal to deputy", "query": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \\\\\\\"Deputy\\\\\\\"", "sub_ques": "deputy policy"}
{"db_id": "insurance_and_eClaims", "sub_sql": "select distinct t2.customer_details from customers", "question": "Which customers have an insurance policy with the type code \\\\\\\"Deputy\\\\\\\"? Give me the customer details.", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct customer_details from customers", "query": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \\\\\\\"Deputy\\\\\\\"", "sub_ques": "give me the customer details"}
{"db_id": "insurance_and_eClaims", "sub_sql": "where t1.policy_type_code = deputy", "question": "Which customers have an insurance policy with the type code \\\\\\\"Deputy\\\\\\\"? Give me the customer details.", "sub_sql_type": "null col op op value", "sub_sql_new": "where policy_type_code equal to deputy", "query": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \\\\\\\"Deputy\\\\\\\"", "sub_ques": "policy with the type code `` deputy"}
{"db_id": "insurance_and_eClaims", "sub_sql": "select distinct t2.customer_details from customers", "question": "Find the names of customers who either have an deputy policy or uniformed policy.", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct customer_details from customers", "query": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \\\\\\\"Deputy\\\\\\\" OR t1.policy_type_code  =  \\\\\\\"Uniform\\\\\\\"", "sub_ques": "find the names of customers"}
{"db_id": "insurance_and_eClaims", "sub_sql": "where t1.policy_type_code = deputy or t1.policy_type_code = uniformed", "question": "Find the names of customers who either have an deputy policy or uniformed policy.", "sub_sql_type": "null col op op value null col op value value", "sub_sql_new": "where policy_type_code equal to deputy or or t1.policy_type_code = uniformed", "query": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \\\\\\\"Deputy\\\\\\\" OR t1.policy_type_code  =  \\\\\\\"Uniform\\\\\\\"", "sub_ques": "deputy policy or uniformed policy"}
{"db_id": "insurance_and_eClaims", "sub_sql": "select distinct t2.customer_details from customers", "question": "Which customers have an insurance policy with the type code \\\\\\\"Deputy\\\\\\\" or \\\\\\\"Uniform\\\\\\\"? Return the customer details.", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct customer_details from customers", "query": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \\\\\\\"Deputy\\\\\\\" OR t1.policy_type_code  =  \\\\\\\"Uniform\\\\\\\"", "sub_ques": "return the customer details"}
{"db_id": "insurance_and_eClaims", "sub_sql": "where t1.policy_type_code = deputy or t1.policy_type_code = uniformed", "question": "Which customers have an insurance policy with the type code \\\\\\\"Deputy\\\\\\\" or \\\\\\\"Uniform\\\\\\\"? Return the customer details.", "sub_sql_type": "null col op op value null col op value value", "sub_sql_new": "where policy_type_code equal to deputy or or t1.policy_type_code = uniformed", "query": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \\\\\\\"Deputy\\\\\\\" OR t1.policy_type_code  =  \\\\\\\"Uniform\\\\\\\"", "sub_ques": "policy with the type code `` deputy"}
{"db_id": "insurance_and_eClaims", "sub_sql": "select policy_type_code , count policies group by policy_type_code", "question": "Find the number of records of each policy type and its type code.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select policy_type_code , count policies", "query": "SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code", "sub_ques": "the number of records of each policy type and its type code"}
{"db_id": "insurance_and_eClaims", "sub_sql": "select policy_type_code , count * from policies group by policy_type_code", "question": "For each policy type, return its type code and its count in the record.", "sub_sql_type": "null col null agg col col col", "sub_sql_new": "select policy_type_code , count * from policies", "query": "SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code", "sub_ques": "for each policy type , return its type code and its count in the record"}
{"db_id": "insurance_and_eClaims", "sub_sql": "select t2.customer_details from customers", "question": "Find the name of the customer that has been involved in the most policies.", "sub_sql_type": "null col col col", "sub_sql_new": "select customer_details from customers", "query": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1", "sub_ques": "find the names of the customer"}
{"db_id": "insurance_and_eClaims", "sub_sql": "group by t2.customer_details order by count policies desc limit 1", "question": "Find the name of the customer that has been involved in the most policies.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count policies desc limit 1", "query": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the customer that has been involved in the most policies"}
{"db_id": "insurance_and_eClaims", "sub_sql": "select t2.customer_details from customers", "question": "Which customer have the most policies? Give me the customer details.", "sub_sql_type": "null col col col", "sub_sql_new": "select customer_details from customers", "query": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1", "sub_ques": "give me the customer details"}
{"db_id": "insurance_and_eClaims", "sub_sql": "group by t2.customer_details order by count policies desc limit 1", "question": "Which customer have the most policies? Give me the customer details.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count policies desc limit 1", "query": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1", "sub_ques": "customer have the most policies"}
{"db_id": "insurance_and_eClaims", "sub_sql": "select claim_status_description from claims_processing_stages", "question": "What is the description of the claim status \\\\\\\"Open\\\\\\\"?", "sub_sql_type": "null col col col", "sub_sql_new": "select claim_status_description from claims_processing_stages", "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \\\\\\\"Open\\\\\\\"", "sub_ques": "what is the description of the claim status"}
{"db_id": "insurance_and_eClaims", "sub_sql": "where claim_status_name = open", "question": "What is the description of the claim status \\\\\\\"Open\\\\\\\"?", "sub_sql_type": "null col op op value", "sub_sql_new": "where claim_status_name equal to open", "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \\\\\\\"Open\\\\\\\"", "sub_ques": "claim status `` open"}
{"db_id": "insurance_and_eClaims", "sub_sql": "select claim_status_description from claims_processing_stages", "question": "Find the description of the claim status \\\\\\\"Open\\\\\\\".", "sub_sql_type": "null col col col", "sub_sql_new": "select claim_status_description from claims_processing_stages", "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \\\\\\\"Open\\\\\\\"", "sub_ques": "find the description of the claim status"}
{"db_id": "insurance_and_eClaims", "sub_sql": "where claim_status_name = open", "question": "Find the description of the claim status \\\\\\\"Open\\\\\\\".", "sub_sql_type": "null col op op value", "sub_sql_new": "where claim_status_name equal to open", "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \\\\\\\"Open\\\\\\\"", "sub_ques": "claim status `` open"}
{"db_id": "insurance_and_eClaims", "sub_sql": "select count distinct claim_outcome_code from claims_processing", "question": "How many distinct claim outcome codes are there?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct claim_outcome_code from claims_processing", "query": "SELECT count(DISTINCT claim_outcome_code) FROM claims_processing", "sub_ques": "how many distinct claim outcome codes"}
{"db_id": "insurance_and_eClaims", "sub_sql": "select count distinct claim_outcome_code from claims_processing", "question": "Count the number of distinct claim outcome codes.", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct claim_outcome_code from claims_processing", "query": "SELECT count(DISTINCT claim_outcome_code) FROM claims_processing", "sub_ques": "count the number of distinct claim outcome codes"}
{"db_id": "insurance_and_eClaims", "sub_sql": "select t2.customer_details from customers", "question": "Which customer is associated with the latest policy?", "sub_sql_type": "null col col col", "sub_sql_new": "select customer_details from customers", "query": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)", "sub_ques": "which customer"}
{"db_id": "insurance_and_eClaims", "sub_sql": "select t2.customer_details from customers", "question": "Find the customer who started a policy most recently.", "sub_sql_type": "null col col col", "sub_sql_new": "select customer_details from customers", "query": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)", "sub_ques": "find the customer"}
{"db_id": "insurance_and_eClaims", "sub_sql": "where t1.start_date = select max start_date", "question": "Find the customer who started a policy most recently.", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where start_date equal to select max start_date", "query": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)", "sub_ques": "started a policy most recently"}
{"db_id": "customers_and_invoices", "sub_sql": "select count accounts", "question": "Show the number of accounts.", "sub_sql_type": "null agg col", "sub_sql_new": "select count accounts", "query": "SELECT count(*) FROM Accounts", "sub_ques": "show the number of accounts"}
{"db_id": "customers_and_invoices", "sub_sql": "select count accounts", "question": "How many accounts are there?", "sub_sql_type": "null agg col", "sub_sql_new": "select count accounts", "query": "SELECT count(*) FROM Accounts", "sub_ques": "how many accounts"}
{"db_id": "customers_and_invoices", "sub_sql": "select count distinct customer_id from accounts", "question": "How many customers have opened an account?", "sub_sql_type": "null agg col col col col col", "sub_sql_new": "select count distinct customer id from accounts", "query": "SELECT count(DISTINCT customer_id) FROM Accounts", "sub_ques": "how many customers have opened an account"}
{"db_id": "customers_and_invoices", "sub_sql": "select count distinct customer_id from accounts", "question": "Count the number of customers who have an account.", "sub_sql_type": "null agg col col col col col", "sub_sql_new": "select count distinct customer id from accounts", "query": "SELECT count(DISTINCT customer_id) FROM Accounts", "sub_ques": "count the number of customers"}
{"db_id": "customers_and_invoices", "sub_sql": "select account_id , date_account_opened , account_name , other_account_details from accounts", "question": "Show the id, the date of account opened, the account name, and other account detail for all accounts.", "sub_sql_type": "null col col null col col col null col col null col col col col col", "sub_sql_new": "select account id , date account opened , account name , other account details from accounts", "query": "SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts", "sub_ques": "show the id , the date of account opened , the account name , and other account detail for all accounts"}
{"db_id": "customers_and_invoices", "sub_sql": "select account_id , date_account_opened , account_name , other_account_details from accounts", "question": "What are the ids, date opened, name, and other details for all accounts?", "sub_sql_type": "null col col null col col col null col col null col col col col col", "sub_sql_new": "select account id , date account opened , account name , other account details from accounts", "query": "SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts", "sub_ques": "what are the ids , date opened , name , and other details for all accounts"}
{"db_id": "customers_and_invoices", "sub_sql": "select t1.account_id , t1.date_account_opened , t1.account_name , t1.other_account_details from accounts", "question": "Show the id, the account name, and other account details for all accounts by the customer with first name 'Meaghan'.", "sub_sql_type": "null col col null col col col null col col null col col col col col", "sub_sql_new": "select account id , date account opened , account name , other account details from accounts", "query": "SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Meaghan'", "sub_ques": "show the id , the account name , and other account details for all accounts"}
{"db_id": "customers_and_invoices", "sub_sql": "where t2.customer_first_name = meaghan", "question": "Show the id, the account name, and other account details for all accounts by the customer with first name 'Meaghan'.", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where customer first name equal to meaghan", "query": "SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Meaghan'", "sub_ques": "customer with first name meaghan"}
{"db_id": "customers_and_invoices", "sub_sql": "select t1.account_id , t1.date_account_opened , t1.account_name , t1.other_account_details from accounts", "question": "What are the ids, names, dates of opening, and other details for accounts corresponding to the customer with the first name \\\\\\\"Meaghan\\\\\\\"?", "sub_sql_type": "null col col null col col col null col col null col col col col col", "sub_sql_new": "select account id , date account opened , account name , other account details from accounts", "query": "SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Meaghan'", "sub_ques": "what are the ids , names , dates of opening , and other details for accounts"}
{"db_id": "customers_and_invoices", "sub_sql": "where t2.customer_first_name = meaghan", "question": "What are the ids, names, dates of opening, and other details for accounts corresponding to the customer with the first name \\\\\\\"Meaghan\\\\\\\"?", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where customer first name equal to meaghan", "query": "SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Meaghan'", "sub_ques": "customer with the first name `` meaghan"}
{"db_id": "customers_and_invoices", "sub_sql": "select t1.account_name , t1.other_account_details from accounts", "question": "Show the account name and other account detail for all accounts by the customer with first name Meaghan and last name Keeling.", "sub_sql_type": "null col col null col col col col col", "sub_sql_new": "select account name , other account details from accounts", "query": "SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \\\\\\\"Meaghan\\\\\\\" AND T2.customer_last_name  =  \\\\\\\"Keeling\\\\\\\"", "sub_ques": "show the account name and other account detail for all accounts"}
{"db_id": "customers_and_invoices", "sub_sql": "where t2.customer_first_name = meaghan", "question": "Show the account name and other account detail for all accounts by the customer with first name Meaghan and last name Keeling.", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where customer first name equal to meaghan", "query": "SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \\\\\\\"Meaghan\\\\\\\" AND T2.customer_last_name  =  \\\\\\\"Keeling\\\\\\\"", "sub_ques": "customer with first name meaghan"}
{"db_id": "customers_and_invoices", "sub_sql": "select t1.account_name , t1.other_account_details from accounts", "question": "What are the names and other details for accounts corresponding to the customer named Meaghan Keeling?", "sub_sql_type": "null col col null col col col col col", "sub_sql_new": "select account name , other account details from accounts", "query": "SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \\\\\\\"Meaghan\\\\\\\" AND T2.customer_last_name  =  \\\\\\\"Keeling\\\\\\\"", "sub_ques": "what are the names and other details for accounts"}
{"db_id": "customers_and_invoices", "sub_sql": "where t2.customer_first_name = meaghan", "question": "What are the names and other details for accounts corresponding to the customer named Meaghan Keeling?", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where customer first name equal to meaghan", "query": "SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \\\\\\\"Meaghan\\\\\\\" AND T2.customer_last_name  =  \\\\\\\"Keeling\\\\\\\"", "sub_ques": "customer named meaghan"}
{"db_id": "customers_and_invoices", "sub_sql": "select t2.customer_first_name , t2.customer_last_name from customers", "question": "Show the first name and last name for the customer with account name 900.", "sub_sql_type": "null col col col null col col col col col", "sub_sql_new": "select customer first name , customer last name from customers", "query": "SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \\\\\\\"900\\\\\\\"", "sub_ques": "show the first name and last name for the customer"}
{"db_id": "customers_and_invoices", "sub_sql": "where t1.account_name = 900", "question": "Show the first name and last name for the customer with account name 900.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where account name equal to 900", "query": "SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \\\\\\\"900\\\\\\\"", "sub_ques": "account name 900"}
{"db_id": "customers_and_invoices", "sub_sql": "select t2.customer_first_name , t2.customer_last_name from customers", "question": "What are the full names of customers with the account name 900?", "sub_sql_type": "null col col col null col col col col col", "sub_sql_new": "select customer first name , customer last name from customers", "query": "SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \\\\\\\"900\\\\\\\"", "sub_ques": "what are the full names of customers"}
{"db_id": "customers_and_invoices", "sub_sql": "where t1.account_name = 900", "question": "What are the full names of customers with the account name 900?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where account name equal to 900", "query": "SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \\\\\\\"900\\\\\\\"", "sub_ques": "account name 900"}
{"db_id": "customers_and_invoices", "sub_sql": "select count customers", "question": "How many customers don't have an account?", "sub_sql_type": "null agg col", "sub_sql_new": "select count customers", "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)", "sub_ques": "how many customers"}
{"db_id": "customers_and_invoices", "sub_sql": "customers not in accounts", "question": "How many customers don't have an account?", "sub_sql_type": "op op", "sub_sql_new": "customers tab not in accounts tab", "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)", "sub_ques": "customers do n't have an account"}
{"db_id": "customers_and_invoices", "sub_sql": "select count customers", "question": "Count the number of customers who do not have an account.", "sub_sql_type": "null agg col", "sub_sql_new": "select count customers", "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)", "sub_ques": "count the number of customers"}
{"db_id": "customers_and_invoices", "sub_sql": "customers not in accounts", "question": "Count the number of customers who do not have an account.", "sub_sql_type": "op op", "sub_sql_new": "customers tab not in accounts tab", "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)", "sub_ques": "customers who do not have an account"}
{"db_id": "customers_and_invoices", "sub_sql": "select distinct t1.customer_first_name , t1.customer_last_name , t1.phone_number from customers", "question": "Show the unique first names, last names, and phone numbers for all customers with any account.", "sub_sql_type": "null col col col col null col col col null col col col col", "sub_sql_new": "select distinct customer first name , customer last name , phone number from customers", "query": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id", "sub_ques": "show the unique first names , last names , and phone numbers for all"}
{"db_id": "customers_and_invoices", "sub_sql": "select distinct t1.customer_first_name , t1.customer_last_name , t1.phone_number from customers", "question": "What are the distinct first names, last names, and phone numbers for customers with accounts?", "sub_sql_type": "null col col col col null col col col null col col col col", "sub_sql_new": "select distinct customer first name , customer last name , phone number from customers", "query": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id", "sub_ques": "what are the distinct first names , last names , and phone numbers for customers"}
{"db_id": "customers_and_invoices", "sub_sql": "select count accounts , customer_id group by customer_id", "question": "How many accounts does each customer have? List the number and customer id.", "sub_sql_type": "null agg col null col col", "sub_sql_new": "select count accounts , customer id", "query": "SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id", "sub_ques": "how many accounts does each customer have ? list the number and customer id"}
{"db_id": "customers_and_invoices", "sub_sql": "select count accounts , customer_id from accounts group by customer_id", "question": "Count the number of accounts corresponding to each customer id.", "sub_sql_type": "null agg col null col col col col", "sub_sql_new": "select count accounts , customer id from accounts", "query": "SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id", "sub_ques": "count the number of accounts corresponding to each customer id"}
{"db_id": "customers_and_invoices", "sub_sql": "select t1.customer_id , t2.customer_first_name , t2.customer_last_name from accounts , customers", "question": "What is the customer id, first and last name with most number of accounts.", "sub_sql_type": "null col col null col col col null col col col col col null col", "sub_sql_new": "select customer id , customer first name , customer last name from accounts , customers", "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "what is the customer id , first and last name"}
{"db_id": "customers_and_invoices", "sub_sql": "group by t1.customer_id order by count accounts desc limit 1", "question": "What is the customer id, first and last name with most number of accounts.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count accounts desc limit 1", "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the customer id with most number of accounts"}
{"db_id": "customers_and_invoices", "sub_sql": "select t1.customer_id , t2.customer_first_name , t2.customer_last_name from accounts , customers", "question": "Return the id and full name of the customer with the most accounts.", "sub_sql_type": "null col col null col col col null col col col col col null col", "sub_sql_new": "select customer id , customer first name , customer last name from accounts , customers", "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "return the id and full name of the customer"}
{"db_id": "customers_and_invoices", "sub_sql": "group by t1.customer_id order by count accounts desc limit 1", "question": "Return the id and full name of the customer with the most accounts.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count accounts desc limit 1", "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the id with the most accounts"}
{"db_id": "customers_and_invoices", "sub_sql": "select t1.customer_id , t2.customer_first_name , t2.customer_last_name , count accounts , customers group by t1.customer_id", "question": "Show id, first name and last name for all customers and the number of accounts.", "sub_sql_type": "null col col null col col col null col col col null agg col null col", "sub_sql_new": "select customer id , customer first name , customer last name , count accounts , customers", "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id", "sub_ques": "show id , first name and last name for all customers and the number of accounts"}
{"db_id": "customers_and_invoices", "sub_sql": "select t1.customer_id , t2.customer_first_name , t2.customer_last_name , count accounts , customers group by t1.customer_id", "question": "What are the the full names and ids for all customers, and how many accounts does each have?", "sub_sql_type": "null col col null col col col null col col col null agg col null col", "sub_sql_new": "select customer id , customer first name , customer last name , count accounts , customers", "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id", "sub_ques": "what are the the full names and ids for all customers , and how many accounts"}
{"db_id": "customers_and_invoices", "sub_sql": "select t2.customer_first_name , t1.customer_id from customers , accounts", "question": "Show first name and id for all customers with at least 2 accounts.", "sub_sql_type": "null col col col null col col col col null col", "sub_sql_new": "select customer first name , customer id from customers , accounts", "query": "SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2", "sub_ques": "show first name and id for all customers"}
{"db_id": "customers_and_invoices", "sub_sql": "group by t1.customer_id having count accounts >= 2", "question": "Show first name and id for all customers with at least 2 accounts.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2", "sub_ques": "id with at least 2 accounts"}
{"db_id": "customers_and_invoices", "sub_sql": "select t2.customer_first_name , t1.customer_id from customers , accounts", "question": "What are the first names and ids for customers who have two or more accounts?", "sub_sql_type": "null col col col null col col col col null col", "sub_sql_new": "select customer first name , customer id from customers , accounts", "query": "SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2", "sub_ques": "what are the first names and ids for customers"}
{"db_id": "customers_and_invoices", "sub_sql": "group by t1.customer_id having count accounts >= 2", "question": "What are the first names and ids for customers who have two or more accounts?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2", "sub_ques": "ids for customers who have two or more accounts"}
{"db_id": "customers_and_invoices", "sub_sql": "select count customers", "question": "Show the number of customers.", "sub_sql_type": "null agg col", "sub_sql_new": "select count customers", "query": "SELECT count(*) FROM Customers", "sub_ques": "show the number of customers"}
{"db_id": "customers_and_invoices", "sub_sql": "select count customers", "question": "Count the number of customers.", "sub_sql_type": "null agg col", "sub_sql_new": "select count customers", "query": "SELECT count(*) FROM Customers", "sub_ques": "count the number of customers"}
{"db_id": "customers_and_invoices", "sub_sql": "select gender , count customers group by gender", "question": "Show the number of customers for each gender.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select gender , count customers", "query": "SELECT gender ,  count(*) FROM Customers GROUP BY gender", "sub_ques": "show the number of customers for each gender"}
{"db_id": "customers_and_invoices", "sub_sql": "select gender , count customers group by gender", "question": "How many customers are there of each gender?", "sub_sql_type": "null col null agg col", "sub_sql_new": "select gender , count customers", "query": "SELECT gender ,  count(*) FROM Customers GROUP BY gender", "sub_ques": "how many customers are there of each gender"}
{"db_id": "customers_and_invoices", "sub_sql": "select count financial_transactions", "question": "How many transactions do we have?", "sub_sql_type": "null agg col", "sub_sql_new": "select count financial_transactions", "query": "SELECT count(*) FROM Financial_transactions", "sub_ques": "how many transactions do we have"}
{"db_id": "customers_and_invoices", "sub_sql": "select count financial_transactions", "question": "Count the number of transactions.", "sub_sql_type": "null agg col", "sub_sql_new": "select count financial_transactions", "query": "SELECT count(*) FROM Financial_transactions", "sub_ques": "count the number of transactions"}
{"db_id": "customers_and_invoices", "sub_sql": "select account_id , count financial_transactions", "question": "How many transaction does each account have? Show the number and account id.", "sub_sql_type": "null col col null agg col", "sub_sql_new": "select account id , count financial_transactions", "query": "SELECT count(*) ,  account_id FROM Financial_transactions", "sub_ques": "how many transaction does each account have ? show the number and account id"}
{"db_id": "customers_and_invoices", "sub_sql": "select account_id , count financial_transactions", "question": "Count the number of financial transactions that correspond to each account id.", "sub_sql_type": "null col col null agg col", "sub_sql_new": "select account id , count financial_transactions", "query": "SELECT count(*) ,  account_id FROM Financial_transactions", "sub_ques": "count the number of financial transactions that correspond to each account id"}
{"db_id": "customers_and_invoices", "sub_sql": "select count financial_transactions", "question": "How many transaction does account with name 337 have?", "sub_sql_type": "null agg col", "sub_sql_new": "select count financial_transactions", "query": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \\\\\\\"337\\\\\\\"", "sub_ques": "how many transaction"}
{"db_id": "customers_and_invoices", "sub_sql": "where t2.account_name = 337", "question": "How many transaction does account with name 337 have?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where account name equal to 337", "query": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \\\\\\\"337\\\\\\\"", "sub_ques": "account with name 337 have"}
{"db_id": "customers_and_invoices", "sub_sql": "select count financial_transactions", "question": "Count the number of financial transactions that the account with the name 337 has.", "sub_sql_type": "null agg col", "sub_sql_new": "select count financial_transactions", "query": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \\\\\\\"337\\\\\\\"", "sub_ques": "count the number of financial transactions"}
{"db_id": "customers_and_invoices", "sub_sql": "where t2.account_name = 337", "question": "Count the number of financial transactions that the account with the name 337 has.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where account name equal to 337", "query": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \\\\\\\"337\\\\\\\"", "sub_ques": "account with the name 337 has"}
{"db_id": "customers_and_invoices", "sub_sql": "select avg transaction_amount , min transaction_amount , max transaction_amount , sum transaction_amount from financial_transactions", "question": "What is the average, minimum, maximum, and total transaction amount?", "sub_sql_type": "null agg col col null agg col col null agg col col null agg col col col col", "sub_sql_new": "select avg transaction amount , min transaction amount , max transaction amount , sum transaction amount from financial_transactions", "query": "SELECT avg(transaction_amount) ,  min(transaction_amount) ,  max(transaction_amount) ,   sum(transaction_amount) FROM Financial_transactions", "sub_ques": "what is the average , minimum , maximum , and total transaction amount"}
{"db_id": "customers_and_invoices", "sub_sql": "select avg transaction_amount , min transaction_amount , max transaction_amount , sum transaction_amount from financial_transactions", "question": "Return the average, minimum, maximum, and total transaction amounts.", "sub_sql_type": "null agg col col null agg col col null agg col col null agg col col col col", "sub_sql_new": "select avg transaction amount , min transaction amount , max transaction amount , sum transaction amount from financial_transactions", "query": "SELECT avg(transaction_amount) ,  min(transaction_amount) ,  max(transaction_amount) ,   sum(transaction_amount) FROM Financial_transactions", "sub_ques": "return the average , minimum , maximum , and total transaction amounts"}
{"db_id": "customers_and_invoices", "sub_sql": "select transaction_id from financial_transactions", "question": "Show ids for all transactions whose amounts are greater than the average.", "sub_sql_type": "null col col col col", "sub_sql_new": "select transaction id from financial_transactions", "query": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)", "sub_ques": "show ids for all transactions"}
{"db_id": "customers_and_invoices", "sub_sql": "where transaction_amount > select avg transaction_amount", "question": "Show ids for all transactions whose amounts are greater than the average.", "sub_sql_type": "null col col op op value value value", "sub_sql_new": "where transaction amount more than select avg transaction_amount", "query": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)", "sub_ques": "whose amounts are greater than the average"}
{"db_id": "customers_and_invoices", "sub_sql": "select transaction_id from financial_transactions", "question": "What are the ids for transactions that have an amount greater than the average amount of a transaction?", "sub_sql_type": "null col col col col", "sub_sql_new": "select transaction id from financial_transactions", "query": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)", "sub_ques": "what are the ids for transactions"}
{"db_id": "customers_and_invoices", "sub_sql": "where transaction_amount > select avg transaction_amount", "question": "What are the ids for transactions that have an amount greater than the average amount of a transaction?", "sub_sql_type": "null col col op op value value value", "sub_sql_new": "where transaction amount more than select avg transaction_amount", "query": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)", "sub_ques": "transactions that have an amount greater than the average amount"}
{"db_id": "customers_and_invoices", "sub_sql": "select transaction_type , sum transaction_amount from financial_transactions", "question": "Show the transaction types and the total amount of transactions.", "sub_sql_type": "null col col null agg col col col col", "sub_sql_new": "select transaction type , sum transaction amount from financial_transactions", "query": "SELECT transaction_type ,  sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type", "sub_ques": "show the transaction types and the total amount of transactions"}
{"db_id": "customers_and_invoices", "sub_sql": "select transaction_type , sum transaction_amount from financial_transactions", "question": "What are total transaction amounts for each transaction type?", "sub_sql_type": "null col col null agg col col col col", "sub_sql_new": "select transaction type , sum transaction amount from financial_transactions", "query": "SELECT transaction_type ,  sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type", "sub_ques": "what are total transaction amounts for each transaction type"}
{"db_id": "customers_and_invoices", "sub_sql": "select t2.account_name , t1.account_id , count accounts , financial_transactions group by t1.account_id", "question": "Show the account name, id and the number of transactions for each account.", "sub_sql_type": "null col col null col col null agg col null col", "sub_sql_new": "select account name , account id , count accounts , financial_transactions", "query": "SELECT T2.account_name ,  T1.account_id ,  count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id", "sub_ques": "show the account name , id and the number of transactions for each account"}
{"db_id": "customers_and_invoices", "sub_sql": "select t2.account_name , t1.account_id , count accounts , financial_transactions group by t1.account_id", "question": "Return the names and ids of each account, as well as the number of transactions.", "sub_sql_type": "null col col null col col null agg col null col", "sub_sql_new": "select account name , account id , count accounts , financial_transactions", "query": "SELECT T2.account_name ,  T1.account_id ,  count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id", "sub_ques": "return the names and ids of each account, as well as the number of transactions"}
{"db_id": "customers_and_invoices", "sub_sql": "select account_id from financial_transactions", "question": "Show the account id with most number of transactions.", "sub_sql_type": "null col col col col", "sub_sql_new": "select account id from financial_transactions", "query": "SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "show the account id"}
{"db_id": "customers_and_invoices", "sub_sql": "group by account_id order by count financial_transactions desc limit 1", "question": "Show the account id with most number of transactions.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count financial_transactions desc limit 1", "query": "SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the account id with most number of transactions"}
{"db_id": "customers_and_invoices", "sub_sql": "select account_id from financial_transactions", "question": "What is the id of the account with the most transactions?", "sub_sql_type": "null col col col col", "sub_sql_new": "select account id from financial_transactions", "query": "SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "what is the id of the account"}
{"db_id": "customers_and_invoices", "sub_sql": "group by account_id order by count financial_transactions desc limit 1", "question": "What is the id of the account with the most transactions?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count financial_transactions desc limit 1", "query": "SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the id of the account with the most transactions"}
{"db_id": "customers_and_invoices", "sub_sql": "select t1.account_id , t2.account_name from financial_transactions , accounts", "question": "Show the account id and name with at least 4 transactions.", "sub_sql_type": "null col col null col col col col null col", "sub_sql_new": "select account id , account name from financial_transactions , accounts", "query": "SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4", "sub_ques": "show the account id and name"}
{"db_id": "customers_and_invoices", "sub_sql": "group by t1.account_id having count financial_transactions >= 4", "question": "Show the account id and name with at least 4 transactions.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4", "sub_ques": "account id and name with at least 4 transactions"}
{"db_id": "customers_and_invoices", "sub_sql": "select t1.account_id , t2.account_name from financial_transactions , accounts", "question": "What are the ids and names of accounts with 4 or more transactions?", "sub_sql_type": "null col col null col col col col null col", "sub_sql_new": "select account id , account name from financial_transactions , accounts", "query": "SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4", "sub_ques": "what are the ids and names of accounts"}
{"db_id": "customers_and_invoices", "sub_sql": "group by t1.account_id having count financial_transactions >= 4", "question": "What are the ids and names of accounts with 4 or more transactions?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4", "sub_ques": "accounts with 4 or more transactions"}
{"db_id": "customers_and_invoices", "sub_sql": "select distinct product_size from products", "question": "Show all product sizes.", "sub_sql_type": "null col col col col col", "sub_sql_new": "select distinct product size from products", "query": "SELECT DISTINCT product_size FROM Products", "sub_ques": "show all product sizes"}
{"db_id": "customers_and_invoices", "sub_sql": "select distinct product_size from products", "question": "What are the different product sizes?", "sub_sql_type": "null col col col col col", "sub_sql_new": "select distinct product size from products", "query": "SELECT DISTINCT product_size FROM Products", "sub_ques": "what are the different product sizes"}
{"db_id": "customers_and_invoices", "sub_sql": "select distinct product_color from products", "question": "Show all product colors.", "sub_sql_type": "null col col col col col", "sub_sql_new": "select distinct product color from products", "query": "SELECT DISTINCT product_color FROM Products", "sub_ques": "show all product colors"}
{"db_id": "customers_and_invoices", "sub_sql": "select distinct product_color from products", "question": "What are the different product colors?", "sub_sql_type": "null col col col col col", "sub_sql_new": "select distinct product color from products", "query": "SELECT DISTINCT product_color FROM Products", "sub_ques": "what are the different product colors"}
{"db_id": "customers_and_invoices", "sub_sql": "select invoice_number , count * from financial_transactions group by invoice_number", "question": "Show the invoice number and the number of transactions for each invoice.", "sub_sql_type": "null col col null agg col col col", "sub_sql_new": "select invoice number , count * from financial_transactions", "query": "SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number", "sub_ques": "show the invoice number and the number of transactions for each invoice"}
{"db_id": "customers_and_invoices", "sub_sql": "select invoice_number , count financial_transactions group by invoice_number", "question": "How many transactions correspond to each invoice number?", "sub_sql_type": "null col col null agg col", "sub_sql_new": "select invoice number , count financial_transactions", "query": "SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number", "sub_ques": "how many transactions correspond to each invoice number"}
{"db_id": "customers_and_invoices", "sub_sql": "select t2.invoice_number , t2.invoice_date from invoices", "question": "What is the invoice number and invoice date for the invoice with most number of transactions?", "sub_sql_type": "null col col null col col col col", "sub_sql_new": "select invoice number , invoice date from invoices", "query": "SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1", "sub_ques": "what is the invoice number and invoice date for the invoice"}
{"db_id": "customers_and_invoices", "sub_sql": "group by t1.invoice_number order by count financial_transactions desc limit 1", "question": "What is the invoice number and invoice date for the invoice with most number of transactions?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count financial_transactions desc limit 1", "query": "SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the invoice with most number of transactions"}
{"db_id": "customers_and_invoices", "sub_sql": "select t2.invoice_number , t2.invoice_date from invoices", "question": "What is the invoice number and invoice date corresponding to the invoice with the greatest number of transactions?", "sub_sql_type": "null col col null col col col col", "sub_sql_new": "select invoice number , invoice date from invoices", "query": "SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1", "sub_ques": "what is the invoice number and invoice date corresponding to the invoice"}
{"db_id": "customers_and_invoices", "sub_sql": "group by t1.invoice_number order by count financial_transactions desc limit 1", "question": "What is the invoice number and invoice date corresponding to the invoice with the greatest number of transactions?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count financial_transactions desc limit 1", "query": "SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the invoice with the greatest number of transactions"}
{"db_id": "customers_and_invoices", "sub_sql": "select count invoices", "question": "How many invoices do we have?", "sub_sql_type": "null agg col", "sub_sql_new": "select count invoices", "query": "SELECT count(*) FROM Invoices", "sub_ques": "how many invoices"}
{"db_id": "customers_and_invoices", "sub_sql": "select count invoices", "question": "Count the number of invoices.", "sub_sql_type": "null agg col", "sub_sql_new": "select count invoices", "query": "SELECT count(*) FROM Invoices", "sub_ques": "count the number of invoices"}
{"db_id": "customers_and_invoices", "sub_sql": "select t1.invoice_date , t1.order_id , t2.order_details from invoices , orders", "question": "Show invoice dates and order id and details for all invoices.", "sub_sql_type": "null col col null col col null col col col col null col", "sub_sql_new": "select invoice date , order id , order details from invoices , orders", "query": "SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id", "sub_ques": "show invoice dates and order id and details for all invoices"}
{"db_id": "customers_and_invoices", "sub_sql": "select t1.invoice_date , t1.order_id , t2.order_details from invoices , orders", "question": "What are the invoice dates, order ids, and order details for all invoices?", "sub_sql_type": "null col col null col col null col col col col null col", "sub_sql_new": "select invoice date , order id , order details from invoices , orders", "query": "SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id", "sub_ques": "what are the invoice dates , order ids , and order details for all invoices"}
{"db_id": "customers_and_invoices", "sub_sql": "select order_id , count invoices group by order_id", "question": "Show the order ids and the number of invoices for each order.", "sub_sql_type": "null col col null agg col", "sub_sql_new": "select order id , count invoices", "query": "SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id", "sub_ques": "show the order ids and the number of invoices for each order"}
{"db_id": "customers_and_invoices", "sub_sql": "select order_id , count invoices group by order_id", "question": "How many invoices correspond to each order id?", "sub_sql_type": "null col col null agg col", "sub_sql_new": "select order id , count invoices", "query": "SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id", "sub_ques": "how many invoices correspond to each order id"}
{"db_id": "customers_and_invoices", "sub_sql": "select t2.order_id , t2.order_details from orders", "question": "What is the order id and order details for the order more than two invoices.", "sub_sql_type": "null col col null col col col col", "sub_sql_new": "select order id , order details from orders", "query": "SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  2", "sub_ques": "what is the order id and order details for the order"}
{"db_id": "customers_and_invoices", "sub_sql": "group by t2.order_id having count invoices > 2", "question": "What is the order id and order details for the order more than two invoices.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  2", "sub_ques": "order details for the order more than two invoices"}
{"db_id": "customers_and_invoices", "sub_sql": "select t2.order_id , t2.order_details from orders", "question": "Return the order ids and details for orderes with two or more invoices.", "sub_sql_type": "null col col null col col col col", "sub_sql_new": "select order id , order details from orders", "query": "SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  2", "sub_ques": "return the order ids and details"}
{"db_id": "customers_and_invoices", "sub_sql": "group by t2.order_id having count invoices > 2", "question": "Return the order ids and details for orderes with two or more invoices.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  2", "sub_ques": "orderes with two or more invoices"}
{"db_id": "customers_and_invoices", "sub_sql": "select t2.customer_last_name , t1.customer_id , t2.phone_number from customers , orders", "question": "What is the customer last name, id and phone number with most number of orders?", "sub_sql_type": "null col col col null col col null col col col col null col", "sub_sql_new": "select customer last name , customer id , phone number from customers , orders", "query": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "what is the customer last name , id and phone number"}
{"db_id": "customers_and_invoices", "sub_sql": "group by t1.customer_id order by count orders desc limit 1", "question": "What is the customer last name, id and phone number with most number of orders?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count orders desc limit 1", "query": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "customer id with most number of orders"}
{"db_id": "customers_and_invoices", "sub_sql": "select t2.customer_last_name , t1.customer_id , t2.phone_number from customers , orders", "question": "Return the last name, id and phone number of the customer who has made the greatest number of orders.", "sub_sql_type": "null col col col null col col null col col col col null col", "sub_sql_new": "select customer last name , customer id , phone number from customers , orders", "query": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "return the last name , id and phone number of the customer"}
{"db_id": "customers_and_invoices", "sub_sql": "group by t1.customer_id order by count orders desc limit 1", "question": "Return the last name, id and phone number of the customer who has made the greatest number of orders.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count orders desc limit 1", "query": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the customer who has made the greatest number of orders"}
{"db_id": "customers_and_invoices", "sub_sql": "select t2.product_name , sum t1.product_quantity from products , order_items", "question": "Show all product names and the total quantity ordered for each product name.", "sub_sql_type": "null col col null agg col col col col null col", "sub_sql_new": "select product name , sum product quantity from products , order_items", "query": "SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name", "sub_ques": "show all product names and the total quantity ordered for each product name"}
{"db_id": "customers_and_invoices", "sub_sql": "select t2.product_name , sum t1.product_quantity from products , order_items", "question": "What are the different product names, and what is the sum of quantity ordered for each product?", "sub_sql_type": "null col col null agg col col col col null col", "sub_sql_new": "select product name , sum product quantity from products , order_items", "query": "SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name", "sub_ques": "what are the different product names , and what is the sum of quantity ordered for each product"}
{"db_id": "customers_and_invoices", "sub_sql": "select order_id , count order_items group by order_id", "question": "Show the order ids and the number of items in each order.", "sub_sql_type": "null col col null agg col", "sub_sql_new": "select order id , count order_items", "query": "SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id", "sub_ques": "show the order ids and the number of items in each order"}
{"db_id": "customers_and_invoices", "sub_sql": "select order_id , count order_items group by order_id", "question": "How many order items correspond to each order id?", "sub_sql_type": "null col col null agg col", "sub_sql_new": "select order id , count order_items", "query": "SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id", "sub_ques": "how many order items correspond to each order id"}
{"db_id": "customers_and_invoices", "sub_sql": "select product_id , count distinct order_id from order_items", "question": "Show the product ids and the number of unique orders containing each product.", "sub_sql_type": "null col col null agg col col col col col", "sub_sql_new": "select product id , count distinct order id from order_items", "query": "SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id", "sub_ques": "show the product ids and the number of unique orders containing each product"}
{"db_id": "customers_and_invoices", "sub_sql": "select product_id , count distinct order_id from order_items", "question": "How many distinct order ids correspond to each product?", "sub_sql_type": "null col col null agg col col col col col", "sub_sql_new": "select product id , count distinct order id from order_items", "query": "SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id", "sub_ques": "how many distinct order ids correspond to each product"}
{"db_id": "customers_and_invoices", "sub_sql": "select t2.product_name , count products group by t2.product_name", "question": "Show all product names and the number of customers having an order on each product.", "sub_sql_type": "null col col null agg col", "sub_sql_new": "select product name , count products", "query": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name", "sub_ques": "show all product names and the number of customers having an order on each product"}
{"db_id": "customers_and_invoices", "sub_sql": "select t2.product_name , count products group by t2.product_name", "question": "What are teh names of the different products, as well as the number of customers who have ordered each product.", "sub_sql_type": "null col col null agg col", "sub_sql_new": "select product name , count products", "query": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name", "sub_ques": "what are teh names of the different products , as well as the number of customers who have ordered each product"}
{"db_id": "customers_and_invoices", "sub_sql": "select order_id , count distinct product_id from order_items", "question": "Show order ids and the number of products in each order.", "sub_sql_type": "null col col null agg col col col col col", "sub_sql_new": "select order id , count distinct product id from order_items", "query": "SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id", "sub_ques": "show order ids and the number of products in each order"}
{"db_id": "customers_and_invoices", "sub_sql": "select order_id , count distinct product_id from order_items", "question": "How many different products correspond to each order id?", "sub_sql_type": "null col col null agg col col col col col", "sub_sql_new": "select order id , count distinct product id from order_items", "query": "SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id", "sub_ques": "how many different products correspond to each order id"}
{"db_id": "customers_and_invoices", "sub_sql": "select order_id , sum product_quantity from order_items", "question": "Show order ids and the total quantity in each order.", "sub_sql_type": "null col col null agg col col col col", "sub_sql_new": "select order id , sum product quantity from order_items", "query": "SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id", "sub_ques": "show order ids and the total quantity in each order"}
{"db_id": "customers_and_invoices", "sub_sql": "select order_id , sum product_quantity from order_items", "question": "Give the order ids for all orders, as well as the total product quantity in each.", "sub_sql_type": "null col col null agg col col col col", "sub_sql_new": "select order id , sum product quantity from order_items", "query": "SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id", "sub_ques": "give the order ids for all orders , as well as the total product quantity"}
{"db_id": "customers_and_invoices", "sub_sql": "select count products", "question": "How many products were not included in any order?", "sub_sql_type": "null agg col", "sub_sql_new": "select count products", "query": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )", "sub_ques": "how many products"}
{"db_id": "customers_and_invoices", "sub_sql": "select product_id from order_items", "question": "How many products were not included in any order?", "sub_sql_type": "null col col col col", "sub_sql_new": "select product id from order_items", "query": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )", "sub_ques": "how many products"}
{"db_id": "customers_and_invoices", "sub_sql": "select count products", "question": "Count the number of products that were never ordered.", "sub_sql_type": "null agg col", "sub_sql_new": "select count products", "query": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )", "sub_ques": "count the number of products"}
{"db_id": "customers_and_invoices", "sub_sql": "select product_id from order_items", "question": "Count the number of products that were never ordered.", "sub_sql_type": "null col col col col", "sub_sql_new": "select product id from order_items", "query": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )", "sub_ques": "Count the number of products"}
{"db_id": "wedding", "sub_sql": "select count church", "question": "How many churches opened before 1850 are there?", "sub_sql_type": "null agg col", "sub_sql_new": "select count church", "query": "SELECT count(*) FROM Church WHERE Open_Date  <  1850", "sub_ques": "how many churches"}
{"db_id": "wedding", "sub_sql": "where open_date < 1850", "question": "How many churches opened before 1850 are there?", "sub_sql_type": "null col op op value", "sub_sql_new": "where open_date less than 1850", "query": "SELECT count(*) FROM Church WHERE Open_Date  <  1850", "sub_ques": "churches opened before 1850"}
{"db_id": "wedding", "sub_sql": "select name , open_date , organized_by from church", "question": "Show the name, open date, and organizer for all churches.", "sub_sql_type": "null col null col null col col col", "sub_sql_new": "select name , open_date , organized_by from church", "query": "SELECT name ,  open_date ,  organized_by FROM Church", "sub_ques": "show the name , open date , and organizer for all churches"}
{"db_id": "wedding", "sub_sql": "select name from church", "question": "List all church names in descending order of opening date.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from church", "query": "SELECT name FROM church ORDER BY open_date DESC", "sub_ques": "list all church names"}
{"db_id": "wedding", "sub_sql": "order by open_date desc", "question": "List all church names in descending order of opening date.", "sub_sql_type": "null null col null", "sub_sql_new": "order by open_date desc", "query": "SELECT name FROM church ORDER BY open_date DESC", "sub_ques": "in descending order of opening date"}
{"db_id": "wedding", "sub_sql": "select open_date from church", "question": "Show the opening year in whcih at least two churches opened.", "sub_sql_type": "null col col col", "sub_sql_new": "select open_date from church", "query": "SELECT open_date FROM church GROUP BY open_date HAVING count(*)  >=  2", "sub_ques": "show the opening year"}
{"db_id": "wedding", "sub_sql": "group by open_date having count church >= 2", "question": "Show the opening year in whcih at least two churches opened.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT open_date FROM church GROUP BY open_date HAVING count(*)  >=  2", "sub_ques": "opening year in whcih at least two churches"}
{"db_id": "wedding", "sub_sql": "select organized_by , name from church", "question": "Show the organizer and name for churches that opened between 1830 and 1840.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select organized_by , name from church", "query": "SELECT organized_by ,  name FROM church WHERE open_date BETWEEN 1830 AND 1840", "sub_ques": "show the organizer and name for churches"}
{"db_id": "wedding", "sub_sql": "select open_date , count church group by open_date", "question": "Show all opening years and the number of churches that opened in that year.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select open_date , count church", "query": "SELECT open_date ,  count(*) FROM church GROUP BY open_date", "sub_ques": "show all opening years and the number of churches"}
{"db_id": "wedding", "sub_sql": "select name , open_date from church", "question": "Show the name and opening year for three churches that opened most recently.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , open_date from church", "query": "SELECT name ,  open_date FROM church ORDER BY open_date DESC LIMIT 3", "sub_ques": "show the name and opening year for three churches"}
{"db_id": "wedding", "sub_sql": "order by open_date desc limit 3", "question": "Show the name and opening year for three churches that opened most recently.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by open_date desc limit 3", "query": "SELECT name ,  open_date FROM church ORDER BY open_date DESC LIMIT 3", "sub_ques": "three churches that opened most recently"}
{"db_id": "wedding", "sub_sql": "select count people", "question": "How many female people are older than 30 in our record?", "sub_sql_type": "null agg col", "sub_sql_new": "select count people", "query": "SELECT count(*) FROM people WHERE is_male  =  'F' AND age  >  30", "sub_ques": "how many people"}
{"db_id": "wedding", "sub_sql": "where is_male = f and age > 30", "question": "How many female people are older than 30 in our record?", "sub_sql_type": "null col op op value null col op value value", "sub_sql_new": "where is_male equal to f and and age > 30", "query": "SELECT count(*) FROM people WHERE is_male  =  'F' AND age  >  30", "sub_ques": "female people are older than 30"}
{"db_id": "wedding", "sub_sql": "select min age , max age , avg age from people", "question": "Show the minimum, maximum, and average age for all people.", "sub_sql_type": "null agg col null agg col null agg col col col", "sub_sql_new": "select min age , max age , avg age from people", "query": "SELECT min(age) ,  max(age) ,  avg(age) FROM people", "sub_ques": "show the minimum , maximum , and average age for all people"}
{"db_id": "wedding", "sub_sql": "select name , country from people", "question": "Show the name and country for all people whose age is smaller than the average.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , country from people", "query": "SELECT name ,  country FROM people WHERE age  <  (SELECT avg(age) FROM people)", "sub_ques": "show the name and country for all people"}
{"db_id": "wedding", "sub_sql": "where age < select avg age", "question": "Show the name and country for all people whose age is smaller than the average.", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where age less than select avg age", "query": "SELECT name ,  country FROM people WHERE age  <  (SELECT avg(age) FROM people)", "sub_ques": "whose age is smaller than the average"}
{"db_id": "wedding", "sub_sql": "where t1.year > 2014", "question": "Show the pair of male and female names in all weddings after year 2014", "sub_sql_type": "null col op op value", "sub_sql_new": "where year more than 2014", "query": "SELECT T2.name ,  T3.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id WHERE T1.year  >  2014", "sub_ques": "weddings after year 2014"}
{"db_id": "wedding", "sub_sql": "select name , age from people", "question": "Show the name and age for all male people who don't have a wedding.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , age from people", "query": "SELECT name ,  age FROM people WHERE is_male  =  'T' AND people_id NOT IN (SELECT male_id FROM wedding)", "sub_ques": "show the name and age for all people"}
{"db_id": "wedding", "sub_sql": "where is_male = t", "question": "Show the name and age for all male people who don't have a wedding.", "sub_sql_type": "null col op op value", "sub_sql_new": "where is_male equal to t", "query": "SELECT name ,  age FROM people WHERE is_male  =  'T' AND people_id NOT IN (SELECT male_id FROM wedding)", "sub_ques": "male people"}
{"db_id": "wedding", "sub_sql": "people not in wedding", "question": "Show the name and age for all male people who don't have a wedding.", "sub_sql_type": "tab op op tab", "sub_sql_new": "people not in wedding", "query": "SELECT name ,  age FROM people WHERE is_male  =  'T' AND people_id NOT IN (SELECT male_id FROM wedding)", "sub_ques": "people who do n't have a wedding"}
{"db_id": "wedding", "sub_sql": "select t1.name from church", "question": "Show all church names that have hosted least two weddings.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from church", "query": "SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id GROUP BY T1.church_id HAVING count(*)  >=  2", "sub_ques": "show all church names"}
{"db_id": "wedding", "sub_sql": "group by t1.church_id having count wedding >= 2", "question": "Show all church names that have hosted least two weddings.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id GROUP BY T1.church_id HAVING count(*)  >=  2", "sub_ques": "church names that have hosted least two weddings"}
{"db_id": "wedding", "sub_sql": "select t2.name from people", "question": "Show the names for all females from Canada having a wedding in year 2016.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from people", "query": "SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id  =  T2.people_id WHERE T1.year  =  2016 AND T2.is_male  =  'F' AND T2.country  =  'Canada'", "sub_ques": "show the names for all people"}
{"db_id": "wedding", "sub_sql": "where t1.year = 2016", "question": "Show the names for all females from Canada having a wedding in year 2016.", "sub_sql_type": "null col op op value", "sub_sql_new": "where year equal to 2016", "query": "SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id  =  T2.people_id WHERE T1.year  =  2016 AND T2.is_male  =  'F' AND T2.country  =  'Canada'", "sub_ques": "having a wedding in year 2016"}
{"db_id": "wedding", "sub_sql": "select count wedding", "question": "How many weddings are there in year 2016?", "sub_sql_type": "null agg col", "sub_sql_new": "select count wedding", "query": "SELECT count(*) FROM wedding WHERE YEAR  =  2016", "sub_ques": "how many weddings"}
{"db_id": "wedding", "sub_sql": "where year = 2016", "question": "How many weddings are there in year 2016?", "sub_sql_type": "null col op op value", "sub_sql_new": "where year equal to 2016", "query": "SELECT count(*) FROM wedding WHERE YEAR  =  2016", "sub_ques": "weddings are there in year 2016"}
{"db_id": "wedding", "sub_sql": "select t4.name from church", "question": "Show the church names for the weddings of all people older than 30.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from church", "query": "SELECT T4.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id JOIN church AS T4 ON T4.church_id  =  T1.church_id WHERE T2.age  >  30 OR T3.age  >  30", "sub_ques": "show the church names"}
{"db_id": "wedding", "sub_sql": "where t2.age > 30", "question": "Show the church names for the weddings of all people older than 30.", "sub_sql_type": "null col op op value", "sub_sql_new": "where age more than 30", "query": "SELECT T4.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id JOIN church AS T4 ON T4.church_id  =  T1.church_id WHERE T2.age  >  30 OR T3.age  >  30", "sub_ques": "people older than 30"}
{"db_id": "wedding", "sub_sql": "select country , count people group by country", "question": "Show all countries and the number of people from each country.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select country , count people", "query": "SELECT country ,  count(*) FROM people GROUP BY country", "sub_ques": "show all countries and the number of people from each country"}
{"db_id": "wedding", "sub_sql": "select count distinct church_id from wedding", "question": "How many churches have a wedding in year 2016?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct church_id from wedding", "query": "SELECT COUNT (DISTINCT church_id) FROM wedding WHERE YEAR  =  2016", "sub_ques": "how many churches"}
{"db_id": "wedding", "sub_sql": "where year = 2016", "question": "How many churches have a wedding in year 2016?", "sub_sql_type": "null col op op value", "sub_sql_new": "where year equal to 2016", "query": "SELECT COUNT (DISTINCT church_id) FROM wedding WHERE YEAR  =  2016", "sub_ques": "wedding in year 2016"}
{"db_id": "theme_gallery", "sub_sql": "select count artist", "question": "How many artists do we have?", "sub_sql_type": "null agg col", "sub_sql_new": "select count artist", "query": "SELECT count(*) FROM artist", "sub_ques": "how many artists"}
{"db_id": "theme_gallery", "sub_sql": "select count artist", "question": "Count the number of artists.", "sub_sql_type": "null agg col", "sub_sql_new": "select count artist", "query": "SELECT count(*) FROM artist", "sub_ques": "count the number of artists"}
{"db_id": "theme_gallery", "sub_sql": "select name , age , country from artist", "question": "Show all artist name, age, and country ordered by the yeared they joined.", "sub_sql_type": "null col null col null col col col", "sub_sql_new": "select name , age , country from artist", "query": "SELECT name ,  age ,  country FROM artist ORDER BY Year_Join", "sub_ques": "show all artist name , age , and country"}
{"db_id": "theme_gallery", "sub_sql": "order by year_join", "question": "Show all artist name, age, and country ordered by the yeared they joined.", "sub_sql_type": "null null col", "sub_sql_new": "order by year_join", "query": "SELECT name ,  age ,  country FROM artist ORDER BY Year_Join", "sub_ques": "ordered by the yeared they joined"}
{"db_id": "theme_gallery", "sub_sql": "select name , age , country from artist", "question": "What are the names, ages, and countries of artists, sorted by the year they joined?", "sub_sql_type": "null col null col null col col col", "sub_sql_new": "select name , age , country from artist", "query": "SELECT name ,  age ,  country FROM artist ORDER BY Year_Join", "sub_ques": "what are the names , ages , and countries of artists"}
{"db_id": "theme_gallery", "sub_sql": "order by year_join", "question": "What are the names, ages, and countries of artists, sorted by the year they joined?", "sub_sql_type": "null null col", "sub_sql_new": "order by year_join", "query": "SELECT name ,  age ,  country FROM artist ORDER BY Year_Join", "sub_ques": "sorted by the year they joined"}
{"db_id": "theme_gallery", "sub_sql": "select distinct country from artist", "question": "What are all distinct country for artists?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct country from artist", "query": "SELECT DISTINCT country FROM artist", "sub_ques": "what are all distinct country for artists"}
{"db_id": "theme_gallery", "sub_sql": "select distinct country from artist", "question": "Return the different countries for artists.", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct country from artist", "query": "SELECT DISTINCT country FROM artist", "sub_ques": "return the different countries for artists"}
{"db_id": "theme_gallery", "sub_sql": "select name , year_join from artist", "question": "Show all artist names and the year joined who are not from United States.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , year_join from artist", "query": "SELECT name ,  year_join FROM artist WHERE country != 'United States'", "sub_ques": "show all artist names and the year"}
{"db_id": "theme_gallery", "sub_sql": "where country != unitedstates", "question": "Show all artist names and the year joined who are not from United States.", "sub_sql_type": "null col op op op value", "sub_sql_new": "where country not equal to unitedstates", "query": "SELECT name ,  year_join FROM artist WHERE country != 'United States'", "sub_ques": "who are not from united states"}
{"db_id": "theme_gallery", "sub_sql": "select name , year_join from artist", "question": "What are the names and year of joining for artists that do not have the country \\\\\\\"United States\\\\\\\"?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , year_join from artist", "query": "SELECT name ,  year_join FROM artist WHERE country != 'United States'", "sub_ques": "what are the names and year of joining for artists"}
{"db_id": "theme_gallery", "sub_sql": "where country != unitedstates", "question": "What are the names and year of joining for artists that do not have the country \\\\\\\"United States\\\\\\\"?", "sub_sql_type": "null col op op op value", "sub_sql_new": "where country not equal to unitedstates", "query": "SELECT name ,  year_join FROM artist WHERE country != 'United States'", "sub_ques": "artists that do not have the country united states"}
{"db_id": "theme_gallery", "sub_sql": "select count artist", "question": "How many artists are above age 46 and joined after 1990?", "sub_sql_type": "null agg col", "sub_sql_new": "select count artist", "query": "SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990", "sub_ques": "how many artists"}
{"db_id": "theme_gallery", "sub_sql": "where age > 46", "question": "How many artists are above age 46 and joined after 1990?", "sub_sql_type": "null col op op value", "sub_sql_new": "where age more than 46", "query": "SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990", "sub_ques": "artists are above age 46"}
{"db_id": "theme_gallery", "sub_sql": "where year_join > 1990", "question": "How many artists are above age 46 and joined after 1990?", "sub_sql_type": "null col op op value", "sub_sql_new": "where year_join more than 1990", "query": "SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990", "sub_ques": "joined after 1990"}
{"db_id": "theme_gallery", "sub_sql": "select count artist", "question": "Count the number of artists who are older than 46 and joined after 1990.", "sub_sql_type": "null agg col", "sub_sql_new": "select count artist", "query": "SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990", "sub_ques": "count the number of artists"}
{"db_id": "theme_gallery", "sub_sql": "where age > 46", "question": "Count the number of artists who are older than 46 and joined after 1990.", "sub_sql_type": "null col op op value", "sub_sql_new": "where age more than 46", "query": "SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990", "sub_ques": "artists who are older than 46"}
{"db_id": "theme_gallery", "sub_sql": "select avg age , min age from artist", "question": "What is the average and minimum age of all artists from United States.", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select avg age , min age from artist", "query": "SELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'", "sub_ques": "what is the average and minimum age of all artists"}
{"db_id": "theme_gallery", "sub_sql": "where country = unitedstates", "question": "What is the average and minimum age of all artists from United States.", "sub_sql_type": "null col op op value", "sub_sql_new": "where country equal to unitedstates", "query": "SELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'", "sub_ques": "artists from united states"}
{"db_id": "theme_gallery", "sub_sql": "select avg age , min age from artist", "question": "Return the average and minimum ages across artists from the United States.", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select avg age , min age from artist", "query": "SELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'", "sub_ques": "return the average and minimum ages across artists"}
{"db_id": "theme_gallery", "sub_sql": "where country = unitedstates", "question": "Return the average and minimum ages across artists from the United States.", "sub_sql_type": "null col op op value", "sub_sql_new": "where country equal to unitedstates", "query": "SELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'", "sub_ques": "artists from the united states"}
{"db_id": "theme_gallery", "sub_sql": "select name from artist", "question": "What is the name of the artist who joined latest?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from artist", "query": "SELECT name FROM artist ORDER BY year_join DESC LIMIT 1", "sub_ques": "what is the name of the artist"}
{"db_id": "theme_gallery", "sub_sql": "order by year_join desc limit 1", "question": "What is the name of the artist who joined latest?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by year_join desc limit 1", "query": "SELECT name FROM artist ORDER BY year_join DESC LIMIT 1", "sub_ques": "the artist who joined latest"}
{"db_id": "theme_gallery", "sub_sql": "select name from artist", "question": "Return the name of the artist who has the latest join year.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from artist", "query": "SELECT name FROM artist ORDER BY year_join DESC LIMIT 1", "sub_ques": "return the name of the artist"}
{"db_id": "theme_gallery", "sub_sql": "order by year_join desc limit 1", "question": "Return the name of the artist who has the latest join year.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by year_join desc limit 1", "query": "SELECT name FROM artist ORDER BY year_join DESC LIMIT 1", "sub_ques": "artist who has the latest join year"}
{"db_id": "theme_gallery", "sub_sql": "select count exhibition", "question": "How many exhibition are there in year 2005 or after?", "sub_sql_type": "null agg col", "sub_sql_new": "select count exhibition", "query": "SELECT count(*) FROM exhibition WHERE YEAR  >=  2005", "sub_ques": "how many exhibition"}
{"db_id": "theme_gallery", "sub_sql": "where year >= 2005", "question": "How many exhibition are there in year 2005 or after?", "sub_sql_type": "null col op op op value", "sub_sql_new": "where year no less than 2005", "query": "SELECT count(*) FROM exhibition WHERE YEAR  >=  2005", "sub_ques": "in year 2005 or after"}
{"db_id": "theme_gallery", "sub_sql": "select count exhibition", "question": "Count the number of exhibitions that happened in or after 2005.", "sub_sql_type": "null agg col", "sub_sql_new": "select count exhibition", "query": "SELECT count(*) FROM exhibition WHERE YEAR  >=  2005", "sub_ques": "count the number of exhibitions"}
{"db_id": "theme_gallery", "sub_sql": "where year >= 2005", "question": "Count the number of exhibitions that happened in or after 2005.", "sub_sql_type": "null col op op op value", "sub_sql_new": "where year no less than 2005", "query": "SELECT count(*) FROM exhibition WHERE YEAR  >=  2005", "sub_ques": "exhibitions that happened in or after 2005"}
{"db_id": "theme_gallery", "sub_sql": "select theme , year from exhibition", "question": "Show theme and year for all exhibitions with ticket prices lower than 15.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select theme , year from exhibition", "query": "SELECT theme ,  YEAR FROM exhibition WHERE ticket_price  <  15", "sub_ques": "show theme and year for all exhibitions"}
{"db_id": "theme_gallery", "sub_sql": "where ticket_price < 15", "question": "Show theme and year for all exhibitions with ticket prices lower than 15.", "sub_sql_type": "null col op op value", "sub_sql_new": "where ticket_price less than 15", "query": "SELECT theme ,  YEAR FROM exhibition WHERE ticket_price  <  15", "sub_ques": "exhibitions with ticket prices lower than 15"}
{"db_id": "theme_gallery", "sub_sql": "select theme , year from exhibition", "question": "What are the theme and year for all exhibitions that have a ticket price under 15?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select theme , year from exhibition", "query": "SELECT theme ,  YEAR FROM exhibition WHERE ticket_price  <  15", "sub_ques": "what are the theme and year for all exhibitions"}
{"db_id": "theme_gallery", "sub_sql": "where ticket_price < 15", "question": "What are the theme and year for all exhibitions that have a ticket price under 15?", "sub_sql_type": "null col op op value", "sub_sql_new": "where ticket_price less than 15", "query": "SELECT theme ,  YEAR FROM exhibition WHERE ticket_price  <  15", "sub_ques": "exhibitions that have a ticket price under 15"}
{"db_id": "theme_gallery", "sub_sql": "select t2.name , count artist , exhibition group by t1.artist_id", "question": "Show all artist names and the number of exhibitions for each artist.", "sub_sql_type": "null col null agg col null col", "sub_sql_new": "select name , count artist , exhibition", "query": "SELECT T2.name ,  count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id", "sub_ques": "show all artist names and the number of exhibitions for each artist"}
{"db_id": "theme_gallery", "sub_sql": "select t2.name , count artist group by t1.artist_id", "question": "How many exhibitions has each artist had?", "sub_sql_type": "null col null agg col", "sub_sql_new": "select name , count artist", "query": "SELECT T2.name ,  count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id", "sub_ques": "how many exhibitions has each artist"}
{"db_id": "theme_gallery", "sub_sql": "select t2.name , t2.country from artist", "question": "What is the name and country for the artist with most number of exhibitions?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , country from artist", "query": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "what is the name and country for the artist"}
{"db_id": "theme_gallery", "sub_sql": "group by t1.artist_id order by count exhibition desc limit 1", "question": "What is the name and country for the artist with most number of exhibitions?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count exhibition desc limit 1", "query": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the artist with most number of exhibitions"}
{"db_id": "theme_gallery", "sub_sql": "select t2.name , t2.country from artist", "question": "Return the name and country corresponding to the artist who has had the most exhibitions.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , country from artist", "query": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "return the name and country corresponding to the artist"}
{"db_id": "theme_gallery", "sub_sql": "group by t1.artist_id order by count exhibition desc limit 1", "question": "Return the name and country corresponding to the artist who has had the most exhibitions.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count exhibition desc limit 1", "query": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the artist who has had the most exhibitions"}
{"db_id": "theme_gallery", "sub_sql": "select name from artist", "question": "Show names for artists without any exhibition.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from artist", "query": "SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)", "sub_ques": "show names for artists"}
{"db_id": "theme_gallery", "sub_sql": "artist not in exhibition", "question": "Show names for artists without any exhibition.", "sub_sql_type": "tab op op tab", "sub_sql_new": "artist not in exhibition", "query": "SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)", "sub_ques": "artists without any exhibition"}
{"db_id": "theme_gallery", "sub_sql": "select name from artist", "question": "What are the names of artists that have not had any exhibitions?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from artist", "query": "SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)", "sub_ques": "what are the names of artists"}
{"db_id": "theme_gallery", "sub_sql": "artist not in exhibition", "question": "What are the names of artists that have not had any exhibitions?", "sub_sql_type": "tab op op tab", "sub_sql_new": "artist not in exhibition", "query": "SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)", "sub_ques": "artists that have not had any exhibitions"}
{"db_id": "theme_gallery", "sub_sql": "select t1.theme , t2.name from exhibition , artist", "question": "What is the theme and artist name for the exhibition with a ticket price higher than the average?", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select theme , name from exhibition , artist", "query": "SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)", "sub_ques": "what is the theme and artist name for the exhibition"}
{"db_id": "theme_gallery", "sub_sql": "where t1.ticket_price > select avg ticket_price", "question": "What is the theme and artist name for the exhibition with a ticket price higher than the average?", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where ticket_price more than select avg ticket_price", "query": "SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)", "sub_ques": "a ticket price higher than the average"}
{"db_id": "theme_gallery", "sub_sql": "select t1.theme , t2.name from exhibition , artist", "question": "Return the names of artists and the themes of their exhibitions that had a ticket price higher than average.", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select theme , name from exhibition , artist", "query": "SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)", "sub_ques": "return the names of artists and the themes of their exhibitions"}
{"db_id": "theme_gallery", "sub_sql": "where t1.ticket_price > select avg ticket_price", "question": "Return the names of artists and the themes of their exhibitions that had a ticket price higher than average.", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where ticket_price more than select avg ticket_price", "query": "SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)", "sub_ques": "exhibitions that had a ticket price higher than average"}
{"db_id": "theme_gallery", "sub_sql": "select avg ticket_price , min ticket_price , max ticket_price from exhibition", "question": "Show the average, minimum, and maximum ticket prices for exhibitions for all years before 2009.", "sub_sql_type": "null agg col null agg col null agg col col col", "sub_sql_new": "select avg ticket_price , min ticket_price , max ticket_price from exhibition", "query": "SELECT avg(ticket_price) ,  min(ticket_price) ,  max(ticket_price) FROM exhibition WHERE YEAR  <  2009", "sub_ques": "show the average , minimum , and maximum ticket prices for exhibitions"}
{"db_id": "theme_gallery", "sub_sql": "where year < 2009", "question": "Show the average, minimum, and maximum ticket prices for exhibitions for all years before 2009.", "sub_sql_type": "null col op op value", "sub_sql_new": "where year less than 2009", "query": "SELECT avg(ticket_price) ,  min(ticket_price) ,  max(ticket_price) FROM exhibition WHERE YEAR  <  2009", "sub_ques": "exhibitions for all years before 2009"}
{"db_id": "theme_gallery", "sub_sql": "select avg ticket_price , min ticket_price , max ticket_price from exhibition", "question": "What are the average, minimum, and maximum ticket prices for exhibitions that happened prior to 2009?", "sub_sql_type": "null agg col null agg col null agg col col col", "sub_sql_new": "select avg ticket_price , min ticket_price , max ticket_price from exhibition", "query": "SELECT avg(ticket_price) ,  min(ticket_price) ,  max(ticket_price) FROM exhibition WHERE YEAR  <  2009", "sub_ques": "what are the average , minimum , and maximum ticket prices for exhibitions"}
{"db_id": "theme_gallery", "sub_sql": "where year < 2009", "question": "What are the average, minimum, and maximum ticket prices for exhibitions that happened prior to 2009?", "sub_sql_type": "null col op op value", "sub_sql_new": "where year less than 2009", "query": "SELECT avg(ticket_price) ,  min(ticket_price) ,  max(ticket_price) FROM exhibition WHERE YEAR  <  2009", "sub_ques": "exhibitions that happened prior to 2009"}
{"db_id": "theme_gallery", "sub_sql": "select theme , year from exhibition", "question": "Show theme and year for all exhibitions in an descending order of ticket price.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select theme , year from exhibition", "query": "SELECT theme ,  YEAR FROM exhibition ORDER BY ticket_price DESC", "sub_ques": "show theme and year for all exhibitions"}
{"db_id": "theme_gallery", "sub_sql": "order by ticket_price desc", "question": "Show theme and year for all exhibitions in an descending order of ticket price.", "sub_sql_type": "null null col null", "sub_sql_new": "order by ticket_price desc", "query": "SELECT theme ,  YEAR FROM exhibition ORDER BY ticket_price DESC", "sub_ques": "in an descending order of ticket price"}
{"db_id": "theme_gallery", "sub_sql": "select theme , year from exhibition", "question": "What are the themes and years for exhibitions, sorted by ticket price descending?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select theme , year from exhibition", "query": "SELECT theme ,  YEAR FROM exhibition ORDER BY ticket_price DESC", "sub_ques": "what are the themes and years for exhibitions"}
{"db_id": "theme_gallery", "sub_sql": "order by ticket_price desc", "question": "What are the themes and years for exhibitions, sorted by ticket price descending?", "sub_sql_type": "null null col null", "sub_sql_new": "order by ticket_price desc", "query": "SELECT theme ,  YEAR FROM exhibition ORDER BY ticket_price DESC", "sub_ques": "sorted by ticket price descending"}
{"db_id": "theme_gallery", "sub_sql": "select t2.theme , t1.date , t1.attendance from exhibition , exhibition_record", "question": "What is the theme, date, and attendance for the exhibition in year 2004?", "sub_sql_type": "null col null col null col col col null col", "sub_sql_new": "select theme , date , attendance from exhibition , exhibition_record", "query": "SELECT T2.theme ,  T1.date ,  T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T2.year  =  2004", "sub_ques": "what is the theme , date , and attendance for the exhibition"}
{"db_id": "theme_gallery", "sub_sql": "where t2.year = 2004", "question": "What is the theme, date, and attendance for the exhibition in year 2004?", "sub_sql_type": "null col op op value", "sub_sql_new": "where year equal to 2004", "query": "SELECT T2.theme ,  T1.date ,  T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T2.year  =  2004", "sub_ques": "exhibition in year 2004"}
{"db_id": "theme_gallery", "sub_sql": "select t2.theme , t1.date , t1.attendance from exhibition , exhibition_record", "question": "Return the themes, dates, and attendance for exhibitions that happened in 2004.", "sub_sql_type": "null col null col null col col col null col", "sub_sql_new": "select theme , date , attendance from exhibition , exhibition_record", "query": "SELECT T2.theme ,  T1.date ,  T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T2.year  =  2004", "sub_ques": "return the themes , dates , and attendance for exhibitions"}
{"db_id": "theme_gallery", "sub_sql": "where t2.year = 2004", "question": "Return the themes, dates, and attendance for exhibitions that happened in 2004.", "sub_sql_type": "null col op op value", "sub_sql_new": "where year equal to 2004", "query": "SELECT T2.theme ,  T1.date ,  T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T2.year  =  2004", "sub_ques": "exhibitions that happened in 2004"}
{"db_id": "theme_gallery", "sub_sql": "select count exhibition", "question": "How many exhibitions have a attendance more than 100 or have a ticket price below 10?", "sub_sql_type": "null agg col", "sub_sql_new": "select count exhibition", "query": "SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  100 OR T2.ticket_price  <  10", "sub_ques": "how many exhibitions"}
{"db_id": "theme_gallery", "sub_sql": "where t1.attendance > 100", "question": "How many exhibitions have a attendance more than 100 or have a ticket price below 10?", "sub_sql_type": "null col op op value", "sub_sql_new": "where attendance more than 100", "query": "SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  100 OR T2.ticket_price  <  10", "sub_ques": "attendance more than 100"}
{"db_id": "theme_gallery", "sub_sql": "select count exhibition", "question": "Count the number of exhibitions that have had an attendnance of over 100 or a ticket prices under 10.", "sub_sql_type": "null agg col", "sub_sql_new": "select count exhibition", "query": "SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  100 OR T2.ticket_price  <  10", "sub_ques": "count the number of exhibitions"}
{"db_id": "theme_gallery", "sub_sql": "where t1.attendance > 100", "question": "Count the number of exhibitions that have had an attendnance of over 100 or a ticket prices under 10.", "sub_sql_type": "null col op op value", "sub_sql_new": "where attendance more than 100", "query": "SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  100 OR T2.ticket_price  <  10", "sub_ques": "that have had an attendnance of over 100"}
{"db_id": "theme_gallery", "sub_sql": "where t2.ticket_price < 10", "question": "Count the number of exhibitions that have had an attendnance of over 100 or a ticket prices under 10.", "sub_sql_type": "null col op op value", "sub_sql_new": "where ticket_price less than 10", "query": "SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  100 OR T2.ticket_price  <  10", "sub_ques": "a ticket prices under 10"}
{"db_id": "theme_gallery", "sub_sql": "select t3.name from artist", "question": "Show all artist names with an average exhibition attendance over 200.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from artist", "query": "SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id JOIN artist AS T3 ON T3.artist_id  =  T2.artist_id GROUP BY T3.artist_id HAVING avg(T1.attendance)  >  200", "sub_ques": "show all artist names"}
{"db_id": "theme_gallery", "sub_sql": "group by t3.artist_id having avg t1.attendance > 200", "question": "Show all artist names with an average exhibition attendance over 200.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id JOIN artist AS T3 ON T3.artist_id  =  T2.artist_id GROUP BY T3.artist_id HAVING avg(T1.attendance)  >  200", "sub_ques": "artist names with an average exhibition attendance over 200"}
{"db_id": "theme_gallery", "sub_sql": "select t3.name from artist", "question": "What are the names of artist whose exhibitions draw over 200 attendees on average?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from artist", "query": "SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id JOIN artist AS T3 ON T3.artist_id  =  T2.artist_id GROUP BY T3.artist_id HAVING avg(T1.attendance)  >  200", "sub_ques": "what are the names of artist"}
{"db_id": "theme_gallery", "sub_sql": "group by t3.artist_id having avg t1.attendance > 200", "question": "What are the names of artist whose exhibitions draw over 200 attendees on average?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id JOIN artist AS T3 ON T3.artist_id  =  T2.artist_id GROUP BY T3.artist_id HAVING avg(T1.attendance)  >  200", "sub_ques": "artist whose exhibitions draw over 200 attendees on average"}
{"db_id": "epinions_1", "sub_sql": "where title = orange", "question": "Find the id of the item whose title is \\\\\\\"orange\\\\\\\".", "sub_sql_type": "null col op op value", "sub_sql_new": "where title equal to orange", "query": "SELECT i_id FROM item WHERE title  =  \\\\\\\"orange\\\\\\\"", "sub_ques": "item whose title is `` orange"}
{"db_id": "epinions_1", "sub_sql": "select count review", "question": "Find the number of reviews.", "sub_sql_type": "null agg col", "sub_sql_new": "select count review", "query": "SELECT count(*) FROM review", "sub_ques": "find the number of reviews"}
{"db_id": "epinions_1", "sub_sql": "select count useracct", "question": "How many users are there?", "sub_sql_type": "null agg col", "sub_sql_new": "select count useracct", "query": "SELECT count(*) FROM useracct", "sub_ques": "how many users are there"}
{"db_id": "epinions_1", "sub_sql": "select avg rating , max rating from review", "question": "Find the average and maximum rating of all reviews.", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select avg rating , max rating from review", "query": "SELECT avg(rating) ,  max(rating) FROM review", "sub_ques": "find the average and maximum rating of all reviews"}
{"db_id": "epinions_1", "sub_sql": "select max rank from review", "question": "Find the highest rank of all reviews.", "sub_sql_type": "null agg col col col", "sub_sql_new": "select max rank from review", "query": "SELECT max(rank) FROM review", "sub_ques": "find the highest rank of all reviews"}
{"db_id": "epinions_1", "sub_sql": "select count distinct u_id from review", "question": "How many different users wrote some reviews?", "sub_sql_type": "null agg col col col col col", "sub_sql_new": "select count distinct user id from review", "query": "SELECT count(DISTINCT u_id) FROM review", "sub_ques": "how many different users wrote some reviews"}
{"db_id": "epinions_1", "sub_sql": "select count distinct i_id from review", "question": "How many different items were reviewed by some users?", "sub_sql_type": "null agg col col col col col", "sub_sql_new": "select count distinct item id from review", "query": "SELECT count(DISTINCT i_id) FROM review", "sub_ques": "how many different items were reviewed"}
{"db_id": "epinions_1", "sub_sql": "select count item", "question": "Find the number of items that did not receive any review.", "sub_sql_type": "null agg col", "sub_sql_new": "select count item", "query": "SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)", "sub_ques": "find the number of items"}
{"db_id": "epinions_1", "sub_sql": "item not in review", "question": "Find the number of items that did not receive any review.", "sub_sql_type": "tab op op tab", "sub_sql_new": "item not in review", "query": "SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)", "sub_ques": "items that did not receive any review"}
{"db_id": "epinions_1", "sub_sql": "select name from useracct", "question": "Find the names of users who did not leave any review.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from useracct", "query": "SELECT name FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)", "sub_ques": "Find the names of users"}
{"db_id": "epinions_1", "sub_sql": "item not in review", "question": "Find the names of users who did not leave any review.", "sub_sql_type": "tab op op tab", "sub_sql_new": "item not in review", "query": "SELECT name FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)", "sub_ques": "users who did not leave any review"}
{"db_id": "epinions_1", "sub_sql": "select t1.title from item", "question": "Find the names of goods that receive a rating of 10.", "sub_sql_type": "null col col col", "sub_sql_new": "select title from item", "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  =  10", "sub_ques": "Find the names of goods"}
{"db_id": "epinions_1", "sub_sql": "where t2.rating = 10", "question": "Find the names of goods that receive a rating of 10.", "sub_sql_type": "null col op op value", "sub_sql_new": "where rating equal to 10", "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  =  10", "sub_ques": "goods that receive a rating of 10"}
{"db_id": "epinions_1", "sub_sql": "select t1.title from item", "question": "Find the titles of items whose rating is higher than the average review rating of all items.", "sub_sql_type": "null col col col", "sub_sql_new": "select title from item", "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  (SELECT avg(rating) FROM review)", "sub_ques": "Find the titles of items"}
{"db_id": "epinions_1", "sub_sql": "where t2.rating > select avg rating", "question": "Find the titles of items whose rating is higher than the average review rating of all items.", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where rating more than select avg rating", "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  (SELECT avg(rating) FROM review)", "sub_ques": "items whose rating is higher than the average review rating"}
{"db_id": "epinions_1", "sub_sql": "select t1.title from item", "question": "Find the titles of items that received any rating below 5.", "sub_sql_type": "null col col col", "sub_sql_new": "select title from item", "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  <  5", "sub_ques": "find the titles of items"}
{"db_id": "epinions_1", "sub_sql": "where t2.rating < 5", "question": "Find the titles of items that received any rating below 5.", "sub_sql_type": "null col op op value", "sub_sql_new": "where rating less than 5", "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  <  5", "sub_ques": "items that received any rating below 5"}
{"db_id": "epinions_1", "sub_sql": "select t1.title from item", "question": "Find the name of the item with the lowest average rating.", "sub_sql_type": "null col col col", "sub_sql_new": "select title from item", "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) LIMIT 1", "sub_ques": "find the name of the item"}
{"db_id": "epinions_1", "sub_sql": "group by t2.i_id order by avg t2.rating limit 1", "question": "Find the name of the item with the lowest average rating.", "sub_sql_type": "null null agg col null limv", "sub_sql_new": "order by avg rating limit 1", "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) LIMIT 1", "sub_ques": "the item with the lowest average rating"}
{"db_id": "epinions_1", "sub_sql": "select title from item", "question": "List the titles of all items in alphabetic order .", "sub_sql_type": "null col col col", "sub_sql_new": "select title from item", "query": "SELECT title FROM item ORDER BY title", "sub_ques": "list the titles of all items"}
{"db_id": "epinions_1", "sub_sql": "order by title", "question": "List the titles of all items in alphabetic order .", "sub_sql_type": "null null col", "sub_sql_new": "order by title", "query": "SELECT title FROM item ORDER BY title", "sub_ques": "the titles of all items in alphabetic order"}
{"db_id": "epinions_1", "sub_sql": "select t1.name from useracct", "question": "Find the name of the user who gives the most reviews.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from useracct", "query": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "Find the name of the user"}
{"db_id": "epinions_1", "sub_sql": "group by t2.u_id order by count review desc limit 1", "question": "Find the name of the user who gives the most reviews.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count review desc limit 1", "query": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the user who gives the most reviews"}
{"db_id": "epinions_1", "sub_sql": "select t1.title , t1.i_id from item", "question": "Find the name and id of the item with the highest average rating.", "sub_sql_type": "null col null col col col col", "sub_sql_new": "select title , item id from item", "query": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) DESC LIMIT 1", "sub_ques": "find the name and id of the item"}
{"db_id": "epinions_1", "sub_sql": "group by t2.i_id order by avg t2.rating desc limit 1", "question": "Find the name and id of the item with the highest average rating.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by avg rating desc limit 1", "query": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) DESC LIMIT 1", "sub_ques": "the item with the highest average rating"}
{"db_id": "epinions_1", "sub_sql": "select t1.title , t1.i_id from item", "question": "Find the name and id of the good with the highest average rank.", "sub_sql_type": "null col null col col col col", "sub_sql_new": "select title , item id from item", "query": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rank) DESC LIMIT 1", "sub_ques": "Find the name and id of the good"}
{"db_id": "epinions_1", "sub_sql": "group by t2.i_id order by avg t2.rank desc limit 1", "question": "Find the name and id of the good with the highest average rank.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by avg rank desc limit 1", "query": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rank) DESC LIMIT 1", "sub_ques": "the good with the highest average rank"}
{"db_id": "epinions_1", "sub_sql": "select t1.name , avg t2.rating from useracct , review", "question": "For each user, return the name and the average rating of reviews given by them.", "sub_sql_type": "null col null agg col col col null col", "sub_sql_new": "select name , avg rating from useracct , review", "query": "SELECT T1.name ,  avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id", "sub_ques": "return the name and the average rating of reviews"}
{"db_id": "epinions_1", "sub_sql": "select t1.name , count useracct group by t2.u_id", "question": "For each user, find their name and the number of reviews written by them.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select name , count useracct", "query": "SELECT T1.name ,  count(*) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id", "sub_ques": "For each user , find their name and the number of reviews"}
{"db_id": "epinions_1", "sub_sql": "select t1.name from useracct", "question": "Find the name of the user who gave the highest rating.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from useracct", "query": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id ORDER BY T2.rating DESC LIMIT 1", "sub_ques": "Find the name of the user"}
{"db_id": "epinions_1", "sub_sql": "order by t2.rating desc limit 1", "question": "Find the name of the user who gave the highest rating.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by rating desc limit 1", "query": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id ORDER BY T2.rating DESC LIMIT 1", "sub_ques": "the user who gave the highest rating"}
{"db_id": "epinions_1", "sub_sql": "select t1.name from useracct", "question": "Find the name of the source user with the highest average trust score.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from useracct", "query": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.source_u_id GROUP BY T2.source_u_id ORDER BY avg(trust) DESC LIMIT 1", "sub_ques": "Find the name of the source user"}
{"db_id": "epinions_1", "sub_sql": "group by t2.source_u_id order by avg trust desc limit 1", "question": "Find the name of the source user with the highest average trust score.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by avg trust desc limit 1", "query": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.source_u_id GROUP BY T2.source_u_id ORDER BY avg(trust) DESC LIMIT 1", "sub_ques": "the source user with the highest average trust score"}
{"db_id": "epinions_1", "sub_sql": "select t1.name , avg trust from useracct , trust", "question": "Find each target user's name and average trust score.", "sub_sql_type": "null col null agg col col col null col", "sub_sql_new": "select name , avg trust from useracct , trust", "query": "SELECT T1.name ,  avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.target_u_id GROUP BY T2.target_u_id", "sub_ques": "Find each target user name and average trust"}
{"db_id": "epinions_1", "sub_sql": "select t1.name from useracct", "question": "Find the name of the target user with the lowest trust score.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from useracct", "query": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.target_u_id ORDER BY trust LIMIT 1", "sub_ques": "Find the name of the target user"}
{"db_id": "epinions_1", "sub_sql": "order by trust limit 1", "question": "Find the name of the target user with the lowest trust score.", "sub_sql_type": "null null col null limv", "sub_sql_new": "order by trust limit 1", "query": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.target_u_id ORDER BY trust LIMIT 1", "sub_ques": "user with the lowest trust score"}
{"db_id": "epinions_1", "sub_sql": "select title from item", "question": "Find the names of the items that did not receive any review.", "sub_sql_type": "null col col col", "sub_sql_new": "select title from item", "query": "SELECT title FROM item WHERE i_id NOT IN (SELECT i_id FROM review)", "sub_ques": "Find the names of the items"}
{"db_id": "epinions_1", "sub_sql": "item not in review", "question": "Find the names of the items that did not receive any review.", "sub_sql_type": "tab op op tab", "sub_sql_new": "item not in review", "query": "SELECT title FROM item WHERE i_id NOT IN (SELECT i_id FROM review)", "sub_ques": "items that did not receive any review"}
{"db_id": "epinions_1", "sub_sql": "select name from useracct", "question": "Find the names of users who did not leave any review.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from useracct", "query": "SELECT name FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)", "sub_ques": "Find the names of users"}
{"db_id": "epinions_1", "sub_sql": "item not in review", "question": "Find the names of users who did not leave any review.", "sub_sql_type": "tab op op tab", "sub_sql_new": "item not in review", "query": "SELECT name FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)", "sub_ques": "users who did not leave any review"}
{"db_id": "epinions_1", "sub_sql": "select count useracct", "question": "Find the number of users who did not write any review.", "sub_sql_type": "null agg col", "sub_sql_new": "select count useracct", "query": "SELECT count(*) FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)", "sub_ques": "Find the number of users"}
{"db_id": "epinions_1", "sub_sql": "item not in review", "question": "Find the number of users who did not write any review.", "sub_sql_type": "tab op op tab", "sub_sql_new": "item not in review", "query": "SELECT count(*) FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)", "sub_ques": "users who did not write any review"}
{"db_id": "epinions_1", "sub_sql": "select count item", "question": "Find the number of items without any review.", "sub_sql_type": "null agg col", "sub_sql_new": "select count item", "query": "SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)", "sub_ques": "Find the number of items"}
{"db_id": "epinions_1", "sub_sql": "item not in review", "question": "Find the number of items without any review.", "sub_sql_type": "tab op op tab", "sub_sql_new": "item not in review", "query": "SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)", "sub_ques": "items without any review"}
{"db_id": "riding_club", "sub_sql": "select count player", "question": "How many players are there?", "sub_sql_type": "null agg col", "sub_sql_new": "select count player", "query": "SELECT count(*) FROM player", "sub_ques": "how many players"}
{"db_id": "riding_club", "sub_sql": "select player_name from player", "question": "List the names of players in ascending order of votes.", "sub_sql_type": "null col col col", "sub_sql_new": "select player_name from player", "query": "SELECT Player_name FROM player ORDER BY Votes ASC", "sub_ques": "list the names of players"}
{"db_id": "riding_club", "sub_sql": "order by votes asc", "question": "List the names of players in ascending order of votes.", "sub_sql_type": "null null col null", "sub_sql_new": "order by votes asc", "query": "SELECT Player_name FROM player ORDER BY Votes ASC", "sub_ques": "in ascending order of votes"}
{"db_id": "riding_club", "sub_sql": "select gender , occupation from player", "question": "What are the gender and occupation of players?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select gender , occupation from player", "query": "SELECT Gender ,  Occupation FROM player", "sub_ques": "what are the gender and occupation of players"}
{"db_id": "riding_club", "sub_sql": "select player_name , residence from player", "question": "List the name and residence for players whose occupation is not \\\\\\\"Researcher\\\\\\\".", "sub_sql_type": "null col null col col col", "sub_sql_new": "select player_name , residence from player", "query": "SELECT Player_name ,  residence FROM player WHERE Occupation != \\\\\\\"Researcher\\\\\\\"", "sub_ques": "list the name and residence for players"}
{"db_id": "riding_club", "sub_sql": "where occupation != researcher", "question": "List the name and residence for players whose occupation is not \\\\\\\"Researcher\\\\\\\".", "sub_sql_type": "null col op op op value", "sub_sql_new": "where occupation not equal to researcher", "query": "SELECT Player_name ,  residence FROM player WHERE Occupation != \\\\\\\"Researcher\\\\\\\"", "sub_ques": "occupation is not `` researcher"}
{"db_id": "riding_club", "sub_sql": "select sponsor_name from player", "question": "Show the names of sponsors of players whose residence is either \\\\\\\"Brandon\\\\\\\" or \\\\\\\"Birtle\\\\\\\".", "sub_sql_type": "null col col col", "sub_sql_new": "select sponsor_name from player", "query": "SELECT Sponsor_name FROM player WHERE Residence  =  \\\\\\\"Brandon\\\\\\\" OR Residence  =  \\\\\\\"Birtle\\\\\\\"", "sub_ques": "show the names of sponsors of players"}
{"db_id": "riding_club", "sub_sql": "where residence = brandon or residence = birtle", "question": "Show the names of sponsors of players whose residence is either \\\\\\\"Brandon\\\\\\\" or \\\\\\\"Birtle\\\\\\\".", "sub_sql_type": "null col op op value null col op value value", "sub_sql_new": "where residence equal to brandon or or residence = birtle", "query": "SELECT Sponsor_name FROM player WHERE Residence  =  \\\\\\\"Brandon\\\\\\\" OR Residence  =  \\\\\\\"Birtle\\\\\\\"", "sub_ques": "players whose residence is either `` brandon or birtle"}
{"db_id": "riding_club", "sub_sql": "select player_name from player", "question": "What is the name of the player with the largest number of votes?", "sub_sql_type": "null col col col", "sub_sql_new": "select player_name from player", "query": "SELECT Player_name FROM player ORDER BY Votes DESC LIMIT 1", "sub_ques": "what is the name of the player"}
{"db_id": "riding_club", "sub_sql": "order by votes desc limit 1", "question": "What is the name of the player with the largest number of votes?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by votes desc limit 1", "query": "SELECT Player_name FROM player ORDER BY Votes DESC LIMIT 1", "sub_ques": "the player with the largest number of votes"}
{"db_id": "riding_club", "sub_sql": "select occupation , count player group by occupation", "question": "Show different occupations along with the number of players in each occupation.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select occupation , count player", "query": "SELECT Occupation ,  COUNT(*) FROM player GROUP BY Occupation", "sub_ques": "show different occupations along with the number of players in each occupation"}
{"db_id": "riding_club", "sub_sql": "group by occupation order by count player desc limit 1", "question": "Please show the most common occupation of players.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count player desc limit 1", "query": "SELECT Occupation FROM player GROUP BY Occupation ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "the most common occupation of players"}
{"db_id": "riding_club", "sub_sql": "select residence from player", "question": "Show the residences that have at least two players.", "sub_sql_type": "null col col col", "sub_sql_new": "select residence from player", "query": "SELECT Residence FROM player GROUP BY Residence HAVING COUNT(*)  >=  2", "sub_ques": "show the residences"}
{"db_id": "riding_club", "sub_sql": "group by residence having count player >= 2", "question": "Show the residences that have at least two players.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT Residence FROM player GROUP BY Residence HAVING COUNT(*)  >=  2", "sub_ques": "residences that have at least two players"}
{"db_id": "riding_club", "sub_sql": "select t3.player_name , t2.coach_name from player , coach", "question": "Show the names of players and names of their coaches.", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select player_name , coach_name from player , coach", "query": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID", "sub_ques": "show the names of players and names of their coaches"}
{"db_id": "riding_club", "sub_sql": "select t3.player_name from player", "question": "Show the names of players coached by the rank 1 coach.", "sub_sql_type": "null col col col", "sub_sql_new": "select player_name from player", "query": "SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T2.Rank  =  1", "sub_ques": "show the names of players"}
{"db_id": "riding_club", "sub_sql": "where t2.rank = 1", "question": "Show the names of players coached by the rank 1 coach.", "sub_sql_type": "null col op op value", "sub_sql_new": "where rank equal to 1", "query": "SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T2.Rank  =  1", "sub_ques": "players coached by the rank 1 coach"}
{"db_id": "riding_club", "sub_sql": "select t3.player_name , t3.gender from player", "question": "Show the names and genders of players with a coach starting after 2011.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select player_name , gender from player", "query": "SELECT T3.Player_name ,  T3.gender FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T1.Starting_year  >  2011", "sub_ques": "show the names and genders of players"}
{"db_id": "riding_club", "sub_sql": "where t1.starting_year > 2011", "question": "Show the names and genders of players with a coach starting after 2011.", "sub_sql_type": "null col op op value", "sub_sql_new": "where starting_year more than 2011", "query": "SELECT T3.Player_name ,  T3.gender FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T1.Starting_year  >  2011", "sub_ques": "a coach starting after 2011"}
{"db_id": "riding_club", "sub_sql": "select t3.player_name , t2.coach_name from player , coach", "question": "Show the names of players and names of their coaches in descending order of the votes of players.", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select player_name , coach_name from player , coach", "query": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID ORDER BY T3.Votes DESC", "sub_ques": "show the names of players and names of their coaches"}
{"db_id": "riding_club", "sub_sql": "order by t3.votes desc", "question": "Show the names of players and names of their coaches in descending order of the votes of players.", "sub_sql_type": "null null col null", "sub_sql_new": "order by votes desc", "query": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID ORDER BY T3.Votes DESC", "sub_ques": "coaches in descending order of the votes of players"}
{"db_id": "riding_club", "sub_sql": "select player_name from player", "question": "List the names of players that do not have coaches.", "sub_sql_type": "null col col col", "sub_sql_new": "select player_name from player", "query": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM player_coach)", "sub_ques": "list the names of players"}
{"db_id": "riding_club", "sub_sql": "player not in player_coach", "question": "List the names of players that do not have coaches.", "sub_sql_type": "tab op op tab tab", "sub_sql_new": "player not in player coach", "query": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM player_coach)", "sub_ques": "players that do not have coaches"}
{"db_id": "riding_club", "sub_sql": "select t1.club_id , t1.club_name , count club group by t1.club_id", "question": "How many coaches does each club has? List the club id, name and the number of coaches.", "sub_sql_type": "null col null col null agg col", "sub_sql_new": "select club_id , club_name , count club", "query": "SELECT T1.club_id ,  T1.club_name , count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id", "sub_ques": "List the club id, name and the number of coaches"}
{"db_id": "riding_club", "sub_sql": "select t1.club_id , t1.gold from match_result", "question": "How many gold medals has the club with the most coaches won?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select club_id , gold from match_result", "query": "SELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "how many gold medals has the club"}
{"db_id": "riding_club", "sub_sql": "group by t1.club_id order by count coach desc limit 1", "question": "How many gold medals has the club with the most coaches won?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count coach desc limit 1", "query": "SELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "club with the most coaches won"}
{"db_id": "gymnast", "sub_sql": "select count gymnast", "question": "How many gymnasts are there?", "sub_sql_type": "null agg col", "sub_sql_new": "select count gymnast", "query": "SELECT count(*) FROM gymnast", "sub_ques": "how many gymnasts"}
{"db_id": "gymnast", "sub_sql": "select count gymnast", "question": "Count the number of gymnasts.", "sub_sql_type": "null agg col", "sub_sql_new": "select count gymnast", "query": "SELECT count(*) FROM gymnast", "sub_ques": "count the number of gymnasts"}
{"db_id": "gymnast", "sub_sql": "select total_points from gymnast", "question": "List the total points of gymnasts in descending order.", "sub_sql_type": "null col col col", "sub_sql_new": "select total_points from gymnast", "query": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC", "sub_ques": "list the total points of gymnasts"}
{"db_id": "gymnast", "sub_sql": "order by total_points desc", "question": "List the total points of gymnasts in descending order.", "sub_sql_type": "null null col null", "sub_sql_new": "order by total_points desc", "query": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC", "sub_ques": "the total points of gymnasts in descending order"}
{"db_id": "gymnast", "sub_sql": "select total_points from gymnast", "question": "What are the total points for all gymnasts, ordered by total points descending?", "sub_sql_type": "null col col col", "sub_sql_new": "select total_points from gymnast", "query": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC", "sub_ques": "what are the total points for all gymnasts"}
{"db_id": "gymnast", "sub_sql": "order by total_points desc", "question": "What are the total points for all gymnasts, ordered by total points descending?", "sub_sql_type": "null null col null", "sub_sql_new": "order by total_points desc", "query": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC", "sub_ques": "ordered by total points descending"}
{"db_id": "gymnast", "sub_sql": "select total_points from gymnast", "question": "List the total points of gymnasts in descending order of floor exercise points.", "sub_sql_type": "null col col col", "sub_sql_new": "select total_points from gymnast", "query": "SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC", "sub_ques": "list the total points of gymnasts"}
{"db_id": "gymnast", "sub_sql": "order by floor_exercise_points desc", "question": "List the total points of gymnasts in descending order of floor exercise points.", "sub_sql_type": "null null col null", "sub_sql_new": "order by floor_exercise_points desc", "query": "SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC", "sub_ques": "in descending order of floor exercise points"}
{"db_id": "gymnast", "sub_sql": "select total_points from gymnast", "question": "What are the total points of gymnasts, ordered by their floor exercise points descending?", "sub_sql_type": "null col col col", "sub_sql_new": "select total_points from gymnast", "query": "SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC", "sub_ques": "what are the total points of gymnasts"}
{"db_id": "gymnast", "sub_sql": "order by floor_exercise_points desc", "question": "What are the total points of gymnasts, ordered by their floor exercise points descending?", "sub_sql_type": "null null col null", "sub_sql_new": "order by floor_exercise_points desc", "query": "SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC", "sub_ques": "ordered by their floor exercise points descending"}
{"db_id": "gymnast", "sub_sql": "select avg horizontal_bar_points from gymnast", "question": "What is the average horizontal bar points for all gymnasts?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select avg horizontal_bar_points from gymnast", "query": "SELECT avg(Horizontal_Bar_Points) FROM gymnast", "sub_ques": "what is the average horizontal bar points for all gymnasts"}
{"db_id": "gymnast", "sub_sql": "select avg horizontal_bar_points from gymnast", "question": "Return the average horizontal bar points across all gymnasts.", "sub_sql_type": "null agg col col col", "sub_sql_new": "select avg horizontal_bar_points from gymnast", "query": "SELECT avg(Horizontal_Bar_Points) FROM gymnast", "sub_ques": "return the average horizontal bar points across all gymnasts"}
{"db_id": "gymnast", "sub_sql": "select name from people", "question": "What are the names of people in ascending alphabetical order?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from people", "query": "SELECT Name FROM People ORDER BY Name ASC", "sub_ques": "what are the names of people"}
{"db_id": "gymnast", "sub_sql": "order by name asc", "question": "What are the names of people in ascending alphabetical order?", "sub_sql_type": "null null col null", "sub_sql_new": "order by name asc", "query": "SELECT Name FROM People ORDER BY Name ASC", "sub_ques": "the names of people in ascending alphabetical order"}
{"db_id": "gymnast", "sub_sql": "select name from people", "question": "Return the names of people, ordered alphabetically.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from people", "query": "SELECT Name FROM People ORDER BY Name ASC", "sub_ques": "return the names of people"}
{"db_id": "gymnast", "sub_sql": "order by name asc", "question": "Return the names of people, ordered alphabetically.", "sub_sql_type": "null null col null", "sub_sql_new": "order by name asc", "query": "SELECT Name FROM People ORDER BY Name ASC", "sub_ques": "the names of people , ordered alphabetically"}
{"db_id": "gymnast", "sub_sql": "select t2.name from people , gymnast", "question": "What are the names of gymnasts?", "sub_sql_type": "null col col col null col", "sub_sql_new": "select name from people , gymnast", "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID", "sub_ques": "what are the names of gymnasts"}
{"db_id": "gymnast", "sub_sql": "select t2.name from people , gymnast", "question": "Return the names of the gymnasts.", "sub_sql_type": "null col col col null col", "sub_sql_new": "select name from people , gymnast", "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID", "sub_ques": "Return the names of the gymnasts"}
{"db_id": "gymnast", "sub_sql": "select t2.name from people", "question": "What are the names of gymnasts whose hometown is not \\\\\\\"Santo Domingo\\\\\\\"?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from people", "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != \\\\\\\"Santo Domingo\\\\\\\"", "sub_ques": "what are the names of gymnasts"}
{"db_id": "gymnast", "sub_sql": "where t2.hometown != santodomingo", "question": "What are the names of gymnasts whose hometown is not \\\\\\\"Santo Domingo\\\\\\\"?", "sub_sql_type": "null col op op op value", "sub_sql_new": "where hometown not equal to santodomingo", "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != \\\\\\\"Santo Domingo\\\\\\\"", "sub_ques": "hometown is not santo domingo"}
{"db_id": "gymnast", "sub_sql": "select t2.name from people", "question": "Return the names of gymnasts who did not grow up in Santo Domingo.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from people", "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != \\\\\\\"Santo Domingo\\\\\\\"", "sub_ques": "Return the names of gymnasts"}
{"db_id": "gymnast", "sub_sql": "where t2.hometown != santodomingo", "question": "Return the names of gymnasts who did not grow up in Santo Domingo.", "sub_sql_type": "null col op op op value", "sub_sql_new": "where hometown not equal to santodomingo", "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != \\\\\\\"Santo Domingo\\\\\\\"", "sub_ques": "who did not grow up in santo domingo"}
{"db_id": "gymnast", "sub_sql": "select age from people", "question": "What is the age of the tallest person?", "sub_sql_type": "null col col col", "sub_sql_new": "select age from people", "query": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1", "sub_ques": "what is the age of the person"}
{"db_id": "gymnast", "sub_sql": "order by height desc limit 1", "question": "What is the age of the tallest person?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by height desc limit 1", "query": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1", "sub_ques": "the  person"}
{"db_id": "gymnast", "sub_sql": "select age from people", "question": "Return the age of the person with the greatest height.", "sub_sql_type": "null col col col", "sub_sql_new": "select age from people", "query": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1", "sub_ques": "Return the age of the person"}
{"db_id": "gymnast", "sub_sql": "order by height desc limit 1", "question": "Return the age of the person with the greatest height.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by height desc limit 1", "query": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1", "sub_ques": "with the greatest height"}
{"db_id": "gymnast", "sub_sql": "select name from people", "question": "List the names of the top 5 oldest people.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from people", "query": "SELECT Name FROM People ORDER BY Age DESC LIMIT 5", "sub_ques": "list the names of people"}
{"db_id": "gymnast", "sub_sql": "order by age desc limit 5", "question": "List the names of the top 5 oldest people.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by age desc limit 5", "query": "SELECT Name FROM People ORDER BY Age DESC LIMIT 5", "sub_ques": "the top 5 oldest people"}
{"db_id": "gymnast", "sub_sql": "select name from people", "question": "What are the names of the five oldest people?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from people", "query": "SELECT Name FROM People ORDER BY Age DESC LIMIT 5", "sub_ques": "what are the names of people"}
{"db_id": "gymnast", "sub_sql": "order by age desc limit 5", "question": "What are the names of the five oldest people?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by age desc limit 5", "query": "SELECT Name FROM People ORDER BY Age DESC LIMIT 5", "sub_ques": "the five oldest people"}
{"db_id": "gymnast", "sub_sql": "select t1.total_points from gymnast", "question": "What is the total point count of the youngest gymnast?", "sub_sql_type": "null col col col", "sub_sql_new": "select total_points from gymnast", "query": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1", "sub_ques": "what is the total point count"}
{"db_id": "gymnast", "sub_sql": "order by t2.age asc limit 1", "question": "What is the total point count of the youngest gymnast?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by age asc limit 1", "query": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1", "sub_ques": "the youngest gymnast"}
{"db_id": "gymnast", "sub_sql": "select t1.total_points from gymnast", "question": "Return the total points of the gymnast with the lowest age.", "sub_sql_type": "null col col col", "sub_sql_new": "select total_points from gymnast", "query": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1", "sub_ques": "return the total points of the gymnast"}
{"db_id": "gymnast", "sub_sql": "order by t2.age asc limit 1", "question": "Return the total points of the gymnast with the lowest age.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by age asc limit 1", "query": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1", "sub_ques": "the gymnast with the lowest age"}
{"db_id": "gymnast", "sub_sql": "select avg t2.age from people", "question": "What is the average age of all gymnasts?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select avg age from people", "query": "SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID", "sub_ques": "what is the average age"}
{"db_id": "gymnast", "sub_sql": "select avg t2.age from people", "question": "Return the average age across all gymnasts.", "sub_sql_type": "null agg col col col", "sub_sql_new": "select avg age from people", "query": "SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID", "sub_ques": "Return the average age across all gymnasts"}
{"db_id": "gymnast", "sub_sql": "select distinct t2.hometown from people", "question": "What are the distinct hometowns of gymnasts with total points more than 57.5?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct hometown from people", "query": "SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  57.5", "sub_ques": "what are the distinct hometowns"}
{"db_id": "gymnast", "sub_sql": "where t1.total_points > 57.5", "question": "What are the distinct hometowns of gymnasts with total points more than 57.5?", "sub_sql_type": "null col op op value", "sub_sql_new": "where total_points more than 57.5", "query": "SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  57.5", "sub_ques": "gymnasts with total points more than 57.5"}
{"db_id": "gymnast", "sub_sql": "select distinct t2.hometown from people", "question": "Give the different hometowns of gymnasts that have a total point score of above 57.5.", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct hometown from people", "query": "SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  57.5", "sub_ques": "give the different hometowns"}
{"db_id": "gymnast", "sub_sql": "where t1.total_points > 57.5", "question": "Give the different hometowns of gymnasts that have a total point score of above 57.5.", "sub_sql_type": "null col op op value", "sub_sql_new": "where total_points more than 57.5", "query": "SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  57.5", "sub_ques": "gymnasts that have a total point score of above 57.5"}
{"db_id": "gymnast", "sub_sql": "select t2.hometown , count gymnast group by t2.hometown", "question": "What are the hometowns of gymnasts and the corresponding number of gymnasts?", "sub_sql_type": "null col null agg col", "sub_sql_new": "select hometown , count gymnast", "query": "SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown", "sub_ques": "what are the hometowns of gymnasts and the corresponding number of gymnasts"}
{"db_id": "gymnast", "sub_sql": "select t2.hometown , count gymnast group by t2.hometown", "question": "How many gymnasts are from each hometown?", "sub_sql_type": "null col null agg col", "sub_sql_new": "select hometown , count gymnast", "query": "SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown", "sub_ques": "how many gymnasts are from each hometown"}
{"db_id": "gymnast", "sub_sql": "select t2.hometown from people", "question": "What is the most common hometown of gymnasts?", "sub_sql_type": "null col col col", "sub_sql_new": "select hometown from people", "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "what is the hometown"}
{"db_id": "gymnast", "sub_sql": "group by t2.hometown order by count gymnast desc limit 1", "question": "What is the most common hometown of gymnasts?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count gymnast desc limit 1", "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "the most common hometown of gymnasts"}
{"db_id": "gymnast", "sub_sql": "select t2.hometown from people", "question": "Return the hometown that is most common among gymnasts.", "sub_sql_type": "null col col col", "sub_sql_new": "select hometown from people", "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "return the hometown"}
{"db_id": "gymnast", "sub_sql": "group by t2.hometown order by count gymnast desc limit 1", "question": "Return the hometown that is most common among gymnasts.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count gymnast desc limit 1", "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "the hometown that is most common among gymnasts"}
{"db_id": "gymnast", "sub_sql": "select t2.hometown from people", "question": "What are the hometowns that are shared by at least two gymnasts?", "sub_sql_type": "null col col col", "sub_sql_new": "select hometown from people", "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2", "sub_ques": "what are the hometowns"}
{"db_id": "gymnast", "sub_sql": "group by t2.hometown having count gymnast >= 2", "question": "What are the hometowns that are shared by at least two gymnasts?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2", "sub_ques": "hometowns that are shared by at least two gymnasts"}
{"db_id": "gymnast", "sub_sql": "select t2.hometown from people", "question": "Give the hometowns from which two or more gymnasts are from.", "sub_sql_type": "null col col col", "sub_sql_new": "select hometown from people", "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2", "sub_ques": "give the hometowns"}
{"db_id": "gymnast", "sub_sql": "group by t2.hometown having count gymnast >= 2", "question": "Give the hometowns from which two or more gymnasts are from.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2", "sub_ques": "hometowns from which two or more gymnasts are from"}
{"db_id": "gymnast", "sub_sql": "select t2.name from people", "question": "List the names of gymnasts in ascending order by their heights.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from people", "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Height ASC", "sub_ques": "list the names of gymnasts"}
{"db_id": "gymnast", "sub_sql": "order by t2.height asc", "question": "List the names of gymnasts in ascending order by their heights.", "sub_sql_type": "null null col null", "sub_sql_new": "order by height asc", "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Height ASC", "sub_ques": "gymnasts in ascending order by their heights"}
{"db_id": "gymnast", "sub_sql": "select t2.name from people", "question": "What are the names of gymnasts, ordered by their heights ascending?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from people", "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Height ASC", "sub_ques": "what are the names of gymnasts"}
{"db_id": "gymnast", "sub_sql": "order by t2.height asc", "question": "What are the names of gymnasts, ordered by their heights ascending?", "sub_sql_type": "null null col null", "sub_sql_new": "order by height asc", "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Height ASC", "sub_ques": "gymnasts, ordered by their heights ascending"}
{"db_id": "gymnast", "sub_sql": "select count distinct hometown from people", "question": "How many distinct hometowns did these people have?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct hometown from people", "query": "SELECT count(DISTINCT Hometown) FROM people", "sub_ques": "how many distinct hometowns did these people"}
{"db_id": "gymnast", "sub_sql": "select count distinct hometown from people", "question": "Count the number of different hometowns of these people.", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct hometown from people", "query": "SELECT count(DISTINCT Hometown) FROM people", "sub_ques": "count the number of different hometowns of these people"}
{"db_id": "gymnast", "sub_sql": "select t2.age from people", "question": "Show the ages of gymnasts in descending order of total points.", "sub_sql_type": "null col col col", "sub_sql_new": "select age from people", "query": "SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T1.Total_Points DESC", "sub_ques": "show the ages of gymnasts"}
{"db_id": "gymnast", "sub_sql": "order by t1.total_points desc", "question": "Show the ages of gymnasts in descending order of total points.", "sub_sql_type": "null null col null", "sub_sql_new": "order by total_points desc", "query": "SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T1.Total_Points DESC", "sub_ques": "gymnasts in descending order of total points"}
{"db_id": "gymnast", "sub_sql": "select t2.age from people", "question": "What are the ages of the gymnasts, ordered descending by their total points?", "sub_sql_type": "null col col col", "sub_sql_new": "select age from people", "query": "SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T1.Total_Points DESC", "sub_ques": "what are the ages of the gymnasts"}
{"db_id": "gymnast", "sub_sql": "order by t1.total_points desc", "question": "What are the ages of the gymnasts, ordered descending by their total points?", "sub_sql_type": "null null col null", "sub_sql_new": "order by total_points desc", "query": "SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T1.Total_Points DESC", "sub_ques": "gymnasts, ordered descending by their total points"}
{"db_id": "small_bank_1", "sub_sql": "select sum t2.balance from savings", "question": "Find the total savings balance of all accounts except the account with name \\\\u2018Brown\\\\u2019.", "sub_sql_type": "null agg col col col", "sub_sql_new": "select sum balance from savings", "query": "SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != 'Brown'", "sub_ques": "find the total savings balance"}
{"db_id": "small_bank_1", "sub_sql": "where t1.name != brown", "question": "Find the total savings balance of all accounts except the account with name \\\\u2018Brown\\\\u2019.", "sub_sql_type": "null col op op op value", "sub_sql_new": "where name not equal to brown", "query": "SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != 'Brown'", "sub_ques": "except the account with name brown"}
{"db_id": "small_bank_1", "sub_sql": "select sum t2.balance from savings", "question": "What is the total balance of savings accounts not belonging to someone with the name Brown?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select sum balance from savings", "query": "SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != 'Brown'", "sub_ques": "what is the total balance of savings"}
{"db_id": "small_bank_1", "sub_sql": "where t1.name != brown", "question": "What is the total balance of savings accounts not belonging to someone with the name Brown?", "sub_sql_type": "null col op op op value", "sub_sql_new": "where name not equal to brown", "query": "SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != 'Brown'", "sub_ques": "accounts not belonging to someone with the name brown"}
{"db_id": "small_bank_1", "sub_sql": "select count accounts", "question": "How many accounts are there in total?", "sub_sql_type": "null agg col", "sub_sql_new": "select count accounts", "query": "SELECT count(*) FROM accounts", "sub_ques": "how many accounts are there in total"}
{"db_id": "small_bank_1", "sub_sql": "select count accounts", "question": "Count the number of accounts.", "sub_sql_type": "null agg col", "sub_sql_new": "select count accounts", "query": "SELECT count(*) FROM accounts", "sub_ques": "count the number of accounts"}
{"db_id": "small_bank_1", "sub_sql": "select sum balance from checking", "question": "What is the total checking balance in all accounts?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select sum balance from checking", "query": "SELECT sum(balance) FROM checking", "sub_ques": "what is the total checking balance"}
{"db_id": "small_bank_1", "sub_sql": "select sum balance from checking", "question": "Find the total balance across checking accounts.", "sub_sql_type": "null agg col col col", "sub_sql_new": "select sum balance from checking", "query": "SELECT sum(balance) FROM checking", "sub_ques": "find the total balance across checking"}
{"db_id": "small_bank_1", "sub_sql": "select avg balance from checking", "question": "Find the average checking balance.", "sub_sql_type": "null agg col col col", "sub_sql_new": "select avg balance from checking", "query": "SELECT avg(balance) FROM checking", "sub_ques": "find the average checking balance"}
{"db_id": "small_bank_1", "sub_sql": "select avg balance from checking", "question": "What is the average balance in checking accounts?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select avg balance from checking", "query": "SELECT avg(balance) FROM checking", "sub_ques": "what is the average balance in checking"}
{"db_id": "small_bank_1", "sub_sql": "select count savings", "question": "How many accounts have a savings balance above the average savings balance?", "sub_sql_type": "null agg col", "sub_sql_new": "select count savings", "query": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)", "sub_ques": "how many accounts"}
{"db_id": "small_bank_1", "sub_sql": "where balance > select avg balance", "question": "How many accounts have a savings balance above the average savings balance?", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where balance more than select avg balance", "query": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)", "sub_ques": "balance above the average savings balance"}
{"db_id": "small_bank_1", "sub_sql": "select count savings", "question": "Find the number of accounts with a savings balance that is higher than the average savings balance.", "sub_sql_type": "null agg col", "sub_sql_new": "select count savings", "query": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)", "sub_ques": "find the the number of accounts with a savings"}
{"db_id": "small_bank_1", "sub_sql": "where balance > select avg balance", "question": "Find the number of accounts with a savings balance that is higher than the average savings balance.", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where balance more than select avg balance", "query": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)", "sub_ques": "balance that is higher than the average savings balance"}
{"db_id": "small_bank_1", "sub_sql": "select t1.custid , t1.name from accounts", "question": "Find the name and id of accounts whose checking balance is below the maximum checking balance.", "sub_sql_type": "null col col null col col col", "sub_sql_new": "select customer id , name from accounts", "query": "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)", "sub_ques": "find the name and id of accounts"}
{"db_id": "small_bank_1", "sub_sql": "where t2.balance < select max balance", "question": "Find the name and id of accounts whose checking balance is below the maximum checking balance.", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where balance less than select max balance", "query": "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)", "sub_ques": "whose balance is below the maximum checking balance"}
{"db_id": "small_bank_1", "sub_sql": "select t1.custid , t1.name from accounts", "question": "What are the customer id and name corresponding to accounts with a checking balance less than the largest checking balance?", "sub_sql_type": "null col col null col col col", "sub_sql_new": "select customer id , name from accounts", "query": "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)", "sub_ques": "what are the customer id and name corresponding to accounts"}
{"db_id": "small_bank_1", "sub_sql": "where t2.balance < select max balance", "question": "What are the customer id and name corresponding to accounts with a checking balance less than the largest checking balance?", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where balance less than select max balance", "query": "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)", "sub_ques": "with a checking balance less than the largest checking balance"}
{"db_id": "small_bank_1", "sub_sql": "select t2.balance from checking", "question": "What is the checking balance of the account whose owner\\\\u2019s name contains the substring \\\\u2018ee\\\\u2019?", "sub_sql_type": "null col col col", "sub_sql_new": "select balance from checking", "query": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%'", "sub_ques": "what is the checking balance of the account"}
{"db_id": "small_bank_1", "sub_sql": "where t1.name like ee", "question": "What is the checking balance of the account whose owner\\\\u2019s name contains the substring \\\\u2018ee\\\\u2019?", "sub_sql_type": "null col op value", "sub_sql_new": "where name like ee", "query": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%'", "sub_ques": "name contains the substring ee"}
{"db_id": "small_bank_1", "sub_sql": "select t2.balance from checking", "question": "Find the balance of the checking account belonging to an owner whose name contains 'ee'.", "sub_sql_type": "null col col col", "sub_sql_new": "select balance from checking", "query": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%'", "sub_ques": "find the balance of the checking"}
{"db_id": "small_bank_1", "sub_sql": "where t1.name like ee", "question": "Find the balance of the checking account belonging to an owner whose name contains 'ee'.", "sub_sql_type": "null col op value", "sub_sql_new": "where name like ee", "query": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%'", "sub_ques": "an owner whose name contains ee"}
{"db_id": "small_bank_1", "sub_sql": "select t2.balance , t3.balance from checking , savings", "question": "Find the checking balance and saving balance in the Brown\\\\u2019s account.", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select balance , balance from checking , savings", "query": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'", "sub_ques": "find the checking balance and saving balance"}
{"db_id": "small_bank_1", "sub_sql": "where t1.name = brown", "question": "Find the checking balance and saving balance in the Brown\\\\u2019s account.", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to brown", "query": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'", "sub_ques": "in the brown account"}
{"db_id": "small_bank_1", "sub_sql": "select t2.balance , t3.balance from checking , savings", "question": "What are the checking and savings balances in accounts belonging to Brown?", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select balance , balance from checking , savings", "query": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'", "sub_ques": "what are the checking and savings balances"}
{"db_id": "small_bank_1", "sub_sql": "where t1.name = brown", "question": "What are the checking and savings balances in accounts belonging to Brown?", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to brown", "query": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'", "sub_ques": "in accounts belonging to brown"}
{"db_id": "small_bank_1", "sub_sql": "select t2.balance from checking", "question": "Find the checking balance of the accounts whose savings balance is higher than the average savings balance.", "sub_sql_type": "null col col col", "sub_sql_new": "select balance from checking", "query": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))", "sub_ques": "find the balance of the accounts"}
{"db_id": "small_bank_1", "sub_sql": "where t2.balance > select avg balance", "question": "Find the checking balance of the accounts whose savings balance is higher than the average savings balance.", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where balance more than select avg balance", "query": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))", "sub_ques": "accounts whose savings balance is higher than the average savings balance"}
{"db_id": "small_bank_1", "sub_sql": "select t2.balance from checking", "question": "What are the balances of checking accounts belonging to people with savings balances greater than the average savings balance?", "sub_sql_type": "null col col col", "sub_sql_new": "select balance from checking", "query": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))", "sub_ques": "what are the balances of checking accounts"}
{"db_id": "small_bank_1", "sub_sql": "where t2.balance > select avg balance", "question": "What are the balances of checking accounts belonging to people with savings balances greater than the average savings balance?", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where balance more than select avg balance", "query": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))", "sub_ques": "with savings balances greater than the average savings balance"}
{"db_id": "small_bank_1", "sub_sql": "select name from accounts", "question": "List all customers\\\\u2019 names in the alphabetical order.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from accounts", "query": "SELECT name FROM accounts ORDER BY name", "sub_ques": "list all customers names"}
{"db_id": "small_bank_1", "sub_sql": "order by name", "question": "List all customers\\\\u2019 names in the alphabetical order.", "sub_sql_type": "null null col", "sub_sql_new": "order by name", "query": "SELECT name FROM accounts ORDER BY name", "sub_ques": "names in the alphabetical order"}
{"db_id": "small_bank_1", "sub_sql": "select name from accounts", "question": "What are the names of all the customers in alphabetical order?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from accounts", "query": "SELECT name FROM accounts ORDER BY name", "sub_ques": "what are the names of all the customers"}
{"db_id": "small_bank_1", "sub_sql": "order by name", "question": "What are the names of all the customers in alphabetical order?", "sub_sql_type": "null null col", "sub_sql_new": "order by name", "query": "SELECT name FROM accounts ORDER BY name", "sub_ques": "customers in alphabetical order"}
{"db_id": "small_bank_1", "sub_sql": "select t1.name , t2.balance from accounts , checking", "question": "Find the name and checking balance of the account with the lowest savings balance.", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select name , balance from accounts , checking", "query": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1", "sub_ques": "find the name and checking balance of the account"}
{"db_id": "small_bank_1", "sub_sql": "order by t3.balance limit 1", "question": "Find the name and checking balance of the account with the lowest savings balance.", "sub_sql_type": "null null col null limv", "sub_sql_new": "order by balance limit 1", "query": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1", "sub_ques": "the lowest savings balance"}
{"db_id": "small_bank_1", "sub_sql": "select t1.name , t2.balance from accounts , checking", "question": "What are the names and balances of checking accounts belonging to the customer with the lowest savings balance?", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select name , balance from accounts , checking", "query": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1", "sub_ques": "what are the names and balances of checking accounts"}
{"db_id": "small_bank_1", "sub_sql": "order by t3.balance limit 1", "question": "What are the names and balances of checking accounts belonging to the customer with the lowest savings balance?", "sub_sql_type": "null null col null limv", "sub_sql_new": "order by balance limit 1", "query": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1", "sub_ques": "the customer with the lowest savings balance"}
{"db_id": "small_bank_1", "sub_sql": "select t1.name , count accounts group by t1.name", "question": "Find the number of checking accounts for each account name.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select name , count accounts", "query": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name", "sub_ques": "find the number of checking accounts for each account name"}
{"db_id": "small_bank_1", "sub_sql": "select t1.name , count accounts group by t1.name", "question": "What are the names of customers with accounts, and how many checking accounts do each of them have?", "sub_sql_type": "null col null agg col", "sub_sql_new": "select name , count accounts", "query": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name", "sub_ques": "what are the names of customers with accounts , and how many checking accounts"}
{"db_id": "small_bank_1", "sub_sql": "select sum t2.balance , t1.name from savings , accounts", "question": "Find the total saving balance for each account name.", "sub_sql_type": "null agg col null col col col null col", "sub_sql_new": "select sum balance , name from savings , accounts", "query": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name", "sub_ques": "find the total saving balance for each account name"}
{"db_id": "small_bank_1", "sub_sql": "select sum t2.balance , t1.name from savings , accounts", "question": "What are the names of customers with accounts, and what are the total savings balances for each?", "sub_sql_type": "null agg col null col col col null col", "sub_sql_new": "select sum balance , name from savings , accounts", "query": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name", "sub_ques": "what are the names of customers with accounts , and what are the total savings balances"}
{"db_id": "small_bank_1", "sub_sql": "select t1.name from accounts", "question": "Find the name of accounts whose checking balance is below the average checking balance.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from accounts", "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)", "sub_ques": "find the name of accounts"}
{"db_id": "small_bank_1", "sub_sql": "where t2.balance < select avg balance", "question": "Find the name of accounts whose checking balance is below the average checking balance.", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where balance less than select avg balance", "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)", "sub_ques": "whose checking balance is below the average checking balance"}
{"db_id": "small_bank_1", "sub_sql": "select t1.name from accounts", "question": "What are the names of customers with checking balances lower than the average checking balance?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from accounts", "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)", "sub_ques": "what are the names of customers"}
{"db_id": "small_bank_1", "sub_sql": "where t2.balance < select avg balance", "question": "What are the names of customers with checking balances lower than the average checking balance?", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where balance less than select avg balance", "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)", "sub_ques": "with checking balances lower than the average checking balance"}
{"db_id": "small_bank_1", "sub_sql": "select t3.balance from savings", "question": "Find the saving balance of the account with the highest checking balance.", "sub_sql_type": "null col col col", "sub_sql_new": "select balance from savings", "query": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1", "sub_ques": "find the saving balance of the account"}
{"db_id": "small_bank_1", "sub_sql": "order by t2.balance desc limit 1", "question": "Find the saving balance of the account with the highest checking balance.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by balance desc limit 1", "query": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1", "sub_ques": "the account with the highest checking balance"}
{"db_id": "small_bank_1", "sub_sql": "select t3.balance from savings", "question": "What is the savings balance of the account belonging to the customer with the highest checking balance?", "sub_sql_type": "null col col col", "sub_sql_new": "select balance from savings", "query": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1", "sub_ques": "what is the savings balance of the account"}
{"db_id": "small_bank_1", "sub_sql": "order by t2.balance desc limit 1", "question": "What is the savings balance of the account belonging to the customer with the highest checking balance?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by balance desc limit 1", "query": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1", "sub_ques": "the customer with the highest checking balance"}
{"db_id": "small_bank_1", "sub_sql": "select t2.balance , t1.name from checking , accounts", "question": "Find the name and checking balance of the account with the lowest saving balance.", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select balance , name from checking , accounts", "query": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1", "sub_ques": "find the name and checking balance of the account"}
{"db_id": "small_bank_1", "sub_sql": "order by t3.balance limit 1", "question": "Find the name and checking balance of the account with the lowest saving balance.", "sub_sql_type": "null null col null limv", "sub_sql_new": "order by balance limit 1", "query": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1", "sub_ques": "the account with the lowest saving balance"}
{"db_id": "small_bank_1", "sub_sql": "select t2.balance , t1.name from checking , accounts", "question": "What is the name and checking balance of the account which has the lowest savings balance?", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select balance , name from checking , accounts", "query": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1", "sub_ques": "what is the name and checking balance of the account"}
{"db_id": "small_bank_1", "sub_sql": "order by t3.balance limit 1", "question": "What is the name and checking balance of the account which has the lowest savings balance?", "sub_sql_type": "null null col null limv", "sub_sql_new": "order by balance limit 1", "query": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1", "sub_ques": "the account which has the lowest savings balance"}
{"db_id": "small_bank_1", "sub_sql": "select t2.balance , t3.balance , t1.name from checking , savings , accounts", "question": "Find the name, checking balance and saving balance of all accounts in the bank.", "sub_sql_type": "null col null col null col col col null col null col", "sub_sql_new": "select balance , balance , name from checking , savings , accounts", "query": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid", "sub_ques": "find the name , checking balance and saving balance"}
{"db_id": "small_bank_1", "sub_sql": "select t2.balance , t3.balance , t1.name from checking , savings , accounts", "question": "What are the names, checking balances, and savings balances for all customers?", "sub_sql_type": "null col null col null col col col null col null col", "sub_sql_new": "select balance , balance , name from checking , savings , accounts", "query": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid", "sub_ques": "what are the names , checking balances , and savings balances"}
{"db_id": "small_bank_1", "sub_sql": "select t1.name from accounts", "question": "Find the name of accounts whose checking balance is higher than corresponding saving balance.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from accounts", "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance", "sub_ques": "find the name of accounts"}
{"db_id": "small_bank_1", "sub_sql": "where t2.balance > t3.balance", "question": "Find the name of accounts whose checking balance is higher than corresponding saving balance.", "sub_sql_type": "null col op op value", "sub_sql_new": "where balance more than t3.balance", "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance", "sub_ques": "whose checking balance is higher than corresponding saving balance"}
{"db_id": "small_bank_1", "sub_sql": "select t1.name from accounts", "question": "What are the names of customers with a higher checking balance than savings balance?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from accounts", "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance", "sub_ques": "what are the names of customers"}
{"db_id": "small_bank_1", "sub_sql": "where t2.balance > t3.balance", "question": "What are the names of customers with a higher checking balance than savings balance?", "sub_sql_type": "null col op op value", "sub_sql_new": "where balance more than t3.balance", "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance", "sub_ques": "customers with a higher checking balance than savings balance"}
{"db_id": "small_bank_1", "sub_sql": "select t1.name , t2.balance from accounts , savings", "question": "Find the name and savings balance of the top 3 accounts with the highest saving balance sorted by savings balance in descending order.", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select name , balance from accounts , savings", "query": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3", "sub_ques": "find the name and savings balance of accounts"}
{"db_id": "small_bank_1", "sub_sql": "order by t2.balance desc limit 3", "question": "Find the name and savings balance of the top 3 accounts with the highest saving balance sorted by savings balance in descending order.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by balance desc limit 3", "query": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3", "sub_ques": "the top 3 accounts with the highest saving balance sorted by savings balance"}
{"db_id": "small_bank_1", "sub_sql": "select t1.name , t2.balance from accounts , savings", "question": "What are names and savings balances of the three accounts with the highest savings balances?", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select name , balance from accounts , savings", "query": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3", "sub_ques": "what are names and savings balances of the three accounts"}
{"db_id": "small_bank_1", "sub_sql": "order by t2.balance desc limit 3", "question": "What are names and savings balances of the three accounts with the highest savings balances?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by balance desc limit 3", "query": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3", "sub_ques": "the three accounts with the highest savings balances"}
{"db_id": "browser_web", "sub_sql": "select count browser", "question": "How many main stream browsers whose market share is at least 5 exist?", "sub_sql_type": "null agg col", "sub_sql_new": "select count browser", "query": "SELECT count(*) FROM browser WHERE market_share  >=  5", "sub_ques": "how many main stream browsers"}
{"db_id": "browser_web", "sub_sql": "where market_share >= 5", "question": "How many main stream browsers whose market share is at least 5 exist?", "sub_sql_type": "null col col op op op value", "sub_sql_new": "where market share no less than 5", "query": "SELECT count(*) FROM browser WHERE market_share  >=  5", "sub_ques": "browsers whose market share is at least 5 exist"}
{"db_id": "browser_web", "sub_sql": "select name from browser", "question": "List the name of browsers in descending order by market share.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from browser", "query": "SELECT name FROM browser ORDER BY market_share DESC", "sub_ques": "list the name of browsers"}
{"db_id": "browser_web", "sub_sql": "order by market_share desc", "question": "List the name of browsers in descending order by market share.", "sub_sql_type": "null null col col null", "sub_sql_new": "order by market share desc", "query": "SELECT name FROM browser ORDER BY market_share DESC", "sub_ques": "in descending order by market share"}
{"db_id": "browser_web", "sub_sql": "select id , name , market_share from browser", "question": "List the ids, names and market shares of all browsers.", "sub_sql_type": "null col null col null col col col col", "sub_sql_new": "select id , name , market share from browser", "query": "SELECT id ,  name ,  market_share FROM browser", "sub_ques": "list the ids , names and market shares"}
{"db_id": "browser_web", "sub_sql": "select max market_share , min market_share , avg market_share from browser", "question": "What is the maximum, minimum and average market share of the listed browsers?", "sub_sql_type": "null agg col col null agg col col null agg col col col col", "sub_sql_new": "select max market share , min market share , avg market share from browser", "query": "SELECT max(market_share) ,  min(market_share) ,  avg(market_share) FROM browser", "sub_ques": "what is the maximum , minimum and average market share"}
{"db_id": "browser_web", "sub_sql": "select id , market_share from browser", "question": "What is the id and market share of the browser Safari?", "sub_sql_type": "null col null col col col col", "sub_sql_new": "select id , market share from browser", "query": "SELECT id ,  market_share FROM browser WHERE name  =  'Safari'", "sub_ques": "what is the id and market share of the browser"}
{"db_id": "browser_web", "sub_sql": "where name = safari", "question": "What is the id and market share of the browser Safari?", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to safari", "query": "SELECT id ,  market_share FROM browser WHERE name  =  'Safari'", "sub_ques": "browser safari"}
{"db_id": "browser_web", "sub_sql": "select name , operating_system from web_client_accelerator", "question": "What are the name and os of web client accelerators that do not work with only a 'Broadband' type connection?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , operating_system from web_client_accelerator", "query": "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'", "sub_ques": "what are the name and os of web client accelerators"}
{"db_id": "browser_web", "sub_sql": "where connection != broadband", "question": "What are the name and os of web client accelerators that do not work with only a 'Broadband' type connection?", "sub_sql_type": "null col op op op value", "sub_sql_new": "where connection not equal to broadband", "query": "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'", "sub_ques": "accelerators that do not work with only a ' broadband ' type connection"}
{"db_id": "browser_web", "sub_sql": "select t1.name from browser", "question": "What is the name of the browser that became compatible with the accelerator 'CProxy' after year 1998 ?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from browser", "query": "SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id  =  T3.id WHERE T3.name  =  'CProxy' AND T2.compatible_since_year  >  1998", "sub_ques": "what is the name of the browser"}
{"db_id": "browser_web", "sub_sql": "where t3.name = cproxy", "question": "What is the name of the browser that became compatible with the accelerator 'CProxy' after year 1998 ?", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to cproxy", "query": "SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id  =  T3.id WHERE T3.name  =  'CProxy' AND T2.compatible_since_year  >  1998", "sub_ques": "compatible with the accelerator cproxy"}
{"db_id": "browser_web", "sub_sql": "select t1.id , t1.name from web_client_accelerator", "question": "What are the ids and names of the web accelerators that are compatible with two or more browsers?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select id , name from web_client_accelerator", "query": "SELECT T1.id ,  T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2", "sub_ques": "what are the ids and names of the web accelerators"}
{"db_id": "browser_web", "sub_sql": "group by t1.id having count accelerator_compatible_browser >= 2", "question": "What are the ids and names of the web accelerators that are compatible with two or more browsers?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T1.id ,  T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2", "sub_ques": "the web accelerators that are compatible with two or more browsers"}
{"db_id": "browser_web", "sub_sql": "select t1.id , t1.name from browser", "question": "What is the id and name of the browser that is compatible with the most web accelerators?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select id , name from browser", "query": "SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "what is the id and name of the browser"}
{"db_id": "browser_web", "sub_sql": "group by t1.id order by count accelerator_compatible_browser desc limit 1", "question": "What is the id and name of the browser that is compatible with the most web accelerators?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count accelerator_compatible_browser desc limit 1", "query": "SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the id of the browser that is compatible with the most web accelerators"}
{"db_id": "browser_web", "sub_sql": "where t3.name = cachebox", "question": "When did the web accelerator 'CACHEbox' and browser 'Internet Explorer' become compatible?", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to cachebox", "query": "SELECT T1.compatible_since_year FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id WHERE T3.name  =  'CACHEbox' AND T2.name  =  'Internet Explorer'", "sub_ques": "the web accelerator cachebox"}
{"db_id": "browser_web", "sub_sql": "select count distinct client from web_client_accelerator", "question": "How many different kinds of clients are supported by the web clients accelerators?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct client from web_client_accelerator", "query": "SELECT count(DISTINCT client) FROM web_client_accelerator", "sub_ques": "how many different kinds of clients are supported by the web clients"}
{"db_id": "browser_web", "sub_sql": "select count web_client_accelerator", "question": "How many accelerators are not compatible with the browsers listed ?", "sub_sql_type": "null agg col", "sub_sql_new": "select count web_client_accelerator", "query": "SELECT count(*) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser );", "sub_ques": "how many accelerators"}
{"db_id": "browser_web", "sub_sql": "select distinct t1.name from web_client_accelerator", "question": "What distinct accelerator names are compatible with the browswers that have market share higher than 15?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct name from web_client_accelerator", "query": "SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.market_share  >  15;", "sub_ques": "what distinct accelerator names"}
{"db_id": "browser_web", "sub_sql": "where t3.market_share > 15", "question": "What distinct accelerator names are compatible with the browswers that have market share higher than 15?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where market share more than 15", "query": "SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.market_share  >  15;", "sub_ques": "the browswers that have market share higher than 15"}
{"db_id": "browser_web", "sub_sql": "select name from web_client_accelerator", "question": "Which accelerator name contains substring \\\\\\\"Opera\\\\\\\"?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from web_client_accelerator", "query": "SELECT name FROM web_client_accelerator WHERE name LIKE \\\\\\\"%Opera%\\\\\\\"", "sub_ques": "which accelerator name"}
{"db_id": "browser_web", "sub_sql": "where name like opera", "question": "Which accelerator name contains substring \\\\\\\"Opera\\\\\\\"?", "sub_sql_type": "null col op value", "sub_sql_new": "where name like opera", "query": "SELECT name FROM web_client_accelerator WHERE name LIKE \\\\\\\"%Opera%\\\\\\\"", "sub_ques": "name contains substring `` opera"}
{"db_id": "browser_web", "sub_sql": "select operating_system , count web_client_accelerator group by operating_system", "question": "Find the number of web accelerators used for each Operating system.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select operating_system , count web_client_accelerator", "query": "SELECT Operating_system ,  count(*) FROM web_client_accelerator GROUP BY Operating_system", "sub_ques": "find the number of web accelerators used for each operating system"}
{"db_id": "browser_web", "sub_sql": "select t2.name , t3.name from browser , web_client_accelerator", "question": "give me names of all compatible browsers and accelerators in the descending order of compatible year", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select name , name from browser , web_client_accelerator", "query": "SELECT T2.name ,  T3.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id ORDER BY T1.compatible_since_year DESC", "sub_ques": "give me names of all compatible browsers and accelerators"}
{"db_id": "browser_web", "sub_sql": "order by t1.compatible_since_year desc", "question": "give me names of all compatible browsers and accelerators in the descending order of compatible year", "sub_sql_type": "null null col col col null", "sub_sql_new": "order by compatible since year desc", "query": "SELECT T2.name ,  T3.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id ORDER BY T1.compatible_since_year DESC", "sub_ques": "in the descending order of compatible year"}
{"db_id": "wrestler", "sub_sql": "select count wrestler", "question": "How many wrestlers are there?", "sub_sql_type": "null agg col", "sub_sql_new": "select count wrestler", "query": "SELECT count(*) FROM wrestler", "sub_ques": "how many wrestlers"}
{"db_id": "wrestler", "sub_sql": "select count wrestler", "question": "Count the number of wrestlers.", "sub_sql_type": "null agg col", "sub_sql_new": "select count wrestler", "query": "SELECT count(*) FROM wrestler", "sub_ques": "count the number of wrestlers"}
{"db_id": "wrestler", "sub_sql": "select name from wrestler", "question": "List the names of wrestlers in descending order of days held.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from wrestler", "query": "SELECT Name FROM wrestler ORDER BY Days_held DESC", "sub_ques": "list the names of wrestlers"}
{"db_id": "wrestler", "sub_sql": "order by days_held desc", "question": "List the names of wrestlers in descending order of days held.", "sub_sql_type": "null null col null", "sub_sql_new": "order by days_held desc", "query": "SELECT Name FROM wrestler ORDER BY Days_held DESC", "sub_ques": "in descending order of days held"}
{"db_id": "wrestler", "sub_sql": "select name from wrestler", "question": "What are the names of the wrestlers, ordered descending by days held?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from wrestler", "query": "SELECT Name FROM wrestler ORDER BY Days_held DESC", "sub_ques": "what are the names of the wrestlers"}
{"db_id": "wrestler", "sub_sql": "order by days_held desc", "question": "What are the names of the wrestlers, ordered descending by days held?", "sub_sql_type": "null null col null", "sub_sql_new": "order by days_held desc", "query": "SELECT Name FROM wrestler ORDER BY Days_held DESC", "sub_ques": "ordered descending by days held"}
{"db_id": "wrestler", "sub_sql": "select name from wrestler", "question": "What is the name of the wrestler with the fewest days held?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from wrestler", "query": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1", "sub_ques": "what is the name of the wrestler"}
{"db_id": "wrestler", "sub_sql": "order by days_held asc limit 1", "question": "What is the name of the wrestler with the fewest days held?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by days_held asc limit 1", "query": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1", "sub_ques": "with the fewest days held"}
{"db_id": "wrestler", "sub_sql": "select name from wrestler", "question": "Return the name of the wrestler who had the lowest number of days held.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from wrestler", "query": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1", "sub_ques": "return the name of the wrestler"}
{"db_id": "wrestler", "sub_sql": "order by days_held asc limit 1", "question": "Return the name of the wrestler who had the lowest number of days held.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by days_held asc limit 1", "query": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1", "sub_ques": "who had the lowest number of days held"}
{"db_id": "wrestler", "sub_sql": "select distinct reign from wrestler", "question": "What are the distinct reigns of wrestlers whose location is not \\\\\\\"Tokyo,Japan\\\\\\\" ?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct reign from wrestler", "query": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \\\\\\\"Tokyo , Japan\\\\\\\"", "sub_ques": "what are the distinct reigns of wrestlers"}
{"db_id": "wrestler", "sub_sql": "where location != tokyo,japan", "question": "What are the distinct reigns of wrestlers whose location is not \\\\\\\"Tokyo,Japan\\\\\\\" ?", "sub_sql_type": "null col op op op value", "sub_sql_new": "where location not equal to tokyo,japan", "query": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \\\\\\\"Tokyo , Japan\\\\\\\"", "sub_ques": "wrestlers whose location is not tokyo,japan"}
{"db_id": "wrestler", "sub_sql": "select distinct reign from wrestler", "question": "Give the different reigns of wrestlers who are not located in Tokyo, Japan.", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct reign from wrestler", "query": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \\\\\\\"Tokyo , Japan\\\\\\\"", "sub_ques": "give the different reigns of wrestlers"}
{"db_id": "wrestler", "sub_sql": "where location != tokyo,japan", "question": "Give the different reigns of wrestlers who are not located in Tokyo, Japan.", "sub_sql_type": "null col op op op value", "sub_sql_new": "where location not equal to tokyo,japan", "query": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \\\\\\\"Tokyo , Japan\\\\\\\"", "sub_ques": "wrestlers who are not located in tokyo , japan"}
{"db_id": "wrestler", "sub_sql": "select name , location from wrestler", "question": "What are the names and location of the wrestlers?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , location from wrestler", "query": "SELECT Name ,  LOCATION FROM wrestler", "sub_ques": "what are the names and location of the wrestlers"}
{"db_id": "wrestler", "sub_sql": "select name , location from wrestler", "question": "Give the names and locations of all wrestlers.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , location from wrestler", "query": "SELECT Name ,  LOCATION FROM wrestler", "sub_ques": "give the names and locations of all wrestlers"}
{"db_id": "wrestler", "sub_sql": "select elimination_move from elimination", "question": "What are the elimination moves of wrestlers whose team is \\\\\\\"Team Orton\\\\\\\"?", "sub_sql_type": "null col col col", "sub_sql_new": "select elimination_move from elimination", "query": "SELECT Elimination_Move FROM Elimination WHERE Team  =  \\\\\\\"Team Orton\\\\\\\"", "sub_ques": "what are the elimination moves"}
{"db_id": "wrestler", "sub_sql": "where team = teamorton", "question": "What are the elimination moves of wrestlers whose team is \\\\\\\"Team Orton\\\\\\\"?", "sub_sql_type": "null col op op value", "sub_sql_new": "where team equal to teamorton", "query": "SELECT Elimination_Move FROM Elimination WHERE Team  =  \\\\\\\"Team Orton\\\\\\\"", "sub_ques": "wrestlers whose team is team orton"}
{"db_id": "wrestler", "sub_sql": "select elimination_move from elimination", "question": "Return the elimination movies of wrestlers on Team Orton.", "sub_sql_type": "null col col col", "sub_sql_new": "select elimination_move from elimination", "query": "SELECT Elimination_Move FROM Elimination WHERE Team  =  \\\\\\\"Team Orton\\\\\\\"", "sub_ques": "return the elimination movies"}
{"db_id": "wrestler", "sub_sql": "where team = teamorton", "question": "Return the elimination movies of wrestlers on Team Orton.", "sub_sql_type": "null col op op value", "sub_sql_new": "where team equal to teamorton", "query": "SELECT Elimination_Move FROM Elimination WHERE Team  =  \\\\\\\"Team Orton\\\\\\\"", "sub_ques": "on team orton"}
{"db_id": "wrestler", "sub_sql": "select t2.name , t1.elimination_move from wrestler , elimination", "question": "What are the names of wrestlers and the elimination moves?", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select name , elimination_move from wrestler , elimination", "query": "SELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID", "sub_ques": "what are the names of wrestlers and the elimination moves"}
{"db_id": "wrestler", "sub_sql": "select t2.name , t1.elimination_move from wrestler , elimination", "question": "Give the names of wrestlers and their elimination moves.", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select name , elimination_move from wrestler , elimination", "query": "SELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID", "sub_ques": "give the names of wrestlers and their elimination moves"}
{"db_id": "wrestler", "sub_sql": "select t2.name , t1.team from wrestler , elimination", "question": "List the names of wrestlers and the teams in elimination in descending order of days held.", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select name , team from wrestler , elimination", "query": "SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC", "sub_ques": "list the names of wrestlers and the teams in elimination"}
{"db_id": "wrestler", "sub_sql": "order by t2.days_held desc", "question": "List the names of wrestlers and the teams in elimination in descending order of days held.", "sub_sql_type": "null null col null", "sub_sql_new": "order by days_held desc", "query": "SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC", "sub_ques": "in descending order of days held"}
{"db_id": "wrestler", "sub_sql": "select t2.name , t1.team from wrestler , elimination", "question": "What are the names of wrestlers and their teams in elimination, ordered descending by days held?", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select name , team from wrestler , elimination", "query": "SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC", "sub_ques": "what are the names of wrestlers and their teams in elimination"}
{"db_id": "wrestler", "sub_sql": "order by t2.days_held desc", "question": "What are the names of wrestlers and their teams in elimination, ordered descending by days held?", "sub_sql_type": "null null col null", "sub_sql_new": "order by days_held desc", "query": "SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC", "sub_ques": "ordered descending by days held"}
{"db_id": "wrestler", "sub_sql": "select t1.time from elimination", "question": "List the time of elimination of the wrestlers with largest days held.", "sub_sql_type": "null col col col", "sub_sql_new": "select time from elimination", "query": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1", "sub_ques": "list the time of elimination"}
{"db_id": "wrestler", "sub_sql": "order by t2.days_held desc limit 1", "question": "List the time of elimination of the wrestlers with largest days held.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by days_held desc limit 1", "query": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1", "sub_ques": "wrestlers with largest days held"}
{"db_id": "wrestler", "sub_sql": "select t1.time from elimination", "question": "What is the time of elimination for the wrestler with the most days held?", "sub_sql_type": "null col col col", "sub_sql_new": "select time from elimination", "query": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1", "sub_ques": "what is the time of elimination"}
{"db_id": "wrestler", "sub_sql": "order by t2.days_held desc limit 1", "question": "What is the time of elimination for the wrestler with the most days held?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by days_held desc limit 1", "query": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1", "sub_ques": "wrestler with the most days held"}
{"db_id": "wrestler", "sub_sql": "select t1.time from elimination", "question": "Show times of elimination of wrestlers with days held more than 50.", "sub_sql_type": "null col col col", "sub_sql_new": "select time from elimination", "query": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50", "sub_ques": "show times of elimination"}
{"db_id": "wrestler", "sub_sql": "where t2.days_held > 50", "question": "Show times of elimination of wrestlers with days held more than 50.", "sub_sql_type": "null col op op value", "sub_sql_new": "where days_held more than 50", "query": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50", "sub_ques": "wrestlers with days held more than 50"}
{"db_id": "wrestler", "sub_sql": "select t1.time from elimination", "question": "What are the times of elimination for wrestlers with over 50 days held?", "sub_sql_type": "null col col col", "sub_sql_new": "select time from elimination", "query": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50", "sub_ques": "what are the times of elimination"}
{"db_id": "wrestler", "sub_sql": "where t2.days_held > 50", "question": "What are the times of elimination for wrestlers with over 50 days held?", "sub_sql_type": "null col op op value", "sub_sql_new": "where days_held more than 50", "query": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50", "sub_ques": "wrestlers with over 50 days held"}
{"db_id": "wrestler", "sub_sql": "select team , count elimination group by team", "question": "Show different teams in eliminations and the number of eliminations from each team.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select team , count elimination", "query": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team", "sub_ques": "show different teams in eliminations and the number of eliminations from each team"}
{"db_id": "wrestler", "sub_sql": "select team , count elimination group by team", "question": "How many eliminations did each team have?", "sub_sql_type": "null col null agg col", "sub_sql_new": "select team , count elimination", "query": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team", "sub_ques": "how many eliminations did each team"}
{"db_id": "wrestler", "sub_sql": "select team from elimination", "question": "Show teams that have suffered more than three eliminations.", "sub_sql_type": "null col col col", "sub_sql_new": "select team from elimination", "query": "SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*)  >  3", "sub_ques": "show teams eliminations"}
{"db_id": "wrestler", "sub_sql": "group by team having count elimination > 3", "question": "Show teams that have suffered more than three eliminations.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*)  >  3", "sub_ques": "teams that have suffered more than three eliminations"}
{"db_id": "wrestler", "sub_sql": "group by team having count elimination > 3", "question": "Which teams had more than 3 eliminations?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*)  >  3", "sub_ques": "teams had more than 3 eliminations"}
{"db_id": "wrestler", "sub_sql": "select reign , days_held from wrestler", "question": "Show the reign and days held of wrestlers.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select reign , days_held from wrestler", "query": "SELECT Reign ,  Days_held FROM wrestler", "sub_ques": "show the reign and days held of wrestlers"}
{"db_id": "wrestler", "sub_sql": "select reign , days_held from wrestler", "question": "What are the reigns and days held of all wrestlers?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select reign , days_held from wrestler", "query": "SELECT Reign ,  Days_held FROM wrestler", "sub_ques": "what are the reigns and days held of all wrestlers"}
{"db_id": "wrestler", "sub_sql": "select name from wrestler", "question": "What are the names of wrestlers days held less than 100?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from wrestler", "query": "SELECT Name FROM wrestler WHERE Days_held  <  100", "sub_ques": "what are the names of wrestlers"}
{"db_id": "wrestler", "sub_sql": "where days_held < 100", "question": "What are the names of wrestlers days held less than 100?", "sub_sql_type": "null col op op value", "sub_sql_new": "where days_held less than 100", "query": "SELECT Name FROM wrestler WHERE Days_held  <  100", "sub_ques": "wrestlers days held less than 100"}
{"db_id": "wrestler", "sub_sql": "select name from wrestler", "question": "Return the names of wrestlers with fewer than 100 days held.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from wrestler", "query": "SELECT Name FROM wrestler WHERE Days_held  <  100", "sub_ques": "return the names of wrestlers"}
{"db_id": "wrestler", "sub_sql": "where days_held < 100", "question": "Return the names of wrestlers with fewer than 100 days held.", "sub_sql_type": "null col op op value", "sub_sql_new": "where days_held less than 100", "query": "SELECT Name FROM wrestler WHERE Days_held  <  100", "sub_ques": "wrestlers with fewer than 100 days held"}
{"db_id": "wrestler", "sub_sql": "select reign from wrestler", "question": "Please show the most common reigns of wrestlers.", "sub_sql_type": "null col col col", "sub_sql_new": "select reign from wrestler", "query": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "please show the reigns of wrestlers"}
{"db_id": "wrestler", "sub_sql": "group by reign order by count wrestler desc limit 1", "question": "Please show the most common reigns of wrestlers.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count wrestler desc limit 1", "query": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "the most common reigns of wrestlers"}
{"db_id": "wrestler", "sub_sql": "group by reign order by count wrestler desc limit 1", "question": "Which reign is the most common among wrestlers?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count wrestler desc limit 1", "query": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "reign is the most common among wrestlers"}
{"db_id": "wrestler", "sub_sql": "select location from wrestler", "question": "List the locations that are shared by more than two wrestlers.", "sub_sql_type": "null col col col", "sub_sql_new": "select location from wrestler", "query": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  2", "sub_ques": "list the locations"}
{"db_id": "wrestler", "sub_sql": "group by location having count wrestler > 2", "question": "List the locations that are shared by more than two wrestlers.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  2", "sub_ques": "locations that are shared by more than two wrestlers"}
{"db_id": "wrestler", "sub_sql": "group by location having count wrestler > 2", "question": "Which locations are shared by more than two wrestlers?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  2", "sub_ques": "locations are shared by more than two wrestlers"}
{"db_id": "wrestler", "sub_sql": "select name from wrestler", "question": "List the names of wrestlers that have not been eliminated.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from wrestler", "query": "SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM elimination)", "sub_ques": "list the names of wrestlers"}
{"db_id": "wrestler", "sub_sql": "select name from wrestler", "question": "What are the names of wrestlers who have never been eliminated?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from wrestler", "query": "SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM elimination)", "sub_ques": "what are the names of wrestlers"}
{"db_id": "wrestler", "sub_sql": "select count distinct team from elimination", "question": "What is the number of distinct teams that suffer elimination?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct team from elimination", "query": "SELECT COUNT (DISTINCT team) FROM elimination", "sub_ques": "what is the number of distinct teams that suffer elimination"}
{"db_id": "wrestler", "sub_sql": "select count distinct team from elimination", "question": "How many different teams have had eliminated wrestlers?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct team from elimination", "query": "SELECT COUNT (DISTINCT team) FROM elimination", "sub_ques": "how many different teams"}
{"db_id": "wrestler", "sub_sql": "select time from elimination", "question": "Show the times of elimination by \\\\\\\"Punk\\\\\\\" or \\\\\\\"Orton\\\\\\\".", "sub_sql_type": "null col col col", "sub_sql_new": "select time from elimination", "query": "SELECT TIME FROM elimination WHERE Eliminated_By  =  \\\\\\\"Punk\\\\\\\" OR Eliminated_By  =  \\\\\\\"Orton\\\\\\\"", "sub_ques": "show the times of elimination"}
{"db_id": "wrestler", "sub_sql": "where eliminated_by = punk or eliminated_by = orton", "question": "Show the times of elimination by \\\\\\\"Punk\\\\\\\" or \\\\\\\"Orton\\\\\\\".", "sub_sql_type": "null col op op value null col op value value", "sub_sql_new": "where eliminated_by equal to punk or or eliminated_by = orton", "query": "SELECT TIME FROM elimination WHERE Eliminated_By  =  \\\\\\\"Punk\\\\\\\" OR Eliminated_By  =  \\\\\\\"Orton\\\\\\\"", "sub_ques": "elimination by `` punk or orton"}
{"db_id": "wrestler", "sub_sql": "select time from elimination", "question": "What are the times of elimination for any instances in which the elimination was done by Punk or Orton?", "sub_sql_type": "null col col col", "sub_sql_new": "select time from elimination", "query": "SELECT TIME FROM elimination WHERE Eliminated_By  =  \\\\\\\"Punk\\\\\\\" OR Eliminated_By  =  \\\\\\\"Orton\\\\\\\"", "sub_ques": "what are the times of elimination"}
{"db_id": "wrestler", "sub_sql": "where eliminated_by = punk", "question": "What are the times of elimination for any instances in which the elimination was done by Punk or Orton?", "sub_sql_type": "null col op op value", "sub_sql_new": "where eliminated_by equal to punk", "query": "SELECT TIME FROM elimination WHERE Eliminated_By  =  \\\\\\\"Punk\\\\\\\" OR Eliminated_By  =  \\\\\\\"Orton\\\\\\\"", "sub_ques": "in which the elimination was done by punk"}
{"db_id": "school_finance", "sub_sql": "select count school", "question": "How many schools are there?", "sub_sql_type": "null agg col", "sub_sql_new": "select count school", "query": "SELECT count(*) FROM school", "sub_ques": "how many schools"}
{"db_id": "school_finance", "sub_sql": "select count school", "question": "Count the number of schools.", "sub_sql_type": "null agg col", "sub_sql_new": "select count school", "query": "SELECT count(*) FROM school", "sub_ques": "count the number of schools"}
{"db_id": "school_finance", "sub_sql": "select school_name from school", "question": "Show all school names in alphabetical order.", "sub_sql_type": "null col col col", "sub_sql_new": "select school_name from school", "query": "SELECT school_name FROM school ORDER BY school_name", "sub_ques": "show all school names"}
{"db_id": "school_finance", "sub_sql": "order by school_name", "question": "Show all school names in alphabetical order.", "sub_sql_type": "null null col", "sub_sql_new": "order by school_name", "query": "SELECT school_name FROM school ORDER BY school_name", "sub_ques": "school names in alphabetical order"}
{"db_id": "school_finance", "sub_sql": "select school_name , location , mascot from school", "question": "List the name, location, mascot for all schools.", "sub_sql_type": "null col null col null col col col", "sub_sql_new": "select school_name , location , mascot from school", "query": "SELECT school_name ,  LOCATION ,  mascot FROM school", "sub_ques": "list the name , location , mascot for all schools"}
{"db_id": "school_finance", "sub_sql": "select sum enrollment , avg enrollment from school", "question": "What are the total and average enrollment of all schools?", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select sum enrollment , avg enrollment from school", "query": "SELECT sum(enrollment) ,  avg(enrollment) FROM school", "sub_ques": "what are the total and average enrollment of all schools"}
{"db_id": "school_finance", "sub_sql": "select mascot from school", "question": "What are the mascots for schools with enrollments above the average?", "sub_sql_type": "null col col col", "sub_sql_new": "select mascot from school", "query": "SELECT mascot FROM school WHERE enrollment  >  (SELECT avg(enrollment) FROM school)", "sub_ques": "what are the mascots for schools"}
{"db_id": "school_finance", "sub_sql": "where enrollment > select avg enrollment", "question": "What are the mascots for schools with enrollments above the average?", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where enrollment more than select avg enrollment", "query": "SELECT mascot FROM school WHERE enrollment  >  (SELECT avg(enrollment) FROM school)", "sub_ques": "schools with enrollments above the average"}
{"db_id": "school_finance", "sub_sql": "select school_name from school", "question": "List the name of the school with the smallest enrollment.", "sub_sql_type": "null col col col", "sub_sql_new": "select school_name from school", "query": "SELECT school_name FROM school ORDER BY enrollment LIMIT 1", "sub_ques": "list the name of the school"}
{"db_id": "school_finance", "sub_sql": "order by enrollment limit 1", "question": "List the name of the school with the smallest enrollment.", "sub_sql_type": "null null col null limv", "sub_sql_new": "order by enrollment limit 1", "query": "SELECT school_name FROM school ORDER BY enrollment LIMIT 1", "sub_ques": "the school with the smallest enrollment"}
{"db_id": "school_finance", "sub_sql": "select avg enrollment , max enrollment , min enrollment from school", "question": "Show the average, maximum, minimum enrollment of all schools.", "sub_sql_type": "null agg col null agg col null agg col col col", "sub_sql_new": "select avg enrollment , max enrollment , min enrollment from school", "query": "SELECT avg(enrollment) ,  max(enrollment) ,  min(enrollment) FROM school", "sub_ques": "show the average , maximum , minimum enrollment of all schools"}
{"db_id": "school_finance", "sub_sql": "select county , count school , sum enrollment group by county", "question": "Show each county along with the number of schools and total enrollment in each county.", "sub_sql_type": "null col null agg col null agg col", "sub_sql_new": "select county , count school , sum enrollment", "query": "SELECT county ,  count(*) ,  sum(enrollment) FROM school GROUP BY county", "sub_ques": "show each county along with the number of schools and total enrollment in each county"}
{"db_id": "school_finance", "sub_sql": "select count distinct t1.donator_name from endowment", "question": "How many donors have endowment for school named \\\\\\\"Glenn\\\\\\\"?", "sub_sql_type": "null agg col col col col col", "sub_sql_new": "select count distinct donator name from endowment", "query": "SELECT count(DISTINCT T1.donator_name) FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  \\\\\\\"Glenn\\\\\\\"", "sub_ques": "how many donors have endowment"}
{"db_id": "school_finance", "sub_sql": "where t2.school_name = glenn", "question": "How many donors have endowment for school named \\\\\\\"Glenn\\\\\\\"?", "sub_sql_type": "null col op op value", "sub_sql_new": "where school_name equal to glenn", "query": "SELECT count(DISTINCT T1.donator_name) FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  \\\\\\\"Glenn\\\\\\\"", "sub_ques": "school named `` glenn"}
{"db_id": "school_finance", "sub_sql": "select donator_name , sum amount from endowment", "question": "List each donator name and the amount of endowment in descending order of the amount of endowment.", "sub_sql_type": "null col col null agg col col col", "sub_sql_new": "select donator name , sum amount from endowment", "query": "SELECT donator_name ,  sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC", "sub_ques": "list each donator name and the amount of endowment"}
{"db_id": "school_finance", "sub_sql": "group by donator_name order by sum amount desc", "question": "List each donator name and the amount of endowment in descending order of the amount of endowment.", "sub_sql_type": "null null agg col null", "sub_sql_new": "order by sum amount desc", "query": "SELECT donator_name ,  sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC", "sub_ques": "donator name in descending order of the amount of endowment"}
{"db_id": "school_finance", "sub_sql": "select school_name from school", "question": "List the names of the schools without any endowment.", "sub_sql_type": "null col col col", "sub_sql_new": "select school_name from school", "query": "SELECT school_name FROM school WHERE school_id NOT IN (SELECT school_id FROM endowment)", "sub_ques": "list the names of the schools"}
{"db_id": "school_finance", "sub_sql": "school not in endowment", "question": "List the names of the schools without any endowment.", "sub_sql_type": "op op tab", "sub_sql_new": "school tab not in endowment", "query": "SELECT school_name FROM school WHERE school_id NOT IN (SELECT school_id FROM endowment)", "sub_ques": "schools without any endowment"}
{"db_id": "school_finance", "sub_sql": "select t2.school_name from school", "question": "List all the names of schools with an endowment amount smaller than or equal to 10.", "sub_sql_type": "null col col col", "sub_sql_new": "select school_name from school", "query": "SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T1.school_id HAVING sum(T1.amount)  <=  10", "sub_ques": "list all the names of schools"}
{"db_id": "school_finance", "sub_sql": "group by t1.school_id having sum t1.amount <= 10", "question": "List all the names of schools with an endowment amount smaller than or equal to 10.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T1.school_id HAVING sum(T1.amount)  <=  10", "sub_ques": "schools with an endowment amount smaller than or equal to 10"}
{"db_id": "school_finance", "sub_sql": "select amount , donator_name from endowment", "question": "List the amount and donor name for the largest amount of donation.", "sub_sql_type": "null col null col col col col", "sub_sql_new": "select amount , donator name from endowment", "query": "SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT 1", "sub_ques": "list the amount and donor name"}
{"db_id": "school_finance", "sub_sql": "order by amount desc limit 1", "question": "List the amount and donor name for the largest amount of donation.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by amount desc limit 1", "query": "SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT 1", "sub_ques": "the largest amount of donation"}
{"db_id": "school_finance", "sub_sql": "select count budget", "question": "How many budgets are above 3000 in year 2001 or before?", "sub_sql_type": "null agg col", "sub_sql_new": "select count budget", "query": "SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001", "sub_ques": "how many budgets"}
{"db_id": "school_finance", "sub_sql": "where budgeted > 3000 and year <= 2001", "question": "How many budgets are above 3000 in year 2001 or before?", "sub_sql_type": "null col op op value null col op value value", "sub_sql_new": "where budgeted more than 3000 and and year <= 2001", "query": "SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001", "sub_ques": "budgets are above 3000 in year 2001 or before"}
{"db_id": "school_finance", "sub_sql": "select count budget", "question": "Count the number of budgets in year 2001 or before whose budgeted amount is greater than 3000", "sub_sql_type": "null agg col", "sub_sql_new": "select count budget", "query": "SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001", "sub_ques": "count the number of budgets"}
{"db_id": "school_finance", "sub_sql": "where budgeted > 3000", "question": "Count the number of budgets in year 2001 or before whose budgeted amount is greater than 3000", "sub_sql_type": "null col op op value", "sub_sql_new": "where budgeted more than 3000", "query": "SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001", "sub_ques": "whose budgeted amount is greater than 3000"}
{"db_id": "school_finance", "sub_sql": "select t2.school_name , t1.budgeted , t1.invested from school , budget", "question": "Show each school name, its budgeted amount, and invested amount in year 2002 or after.", "sub_sql_type": "null col null col null col col col null col", "sub_sql_new": "select school_name , budgeted , invested from school , budget", "query": "SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  2002", "sub_ques": "show each school name , its budgeted amount , and invested"}
{"db_id": "school_finance", "sub_sql": "where t1.year >= 2002", "question": "Show each school name, its budgeted amount, and invested amount in year 2002 or after.", "sub_sql_type": "null col op op op value", "sub_sql_new": "where year no less than 2002", "query": "SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  2002", "sub_ques": "invested amount in year 2002 or after"}
{"db_id": "school_finance", "sub_sql": "select distinct donator_name from endowment", "question": "Show all donor names.", "sub_sql_type": "null col col col col col", "sub_sql_new": "select distinct donator name from endowment", "query": "SELECT DISTINCT donator_name FROM endowment", "sub_ques": "show all donor names"}
{"db_id": "school_finance", "sub_sql": "select count budget", "question": "How many budget record has a budget amount smaller than the invested amount?", "sub_sql_type": "null agg col", "sub_sql_new": "select count budget", "query": "SELECT count(*) FROM budget WHERE budgeted  <  invested", "sub_ques": "how many budget record"}
{"db_id": "school_finance", "sub_sql": "where budgeted < invested", "question": "How many budget record has a budget amount smaller than the invested amount?", "sub_sql_type": "null col op op value", "sub_sql_new": "where budgeted less than invested", "query": "SELECT count(*) FROM budget WHERE budgeted  <  invested", "sub_ques": "has a budget amount smaller than the invested amount"}
{"db_id": "school_finance", "sub_sql": "select sum t1.budgeted from budget", "question": "What is the total budget amount for school \\\\\\\"Glenn\\\\\\\" in all years?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select sum budgeted from budget", "query": "SELECT sum(T1.budgeted) FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Glenn'", "sub_ques": "what is the total budget amount"}
{"db_id": "school_finance", "sub_sql": "where t2.school_name = glenn", "question": "What is the total budget amount for school \\\\\\\"Glenn\\\\\\\" in all years?", "sub_sql_type": "null col op op value", "sub_sql_new": "where school_name equal to glenn", "query": "SELECT sum(T1.budgeted) FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Glenn'", "sub_ques": "school `` glenn"}
{"db_id": "school_finance", "sub_sql": "select t2.school_name from school", "question": "Show the names of schools with a total budget amount greater than 100 or a total endowment greater than 10.", "sub_sql_type": "null col col col", "sub_sql_new": "select school_name from school", "query": "SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN endowment AS T3 ON T2.school_id  =  T3.school_id GROUP BY T2.school_name HAVING sum(T1.budgeted)  >  100 OR sum(T3.amount)  >  10", "sub_ques": "show the names of schools"}
{"db_id": "school_finance", "sub_sql": "group by t2.school_name having sum t1.budgeted > 100", "question": "Show the names of schools with a total budget amount greater than 100 or a total endowment greater than 10.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN endowment AS T3 ON T2.school_id  =  T3.school_id GROUP BY T2.school_name HAVING sum(T1.budgeted)  >  100 OR sum(T3.amount)  >  10", "sub_ques": "names of schools with a total budget amount greater than 100 or a total"}
{"db_id": "school_finance", "sub_sql": "select t2.school_name from school", "question": "Find the names of schools that have more than one donator with donation amount above 8.5.", "sub_sql_type": "null col col col", "sub_sql_new": "select school_name from school", "query": "SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.amount  >  8.5 GROUP BY T1.school_id HAVING count(*)  >  1", "sub_ques": "find the names of schools"}
{"db_id": "school_finance", "sub_sql": "where t1.amount > 8.5", "question": "Find the names of schools that have more than one donator with donation amount above 8.5.", "sub_sql_type": "null col op op value", "sub_sql_new": "where amount more than 8.5", "query": "SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.amount  >  8.5 GROUP BY T1.school_id HAVING count(*)  >  1", "sub_ques": "with donation amount above 8.5"}
{"db_id": "school_finance", "sub_sql": "group by t1.school_id having count endowment > 1", "question": "Find the names of schools that have more than one donator with donation amount above 8.5.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.amount  >  8.5 GROUP BY T1.school_id HAVING count(*)  >  1", "sub_ques": "schools that have more than one donator"}
{"db_id": "school_finance", "sub_sql": "select t1.school_name , t1.mascot , t1.ihsaa_football_class from school", "question": "List the name, IHSAA Football Class, and Mascot of the schools that have more than 6000 of budgeted amount or were founded before 2003, in the order of percent of total invested budget and total budgeted budget.", "sub_sql_type": "null col null col null col col col", "sub_sql_new": "select school_name , mascot , ihsaa_football_class from school", "query": "SELECT T1.School_name ,  T1.Mascot ,  T1.IHSAA_Football_Class FROM school AS T1 JOIN budget AS T2 ON T1.school_id  =  T2.school_id WHERE Budgeted  >  6000 OR YEAR  <  2003 ORDER BY T2.total_budget_percent_invested ,  T2.total_budget_percent_budgeted", "sub_ques": "list the name , ihsaa football class , and mascot of the schools"}
{"db_id": "school_finance", "sub_sql": "where budgeted > 6000", "question": "List the name, IHSAA Football Class, and Mascot of the schools that have more than 6000 of budgeted amount or were founded before 2003, in the order of percent of total invested budget and total budgeted budget.", "sub_sql_type": "null col op op value", "sub_sql_new": "where budgeted more than 6000", "query": "SELECT T1.School_name ,  T1.Mascot ,  T1.IHSAA_Football_Class FROM school AS T1 JOIN budget AS T2 ON T1.school_id  =  T2.school_id WHERE Budgeted  >  6000 OR YEAR  <  2003 ORDER BY T2.total_budget_percent_invested ,  T2.total_budget_percent_budgeted", "sub_ques": "schools that have more than 6000 of budgeted amount"}
{"db_id": "school_finance", "sub_sql": "order by t2.total_budget_percent_invested", "question": "List the name, IHSAA Football Class, and Mascot of the schools that have more than 6000 of budgeted amount or were founded before 2003, in the order of percent of total invested budget and total budgeted budget.", "sub_sql_type": "null null col col col col", "sub_sql_new": "order by total budget percent invested", "query": "SELECT T1.School_name ,  T1.Mascot ,  T1.IHSAA_Football_Class FROM school AS T1 JOIN budget AS T2 ON T1.school_id  =  T2.school_id WHERE Budgeted  >  6000 OR YEAR  <  2003 ORDER BY T2.total_budget_percent_invested ,  T2.total_budget_percent_budgeted", "sub_ques": "in the order of percent of total invested budget and total budgeted budget"}
{"db_id": "protein_institute", "sub_sql": "select count building", "question": "How many buildings are there?", "sub_sql_type": "null agg col", "sub_sql_new": "select count building", "query": "SELECT count(*) FROM building", "sub_ques": "how many buildings"}
{"db_id": "protein_institute", "sub_sql": "select name , street_address , floors from building", "question": "Show the name, street address, and number of floors for all buildings ordered by the number of floors.", "sub_sql_type": "null col null col null col col col", "sub_sql_new": "select name , street_address , floors from building", "query": "SELECT name ,  street_address ,  floors FROM building ORDER BY floors", "sub_ques": "show the name , street address , and number of floors for all buildings"}
{"db_id": "protein_institute", "sub_sql": "order by floors", "question": "Show the name, street address, and number of floors for all buildings ordered by the number of floors.", "sub_sql_type": "null null col", "sub_sql_new": "order by floors", "query": "SELECT name ,  street_address ,  floors FROM building ORDER BY floors", "sub_ques": "ordered by the number of floors"}
{"db_id": "protein_institute", "sub_sql": "select name from building", "question": "What is the name of the tallest building?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from building", "query": "SELECT name FROM building ORDER BY height_feet DESC LIMIT 1", "sub_ques": "what is the name of the tallest building"}
{"db_id": "protein_institute", "sub_sql": "order by height_feet desc limit 1", "question": "What is the name of the tallest building?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by height_feet desc limit 1", "query": "SELECT name FROM building ORDER BY height_feet DESC LIMIT 1", "sub_ques": "the tallest building"}
{"db_id": "protein_institute", "sub_sql": "select avg floors , max floors , min floors from building", "question": "What are the average, maximum, and minimum number of floors for all buildings?", "sub_sql_type": "null agg col null agg col null agg col col col", "sub_sql_new": "select avg floors , max floors , min floors from building", "query": "SELECT avg(floors) ,  max(floors) ,  min(floors) FROM building", "sub_ques": "what are the average , maximum , and minimum number of floors for all buildings"}
{"db_id": "protein_institute", "sub_sql": "select count building", "question": "Show the number of buildings with a height above the average or a number of floors above the average.", "sub_sql_type": "null agg col", "sub_sql_new": "select count building", "query": "SELECT count(*) FROM building WHERE height_feet  >  (SELECT avg(height_feet) FROM building) OR floors  >  (SELECT avg(floors) FROM building)", "sub_ques": "show the number of buildings"}
{"db_id": "protein_institute", "sub_sql": "where height_feet > select avg height_feet", "question": "Show the number of buildings with a height above the average or a number of floors above the average.", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where height_feet more than select avg height_feet", "query": "SELECT count(*) FROM building WHERE height_feet  >  (SELECT avg(height_feet) FROM building) OR floors  >  (SELECT avg(floors) FROM building)", "sub_ques": "height above the average"}
{"db_id": "protein_institute", "sub_sql": "where floors > select avg floors", "question": "Show the number of buildings with a height above the average or a number of floors above the average.", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where floors more than select avg floors", "query": "SELECT count(*) FROM building WHERE height_feet  >  (SELECT avg(height_feet) FROM building) OR floors  >  (SELECT avg(floors) FROM building)", "sub_ques": "a number of floors above the average"}
{"db_id": "protein_institute", "sub_sql": "select name from building", "question": "List the names of buildings with at least 200 feet of height and with at least 20 floors.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from building", "query": "SELECT name FROM building WHERE height_feet  >=  200 AND floors  >=  20", "sub_ques": "list the names of buildings"}
{"db_id": "protein_institute", "sub_sql": "where height_feet >= 200", "question": "List the names of buildings with at least 200 feet of height and with at least 20 floors.", "sub_sql_type": "null col op op op value", "sub_sql_new": "where height_feet no less than 200", "query": "SELECT name FROM building WHERE height_feet  >=  200 AND floors  >=  20", "sub_ques": "buildings with at least 200 feet of height"}
{"db_id": "protein_institute", "sub_sql": "select institution , location from institution", "question": "Show the names and locations of institutions that are founded after 1990 and have the type \\\\\\\"Private\\\\\\\".", "sub_sql_type": "null col null col col col", "sub_sql_new": "select institution , location from institution", "query": "SELECT institution ,  LOCATION FROM institution WHERE founded  >  1990 AND TYPE  =  'Private'", "sub_ques": "show the names and locations of institutions"}
{"db_id": "protein_institute", "sub_sql": "where founded > 1990", "question": "Show the names and locations of institutions that are founded after 1990 and have the type \\\\\\\"Private\\\\\\\".", "sub_sql_type": "null col op op value", "sub_sql_new": "where founded more than 1990", "query": "SELECT institution ,  LOCATION FROM institution WHERE founded  >  1990 AND TYPE  =  'Private'", "sub_ques": "institutions that are founded after 1990"}
{"db_id": "protein_institute", "sub_sql": "select type , count institution , sum enrollment group by type", "question": "Show institution types, along with the number of institutions and total enrollment for each type.", "sub_sql_type": "null col null agg col null agg col", "sub_sql_new": "select type , count institution , sum enrollment", "query": "SELECT TYPE ,  count(*) ,  sum(enrollment) FROM institution GROUP BY TYPE", "sub_ques": "show institution types , along with the number of institutions and total enrollment for each type"}
{"db_id": "protein_institute", "sub_sql": "select type from institution", "question": "Show the institution type with the largest number of institutions.", "sub_sql_type": "null col col col", "sub_sql_new": "select type from institution", "query": "SELECT TYPE FROM institution GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "sub_ques": "show the institution type"}
{"db_id": "protein_institute", "sub_sql": "group by type order by count institution desc limit 1", "question": "Show the institution type with the largest number of institutions.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count institution desc limit 1", "query": "SELECT TYPE FROM institution GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the institution type with the largest number of institutions"}
{"db_id": "protein_institute", "sub_sql": "select type from institution", "question": "Show the institution type with an institution founded after 1990 and an institution with at least 1000 enrollment.", "sub_sql_type": "null col col col", "sub_sql_new": "select type from institution", "query": "SELECT TYPE FROM institution WHERE founded  >  1990 AND enrollment  >=  1000", "sub_ques": "show the institution type"}
{"db_id": "protein_institute", "sub_sql": "where founded > 1990", "question": "Show the institution type with an institution founded after 1990 and an institution with at least 1000 enrollment.", "sub_sql_type": "null col op op value", "sub_sql_new": "where founded more than 1990", "query": "SELECT TYPE FROM institution WHERE founded  >  1990 AND enrollment  >=  1000", "sub_ques": "an institution founded after 1990"}
{"db_id": "protein_institute", "sub_sql": "select name from building", "question": "Show the name of buildings that do not have any institution.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from building", "query": "SELECT name FROM building WHERE building_id NOT IN (SELECT building_id FROM institution)", "sub_ques": "show the name of buildings"}
{"db_id": "protein_institute", "sub_sql": "building not in institution", "question": "Show the name of buildings that do not have any institution.", "sub_sql_type": "tab op op", "sub_sql_new": "building not in institution tab", "query": "SELECT name FROM building WHERE building_id NOT IN (SELECT building_id FROM institution)", "sub_ques": "buildings that do not have any institution"}
{"db_id": "protein_institute", "sub_sql": "select t1.name , count institution group by t1.building_id", "question": "For each building, show the name of the building and the number of institutions in it.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select name , count institution", "query": "SELECT T1.name ,  count(*) FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id GROUP BY T1.building_id", "sub_ques": "show the name of the building and the number of institutions in it"}
{"db_id": "protein_institute", "sub_sql": "select t1.name , t1.height_feet from building", "question": "Show the names and heights of buildings with at least two institutions founded after 1880.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , height_feet from building", "query": "SELECT T1.name ,  T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  >  1880 GROUP BY T1.building_id HAVING count(*)  >=  2", "sub_ques": "show the names and heights of buildings"}
{"db_id": "protein_institute", "sub_sql": "where t2.founded > 1880", "question": "Show the names and heights of buildings with at least two institutions founded after 1880.", "sub_sql_type": "null col op op value", "sub_sql_new": "where founded more than 1880", "query": "SELECT T1.name ,  T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  >  1880 GROUP BY T1.building_id HAVING count(*)  >=  2", "sub_ques": "institutions founded after 1880"}
{"db_id": "protein_institute", "sub_sql": "group by t1.building_id having count institution >= 2", "question": "Show the names and heights of buildings with at least two institutions founded after 1880.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T1.name ,  T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  >  1880 GROUP BY T1.building_id HAVING count(*)  >=  2", "sub_ques": "buildings with at least two institutions"}
{"db_id": "protein_institute", "sub_sql": "select distinct type from institution", "question": "Show all the distinct institution types.", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct type from institution", "query": "SELECT DISTINCT TYPE FROM institution", "sub_ques": "show all the distinct institution types"}
{"db_id": "protein_institute", "sub_sql": "select t1.institution , count institution from institution group by t1.institution_id", "question": "Show institution names along with the number of proteins for each institution.", "sub_sql_type": "null col null agg col col col", "sub_sql_new": "select institution , count institution from institution", "query": "SELECT T1.institution ,  count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id GROUP BY T1.institution_id", "sub_ques": "show institution names along with the number of proteins for each institution"}
{"db_id": "protein_institute", "sub_sql": "select count protein", "question": "How many proteins are associated with an institution founded after 1880 or an institution with type \\\\\\\"Private\\\\\\\"?", "sub_sql_type": "null agg col", "sub_sql_new": "select count protein", "query": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1880 OR T1.type  =  'Private'", "sub_ques": "how many proteins"}
{"db_id": "protein_institute", "sub_sql": "where t1.founded > 1880", "question": "How many proteins are associated with an institution founded after 1880 or an institution with type \\\\\\\"Private\\\\\\\"?", "sub_sql_type": "null col op op value", "sub_sql_new": "where founded more than 1880", "query": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1880 OR T1.type  =  'Private'", "sub_ques": "institution founded after 1880"}
{"db_id": "protein_institute", "sub_sql": "select t2.protein_name , t1.institution from protein , institution", "question": "Show the protein name and the institution name.", "sub_sql_type": "null col col null col col col null col", "sub_sql_new": "select protein name , institution from protein , institution", "query": "SELECT T2.protein_name ,  T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id", "sub_ques": "show the protein name and the institution"}
{"db_id": "protein_institute", "sub_sql": "select count protein", "question": "How many proteins are associated with an institution in a building with at least 20 floors?", "sub_sql_type": "null agg col", "sub_sql_new": "select count protein", "query": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id JOIN building AS T3 ON T3.building_id  =  T1.building_id WHERE T3.floors  >=  20", "sub_ques": "how many proteins"}
{"db_id": "protein_institute", "sub_sql": "where t3.floors >= 20", "question": "How many proteins are associated with an institution in a building with at least 20 floors?", "sub_sql_type": "null col op op op value", "sub_sql_new": "where floors no less than 20", "query": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id JOIN building AS T3 ON T3.building_id  =  T1.building_id WHERE T3.floors  >=  20", "sub_ques": "building with at least 20 floors"}
{"db_id": "protein_institute", "sub_sql": "select count institution", "question": "How many institutions do not have an associated protein in our record?", "sub_sql_type": "null agg col", "sub_sql_new": "select count institution", "query": "SELECT count(*) FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM protein)", "sub_ques": "how many institutions"}
{"db_id": "protein_institute", "sub_sql": "institution not in protein", "question": "How many institutions do not have an associated protein in our record?", "sub_sql_type": "op op tab", "sub_sql_new": "institution tab not in protein", "query": "SELECT count(*) FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM protein)", "sub_ques": "institutions do not have an associated protein"}
{"db_id": "cinema", "sub_sql": "select count cinema", "question": "How many cinema do we have?", "sub_sql_type": "null agg col", "sub_sql_new": "select count cinema", "query": "SELECT count(*) FROM cinema", "sub_ques": "how many cinema"}
{"db_id": "cinema", "sub_sql": "select count cinema", "question": "Count the number of cinemas.", "sub_sql_type": "null agg col", "sub_sql_new": "select count cinema", "query": "SELECT count(*) FROM cinema", "sub_ques": "count the number of cinemas"}
{"db_id": "cinema", "sub_sql": "select name , openning_year , capacity from cinema", "question": "Show name, opening year, and capacity for each cinema.", "sub_sql_type": "null col null col null col col col", "sub_sql_new": "select name , openning_year , capacity from cinema", "query": "SELECT name ,  openning_year ,  capacity FROM cinema", "sub_ques": "show name , opening year , and capacity for each cinema"}
{"db_id": "cinema", "sub_sql": "select name , location from cinema", "question": "Show the cinema name and location for cinemas with capacity above average.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , location from cinema", "query": "SELECT name ,  LOCATION FROM cinema WHERE capacity  >  (SELECT avg(capacity) FROM cinema)", "sub_ques": "show the cinema name and location for cinemas"}
{"db_id": "cinema", "sub_sql": "where capacity > select avg capacity", "question": "Show the cinema name and location for cinemas with capacity above average.", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where capacity more than select avg capacity", "query": "SELECT name ,  LOCATION FROM cinema WHERE capacity  >  (SELECT avg(capacity) FROM cinema)", "sub_ques": "cinemas with capacity above average"}
{"db_id": "cinema", "sub_sql": "select distinct location from cinema", "question": "What are all the locations with a cinema?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct location from cinema", "query": "SELECT DISTINCT LOCATION FROM cinema", "sub_ques": "what are all the locations with a cinema"}
{"db_id": "cinema", "sub_sql": "select distinct location from cinema", "question": "Find the distinct locations that has a cinema.", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct location from cinema", "query": "SELECT DISTINCT LOCATION FROM cinema", "sub_ques": "find the distinct locations that has a cinema"}
{"db_id": "cinema", "sub_sql": "select name , openning_year from cinema", "question": "Show all the cinema names and opening years in descending order of opening year.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , openning_year from cinema", "query": "SELECT name ,  openning_year FROM cinema ORDER BY openning_year DESC", "sub_ques": "show all the cinema names and opening years"}
{"db_id": "cinema", "sub_sql": "order by openning_year desc", "question": "Show all the cinema names and opening years in descending order of opening year.", "sub_sql_type": "null null col null", "sub_sql_new": "order by openning_year desc", "query": "SELECT name ,  openning_year FROM cinema ORDER BY openning_year DESC", "sub_ques": "in descending order of opening year"}
{"db_id": "cinema", "sub_sql": "select name , location from cinema", "question": "What are the name and location of the cinema with the largest capacity?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , location from cinema", "query": "SELECT name ,  LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1", "sub_ques": "what are the name and location of the cinema"}
{"db_id": "cinema", "sub_sql": "order by capacity desc limit 1", "question": "What are the name and location of the cinema with the largest capacity?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by capacity desc limit 1", "query": "SELECT name ,  LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1", "sub_ques": "the largest capacity"}
{"db_id": "cinema", "sub_sql": "select avg capacity , min capacity , max capacity from cinema", "question": "Show the average, minimum, and maximum capacity for all the cinemas opened in year 2011 or later.", "sub_sql_type": "null agg col null agg col null agg col col col", "sub_sql_new": "select avg capacity , min capacity , max capacity from cinema", "query": "SELECT avg(capacity) ,  min(capacity) ,  max(capacity) FROM cinema WHERE openning_year  >=  2011", "sub_ques": "show the average , minimum , and maximum capacity for all the cinemas"}
{"db_id": "cinema", "sub_sql": "where openning_year >= 2011", "question": "Show the average, minimum, and maximum capacity for all the cinemas opened in year 2011 or later.", "sub_sql_type": "null col op op op value", "sub_sql_new": "where openning_year no less than 2011", "query": "SELECT avg(capacity) ,  min(capacity) ,  max(capacity) FROM cinema WHERE openning_year  >=  2011", "sub_ques": "cinemas opened in year 2011 or later"}
{"db_id": "cinema", "sub_sql": "select location , count cinema group by location", "question": "Show each location and the number of cinemas there.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select location , count cinema", "query": "SELECT LOCATION ,  count(*) FROM cinema GROUP BY LOCATION", "sub_ques": "show each location and the number of cinemas"}
{"db_id": "cinema", "sub_sql": "select location from cinema", "question": "What is the location with the most cinemas opened in year 2010 or later?", "sub_sql_type": "null col col col", "sub_sql_new": "select location from cinema", "query": "SELECT LOCATION FROM cinema WHERE openning_year  >=  2010 GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1", "sub_ques": "what is the location"}
{"db_id": "cinema", "sub_sql": "where openning_year >= 2010", "question": "What is the location with the most cinemas opened in year 2010 or later?", "sub_sql_type": "null col op op op value", "sub_sql_new": "where openning_year no less than 2010", "query": "SELECT LOCATION FROM cinema WHERE openning_year  >=  2010 GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1", "sub_ques": "cinemas opened in year 2010"}
{"db_id": "cinema", "sub_sql": "group by location order by count cinema desc limit 1", "question": "What is the location with the most cinemas opened in year 2010 or later?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count cinema desc limit 1", "query": "SELECT LOCATION FROM cinema WHERE openning_year  >=  2010 GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the location with the most cinemas"}
{"db_id": "cinema", "sub_sql": "select location from cinema", "question": "Show all the locations with at least two cinemas with capacity above 300.", "sub_sql_type": "null col col col", "sub_sql_new": "select location from cinema", "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2", "sub_ques": "show all the locations"}
{"db_id": "cinema", "sub_sql": "where capacity > 300", "question": "Show all the locations with at least two cinemas with capacity above 300.", "sub_sql_type": "null col op op value", "sub_sql_new": "where capacity more than 300", "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2", "sub_ques": "cinemas with capacity above 300"}
{"db_id": "cinema", "sub_sql": "group by location having count cinema >= 2", "question": "Show all the locations with at least two cinemas with capacity above 300.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2", "sub_ques": "locations with at least two cinemas"}
{"db_id": "cinema", "sub_sql": "where capacity > 300", "question": "Which locations have 2 or more cinemas with capacity over 300?", "sub_sql_type": "null col op op value", "sub_sql_new": "where capacity more than 300", "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2", "sub_ques": "cinemas with capacity over 300"}
{"db_id": "cinema", "sub_sql": "group by location having count cinema >= 2", "question": "Which locations have 2 or more cinemas with capacity over 300?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2", "sub_ques": "locations have 2 or more cinemas"}
{"db_id": "cinema", "sub_sql": "select title , directed_by from film", "question": "Show the title and director for all films.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select title , directed_by from film", "query": "SELECT title ,  directed_by FROM film", "sub_ques": "show the title and director for all films"}
{"db_id": "cinema", "sub_sql": "select title , directed_by from film", "question": "What are the title and director of each film?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select title , directed_by from film", "query": "SELECT title ,  directed_by FROM film", "sub_ques": "what are the title and director of each film"}
{"db_id": "cinema", "sub_sql": "select distinct directed_by from film", "question": "Show all directors.", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct directed_by from film", "query": "SELECT DISTINCT directed_by FROM film", "sub_ques": "show all directors"}
{"db_id": "cinema", "sub_sql": "select distinct directed_by from film", "question": "Who are all the directors?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct directed_by from film", "query": "SELECT DISTINCT directed_by FROM film", "sub_ques": "who are all the directors"}
{"db_id": "cinema", "sub_sql": "select directed_by , count film group by directed_by", "question": "List all directors along with the number of films directed by each director.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select directed_by , count film", "query": "SELECT directed_by ,  count(*) FROM film GROUP BY directed_by", "sub_ques": "list all directors along with the number of films directed by each director"}
{"db_id": "cinema", "sub_sql": "select t2.name , sum t1.show_times_per_day from cinema , schedule", "question": "What is total number of show times per dat for each cinema?", "sub_sql_type": "null col null agg col col col null col", "sub_sql_new": "select name , sum show_times_per_day from cinema , schedule", "query": "SELECT T2.name ,  sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id  =  T2.cinema_id GROUP BY T1.cinema_id", "sub_ques": "what is total number of show times per dat for each cinema"}
{"db_id": "cinema", "sub_sql": "select t2.title , max t1.price from film , schedule", "question": "What are the title and maximum price of each film?", "sub_sql_type": "null col null agg col col col null col", "sub_sql_new": "select title , max price from film , schedule", "query": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id", "sub_ques": "what are the title and maximum price"}
{"db_id": "cinema", "sub_sql": "select t2.title , max t1.price from film , schedule", "question": "Give me the title and highest price for each film.", "sub_sql_type": "null col null agg col col col null col", "sub_sql_new": "select title , max price from film , schedule", "query": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id", "sub_ques": "give me the title and highest price"}
{"db_id": "cinema", "sub_sql": "select t3.name , t2.title , t1.date , t1.price from cinema , film , schedule", "question": "Show cinema name, film title, date, and price for each record in schedule.", "sub_sql_type": "null col null col null col null col col col null col null col", "sub_sql_new": "select name , title , date , price from cinema , film , schedule", "query": "SELECT T3.name ,  T2.title ,  T1.date ,  T1.price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id JOIN cinema AS T3 ON T1.cinema_id  =  T3.cinema_id", "sub_ques": "show cinema name , film title , date , and price for each record in schedule"}
{"db_id": "cinema", "sub_sql": "select title , directed_by from film", "question": "What are the title and director of the films without any schedule?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select title , directed_by from film", "query": "SELECT title ,  directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)", "sub_ques": "what are the title and director"}
{"db_id": "cinema", "sub_sql": "film not in schedule", "question": "What are the title and director of the films without any schedule?", "sub_sql_type": "tab op op tab", "sub_sql_new": "film not in schedule", "query": "SELECT title ,  directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)", "sub_ques": "films without any schedule"}
{"db_id": "cinema", "sub_sql": "select t2.directed_by from film", "question": "Show director with the largest number of show times in total.", "sub_sql_type": "null col col col", "sub_sql_new": "select directed_by from film", "query": "SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.directed_by ORDER BY sum(T1.show_times_per_day) DESC LIMIT 1", "sub_ques": "show director"}
{"db_id": "cinema", "sub_sql": "group by t2.directed_by order by sum t1.show_times_per_day desc limit 1", "question": "Show director with the largest number of show times in total.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by sum show_times_per_day desc limit 1", "query": "SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.directed_by ORDER BY sum(T1.show_times_per_day) DESC LIMIT 1", "sub_ques": "director with the largest number of show times in total"}
{"db_id": "cinema", "sub_sql": "select location from cinema", "question": "Find the locations that have more than one movie theater with capacity above 300.", "sub_sql_type": "null col col col", "sub_sql_new": "select location from cinema", "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1", "sub_ques": "find the locations"}
{"db_id": "cinema", "sub_sql": "where capacity > 300", "question": "Find the locations that have more than one movie theater with capacity above 300.", "sub_sql_type": "null col op op value", "sub_sql_new": "where capacity more than 300", "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1", "sub_ques": "theater with capacity above 300"}
{"db_id": "cinema", "sub_sql": "group by location having count cinema > 1", "question": "Find the locations that have more than one movie theater with capacity above 300.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1", "sub_ques": "locations that have more than one movie theater"}
{"db_id": "cinema", "sub_sql": "where capacity > 300", "question": "In which locations are there more than one movie theater with capacity above 300?", "sub_sql_type": "null col op op value", "sub_sql_new": "where capacity more than 300", "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1", "sub_ques": "theater with capacity above 300"}
{"db_id": "cinema", "sub_sql": "group by location having count cinema > 1", "question": "In which locations are there more than one movie theater with capacity above 300?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1", "sub_ques": "locations are there more than one movie theater"}
{"db_id": "cinema", "sub_sql": "select count film", "question": "How many films have the word 'Dummy' in their titles?", "sub_sql_type": "null agg col", "sub_sql_new": "select count film", "query": "SELECT count(*) FROM film WHERE title LIKE \\\\\\\"%Dummy%\\\\\\\"", "sub_ques": "how many films"}
{"db_id": "cinema", "sub_sql": "where title like dummy", "question": "How many films have the word 'Dummy' in their titles?", "sub_sql_type": "null col op value", "sub_sql_new": "where title like dummy", "query": "SELECT count(*) FROM film WHERE title LIKE \\\\\\\"%Dummy%\\\\\\\"", "sub_ques": "films have the word 'dummy ' in their titles"}
{"db_id": "cinema", "sub_sql": "select count film", "question": "Count the number of films whose title contains the word 'Dummy'.", "sub_sql_type": "null agg col", "sub_sql_new": "select count film", "query": "SELECT count(*) FROM film WHERE title LIKE \\\\\\\"%Dummy%\\\\\\\"", "sub_ques": "count the number of films"}
{"db_id": "cinema", "sub_sql": "where title like dummy", "question": "Count the number of films whose title contains the word 'Dummy'.", "sub_sql_type": "null col op value", "sub_sql_new": "where title like dummy", "query": "SELECT count(*) FROM film WHERE title LIKE \\\\\\\"%Dummy%\\\\\\\"", "sub_ques": "films whose title contains the word dummy"}
{"db_id": "products_for_hire", "sub_sql": "where t2.coupon_amount = 500", "question": "Are the customers holding coupons with amount 500 bad or good?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where coupon amount equal to 500", "query": "SELECT T1.good_or_bad_customer FROM customers AS T1 JOIN discount_coupons AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.coupon_amount  =  500", "sub_ques": "coupons with amount 500"}
{"db_id": "products_for_hire", "sub_sql": "select t1.customer_id , t1.first_name", "question": "How many bookings did each customer make? List the customer id, first name, and the count.", "sub_sql_type": "null col col null col col", "sub_sql_new": "select customer id , first name", "query": "SELECT T1.customer_id ,  T1.first_name ,  count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id", "sub_ques": "list the customer id , first name"}
{"db_id": "products_for_hire", "sub_sql": "select customer_id , sum amount_paid from payments", "question": "What is the maximum total amount paid by a customer? List the customer id and amount.", "sub_sql_type": "null col col null agg col col col col", "sub_sql_new": "select customer id , sum amount paid from payments", "query": "SELECT customer_id ,  sum(amount_paid) FROM Payments GROUP BY customer_id ORDER BY sum(amount_paid) DESC LIMIT 1", "sub_ques": "list the customer id and amount"}
{"db_id": "products_for_hire", "sub_sql": "group by customer_id order by sum amount_paid desc limit 1", "question": "What is the maximum total amount paid by a customer? List the customer id and amount.", "sub_sql_type": "null null agg col col null null limv", "sub_sql_new": "order by sum amount paid desc limit 1", "query": "SELECT customer_id ,  sum(amount_paid) FROM Payments GROUP BY customer_id ORDER BY sum(amount_paid) DESC LIMIT 1", "sub_ques": "the maximum total amount paid by a customer"}
{"db_id": "products_for_hire", "sub_sql": "select t1.booking_id , t1.amount_of_refund from bookings", "question": "What are the id and the amount of refund of the booking that incurred the most times of payments?", "sub_sql_type": "null col col null col col col col col", "sub_sql_new": "select booking id , amount of refund from bookings", "query": "SELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "what are the id and the amount of refund of the booking"}
{"db_id": "products_for_hire", "sub_sql": "group by t1.booking_id order by count * desc limit 1", "question": "What are the id and the amount of refund of the booking that incurred the most times of payments?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count * desc limit 1", "query": "SELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the id of the booking that incurred the most times of payments"}
{"db_id": "products_for_hire", "sub_sql": "select product_id from products_booked", "question": "What is the id of the product that is booked for 3 times?", "sub_sql_type": "null col col col col", "sub_sql_new": "select product id from products_booked", "query": "SELECT product_id FROM products_booked GROUP BY product_id HAVING count(*)  =  3", "sub_ques": "what is the id of the product"}
{"db_id": "products_for_hire", "sub_sql": "group by product_id having count products_booked = 3", "question": "What is the id of the product that is booked for 3 times?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT product_id FROM products_booked GROUP BY product_id HAVING count(*)  =  3", "sub_ques": "id of the product that is booked for 3"}
{"db_id": "products_for_hire", "sub_sql": "select t2.product_description from products_for_hire", "question": "What is the product description of the product booked with an amount of 102.76?", "sub_sql_type": "null col col col col", "sub_sql_new": "select product description from products_for_hire", "query": "SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.booked_amount  =  102.76", "sub_ques": "what is the product description of the product"}
{"db_id": "products_for_hire", "sub_sql": "where t1.booked_amount = 102.76", "question": "What is the product description of the product booked with an amount of 102.76?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where booked amount equal to 102.76", "query": "SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.booked_amount  =  102.76", "sub_ques": "booked with an amount of 102.76"}
{"db_id": "products_for_hire", "sub_sql": "select t3.booking_start_date , t3.booking_end_date from bookings", "question": "What are the start date and end date of the booking that has booked the product named 'Book collection A'?", "sub_sql_type": "null col col col null col col col col col", "sub_sql_new": "select booking start date , booking end date from bookings", "query": "SELECT T3.booking_start_date ,   T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id  =  T2.product_id JOIN bookings AS T3 ON T2.booking_id  =  T3.booking_id WHERE T1.product_name  =  'Book collection A'", "sub_ques": "what are the start date and end date of the booking"}
{"db_id": "products_for_hire", "sub_sql": "where t1.product_name = bookcollectiona", "question": "What are the start date and end date of the booking that has booked the product named 'Book collection A'?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where product name equal to bookcollectiona", "query": "SELECT T3.booking_start_date ,   T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id  =  T2.product_id JOIN bookings AS T3 ON T2.booking_id  =  T3.booking_id WHERE T1.product_name  =  'Book collection A'", "sub_ques": "product named book collection a"}
{"db_id": "products_for_hire", "sub_sql": "select t2.product_name from products_for_hire", "question": "What are the names of products whose availability equals to 1?", "sub_sql_type": "null col col col col", "sub_sql_new": "select product name from products_for_hire", "query": "SELECT T2.product_name FROM view_product_availability AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.available_yn  =  1", "sub_ques": "what are the names of products"}
{"db_id": "products_for_hire", "sub_sql": "where t1.available_yn = 1", "question": "What are the names of products whose availability equals to 1?", "sub_sql_type": "null col col col col op op value", "sub_sql_new": "where available yes or no equal to 1", "query": "SELECT T2.product_name FROM view_product_availability AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.available_yn  =  1", "sub_ques": "products whose availability equals to 1"}
{"db_id": "products_for_hire", "sub_sql": "select count distinct product_type_code from products_for_hire", "question": "How many different product types are there?", "sub_sql_type": "null agg col col col col col col", "sub_sql_new": "select count distinct product type code from products_for_hire", "query": "SELECT count(DISTINCT product_type_code) FROM products_for_hire", "sub_ques": "how many different product types"}
{"db_id": "products_for_hire", "sub_sql": "select first_name , last_name , gender_mf from customers", "question": "What are the first name, last name, and gender of all the good customers? Order by their last name.", "sub_sql_type": "null col col null col col null col col col", "sub_sql_new": "select first name , last name , gender from customers", "query": "SELECT first_name ,  last_name ,  gender_mf FROM customers WHERE good_or_bad_customer  =  'good' ORDER BY last_name", "sub_ques": "what are the first name , last name , and gender of customers"}
{"db_id": "products_for_hire", "sub_sql": "where good_or_bad_customer = good", "question": "What are the first name, last name, and gender of all the good customers? Order by their last name.", "sub_sql_type": "null col col col col op op value", "sub_sql_new": "where good or bad customer equal to good", "query": "SELECT first_name ,  last_name ,  gender_mf FROM customers WHERE good_or_bad_customer  =  'good' ORDER BY last_name", "sub_ques": "all the good customers"}
{"db_id": "products_for_hire", "sub_sql": "order by last_name", "question": "What are the first name, last name, and gender of all the good customers? Order by their last name.", "sub_sql_type": "null null col col", "sub_sql_new": "order by last name", "query": "SELECT first_name ,  last_name ,  gender_mf FROM customers WHERE good_or_bad_customer  =  'good' ORDER BY last_name", "sub_ques": "order by their last name"}
{"db_id": "products_for_hire", "sub_sql": "select avg amount_due from payments", "question": "What is the average amount due for all the payments?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select avg amount due from payments", "query": "SELECT avg(amount_due) FROM payments", "sub_ques": "what is the average amount due for all the payments"}
{"db_id": "products_for_hire", "sub_sql": "select max booked_count , min booked_count , avg booked_count from products_booked", "question": "What are the maximum, minimum, and average booked count for the products booked?", "sub_sql_type": "null agg col col null agg col col null agg col col col col", "sub_sql_new": "select max booked count , min booked count , avg booked count from products_booked", "query": "SELECT max(booked_count) ,  min(booked_count) ,  avg(booked_count) FROM products_booked", "sub_ques": "what are the maximum , minimum , and average booked count"}
{"db_id": "products_for_hire", "sub_sql": "select distinct payment_type_code from payments", "question": "What are all the distinct payment types?", "sub_sql_type": "null col col col col col col", "sub_sql_new": "select distinct payment type code from payments", "query": "SELECT DISTINCT payment_type_code FROM payments", "sub_ques": "what are all the distinct payment types"}
{"db_id": "products_for_hire", "sub_sql": "select daily_hire_cost from products_for_hire", "question": "What are the daily hire costs for the products with substring 'Book' in its name?", "sub_sql_type": "null col col col col col", "sub_sql_new": "select daily hire cost from products_for_hire", "query": "SELECT daily_hire_cost FROM Products_for_hire WHERE product_name LIKE '%Book%'", "sub_ques": "what are the daily hire costs"}
{"db_id": "products_for_hire", "sub_sql": "where product_name like book", "question": "What are the daily hire costs for the products with substring 'Book' in its name?", "sub_sql_type": "null col col op value", "sub_sql_new": "where product name like book", "query": "SELECT daily_hire_cost FROM Products_for_hire WHERE product_name LIKE '%Book%'", "sub_ques": "products with substring book in its name"}
{"db_id": "products_for_hire", "sub_sql": "select count products_for_hire", "question": "How many products are never booked with amount higher than 200?", "sub_sql_type": "null agg col", "sub_sql_new": "select count products_for_hire", "query": "SELECT count(*) FROM Products_for_hire WHERE product_id NOT IN ( SELECT product_id FROM products_booked WHERE booked_amount  >  200 )", "sub_ques": "how many products"}
{"db_id": "products_for_hire", "sub_sql": "where booked_amount > 200", "question": "How many products are never booked with amount higher than 200?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where booked amount more than 200", "query": "SELECT count(*) FROM Products_for_hire WHERE product_id NOT IN ( SELECT product_id FROM products_booked WHERE booked_amount  >  200 )", "sub_ques": "booked with amount higher than 200"}
{"db_id": "products_for_hire", "sub_sql": "select payment_date from payments", "question": "What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check'", "sub_sql_type": "null col col col col", "sub_sql_new": "select payment date from payments", "query": "SELECT payment_date FROM payments WHERE amount_paid  >  300 OR payment_type_code  =  'Check'", "sub_ques": "what are the payment date of the payment"}
{"db_id": "products_for_hire", "sub_sql": "where amount_paid > 300", "question": "What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check'", "sub_sql_type": "null col col op op value", "sub_sql_new": "where amount paid more than 300", "query": "SELECT payment_date FROM payments WHERE amount_paid  >  300 OR payment_type_code  =  'Check'", "sub_ques": "payment with amount paid higher than 300"}
{"db_id": "products_for_hire", "sub_sql": "select product_name , product_description from products_for_hire", "question": "What are the names and descriptions of the products that are of 'Cutlery' type and have daily hire cost lower than 20?", "sub_sql_type": "null col col null col col col col", "sub_sql_new": "select product name , product description from products_for_hire", "query": "SELECT product_name ,  product_description FROM products_for_hire WHERE product_type_code  =  'Cutlery' AND daily_hire_cost  <  20", "sub_ques": "what are the names and descriptions of the products"}
{"db_id": "products_for_hire", "sub_sql": "where product_type_code = cutlery", "question": "What are the names and descriptions of the products that are of 'Cutlery' type and have daily hire cost lower than 20?", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where product type code equal to cutlery", "query": "SELECT product_name ,  product_description FROM products_for_hire WHERE product_type_code  =  'Cutlery' AND daily_hire_cost  <  20", "sub_ques": "products that are of cutlery type"}
{"db_id": "phone_market", "sub_sql": "select count phone", "question": "How many phones are there?", "sub_sql_type": "null agg col", "sub_sql_new": "select count phone", "query": "SELECT count(*) FROM phone", "sub_ques": "how many phones"}
{"db_id": "phone_market", "sub_sql": "select name from phone", "question": "List the names of phones in ascending order of price.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from phone", "query": "SELECT Name FROM phone ORDER BY Price ASC", "sub_ques": "list the names of phones"}
{"db_id": "phone_market", "sub_sql": "order by price asc", "question": "List the names of phones in ascending order of price.", "sub_sql_type": "null null col null", "sub_sql_new": "order by price asc", "query": "SELECT Name FROM phone ORDER BY Price ASC", "sub_ques": "in ascending order of price"}
{"db_id": "phone_market", "sub_sql": "select memory_in_g , carrier from phone", "question": "What are the memories and carriers of phones?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select memory_in_g , carrier from phone", "query": "SELECT Memory_in_G ,  Carrier FROM phone", "sub_ques": "what are the memories and carriers of phones"}
{"db_id": "phone_market", "sub_sql": "select distinct carrier from phone", "question": "List the distinct carriers of phones with memories bigger than 32.", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct carrier from phone", "query": "SELECT DISTINCT Carrier FROM phone WHERE Memory_in_G  >  32", "sub_ques": "list the distinct carriers of phones"}
{"db_id": "phone_market", "sub_sql": "where memory_in_g > 32", "question": "List the distinct carriers of phones with memories bigger than 32.", "sub_sql_type": "null col op op value", "sub_sql_new": "where memory_in_g more than 32", "query": "SELECT DISTINCT Carrier FROM phone WHERE Memory_in_G  >  32", "sub_ques": "phones with memories bigger than 32"}
{"db_id": "phone_market", "sub_sql": "select name from phone", "question": "Show the names of phones with carrier either \\\\\\\"Sprint\\\\\\\" or \\\\\\\"TMobile\\\\\\\".", "sub_sql_type": "null col col col", "sub_sql_new": "select name from phone", "query": "SELECT Name FROM phone WHERE Carrier  =  \\\\\\\"Sprint\\\\\\\" OR Carrier  =  \\\\\\\"TMobile\\\\\\\"", "sub_ques": "show the names of phones"}
{"db_id": "phone_market", "sub_sql": "where carrier = sprint", "question": "Show the names of phones with carrier either \\\\\\\"Sprint\\\\\\\" or \\\\\\\"TMobile\\\\\\\".", "sub_sql_type": "null col op op value", "sub_sql_new": "where carrier equal to sprint", "query": "SELECT Name FROM phone WHERE Carrier  =  \\\\\\\"Sprint\\\\\\\" OR Carrier  =  \\\\\\\"TMobile\\\\\\\"", "sub_ques": "phones with carrier either `` sprint"}
{"db_id": "phone_market", "sub_sql": "select carrier from phone", "question": "What is the carrier of the most expensive phone?", "sub_sql_type": "null col col col", "sub_sql_new": "select carrier from phone", "query": "SELECT Carrier FROM phone ORDER BY Price DESC LIMIT 1", "sub_ques": "what is the carrier"}
{"db_id": "phone_market", "sub_sql": "order by price desc limit 1", "question": "What is the carrier of the most expensive phone?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by price desc limit 1", "query": "SELECT Carrier FROM phone ORDER BY Price DESC LIMIT 1", "sub_ques": "the most expensive phone"}
{"db_id": "phone_market", "sub_sql": "select carrier , count phone group by carrier", "question": "Show different carriers of phones together with the number of phones with each carrier.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select carrier , count phone", "query": "SELECT Carrier ,  COUNT(*) FROM phone GROUP BY Carrier", "sub_ques": "show different carriers of phones together with the number of phones with each carrier"}
{"db_id": "phone_market", "sub_sql": "group by carrier order by count phone desc limit 1", "question": "Show the most frequently used carrier of the phones.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count phone desc limit 1", "query": "SELECT Carrier FROM phone GROUP BY Carrier ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "the most frequently used carrier of the phones"}
{"db_id": "phone_market", "sub_sql": "select t3.name , t2.district from phone , market", "question": "Show the names of phones and the districts of markets they are on.", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select name , district from phone , market", "query": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID", "sub_ques": "show the names of phones and the districts of markets"}
{"db_id": "phone_market", "sub_sql": "select t3.name , t2.district from phone , market", "question": "Show the names of phones and the districts of markets they are on, in ascending order of the ranking of the market.", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select name , district from phone , market", "query": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID ORDER BY T2.Ranking", "sub_ques": "show the names of phones and the districts of markets they are on"}
{"db_id": "phone_market", "sub_sql": "order by t2.ranking", "question": "Show the names of phones and the districts of markets they are on, in ascending order of the ranking of the market.", "sub_sql_type": "null null col", "sub_sql_new": "order by ranking", "query": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID ORDER BY T2.Ranking", "sub_ques": "in ascending order of the ranking of the market"}
{"db_id": "phone_market", "sub_sql": "select t3.name from phone", "question": "Show the names of phones that are on market with number of shops greater than 50.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from phone", "query": "SELECT T3.Name FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID WHERE T2.Num_of_shops  >  50", "sub_ques": "show the names of phones"}
{"db_id": "phone_market", "sub_sql": "where t2.num_of_shops > 50", "question": "Show the names of phones that are on market with number of shops greater than 50.", "sub_sql_type": "null col op op value", "sub_sql_new": "where num_of_shops more than 50", "query": "SELECT T3.Name FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID WHERE T2.Num_of_shops  >  50", "sub_ques": "market with number of shops greater than 50"}
{"db_id": "phone_market", "sub_sql": "select t2.name , sum t1.num_of_stock from phone , phone_market", "question": "For each phone, show its names and total number of stocks.", "sub_sql_type": "null col null agg col col col null col", "sub_sql_new": "select name , sum num_of_stock from phone , phone_market", "query": "SELECT T2.Name ,  sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name", "sub_ques": "show its names and total number of stocks"}
{"db_id": "phone_market", "sub_sql": "select t2.name from phone", "question": "Show the names of phones that have total number of stocks bigger than 2000, in descending order of the total number of stocks.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from phone", "query": "SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name HAVING sum(T1.Num_of_stock)  >=  2000 ORDER BY sum(T1.Num_of_stock) DESC", "sub_ques": "show the names of phones"}
{"db_id": "phone_market", "sub_sql": "group by t2.name having sum t1.num_of_stock >= 2000", "question": "Show the names of phones that have total number of stocks bigger than 2000, in descending order of the total number of stocks.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name HAVING sum(T1.Num_of_stock)  >=  2000 ORDER BY sum(T1.Num_of_stock) DESC", "sub_ques": "names of phones that have total number of stocks bigger than 2000 "}
{"db_id": "phone_market", "sub_sql": "order by sum t1.num_of_stock desc", "question": "Show the names of phones that have total number of stocks bigger than 2000, in descending order of the total number of stocks.", "sub_sql_type": "null null agg col null", "sub_sql_new": "order by sum num_of_stock desc", "query": "SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name HAVING sum(T1.Num_of_stock)  >=  2000 ORDER BY sum(T1.Num_of_stock) DESC", "sub_ques": "in descending order of the total number of stocks"}
{"db_id": "phone_market", "sub_sql": "select name from phone", "question": "List the names of phones that are not on any market.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from phone", "query": "SELECT Name FROM phone WHERE Phone_id NOT IN (SELECT Phone_ID FROM phone_market)", "sub_ques": "list the names of phones"}
{"db_id": "gas_company", "sub_sql": "select count company", "question": "How many gas companies are there?", "sub_sql_type": "null agg col", "sub_sql_new": "select count company", "query": "SELECT count(*) FROM company", "sub_ques": "how many gas companies"}
{"db_id": "gas_company", "sub_sql": "select count company", "question": "What is the total number of companies?", "sub_sql_type": "null agg col", "sub_sql_new": "select count company", "query": "SELECT count(*) FROM company", "sub_ques": "what is the total number of companies"}
{"db_id": "gas_company", "sub_sql": "select company , rank from company", "question": "List the company name and rank for all companies in the decreasing order of their sales.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select company , rank from company", "query": "SELECT company ,  rank FROM company ORDER BY Sales_billion DESC", "sub_ques": "list the company name and rank for all companies"}
{"db_id": "gas_company", "sub_sql": "order by sales_billion desc", "question": "List the company name and rank for all companies in the decreasing order of their sales.", "sub_sql_type": "null null col null", "sub_sql_new": "order by sales_billion desc", "query": "SELECT company ,  rank FROM company ORDER BY Sales_billion DESC", "sub_ques": "companies in the decreasing order of their sales"}
{"db_id": "gas_company", "sub_sql": "select company , rank from company", "question": "What is the name and rank of every company ordered by descending number of sales?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select company , rank from company", "query": "SELECT company ,  rank FROM company ORDER BY Sales_billion DESC", "sub_ques": "What is the name and rank of every company"}
{"db_id": "gas_company", "sub_sql": "order by sales_billion desc", "question": "What is the name and rank of every company ordered by descending number of sales?", "sub_sql_type": "null null col null", "sub_sql_new": "order by sales_billion desc", "query": "SELECT company ,  rank FROM company ORDER BY Sales_billion DESC", "sub_ques": "ordered by descending number of sales"}
{"db_id": "gas_company", "sub_sql": "select company , main_industry from company", "question": "Show the company name and the main industry for all companies whose headquarters are not from USA.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select company , main_industry from company", "query": "SELECT company ,  main_industry FROM company WHERE headquarters != 'USA'", "sub_ques": "show the company name and the main industry for all companies"}
{"db_id": "gas_company", "sub_sql": "where headquarters != usa", "question": "Show the company name and the main industry for all companies whose headquarters are not from USA.", "sub_sql_type": "null col op op op value", "sub_sql_new": "where headquarters not equal to usa", "query": "SELECT company ,  main_industry FROM company WHERE headquarters != 'USA'", "sub_ques": "headquarters are not from usa"}
{"db_id": "gas_company", "sub_sql": "select company , main_industry from company", "question": "What are the companies and main industries of all companies that are not headquartered in the United States?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select company , main_industry from company", "query": "SELECT company ,  main_industry FROM company WHERE headquarters != 'USA'", "sub_ques": "what are the companies and main industries of all companies"}
{"db_id": "gas_company", "sub_sql": "where headquarters != usa", "question": "What are the companies and main industries of all companies that are not headquartered in the United States?", "sub_sql_type": "null col op op op value", "sub_sql_new": "where headquarters not equal to usa", "query": "SELECT company ,  main_industry FROM company WHERE headquarters != 'USA'", "sub_ques": "in the united states"}
{"db_id": "gas_company", "sub_sql": "select company , headquarters from company", "question": "Show all company names and headquarters in the descending order of market value.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select company , headquarters from company", "query": "SELECT company ,  headquarters FROM company ORDER BY market_value DESC", "sub_ques": "show all company names and headquarters"}
{"db_id": "gas_company", "sub_sql": "order by market_value desc", "question": "Show all company names and headquarters in the descending order of market value.", "sub_sql_type": "null null col null", "sub_sql_new": "order by market_value desc", "query": "SELECT company ,  headquarters FROM company ORDER BY market_value DESC", "sub_ques": "in the descending order of market value"}
{"db_id": "gas_company", "sub_sql": "select company , headquarters from company", "question": "What are the names and headquarters of all companies ordered by descending market value?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select company , headquarters from company", "query": "SELECT company ,  headquarters FROM company ORDER BY market_value DESC", "sub_ques": "what are the names and headquarters of all companies"}
{"db_id": "gas_company", "sub_sql": "order by market_value desc", "question": "What are the names and headquarters of all companies ordered by descending market value?", "sub_sql_type": "null null col null", "sub_sql_new": "order by market_value desc", "query": "SELECT company ,  headquarters FROM company ORDER BY market_value DESC", "sub_ques": "ordered by descending market value"}
{"db_id": "gas_company", "sub_sql": "select min market_value , max market_value , avg market_value from company", "question": "Show minimum, maximum, and average market value for all companies.", "sub_sql_type": "null agg col null agg col null agg col col col", "sub_sql_new": "select min market_value , max market_value , avg market_value from company", "query": "SELECT min(market_value) ,  max(market_value) ,  avg(market_value) FROM company", "sub_ques": "show minimum , maximum , and average market value for all companies"}
{"db_id": "gas_company", "sub_sql": "select min market_value , max market_value , avg market_value from company", "question": "What is the minimum, maximum, and average market value for every company?", "sub_sql_type": "null agg col null agg col null agg col col col", "sub_sql_new": "select min market_value , max market_value , avg market_value from company", "query": "SELECT min(market_value) ,  max(market_value) ,  avg(market_value) FROM company", "sub_ques": "what is the minimum , maximum , and average market value for every company"}
{"db_id": "gas_company", "sub_sql": "select distinct main_industry from company", "question": "Show all main industry for all companies.", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct main_industry from company", "query": "SELECT DISTINCT main_industry FROM company", "sub_ques": "show all main industry for all"}
{"db_id": "gas_company", "sub_sql": "select distinct main_industry from company", "question": "What are the different main industries for all companies?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct main_industry from company", "query": "SELECT DISTINCT main_industry FROM company", "sub_ques": "what are the different main industries for all"}
{"db_id": "gas_company", "sub_sql": "select headquarters , count company group by headquarters", "question": "List all headquarters and the number of companies in each headquarter.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select headquarters , count company", "query": "SELECT headquarters ,  count(*) FROM company GROUP BY headquarters", "sub_ques": "list all headquarters and the number of companies in each headquarter"}
{"db_id": "gas_company", "sub_sql": "select headquarters , count company group by headquarters", "question": "For each headquarter, what are the headquarter and how many companies are centered there?", "sub_sql_type": "null col null agg col", "sub_sql_new": "select headquarters , count company", "query": "SELECT headquarters ,  count(*) FROM company GROUP BY headquarters", "sub_ques": "for each headquarter , what are the headquarter and how many companies"}
{"db_id": "gas_company", "sub_sql": "select main_industry , sum market_value from company", "question": "Show all main industry and total market value in each industry.", "sub_sql_type": "null col null agg col col col", "sub_sql_new": "select main_industry , sum market_value from company", "query": "SELECT main_industry ,  sum(market_value) FROM company GROUP BY main_industry", "sub_ques": "show all main industry and total market value"}
{"db_id": "gas_company", "sub_sql": "select main_industry , sum market_value from company", "question": "What are the main indstries and total market value for each industry?", "sub_sql_type": "null col null agg col col col", "sub_sql_new": "select main_industry , sum market_value from company", "query": "SELECT main_industry ,  sum(market_value) FROM company GROUP BY main_industry", "sub_ques": "what are the main indstries and total market value for each industry"}
{"db_id": "gas_company", "sub_sql": "select main_industry , count company group by main_industry", "question": "List the main industry with highest total market value and its number of companies.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select main_industry , count company", "query": "SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1", "sub_ques": "list the main industry and its number of companies"}
{"db_id": "gas_company", "sub_sql": "group by main_industry order by sum market_value desc limit 1", "question": "List the main industry with highest total market value and its number of companies.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by sum market_value desc limit 1", "query": "SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1", "sub_ques": "the main industry with highest total market value"}
{"db_id": "gas_company", "sub_sql": "select main_industry , count company group by main_industry", "question": "For each main industry, what is the total number of companies for the industry with the highest total market value?", "sub_sql_type": "null col null agg col", "sub_sql_new": "select main_industry , count company", "query": "SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1", "sub_ques": "main industry , what is the total number of companies"}
{"db_id": "gas_company", "sub_sql": "group by main_industry order by sum market_value desc limit 1", "question": "For each main industry, what is the total number of companies for the industry with the highest total market value?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by sum market_value desc limit 1", "query": "SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1", "sub_ques": "industry with the highest total market value"}
{"db_id": "gas_company", "sub_sql": "select headquarters from company", "question": "Show headquarters with at least two companies in the banking industry.", "sub_sql_type": "null col col col", "sub_sql_new": "select headquarters from company", "query": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING count(*)  >=  2", "sub_ques": "show headquarters"}
{"db_id": "gas_company", "sub_sql": "where main_industry = banking", "question": "Show headquarters with at least two companies in the banking industry.", "sub_sql_type": "null col op op value", "sub_sql_new": "where main_industry equal to banking", "query": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING count(*)  >=  2", "sub_ques": "companies in the banking industry"}
{"db_id": "gas_company", "sub_sql": "group by headquarters having count company >= 2", "question": "Show headquarters with at least two companies in the banking industry.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING count(*)  >=  2", "sub_ques": "headquarters with at least two companies"}
{"db_id": "gas_company", "sub_sql": "select headquarters from company", "question": "What are the headquarters with at least two companies in the banking industry?", "sub_sql_type": "null col col col", "sub_sql_new": "select headquarters from company", "query": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING count(*)  >=  2", "sub_ques": "what are the headquarters"}
{"db_id": "gas_company", "sub_sql": "where main_industry = banking", "question": "What are the headquarters with at least two companies in the banking industry?", "sub_sql_type": "null col op op value", "sub_sql_new": "where main_industry equal to banking", "query": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING count(*)  >=  2", "sub_ques": "companies in the banking industry"}
{"db_id": "gas_company", "sub_sql": "group by headquarters having count company >= 2", "question": "What are the headquarters with at least two companies in the banking industry?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING count(*)  >=  2", "sub_ques": "headquarters with at least two companies"}
{"db_id": "gas_company", "sub_sql": "select station_id , location , manager_name from gas_station", "question": "Show gas station id, location, and manager_name for all gas stations ordered by open year.", "sub_sql_type": "null col null col null col col col", "sub_sql_new": "select station_id , location , manager_name from gas_station", "query": "SELECT station_id ,  LOCATION ,  manager_name FROM gas_station ORDER BY open_year", "sub_ques": "show gas station id , location , and manager_name for all gas stations"}
{"db_id": "gas_company", "sub_sql": "order by open_year", "question": "Show gas station id, location, and manager_name for all gas stations ordered by open year.", "sub_sql_type": "null null col", "sub_sql_new": "order by open_year", "query": "SELECT station_id ,  LOCATION ,  manager_name FROM gas_station ORDER BY open_year", "sub_ques": "ordered by open year"}
{"db_id": "gas_company", "sub_sql": "select station_id , location , manager_name from gas_station", "question": "What are the gas station ids, locations, and manager names for the gas stations ordered by opening year?", "sub_sql_type": "null col null col null col col col", "sub_sql_new": "select station_id , location , manager_name from gas_station", "query": "SELECT station_id ,  LOCATION ,  manager_name FROM gas_station ORDER BY open_year", "sub_ques": "what are the gas station ids , locations , and manager names"}
{"db_id": "gas_company", "sub_sql": "order by open_year", "question": "What are the gas station ids, locations, and manager names for the gas stations ordered by opening year?", "sub_sql_type": "null null col", "sub_sql_new": "order by open_year", "query": "SELECT station_id ,  LOCATION ,  manager_name FROM gas_station ORDER BY open_year", "sub_ques": "ordered by opening year"}
{"db_id": "gas_company", "sub_sql": "select count gas_station", "question": "How many gas station are opened between 2000 and 2005?", "sub_sql_type": "null agg col", "sub_sql_new": "select count gas_station", "query": "SELECT count(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005", "sub_ques": "how many gas station"}
{"db_id": "gas_company", "sub_sql": "select count gas_station", "question": "What is the total number of gas stations that opened between 2000 and 2005?", "sub_sql_type": "null agg col", "sub_sql_new": "select count gas_station", "query": "SELECT count(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005", "sub_ques": "what is the total number of gas stations"}
{"db_id": "gas_company", "sub_sql": "select location , count gas_station group by location", "question": "Show all locations and the number of gas stations in each location ordered by the count.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select location , count gas_station", "query": "SELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)", "sub_ques": "show all locations and the number of gas stations in each location"}
{"db_id": "gas_company", "sub_sql": "group by location order by count gas_station", "question": "Show all locations and the number of gas stations in each location ordered by the count.", "sub_sql_type": "null null agg col", "sub_sql_new": "order by count gas_station", "query": "SELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)", "sub_ques": "gas stations in each location ordered by the count"}
{"db_id": "gas_company", "sub_sql": "select location , count gas_station group by location", "question": "For each location, how many gas stations are there in order?", "sub_sql_type": "null col null agg col", "sub_sql_new": "select location , count gas_station", "query": "SELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)", "sub_ques": "for each location , how many gas stations are there in order"}
{"db_id": "gas_company", "sub_sql": "select t2.company , count station_company group by t1.company_id", "question": "Show the company name with the number of gas station.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select company , count station_company", "query": "SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id", "sub_ques": "show the company name with the number of gas station"}
{"db_id": "gas_company", "sub_sql": "select company , main_industry from company", "question": "Show company name and main industry without a gas station.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select company , main_industry from company", "query": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)", "sub_ques": "show company name and main industry"}
{"db_id": "gas_company", "sub_sql": "company not in station_company", "question": "Show company name and main industry without a gas station.", "sub_sql_type": "tab op op tab tab", "sub_sql_new": "company not in station company", "query": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)", "sub_ques": "industry without a gas station"}
{"db_id": "gas_company", "sub_sql": "select company , main_industry from company", "question": "What are the main industries of the companies without gas stations and what are the companies?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select company , main_industry from company", "query": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)", "sub_ques": "what are the main industries of the companies and what are the companies"}
{"db_id": "gas_company", "sub_sql": "company not in station_company", "question": "What are the main industries of the companies without gas stations and what are the companies?", "sub_sql_type": "tab op op tab tab", "sub_sql_new": "company not in station company", "query": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)", "sub_ques": "the companies without gas stations"}
{"db_id": "gas_company", "sub_sql": "select t3.manager_name from gas_station", "question": "Show the manager name for gas stations belonging to the ExxonMobil company.", "sub_sql_type": "null col col col", "sub_sql_new": "select manager_name from gas_station", "query": "SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  'ExxonMobil'", "sub_ques": "show the manager name for gas stations"}
{"db_id": "gas_company", "sub_sql": "where t2.company = exxonmobil", "question": "Show the manager name for gas stations belonging to the ExxonMobil company.", "sub_sql_type": "null col op op value", "sub_sql_new": "where company equal to exxonmobil", "query": "SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  'ExxonMobil'", "sub_ques": "stations belonging to the exxonmobil company"}
{"db_id": "gas_company", "sub_sql": "select t3.manager_name from gas_station", "question": "What are the names of the managers for gas stations that are operated by the ExxonMobil company?", "sub_sql_type": "null col col col", "sub_sql_new": "select manager_name from gas_station", "query": "SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  'ExxonMobil'", "sub_ques": "what are the names of the managers"}
{"db_id": "gas_company", "sub_sql": "where t2.company = exxonmobil", "question": "What are the names of the managers for gas stations that are operated by the ExxonMobil company?", "sub_sql_type": "null col op op value", "sub_sql_new": "where company equal to exxonmobil", "query": "SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  'ExxonMobil'", "sub_ques": "gas stations that are operated by the exxonmobil company"}
{"db_id": "gas_company", "sub_sql": "select t3.location from gas_station", "question": "Show all locations where a gas station for company with market value greater than 100 is located.", "sub_sql_type": "null col col col", "sub_sql_new": "select location from gas_station", "query": "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  100", "sub_ques": "show all locations where a gas station for company"}
{"db_id": "gas_company", "sub_sql": "where t2.market_value > 100", "question": "Show all locations where a gas station for company with market value greater than 100 is located.", "sub_sql_type": "null col op op value", "sub_sql_new": "where market_value more than 100", "query": "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  100", "sub_ques": "company with market value greater than 100"}
{"db_id": "gas_company", "sub_sql": "select t3.location from gas_station", "question": "What are the locations that have gas stations owned by a company with a market value greater than 100?", "sub_sql_type": "null col col col", "sub_sql_new": "select location from gas_station", "query": "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  100", "sub_ques": "what are the locations"}
{"db_id": "gas_company", "sub_sql": "where t2.market_value > 100", "question": "What are the locations that have gas stations owned by a company with a market value greater than 100?", "sub_sql_type": "null col op op value", "sub_sql_new": "where market_value more than 100", "query": "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  100", "sub_ques": "company with a market value greater than 100"}
{"db_id": "gas_company", "sub_sql": "select manager_name from gas_station", "question": "Show the manager name with most number of gas stations opened after 2000.", "sub_sql_type": "null col col col", "sub_sql_new": "select manager_name from gas_station", "query": "SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1", "sub_ques": "show the manager name"}
{"db_id": "gas_company", "sub_sql": "where open_year > 2000", "question": "Show the manager name with most number of gas stations opened after 2000.", "sub_sql_type": "null col op op value", "sub_sql_new": "where open_year more than 2000", "query": "SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1", "sub_ques": "gas stations opened after 2000"}
{"db_id": "gas_company", "sub_sql": "group by manager_name order by count gas_station desc limit 1", "question": "Show the manager name with most number of gas stations opened after 2000.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count gas_station desc limit 1", "query": "SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the manager name with most number of gas stations"}
{"db_id": "gas_company", "sub_sql": "select manager_name from gas_station", "question": "What is the name of the manager with the most gas stations that opened after 2000?", "sub_sql_type": "null col col col", "sub_sql_new": "select manager_name from gas_station", "query": "SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1", "sub_ques": "what is the name of the manager"}
{"db_id": "gas_company", "sub_sql": "where open_year > 2000", "question": "What is the name of the manager with the most gas stations that opened after 2000?", "sub_sql_type": "null col op op value", "sub_sql_new": "where open_year more than 2000", "query": "SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1", "sub_ques": "gas stations that opened after 2000"}
{"db_id": "gas_company", "sub_sql": "group by manager_name order by count gas_station desc limit 1", "question": "What is the name of the manager with the most gas stations that opened after 2000?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count gas_station desc limit 1", "query": "SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the name of the manager with the most gas stations"}
{"db_id": "gas_company", "sub_sql": "order by open_year", "question": "order all gas station locations by the opening year.", "sub_sql_type": "null null col", "sub_sql_new": "order by open_year", "query": "SELECT LOCATION FROM gas_station ORDER BY open_year", "sub_ques": "the opening year"}
{"db_id": "gas_company", "sub_sql": "select location from gas_station", "question": "What are the locations of all the gas stations ordered by opening year?", "sub_sql_type": "null col col col", "sub_sql_new": "select location from gas_station", "query": "SELECT LOCATION FROM gas_station ORDER BY open_year", "sub_ques": "what are the locations"}
{"db_id": "gas_company", "sub_sql": "order by open_year", "question": "What are the locations of all the gas stations ordered by opening year?", "sub_sql_type": "null null col", "sub_sql_new": "order by open_year", "query": "SELECT LOCATION FROM gas_station ORDER BY open_year", "sub_ques": "ordered by opening year"}
{"db_id": "gas_company", "sub_sql": "select rank , company , market_value from company", "question": "find the rank, company names, market values of the companies in the banking industry order by their sales and profits in billion.", "sub_sql_type": "null col null col null col col col", "sub_sql_new": "select rank , company , market_value from company", "query": "SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion", "sub_ques": "find the rank , company names , market values of the companies"}
{"db_id": "gas_company", "sub_sql": "where main_industry = banking", "question": "find the rank, company names, market values of the companies in the banking industry order by their sales and profits in billion.", "sub_sql_type": "null col op op value", "sub_sql_new": "where main_industry equal to banking", "query": "SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion", "sub_ques": "in the banking industry"}
{"db_id": "gas_company", "sub_sql": "order by sales_billion", "question": "find the rank, company names, market values of the companies in the banking industry order by their sales and profits in billion.", "sub_sql_type": "null null col", "sub_sql_new": "order by sales_billion", "query": "SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion", "sub_ques": "order by their sales and profits in billion"}
{"db_id": "gas_company", "sub_sql": "select rank , company , market_value from company", "question": "What is the rank, company, and market value of every comapny in the banking industry ordered by sales and profits?", "sub_sql_type": "null col null col null col col col", "sub_sql_new": "select rank , company , market_value from company", "query": "SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion", "sub_ques": "what is the rank , company , and market value"}
{"db_id": "gas_company", "sub_sql": "where main_industry = banking", "question": "What is the rank, company, and market value of every comapny in the banking industry ordered by sales and profits?", "sub_sql_type": "null col op op value", "sub_sql_new": "where main_industry equal to banking", "query": "SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion", "sub_ques": "in the banking industry"}
{"db_id": "gas_company", "sub_sql": "order by sales_billion", "question": "What is the rank, company, and market value of every comapny in the banking industry ordered by sales and profits?", "sub_sql_type": "null null col", "sub_sql_new": "order by sales_billion", "query": "SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion", "sub_ques": "ordered by sales and profits"}
{"db_id": "gas_company", "sub_sql": "select t3.location , t3.representative_name from gas_station", "question": "find the location and Representative name of the gas stations owned by the companies with top 3 Asset amounts.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select location , representative_name from gas_station", "query": "SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3", "sub_ques": "find the location and representative name"}
{"db_id": "gas_company", "sub_sql": "order by t2.assets_billion desc limit 3", "question": "find the location and Representative name of the gas stations owned by the companies with top 3 Asset amounts.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by assets_billion desc limit 3", "query": "SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3", "sub_ques": "companies with top 3 asset amounts"}
{"db_id": "gas_company", "sub_sql": "select t3.location , t3.representative_name from gas_station", "question": "What are the locations and representatives' names of the gas stations owned by the companies with the 3 largest amounts of assets?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select location , representative_name from gas_station", "query": "SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3", "sub_ques": "what are the locations and representatives ' names"}
{"db_id": "gas_company", "sub_sql": "order by t2.assets_billion desc limit 3", "question": "What are the locations and representatives' names of the gas stations owned by the companies with the 3 largest amounts of assets?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by assets_billion desc limit 3", "query": "SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3", "sub_ques": "the 3 largest amounts of assets"}
{"db_id": "party_people", "sub_sql": "select count region", "question": "How many regions do we have?", "sub_sql_type": "null agg col", "sub_sql_new": "select count region", "query": "SELECT count(*) FROM region", "sub_ques": "how many regions"}
{"db_id": "party_people", "sub_sql": "select count region", "question": "Count the number of regions.", "sub_sql_type": "null agg col", "sub_sql_new": "select count region", "query": "SELECT count(*) FROM region", "sub_ques": "count the number of regions"}
{"db_id": "party_people", "sub_sql": "select distinct region_name from region", "question": "Show all distinct region names ordered by their labels.", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct region_name from region", "query": "SELECT DISTINCT region_name FROM region ORDER BY Label", "sub_ques": "show all distinct region names"}
{"db_id": "party_people", "sub_sql": "order by label", "question": "Show all distinct region names ordered by their labels.", "sub_sql_type": "null null col", "sub_sql_new": "order by label", "query": "SELECT DISTINCT region_name FROM region ORDER BY Label", "sub_ques": "ordered by their labels"}
{"db_id": "party_people", "sub_sql": "select distinct region_name from region", "question": "What are the different region names, ordered by labels?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct region_name from region", "query": "SELECT DISTINCT region_name FROM region ORDER BY Label", "sub_ques": "what are the different region names"}
{"db_id": "party_people", "sub_sql": "order by label", "question": "What are the different region names, ordered by labels?", "sub_sql_type": "null null col", "sub_sql_new": "order by label", "query": "SELECT DISTINCT region_name FROM region ORDER BY Label", "sub_ques": "ordered by labels"}
{"db_id": "party_people", "sub_sql": "select count distinct party_name from party", "question": "How many parties do we have?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct party_name from party", "query": "SELECT count(DISTINCT party_name) FROM party", "sub_ques": "how many parties"}
{"db_id": "party_people", "sub_sql": "select count distinct party_name from party", "question": "Count the number of different parties.", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct party_name from party", "query": "SELECT count(DISTINCT party_name) FROM party", "sub_ques": "count the number of different parties"}
{"db_id": "party_people", "sub_sql": "select minister , took_office , left_office from party", "question": "Show the ministers and the time they took and left office, listed by the time they left office.", "sub_sql_type": "null col null col null col col col", "sub_sql_new": "select minister , took_office , left_office from party", "query": "SELECT minister ,  took_office ,  left_office FROM party ORDER BY left_office", "sub_ques": "show the ministers and the time they took and left office"}
{"db_id": "party_people", "sub_sql": "order by left_office", "question": "Show the ministers and the time they took and left office, listed by the time they left office.", "sub_sql_type": "null null col", "sub_sql_new": "order by left_office", "query": "SELECT minister ,  took_office ,  left_office FROM party ORDER BY left_office", "sub_ques": "listed by the time they left office"}
{"db_id": "party_people", "sub_sql": "select minister , took_office , left_office from party", "question": "Who are the ministers, when did they take office, and when did they leave office, ordered by when they left office?", "sub_sql_type": "null col null col null col col col", "sub_sql_new": "select minister , took_office , left_office from party", "query": "SELECT minister ,  took_office ,  left_office FROM party ORDER BY left_office", "sub_ques": "who are the ministers , when did they take office , and when did they leave office"}
{"db_id": "party_people", "sub_sql": "order by left_office", "question": "Who are the ministers, when did they take office, and when did they leave office, ordered by when they left office?", "sub_sql_type": "null null col", "sub_sql_new": "order by left_office", "query": "SELECT minister ,  took_office ,  left_office FROM party ORDER BY left_office", "sub_ques": "ordered by when they left office"}
{"db_id": "party_people", "sub_sql": "select minister from party", "question": "Show the minister who took office after 1961 or before 1959.", "sub_sql_type": "null col col col", "sub_sql_new": "select minister from party", "query": "SELECT minister FROM party WHERE took_office  >  1961 OR took_office  <  1959", "sub_ques": "show the minister"}
{"db_id": "party_people", "sub_sql": "where took_office > 1961", "question": "Show the minister who took office after 1961 or before 1959.", "sub_sql_type": "null col op op value", "sub_sql_new": "where took_office more than 1961", "query": "SELECT minister FROM party WHERE took_office  >  1961 OR took_office  <  1959", "sub_ques": "who took office after 1961"}
{"db_id": "party_people", "sub_sql": "select minister from party", "question": "Who are the ministers who took office after 1961 or before 1959?", "sub_sql_type": "null col col col", "sub_sql_new": "select minister from party", "query": "SELECT minister FROM party WHERE took_office  >  1961 OR took_office  <  1959", "sub_ques": "who are the ministers"}
{"db_id": "party_people", "sub_sql": "where took_office > 1961", "question": "Who are the ministers who took office after 1961 or before 1959?", "sub_sql_type": "null col op op value", "sub_sql_new": "where took_office more than 1961", "query": "SELECT minister FROM party WHERE took_office  >  1961 OR took_office  <  1959", "sub_ques": "who took office after 1961"}
{"db_id": "party_people", "sub_sql": "select minister from party", "question": "Show all ministers who do not belong to Progress Party.", "sub_sql_type": "null col col col", "sub_sql_new": "select minister from party", "query": "SELECT minister FROM party WHERE party_name != 'Progress Party'", "sub_ques": "show all ministers"}
{"db_id": "party_people", "sub_sql": "where party_name != progressparty", "question": "Show all ministers who do not belong to Progress Party.", "sub_sql_type": "null col op op op value", "sub_sql_new": "where party_name not equal to progressparty", "query": "SELECT minister FROM party WHERE party_name != 'Progress Party'", "sub_ques": "who do not belong to progress party"}
{"db_id": "party_people", "sub_sql": "where party_name != progressparty", "question": "Which ministers are not a part of the Progress Party?", "sub_sql_type": "null col op op op value", "sub_sql_new": "where party_name not equal to progressparty", "query": "SELECT minister FROM party WHERE party_name != 'Progress Party'", "sub_ques": "are not a part of the progress party"}
{"db_id": "party_people", "sub_sql": "select minister , party_name from party", "question": "Show all ministers and parties they belong to in descending order of the time they took office.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select minister , party_name from party", "query": "SELECT minister ,  party_name FROM party ORDER BY took_office DESC", "sub_ques": "show all ministers and parties"}
{"db_id": "party_people", "sub_sql": "order by took_office desc", "question": "Show all ministers and parties they belong to in descending order of the time they took office.", "sub_sql_type": "null null col null", "sub_sql_new": "order by took_office desc", "query": "SELECT minister ,  party_name FROM party ORDER BY took_office DESC", "sub_ques": "they took office"}
{"db_id": "party_people", "sub_sql": "select minister , party_name from party", "question": "Who are the ministers and what parties do they belong to, listed descending by the times they took office?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select minister , party_name from party", "query": "SELECT minister ,  party_name FROM party ORDER BY took_office DESC", "sub_ques": "who are the ministers and what parties"}
{"db_id": "party_people", "sub_sql": "order by took_office desc", "question": "Who are the ministers and what parties do they belong to, listed descending by the times they took office?", "sub_sql_type": "null null col null", "sub_sql_new": "order by took_office desc", "query": "SELECT minister ,  party_name FROM party ORDER BY took_office DESC", "sub_ques": "they took office"}
{"db_id": "party_people", "sub_sql": "order by took_office desc", "question": "Who are the ministers and what parties do they belong to, listed descending by the times they took office?", "sub_sql_type": "null null col null", "sub_sql_new": "order by took_office desc", "query": "SELECT minister ,  party_name FROM party ORDER BY took_office DESC", "sub_ques": "listed descending by the times"}
{"db_id": "party_people", "sub_sql": "select minister from party", "question": "Return the minister who left office at the latest time.", "sub_sql_type": "null col col col", "sub_sql_new": "select minister from party", "query": "SELECT minister FROM party ORDER BY left_office DESC LIMIT 1", "sub_ques": "return the minister"}
{"db_id": "party_people", "sub_sql": "order by left_office desc limit 1", "question": "Return the minister who left office at the latest time.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by left_office desc limit 1", "query": "SELECT minister FROM party ORDER BY left_office DESC LIMIT 1", "sub_ques": "who left office at the latest time"}
{"db_id": "party_people", "sub_sql": "select minister from party", "question": "Which minister left office the latest?", "sub_sql_type": "null col col col", "sub_sql_new": "select minister from party", "query": "SELECT minister FROM party ORDER BY left_office DESC LIMIT 1", "sub_ques": "which minister"}
{"db_id": "party_people", "sub_sql": "order by left_office desc limit 1", "question": "Which minister left office the latest?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by left_office desc limit 1", "query": "SELECT minister FROM party ORDER BY left_office DESC LIMIT 1", "sub_ques": "left office the latest"}
{"db_id": "party_people", "sub_sql": "select t1.member_name , t2.party_name from member , party", "question": "List member names and their party names.", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select member_name , party_name from member , party", "query": "SELECT T1.member_name ,  T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id", "sub_ques": "list member names and their party names"}
{"db_id": "party_people", "sub_sql": "select t1.member_name , t2.party_name from member , party", "question": "What are the names of members and their corresponding parties?", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select member_name , party_name from member , party", "query": "SELECT T1.member_name ,  T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id", "sub_ques": "what are the names of members and their corresponding parties"}
{"db_id": "party_people", "sub_sql": "select t2.party_name , count party group by t1.party_id", "question": "Show all party names and the number of members in each party.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select party_name , count party", "query": "SELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id", "sub_ques": "show all party names and the number of members in each party"}
{"db_id": "party_people", "sub_sql": "select t2.party_name , count member group by t1.party_id", "question": "How many members are in each party?", "sub_sql_type": "null col null agg col", "sub_sql_new": "select party_name , count member", "query": "SELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id", "sub_ques": "how many members are in each party"}
{"db_id": "party_people", "sub_sql": "select t2.party_name from party", "question": "What is the name of party with most number of members?", "sub_sql_type": "null col col col", "sub_sql_new": "select party_name from party", "query": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "what is the name of party"}
{"db_id": "party_people", "sub_sql": "group by t1.party_id order by count * desc limit 1", "question": "What is the name of party with most number of members?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count * desc limit 1", "query": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "party with most number of members"}
{"db_id": "party_people", "sub_sql": "select t2.party_name from party", "question": "Return the name of the party with the most members.", "sub_sql_type": "null col col col", "sub_sql_new": "select party_name from party", "query": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "return the name of the party"}
{"db_id": "party_people", "sub_sql": "group by t1.party_id order by count * desc limit 1", "question": "Return the name of the party with the most members.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count * desc limit 1", "query": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "party with the most members"}
{"db_id": "party_people", "sub_sql": "select t1.party_name , t2.region_name from party , region", "question": "Show all party names and their region names.", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select party_name , region_name from party , region", "query": "SELECT T1.party_name ,  T2.region_name FROM party AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id", "sub_ques": "show all party names and their region names"}
{"db_id": "party_people", "sub_sql": "select t1.party_name , t2.region_name from party , region", "question": "What are the names of parties and their respective regions?", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select party_name , region_name from party , region", "query": "SELECT T1.party_name ,  T2.region_name FROM party AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id", "sub_ques": "what are the names of parties and their respective regions"}
{"db_id": "party_people", "sub_sql": "select party_name from party", "question": "Show names of parties that does not have any members.", "sub_sql_type": "null col col col", "sub_sql_new": "select party_name from party", "query": "SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)", "sub_ques": "show names of parties"}
{"db_id": "party_people", "sub_sql": "party not in member", "question": "Show names of parties that does not have any members.", "sub_sql_type": "tab op op tab", "sub_sql_new": "party not in member", "query": "SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)", "sub_ques": "that does not have any members"}
{"db_id": "party_people", "sub_sql": "select party_name from party", "question": "What are the names of parties that have no members?", "sub_sql_type": "null col col col", "sub_sql_new": "select party_name from party", "query": "SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)", "sub_ques": "what are the names of parties"}
{"db_id": "party_people", "sub_sql": "party not in member", "question": "What are the names of parties that have no members?", "sub_sql_type": "tab op op tab", "sub_sql_new": "party not in member", "query": "SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)", "sub_ques": "parties that have no members"}
{"db_id": "party_people", "sub_sql": "select t1.member_name from member", "question": "Show member names that are not in the Progress Party.", "sub_sql_type": "null col col col", "sub_sql_new": "select member_name from member", "query": "SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id WHERE T2.Party_name != \\\\\\\"Progress Party\\\\\\\"", "sub_ques": "show member names"}
{"db_id": "party_people", "sub_sql": "where t2.party_name != progressparty", "question": "Show member names that are not in the Progress Party.", "sub_sql_type": "null col op op op value", "sub_sql_new": "where party_name not equal to progressparty", "query": "SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id WHERE T2.Party_name != \\\\\\\"Progress Party\\\\\\\"", "sub_ques": "that are not in the progress party"}
{"db_id": "party_people", "sub_sql": "select t1.member_name from member", "question": "Which member names corresponding to members who are not in the Progress Party?", "sub_sql_type": "null col col col", "sub_sql_new": "select member_name from member", "query": "SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id WHERE T2.Party_name != \\\\\\\"Progress Party\\\\\\\"", "sub_ques": "which member names corresponding to members"}
{"db_id": "party_people", "sub_sql": "where t2.party_name != progressparty", "question": "Which member names corresponding to members who are not in the Progress Party?", "sub_sql_type": "null col op op op value", "sub_sql_new": "where party_name not equal to progressparty", "query": "SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id WHERE T2.Party_name != \\\\\\\"Progress Party\\\\\\\"", "sub_ques": "who are not in the progress party"}
{"db_id": "party_people", "sub_sql": "select count party_events", "question": "How many party events do we have?", "sub_sql_type": "null agg col", "sub_sql_new": "select count party_events", "query": "SELECT count(*) FROM party_events", "sub_ques": "how many party events"}
{"db_id": "party_people", "sub_sql": "select count party_events", "question": "Count the number of party events.", "sub_sql_type": "null agg col", "sub_sql_new": "select count party_events", "query": "SELECT count(*) FROM party_events", "sub_ques": "count the number of party events"}
{"db_id": "party_people", "sub_sql": "select t2.party_name , count party_events group by t1.party_id", "question": "Show party names and the number of events for each party.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select party_name , count party_events", "query": "SELECT T2.party_name ,  count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id", "sub_ques": "show party names and the number of events for each party"}
{"db_id": "party_people", "sub_sql": "select t2.party_name , count party_events group by t1.party_id", "question": "How many events are there for each party?", "sub_sql_type": "null col null agg col", "sub_sql_new": "select party_name , count party_events", "query": "SELECT T2.party_name ,  count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id", "sub_ques": "how many events are there for each party"}
{"db_id": "party_people", "sub_sql": "select t2.party_name from party", "question": "What are the names of parties with at least 2 events?", "sub_sql_type": "null col col col", "sub_sql_new": "select party_name from party", "query": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2", "sub_ques": "what are the names of parties"}
{"db_id": "party_people", "sub_sql": "group by t1.party_id having count party_events >= 2", "question": "What are the names of parties with at least 2 events?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2", "sub_ques": "parties with at least 2 events"}
{"db_id": "party_people", "sub_sql": "select t2.party_name from party", "question": "Return the names of parties that have two or more events.", "sub_sql_type": "null col col col", "sub_sql_new": "select party_name from party", "query": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2", "sub_ques": "return the names of parties"}
{"db_id": "party_people", "sub_sql": "group by t1.party_id having count party_events >= 2", "question": "Return the names of parties that have two or more events.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2", "sub_ques": "parties that have two or more events"}
{"db_id": "party_people", "sub_sql": "select t1.member_name from member", "question": "What is the name of member in charge of greatest number of events?", "sub_sql_type": "null col col col", "sub_sql_new": "select member_name from member", "query": "SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "what is the name of member"}
{"db_id": "party_people", "sub_sql": "group by t2.member_in_charge_id order by count party_events desc limit 1", "question": "What is the name of member in charge of greatest number of events?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count party_events desc limit 1", "query": "SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "member in charge of greatest number of events"}
{"db_id": "party_people", "sub_sql": "select t1.member_name from member", "question": "Return the name of the member who is in charge of the most events.", "sub_sql_type": "null col col col", "sub_sql_new": "select member_name from member", "query": "SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "return the name of the member"}
{"db_id": "party_people", "sub_sql": "group by t2.member_in_charge_id order by count party_events desc limit 1", "question": "Return the name of the member who is in charge of the most events.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count party_events desc limit 1", "query": "SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "member who is in charge of the most events"}
{"db_id": "party_people", "sub_sql": "select event_name from party_events", "question": "find the event names that have more than 2 records.", "sub_sql_type": "null col col col", "sub_sql_new": "select event_name from party_events", "query": "SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2", "sub_ques": "find the event names"}
{"db_id": "party_people", "sub_sql": "group by event_name having count party_events > 2", "question": "find the event names that have more than 2 records.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2", "sub_ques": "event names that have more than 2 records"}
{"db_id": "party_people", "sub_sql": "select event_name from party_events", "question": "Which event names were used more than twice for party events?", "sub_sql_type": "null col col col", "sub_sql_new": "select event_name from party_events", "query": "SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2", "sub_ques": "event names were used more than twice for party events"}
{"db_id": "party_people", "sub_sql": "group by event_name having count party_events > 2", "question": "Which event names were used more than twice for party events?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2", "sub_ques": "event names were used more than twice for party events"}
{"db_id": "party_people", "sub_sql": "where t1.region_name = unitedkingdom", "question": "How many Annual Meeting events happened in the United Kingdom region?", "sub_sql_type": "null col op op value", "sub_sql_new": "where region_name equal to unitedkingdom", "query": "SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \\\\\\\"United Kingdom\\\\\\\" AND t3.Event_Name  =  \\\\\\\"Annaual Meeting\\\\\\\"", "sub_ques": "events happened in the united kingdom region"}
{"db_id": "party_people", "sub_sql": "select count party_events", "question": "Count the number of Annual Meeting events that took place in the region of the United Kingdom.", "sub_sql_type": "null agg col", "sub_sql_new": "select count party_events", "query": "SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \\\\\\\"United Kingdom\\\\\\\" AND t3.Event_Name  =  \\\\\\\"Annaual Meeting\\\\\\\"", "sub_ques": "count the number of annual meeting events"}
{"db_id": "party_people", "sub_sql": "where t1.region_name = united kingdom", "question": "Count the number of Annual Meeting events that took place in the region of the United Kingdom.", "sub_sql_type": "null col op op value value", "sub_sql_new": "where region_name equal to united kingdom", "query": "SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \\\\\\\"United Kingdom\\\\\\\" AND t3.Event_Name  =  \\\\\\\"Annaual Meeting\\\\\\\"", "sub_ques": "in the region of the united kingdom"}
{"db_id": "pilot_record", "sub_sql": "select count pilot", "question": "How many pilots are there?", "sub_sql_type": "null agg col", "sub_sql_new": "select count pilot", "query": "SELECT count(*) FROM pilot", "sub_ques": "how many pilots"}
{"db_id": "pilot_record", "sub_sql": "select pilot_name from pilot", "question": "List the names of pilots in ascending order of rank.", "sub_sql_type": "null col col col", "sub_sql_new": "select pilot_name from pilot", "query": "SELECT Pilot_name FROM pilot ORDER BY Rank ASC", "sub_ques": "list the names of pilots"}
{"db_id": "pilot_record", "sub_sql": "order by rank asc", "question": "List the names of pilots in ascending order of rank.", "sub_sql_type": "null null col null", "sub_sql_new": "order by rank asc", "query": "SELECT Pilot_name FROM pilot ORDER BY Rank ASC", "sub_ques": "in ascending order of rank"}
{"db_id": "pilot_record", "sub_sql": "select position , team from pilot", "question": "What are the positions and teams of pilots?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select position , team from pilot", "query": "SELECT POSITION ,  Team FROM pilot", "sub_ques": "what are the positions and teams of pilots"}
{"db_id": "pilot_record", "sub_sql": "select distinct position from pilot", "question": "List the distinct positions of pilots older than 30.", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct position from pilot", "query": "SELECT DISTINCT POSITION FROM pilot WHERE Age  >  30", "sub_ques": "list the distinct positions of pilots"}
{"db_id": "pilot_record", "sub_sql": "where age > 30", "question": "List the distinct positions of pilots older than 30.", "sub_sql_type": "null col op op value", "sub_sql_new": "where age more than 30", "query": "SELECT DISTINCT POSITION FROM pilot WHERE Age  >  30", "sub_ques": "pilots older than 30"}
{"db_id": "pilot_record", "sub_sql": "select pilot_name from pilot", "question": "Show the names of pilots from team \\\\\\\"Bradley\\\\\\\" or \\\\\\\"Fordham\\\\\\\".", "sub_sql_type": "null col col col", "sub_sql_new": "select pilot_name from pilot", "query": "SELECT Pilot_name FROM pilot WHERE Team  =  \\\\\\\"Bradley\\\\\\\" OR Team  =  \\\\\\\"Fordham\\\\\\\"", "sub_ques": "show the names of pilots"}
{"db_id": "pilot_record", "sub_sql": "where team = bradley", "question": "Show the names of pilots from team \\\\\\\"Bradley\\\\\\\" or \\\\\\\"Fordham\\\\\\\".", "sub_sql_type": "null col op op value", "sub_sql_new": "where team equal to bradley", "query": "SELECT Pilot_name FROM pilot WHERE Team  =  \\\\\\\"Bradley\\\\\\\" OR Team  =  \\\\\\\"Fordham\\\\\\\"", "sub_ques": "team `` bradley"}
{"db_id": "pilot_record", "sub_sql": "select join_year from pilot", "question": "What is the joined year of the pilot of the highest rank?", "sub_sql_type": "null col col col", "sub_sql_new": "select join_year from pilot", "query": "SELECT Join_Year FROM pilot ORDER BY Rank ASC LIMIT 1", "sub_ques": "what is the joined year of the pilot"}
{"db_id": "pilot_record", "sub_sql": "order by rank asc limit 1", "question": "What is the joined year of the pilot of the highest rank?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by rank asc limit 1", "query": "SELECT Join_Year FROM pilot ORDER BY Rank ASC LIMIT 1", "sub_ques": "the highest rank"}
{"db_id": "pilot_record", "sub_sql": "select nationality , count pilot group by nationality", "question": "What are the different nationalities of pilots? Show each nationality and the number of pilots of each nationality.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select nationality , count pilot", "query": "SELECT Nationality ,  COUNT(*) FROM pilot GROUP BY Nationality", "sub_ques": "show each nationality and the number of pilots of each nationality"}
{"db_id": "pilot_record", "sub_sql": "group by nationality order by count pilot desc limit 1", "question": "Show the most common nationality of pilots.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count pilot desc limit 1", "query": "SELECT Nationality FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "the most common nationality of pilots"}
{"db_id": "pilot_record", "sub_sql": "select t3.pilot_name , t2.model from pilot , aircraft", "question": "Show the names of pilots and models of aircrafts they have flied with.", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select pilot_name , model from pilot , aircraft", "query": "SELECT T3.Pilot_name ,  T2.Model FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID", "sub_ques": "show the names of pilots and models of aircrafts"}
{"db_id": "pilot_record", "sub_sql": "select t3.pilot_name , t2.fleet_series from pilot , aircraft", "question": "Show the names of pilots and fleet series of the aircrafts they have flied with in ascending order of the rank of the pilot.", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select pilot_name , fleet_series from pilot , aircraft", "query": "SELECT T3.Pilot_name ,  T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID ORDER BY T3.Rank", "sub_ques": "show the names of pilots and fleet series of the aircrafts"}
{"db_id": "pilot_record", "sub_sql": "order by t3.rank", "question": "Show the names of pilots and fleet series of the aircrafts they have flied with in ascending order of the rank of the pilot.", "sub_sql_type": "null null col", "sub_sql_new": "order by rank", "query": "SELECT T3.Pilot_name ,  T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID ORDER BY T3.Rank", "sub_ques": "in ascending order of the rank of the pilot"}
{"db_id": "pilot_record", "sub_sql": "select t2.fleet_series from aircraft", "question": "Show the fleet series of the aircrafts flied by pilots younger than 34", "sub_sql_type": "null col col col", "sub_sql_new": "select fleet_series from aircraft", "query": "SELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID WHERE T3.Age  <  34", "sub_ques": "show the fleet series of the aircrafts"}
{"db_id": "pilot_record", "sub_sql": "where t3.age < 34", "question": "Show the fleet series of the aircrafts flied by pilots younger than 34", "sub_sql_type": "null col op op value", "sub_sql_new": "where age less than 34", "query": "SELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID WHERE T3.Age  <  34", "sub_ques": "pilots younger than 34"}
{"db_id": "pilot_record", "sub_sql": "select t2.pilot_name , count * from pilot group by t2.pilot_name", "question": "Show the names of pilots and the number of records they have.", "sub_sql_type": "null col null agg col col col", "sub_sql_new": "select pilot_name , count * from pilot", "query": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name", "sub_ques": "show the names of pilots"}
{"db_id": "pilot_record", "sub_sql": "select t2.pilot_name , count * from pilot group by t2.pilot_name", "question": "Show names of pilots that have more than one record.", "sub_sql_type": "null col null agg col col col", "sub_sql_new": "select pilot_name , count * from pilot", "query": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name HAVING COUNT(*)  >  1", "sub_ques": "show names of pilots"}
{"db_id": "pilot_record", "sub_sql": "group by t2.pilot_name having count pilot_record > 1", "question": "Show names of pilots that have more than one record.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name HAVING COUNT(*)  >  1", "sub_ques": "names of pilots that have more than one record"}
{"db_id": "pilot_record", "sub_sql": "select pilot_name from pilot", "question": "List the names of pilots that do not have any record.", "sub_sql_type": "null col col col", "sub_sql_new": "select pilot_name from pilot", "query": "SELECT Pilot_name FROM pilot WHERE Pilot_ID NOT IN (SELECT Pilot_ID FROM pilot_record)", "sub_ques": "list the names of pilots"}
{"db_id": "pilot_record", "sub_sql": "pilot not in pilot_record", "question": "List the names of pilots that do not have any record.", "sub_sql_type": "tab op op tab tab", "sub_sql_new": "pilot not in pilot record", "query": "SELECT Pilot_name FROM pilot WHERE Pilot_ID NOT IN (SELECT Pilot_ID FROM pilot_record)", "sub_ques": "pilots that do not have any record"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "select document_status_code from ref_document_status", "question": "What document status codes do we have?", "sub_sql_type": "null col col col col col", "sub_sql_new": "select document status code from ref_document_status", "query": "SELECT document_status_code FROM Ref_Document_Status;", "sub_ques": "what document status codes"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "select document_status_description from ref_document_status", "question": "What is the description of document status code 'working'?", "sub_sql_type": "null col col col col col", "sub_sql_new": "select document status description from ref_document_status", "query": "SELECT document_status_description FROM Ref_Document_Status WHERE document_status_code = \\\\\\\"working\\\\\\\";", "sub_ques": "what is the description of document"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "where document_status_code = working", "question": "What is the description of document status code 'working'?", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where document status code equal to working", "query": "SELECT document_status_description FROM Ref_Document_Status WHERE document_status_code = \\\\\\\"working\\\\\\\";", "sub_ques": "document status code working"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "select document_type_code from ref_document_types", "question": "What document type codes do we have?", "sub_sql_type": "null col col col col col", "sub_sql_new": "select document type code from ref_document_types", "query": "SELECT document_type_code FROM Ref_Document_Types;", "sub_ques": "what document type codes do we have"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "select document_type_description from ref_document_types", "question": "What is the description of document type 'Paper'?", "sub_sql_type": "null col col col col col", "sub_sql_new": "select document type description from ref_document_types", "query": "SELECT document_type_description FROM Ref_Document_Types WHERE document_type_code = \\\\\\\"Paper\\\\\\\";", "sub_ques": "what is the description of document type"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "where document_type_code = paper", "question": "What is the description of document type 'Paper'?", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where document type code equal to paper", "query": "SELECT document_type_description FROM Ref_Document_Types WHERE document_type_code = \\\\\\\"Paper\\\\\\\";", "sub_ques": "document type paper"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "select shipping_agent_name from ref_shipping_agents", "question": "What are the shipping agent names?", "sub_sql_type": "null col col col col col", "sub_sql_new": "select shipping agent name from ref_shipping_agents", "query": "SELECT shipping_agent_name FROM Ref_Shipping_Agents;", "sub_ques": "what are the shipping agent names"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "select shipping_agent_code from ref_shipping_agents", "question": "What is the shipping agent code of shipping agent UPS?", "sub_sql_type": "null col col col col col", "sub_sql_new": "select shipping agent code from ref_shipping_agents", "query": "SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = \\\\\\\"UPS\\\\\\\";", "sub_ques": "what is the shipping agent code"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "where shipping_agent_name = ups", "question": "What is the shipping agent code of shipping agent UPS?", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where shipping agent name equal to ups", "query": "SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = \\\\\\\"UPS\\\\\\\";", "sub_ques": "shipping agent ups"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "select role_code from roles", "question": "What are all role codes?", "sub_sql_type": "null col col col col", "sub_sql_new": "select role code from roles", "query": "SELECT role_code FROM ROLES;", "sub_ques": "what are all role codes"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "select role_description from roles", "question": "What is the description of role code ED?", "sub_sql_type": "null col col col col", "sub_sql_new": "select role description from roles", "query": "SELECT role_description FROM ROLES WHERE role_code = \\\\\\\"ED\\\\\\\";", "sub_ques": "what is the description"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "where role_code = ed", "question": "What is the description of role code ED?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where role code equal to ed", "query": "SELECT role_description FROM ROLES WHERE role_code = \\\\\\\"ED\\\\\\\";", "sub_ques": "role code ed"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "select count employees", "question": "How many employees do we have?", "sub_sql_type": "null agg col", "sub_sql_new": "select count employees", "query": "SELECT count(*) FROM Employees;", "sub_ques": "how many employees"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "select t1.role_description from roles", "question": "What is the role of the employee named Koby?", "sub_sql_type": "null col col col col", "sub_sql_new": "select role description from roles", "query": "SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = \\\\\\\"Koby\\\\\\\";", "sub_ques": "what is the role of the employee"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "where t2.employee_name = koby", "question": "What is the role of the employee named Koby?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where employee name equal to koby", "query": "SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = \\\\\\\"Koby\\\\\\\";", "sub_ques": "employee named koby"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "select document_id , receipt_date from documents", "question": "List all document ids and receipt dates of documents.", "sub_sql_type": "null col col null col col col col", "sub_sql_new": "select document id , receipt date from documents", "query": "SELECT document_id ,  receipt_date FROM Documents;", "sub_ques": "list all document ids and receipt dates of documents"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "select t1.role_description , t2.role_code , count roles , employees group by t2.role_code", "question": "How many employees does each role have? List role description, id and number of employees.", "sub_sql_type": "null col col null col col null agg col null col", "sub_sql_new": "select role description , role code , count roles , employees", "query": "SELECT T1.role_description ,  T2.role_code ,  count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code;", "sub_ques": "how many employees does each role have ? list role description"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "group by employees.role_code having count employees.employee_id > 1", "question": "List roles that have more than one employee. List the role description and number of employees.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT Roles.role_description , count(Employees.employee_id) FROM ROLES JOIN Employees ON Employees.role_code = Roles.role_code GROUP BY Employees.role_code HAVING count(Employees.employee_id)  >  1;", "sub_ques": "roles that have more than one employee"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "select ref_document_status.document_status_description from ref_document_status", "question": "What is the document status description of the document with id 1?", "sub_sql_type": "null col col col col col", "sub_sql_new": "select document status description from ref_document_status", "query": "SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 1;", "sub_ques": "what is the document status description"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "where documents.document_id = 1", "question": "What is the document status description of the document with id 1?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where document id equal to 1", "query": "SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 1;", "sub_ques": "document with id 1"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "select count documents", "question": "How many documents have the status code done?", "sub_sql_type": "null agg col", "sub_sql_new": "select count documents", "query": "SELECT count(*) FROM Documents WHERE document_status_code = \\\\\\\"done\\\\\\\";", "sub_ques": "how many documents"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "where document_status_code = done", "question": "How many documents have the status code done?", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where document status code equal to done", "query": "SELECT count(*) FROM Documents WHERE document_status_code = \\\\\\\"done\\\\\\\";", "sub_ques": "documents have the status code done"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "select document_type_code from documents", "question": "List the document type code for the document with the id 2.", "sub_sql_type": "null col col col col col", "sub_sql_new": "select document type code from documents", "query": "SELECT document_type_code FROM Documents WHERE document_id = 2;", "sub_ques": "list the document type code for the document"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "where document_id = 2", "question": "List the document type code for the document with the id 2.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where document id equal to 2", "query": "SELECT document_type_code FROM Documents WHERE document_id = 2;", "sub_ques": "document with the id 2"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "select document_id from documents", "question": "List the document ids for any documents with the status code done and the type code paper.", "sub_sql_type": "null col col col col", "sub_sql_new": "select document id from documents", "query": "SELECT document_id FROM Documents WHERE document_status_code = \\\\\\\"done\\\\\\\" AND document_type_code = \\\\\\\"Paper\\\\\\\";", "sub_ques": "list the document ids for any documents"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "where document_status_code = done", "question": "List the document ids for any documents with the status code done and the type code paper.", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where document status code equal to done", "query": "SELECT document_id FROM Documents WHERE document_status_code = \\\\\\\"done\\\\\\\" AND document_type_code = \\\\\\\"Paper\\\\\\\";", "sub_ques": "documents with the status code done"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "select ref_shipping_agents.shipping_agent_name from ref_shipping_agents", "question": "What is the name of the shipping agent of the document with id 2?", "sub_sql_type": "null col col col col col", "sub_sql_new": "select shipping agent name from ref_shipping_agents", "query": "SELECT Ref_Shipping_Agents.shipping_agent_name FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Documents.document_id = 2;", "sub_ques": "what is the name of the shipping agent"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "where documents.document_id = 2", "question": "What is the name of the shipping agent of the document with id 2?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where document id equal to 2", "query": "SELECT Ref_Shipping_Agents.shipping_agent_name FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Documents.document_id = 2;", "sub_ques": "the document with id 2"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "select count documents", "question": "How many documents were shipped by USPS?", "sub_sql_type": "null agg col", "sub_sql_new": "select count documents", "query": "SELECT count(*) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \\\\\\\"USPS\\\\\\\";", "sub_ques": "how many documents"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "where ref_shipping_agents.shipping_agent_name = usps", "question": "How many documents were shipped by USPS?", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where shipping agent name equal to usps", "query": "SELECT count(*) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \\\\\\\"USPS\\\\\\\";", "sub_ques": "documents were shipped by usps"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "group by ref_shipping_agents.shipping_agent_code order by count documents.document_id desc limit 1", "question": "Which shipping agent shipped the most documents? List the shipping agent name and the number of documents.", "sub_sql_type": "null null agg col col null null limv", "sub_sql_new": "order by count document id desc limit 1", "query": "SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1;", "sub_ques": "list the shipping agent name and the number of documents"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "select receipt_date from documents", "question": "What is the receipt date of the document with id 3?", "sub_sql_type": "null col col col col", "sub_sql_new": "select receipt date from documents", "query": "SELECT receipt_date FROM Documents WHERE document_id = 3;", "sub_ques": "what is the receipt date of the document"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "where document_id = 3", "question": "What is the receipt date of the document with id 3?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where document id equal to 3", "query": "SELECT receipt_date FROM Documents WHERE document_id = 3;", "sub_ques": "document with id 3"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "select addresses.address_details from addresses", "question": "What address was the document with id 4 mailed to?", "sub_sql_type": "null col col col col", "sub_sql_new": "select address details from addresses", "query": "SELECT Addresses.address_details FROM Addresses JOIN Documents_Mailed ON Documents_Mailed.mailed_to_address_id = Addresses.address_id WHERE document_id = 4;", "sub_ques": "what address"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "where document_id = 4", "question": "What address was the document with id 4 mailed to?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where document id equal to 4", "query": "SELECT Addresses.address_details FROM Addresses JOIN Documents_Mailed ON Documents_Mailed.mailed_to_address_id = Addresses.address_id WHERE document_id = 4;", "sub_ques": "the document with id 4"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "select mailing_date from documents_mailed", "question": "What is the mail date of the document with id 7?", "sub_sql_type": "null col col col col", "sub_sql_new": "select mailing date from documents_mailed", "query": "SELECT mailing_date FROM Documents_Mailed WHERE document_id = 7;", "sub_ques": "what is the mail date"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "where document_id = 7", "question": "What is the mail date of the document with id 7?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where document id equal to 7", "query": "SELECT mailing_date FROM Documents_Mailed WHERE document_id = 7;", "sub_ques": "the document with id 7"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "select draft_details from document_drafts", "question": "What is draft detail of the document with id 7?", "sub_sql_type": "null col col col col", "sub_sql_new": "select draft details from document_drafts", "query": "SELECT draft_details FROM Document_Drafts WHERE document_id = 7;", "sub_ques": "what is draft detail"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "where document_id = 7", "question": "What is draft detail of the document with id 7?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where document id equal to 7", "query": "SELECT draft_details FROM Document_Drafts WHERE document_id = 7;", "sub_ques": "the document with id 7"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "select count draft_copies", "question": "How many draft copies does the document with id 2 have?", "sub_sql_type": "null agg col", "sub_sql_new": "select count draft_copies", "query": "SELECT count(*) FROM Draft_Copies WHERE document_id = 2;", "sub_ques": "how many draft copies"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "where document_id = 2", "question": "How many draft copies does the document with id 2 have?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where document id equal to 2", "query": "SELECT count(*) FROM Draft_Copies WHERE document_id = 2;", "sub_ques": "document with id 2"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "select document_id , count copy_number from draft_copies", "question": "Which document has the most draft copies? List its document id and number of draft copies.", "sub_sql_type": "null col col null agg col col col col", "sub_sql_new": "select document id , count copy number from draft_copies", "query": "SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;", "sub_ques": "list its document id and number of draft copies"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "group by document_id order by count copy_number desc limit 1", "question": "Which document has the most draft copies? List its document id and number of draft copies.", "sub_sql_type": "null null agg col col null null limv", "sub_sql_new": "order by count copy number desc limit 1", "query": "SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;", "sub_ques": "document has the most draft copies"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "select document_id , count * from draft_copies group by document_id", "question": "Which documents have more than 1 draft copies? List document id and number of draft copies.", "sub_sql_type": "null col col null agg col col col", "sub_sql_new": "select document id , count * from draft_copies", "query": "SELECT document_id , count(*) FROM Draft_Copies GROUP BY document_id HAVING count(*)  >  1;", "sub_ques": "list document id and number of draft copies"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "group by document_id having count draft_copies > 1", "question": "Which documents have more than 1 draft copies? List document id and number of draft copies.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT document_id , count(*) FROM Draft_Copies GROUP BY document_id HAVING count(*)  >  1;", "sub_ques": "documents have more than 1 draft copies"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "select employees.employee_name from employees", "question": "List all employees in the circulation history of the document with id 1. List the employee's name.", "sub_sql_type": "null col col col col", "sub_sql_new": "select employee name from employees", "query": "SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = 1;", "sub_ques": "list the employee's name"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "where circulation_history.document_id = 1", "question": "List all employees in the circulation history of the document with id 1. List the employee's name.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where document id equal to 1", "query": "SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = 1;", "sub_ques": "the document with id 1"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "select employees.employee_name , count drafts_copies , circulation_history group by circulation_history.document_id", "question": "Which employee has showed up in most circulation history documents. List the employee's name and the number of drafts and copies.", "sub_sql_type": "null col col null agg col null col", "sub_sql_new": "select employee name , count drafts_copies , circulation_history", "query": "SELECT Employees.employee_name , count(*) FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY Circulation_History.document_id , Circulation_History.draft_number , Circulation_History.copy_number ORDER BY count(*) DESC LIMIT 1;", "sub_ques": "list the employee 's name and the number of drafts and copies"}
{"db_id": "cre_Doc_Control_Systems", "sub_sql": "order by count * desc limit 1", "question": "Which employee has showed up in most circulation history documents. List the employee's name and the number of drafts and copies.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count * desc limit 1", "query": "SELECT Employees.employee_name , count(*) FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY Circulation_History.document_id , Circulation_History.draft_number , Circulation_History.copy_number ORDER BY count(*) DESC LIMIT 1;", "sub_ques": "has showed up in most circulation history documents"}
{"db_id": "company_1", "sub_sql": "select dname from department", "question": "List all department names ordered by their starting date.", "sub_sql_type": "null col col col", "sub_sql_new": "select dname from department", "query": "SELECT dname FROM department ORDER BY mgr_start_date", "sub_ques": "list all department names"}
{"db_id": "company_1", "sub_sql": "order by mgr_start_date", "question": "List all department names ordered by their starting date.", "sub_sql_type": "null null col", "sub_sql_new": "order by mgr_start_date", "query": "SELECT dname FROM department ORDER BY mgr_start_date", "sub_ques": "ordered by their starting date"}
{"db_id": "company_1", "sub_sql": "select dependent_name from dependent", "question": "find all dependent names who have a spouse relation with some employee.", "sub_sql_type": "null col col col", "sub_sql_new": "select dependent_name from dependent", "query": "SELECT Dependent_name FROM dependent WHERE relationship  =  'Spouse'", "sub_ques": "find all dependent names"}
{"db_id": "company_1", "sub_sql": "where relationship = spouse", "question": "find all dependent names who have a spouse relation with some employee.", "sub_sql_type": "null col op op value", "sub_sql_new": "where relationship equal to spouse", "query": "SELECT Dependent_name FROM dependent WHERE relationship  =  'Spouse'", "sub_ques": "who have a spouse relation"}
{"db_id": "company_1", "sub_sql": "select count dependent", "question": "how many female dependents are there?", "sub_sql_type": "null agg col", "sub_sql_new": "select count dependent", "query": "SELECT count(*) FROM dependent WHERE sex  =  'F'", "sub_ques": "how many dependents"}
{"db_id": "company_1", "sub_sql": "where sex = f", "question": "how many female dependents are there?", "sub_sql_type": "null col op op value", "sub_sql_new": "where sex equal to f", "query": "SELECT count(*) FROM dependent WHERE sex  =  'F'", "sub_ques": "female dependents"}
{"db_id": "company_1", "sub_sql": "select t1.dname from department", "question": "Find the names of departments that are located in Houston.", "sub_sql_type": "null col col col", "sub_sql_new": "select dname from department", "query": "SELECT t1.dname FROM department AS t1 JOIN dept_locations AS t2 ON t1.dnumber  =  t2.dnumber WHERE t2.dlocation  =  'Houston'", "sub_ques": "find the names of departments"}
{"db_id": "company_1", "sub_sql": "where t2.dlocation = houston", "question": "Find the names of departments that are located in Houston.", "sub_sql_type": "null col op op value", "sub_sql_new": "where dlocation equal to houston", "query": "SELECT t1.dname FROM department AS t1 JOIN dept_locations AS t2 ON t1.dnumber  =  t2.dnumber WHERE t2.dlocation  =  'Houston'", "sub_ques": "departments that are located in houston"}
{"db_id": "company_1", "sub_sql": "select fname , lname from employee", "question": "Return the first names and last names of employees who earn more than 30000 in salary.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select fname , lname from employee", "query": "SELECT fname ,  lname FROM employee WHERE salary  >  30000", "sub_ques": "return the first names and last names of employees"}
{"db_id": "company_1", "sub_sql": "where salary > 30000", "question": "Return the first names and last names of employees who earn more than 30000 in salary.", "sub_sql_type": "null col op op value", "sub_sql_new": "where salary more than 30000", "query": "SELECT fname ,  lname FROM employee WHERE salary  >  30000", "sub_ques": "employees who earn more than 30000 in salary"}
{"db_id": "company_1", "sub_sql": "select count employee , sex group by sex", "question": "Find the number of employees of each gender whose salary is lower than 50000.", "sub_sql_type": "null agg col null col", "sub_sql_new": "select count employee , sex", "query": "SELECT count(*) ,  sex FROM employee WHERE salary  <  50000 GROUP BY sex", "sub_ques": "find the number of employees of each gender"}
{"db_id": "company_1", "sub_sql": "where salary < 50000", "question": "Find the number of employees of each gender whose salary is lower than 50000.", "sub_sql_type": "null col op op value", "sub_sql_new": "where salary less than 50000", "query": "SELECT count(*) ,  sex FROM employee WHERE salary  <  50000 GROUP BY sex", "sub_ques": "employees whose salary is lower than 50000"}
{"db_id": "company_1", "sub_sql": "select fname , lname , address from employee", "question": "list the first and last names, and the addresses of all employees in the ascending order of their birth date.", "sub_sql_type": "null col null col null col col col", "sub_sql_new": "select fname , lname , address from employee", "query": "SELECT fname ,  lname ,  address FROM employee ORDER BY Bdate", "sub_ques": "list the first and last names , and the addresses of all employees"}
{"db_id": "company_1", "sub_sql": "order by bdate", "question": "list the first and last names, and the addresses of all employees in the ascending order of their birth date.", "sub_sql_type": "null null col", "sub_sql_new": "order by bdate", "query": "SELECT fname ,  lname ,  address FROM employee ORDER BY Bdate", "sub_ques": "employees in the ascending order of their birth date"}
{"db_id": "local_govt_in_alabama", "sub_sql": "select t1.event_details from events", "question": "what are the event details of the services that have the type code 'Marriage'?", "sub_sql_type": "null col col col", "sub_sql_new": "select event_details from events", "query": "SELECT T1.event_details FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID  =  T2.Service_ID WHERE T2.Service_Type_Code  =  'Marriage'", "sub_ques": "what are the event details"}
{"db_id": "local_govt_in_alabama", "sub_sql": "where t2.service_type_code = marriage", "question": "what are the event details of the services that have the type code 'Marriage'?", "sub_sql_type": "null col op op value", "sub_sql_new": "where service_type_code equal to marriage", "query": "SELECT T1.event_details FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID  =  T2.Service_ID WHERE T2.Service_Type_Code  =  'Marriage'", "sub_ques": "services that have the type code"}
{"db_id": "local_govt_in_alabama", "sub_sql": "select t1.event_id , t1.event_details from events", "question": "What are the ids and details of events that have more than one participants?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select event_id , event_details from events", "query": "SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  1", "sub_ques": "what are the ids and details of events"}
{"db_id": "local_govt_in_alabama", "sub_sql": "group by t1.event_id having count participants_in_events > 1", "question": "What are the ids and details of events that have more than one participants?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  1", "sub_ques": "events that have more than one participants"}
{"db_id": "local_govt_in_alabama", "sub_sql": "select t1.participant_id , t1.participant_type_code , count participants_in_events group by t1.participant_id", "question": "How many events have each participants attended? List the participant id, type and the number.", "sub_sql_type": "null col null col null agg col", "sub_sql_new": "select participant_id , participant_type_code , count participants_in_events", "query": "SELECT T1.Participant_ID ,  T1.Participant_Type_Code ,  count(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID GROUP BY T1.Participant_ID", "sub_ques": "list the participant id , type and the number"}
{"db_id": "local_govt_in_alabama", "sub_sql": "select participant_id , participant_type_code , participant_details from participants", "question": "What are all the the participant ids, type code and details?", "sub_sql_type": "null col null col null col col col", "sub_sql_new": "select participant_id , participant_type_code , participant_details from participants", "query": "SELECT Participant_ID ,  Participant_Type_Code ,  Participant_Details FROM  Participants", "sub_ques": "what are all the participant ids , type code and details"}
{"db_id": "local_govt_in_alabama", "sub_sql": "select count participants", "question": "How many participants belong to the type 'Organizer'?", "sub_sql_type": "null agg col", "sub_sql_new": "select count participants", "query": "SELECT count(*) FROM participants WHERE participant_type_code  =  'Organizer'", "sub_ques": "how many participants"}
{"db_id": "local_govt_in_alabama", "sub_sql": "where participant_type_code = organizer", "question": "How many participants belong to the type 'Organizer'?", "sub_sql_type": "null col op op value", "sub_sql_new": "where participant_type_code equal to organizer", "query": "SELECT count(*) FROM participants WHERE participant_type_code  =  'Organizer'", "sub_ques": "participants belong to the type organizer"}
{"db_id": "local_govt_in_alabama", "sub_sql": "select service_type_code from services", "question": "List the type of the services in alphabetical order.", "sub_sql_type": "null col col col", "sub_sql_new": "select service_type_code from services", "query": "SELECT service_type_code FROM services ORDER BY service_type_code", "sub_ques": "list the type of the services"}
{"db_id": "local_govt_in_alabama", "sub_sql": "order by service_type_code", "question": "List the type of the services in alphabetical order.", "sub_sql_type": "null null col", "sub_sql_new": "order by service_type_code", "query": "SELECT service_type_code FROM services ORDER BY service_type_code", "sub_ques": "the type of the services in alphabetical order"}
{"db_id": "local_govt_in_alabama", "sub_sql": "select service_id , event_details from events", "question": "List the service id and details for the events.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select service_id , event_details from events", "query": "SELECT service_id ,  event_details FROM EVENTS", "sub_ques": "list the service id and details for the events"}
{"db_id": "local_govt_in_alabama", "sub_sql": "select count Participants_in_Events", "question": "How many events had participants whose details had the substring 'Dr.'", "sub_sql_type": "null agg col", "sub_sql_new": "select count Participants_in_Events", "query": "SELECT count(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE T1.participant_details LIKE '%Dr.%'", "sub_ques": "how many events had participants"}
{"db_id": "local_govt_in_alabama", "sub_sql": "where t1.participant_details like dr.", "question": "How many events had participants whose details had the substring 'Dr.'", "sub_sql_type": "null col op value", "sub_sql_new": "where participant_details like dr.", "query": "SELECT count(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE T1.participant_details LIKE '%Dr.%'", "sub_ques": "participants whose details had the substring dr."}
{"db_id": "local_govt_in_alabama", "sub_sql": "group by participant_type_code order by count participants desc limit 1", "question": "What is the most common participant type?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count participants desc limit 1", "query": "SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the most common participant type"}
{"db_id": "local_govt_in_alabama", "sub_sql": "group by t3.service_id order by count participants asc limit 1", "question": "Which service id and type has the least number of participants?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count participants asc limit 1", "query": "SELECT T3.service_id ,  T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID   =  T3.Event_ID JOIN services AS T4 ON T3.service_id  =  T4.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT 1", "sub_ques": "service id has the least number of participants"}
{"db_id": "local_govt_in_alabama", "sub_sql": "select event_id from participants_in_events", "question": "What is the id of the event with the most participants?", "sub_sql_type": "null col col col", "sub_sql_new": "select event_id from participants_in_events", "query": "SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY count(*) DESC LIMIT 1", "sub_ques": "what is the id of the event"}
{"db_id": "local_govt_in_alabama", "sub_sql": "group by event_id order by count participants desc limit 1", "question": "What is the id of the event with the most participants?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count participants desc limit 1", "query": "SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the id of the event with the most participants"}
{"db_id": "local_govt_in_alabama", "sub_sql": "select count from events", "question": "How many events did not have any participants?", "sub_sql_type": "null agg col col", "sub_sql_new": "select count from events", "query": "SELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events)", "sub_ques": "how many events"}
{"db_id": "local_govt_in_alabama", "sub_sql": "select count distinct participant_id from participants_in_events", "question": "What are all the distinct participant ids who attended any events?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct participant_id from participants_in_events", "query": "SELECT count(DISTINCT participant_id) FROM participants_in_Events", "sub_ques": "what are all the distinct participant ids"}
{"db_id": "formula_1", "sub_sql": "select name from races", "question": "What is the name of the race held most recently?", "sub_sql_type": "null col col col", "sub_sql_new": "select round from races", "query": "SELECT name FROM races ORDER BY date DESC LIMIT 1", "sub_ques": "what is the name of the race"}
{"db_id": "formula_1", "sub_sql": "order by date desc limit 1", "question": "What is the name of the race held most recently?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by dob desc limit 1", "query": "SELECT name FROM races ORDER BY date DESC LIMIT 1", "sub_ques": "the race held most recently"}
{"db_id": "formula_1", "sub_sql": "select name from races", "question": "What is the name of the race that occurred most recently?", "sub_sql_type": "null col col col", "sub_sql_new": "select round from races", "query": "SELECT name FROM races ORDER BY date DESC LIMIT 1", "sub_ques": "what is the name of the race"}
{"db_id": "formula_1", "sub_sql": "order by date desc limit 1", "question": "What is the name of the race that occurred most recently?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by dob desc limit 1", "query": "SELECT name FROM races ORDER BY date DESC LIMIT 1", "sub_ques": "the race that occurred most recently"}
{"db_id": "formula_1", "sub_sql": "select name , date from races", "question": "What is the name and date of the most recent race?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select round , dob from races", "query": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1", "sub_ques": "what is the name and date of the most recent race"}
{"db_id": "formula_1", "sub_sql": "order by date desc limit 1", "question": "What is the name and date of the most recent race?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by dob desc limit 1", "query": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1", "sub_ques": "the most recent race"}
{"db_id": "formula_1", "sub_sql": "select name , date from races", "question": "What is the name and date of the race that occurred most recently?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select round , dob from races", "query": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1", "sub_ques": "what is the name and date of the race"}
{"db_id": "formula_1", "sub_sql": "order by date desc limit 1", "question": "What is the name and date of the race that occurred most recently?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by dob desc limit 1", "query": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1", "sub_ques": "the race that occurred most recently"}
{"db_id": "formula_1", "sub_sql": "select name from races", "question": "Find the names of all races held in 2017.", "sub_sql_type": "null col col col", "sub_sql_new": "select round from races", "query": "SELECT name FROM races WHERE YEAR = 2017", "sub_ques": "find the names of all races"}
{"db_id": "formula_1", "sub_sql": "where year = 2017", "question": "Find the names of all races held in 2017.", "sub_sql_type": "null col op op value", "sub_sql_new": "where number equal to 2017", "query": "SELECT name FROM races WHERE YEAR = 2017", "sub_ques": "races held in 2017"}
{"db_id": "formula_1", "sub_sql": "select name from races", "question": "What are the names of all the races that occurred in the year 2017?", "sub_sql_type": "null col col col", "sub_sql_new": "select round from races", "query": "SELECT name FROM races WHERE YEAR = 2017", "sub_ques": "what are the names of all the races"}
{"db_id": "formula_1", "sub_sql": "where year = 2017", "question": "What are the names of all the races that occurred in the year 2017?", "sub_sql_type": "null col op op value", "sub_sql_new": "where number equal to 2017", "query": "SELECT name FROM races WHERE YEAR = 2017", "sub_ques": "races that occurred in the year 2017"}
{"db_id": "formula_1", "sub_sql": "select distinct name from races", "question": "Find the distinct names of all races held between 2014 and 2017?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct round from races", "query": "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017", "sub_ques": "find the distinct names of all races"}
{"db_id": "formula_1", "sub_sql": "select distinct name from races", "question": "What are the unique names of all race held between 2014 and 2017?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct round from races", "query": "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017", "sub_ques": "what are the unique names of all race"}
{"db_id": "formula_1", "sub_sql": "select distinct t1.forename , t1.surname from drivers", "question": "List the forename and surname of all distinct drivers who once had laptime less than 93000 milliseconds?", "sub_sql_type": "null col col col null col col col col", "sub_sql_new": "select distinct constructor id , constructor reference from drivers", "query": "SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000", "sub_ques": "list the forename and surname of all distinct"}
{"db_id": "formula_1", "sub_sql": "where t2.milliseconds < 93000", "question": "List the forename and surname of all distinct drivers who once had laptime less than 93000 milliseconds?", "sub_sql_type": "null col op op value", "sub_sql_new": "where points less than 93000", "query": "SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000", "sub_ques": "who once had laptime less than 93000 milliseconds"}
{"db_id": "formula_1", "sub_sql": "select distinct t1.forename , t1.surname from drivers", "question": "What are the forenames and surnames of all unique drivers who had a lap time of less than 93000 milliseconds?", "sub_sql_type": "null col col col null col col col col", "sub_sql_new": "select distinct constructor id , constructor reference from drivers", "query": "SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000", "sub_ques": "what are the forenames and surnames of all unique"}
{"db_id": "formula_1", "sub_sql": "where t2.milliseconds < 93000", "question": "What are the forenames and surnames of all unique drivers who had a lap time of less than 93000 milliseconds?", "sub_sql_type": "null col op op value", "sub_sql_new": "where points less than 93000", "query": "SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000", "sub_ques": "who had a lap time of less than 93000 milliseconds"}
{"db_id": "formula_1", "sub_sql": "select distinct t1.driverid , t1.nationality from drivers", "question": "Find all the distinct id and nationality of drivers who have had laptime more than 100000 milliseconds?", "sub_sql_type": "null col col null col col col", "sub_sql_new": "select distinct driverid , nationality from drivers", "query": "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000", "sub_ques": "find all the distinct id and nationality of drivers"}
{"db_id": "formula_1", "sub_sql": "where t2.milliseconds > 100000", "question": "Find all the distinct id and nationality of drivers who have had laptime more than 100000 milliseconds?", "sub_sql_type": "null col op op value", "sub_sql_new": "where points more than 100000", "query": "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000", "sub_ques": "who have had laptime more than 100000 milliseconds"}
{"db_id": "formula_1", "sub_sql": "select distinct t1.driverid , t1.nationality from drivers", "question": "What are the different driver ids and nationalities of all drivers who had a laptime of more than 100000 milliseconds?", "sub_sql_type": "null col col null col col col", "sub_sql_new": "select distinct driverid , nationality from drivers", "query": "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000", "sub_ques": "what are the different driver ids and nationalities of all"}
{"db_id": "formula_1", "sub_sql": "where t2.milliseconds > 100000", "question": "What are the different driver ids and nationalities of all drivers who had a laptime of more than 100000 milliseconds?", "sub_sql_type": "null col op op value", "sub_sql_new": "where points more than 100000", "query": "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000", "sub_ques": "who had a laptime of more than 100000 milliseconds"}
{"db_id": "formula_1", "sub_sql": "select t1.forename , t1.surname from drivers", "question": "What are the forename and surname of the driver who has the smallest laptime?", "sub_sql_type": "null col col null col col col col", "sub_sql_new": "select constructor id , constructor reference from drivers", "query": "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1", "sub_ques": "what are the forename and surname of the driver"}
{"db_id": "formula_1", "sub_sql": "order by t2.milliseconds limit 1", "question": "What are the forename and surname of the driver who has the smallest laptime?", "sub_sql_type": "null null col null limv", "sub_sql_new": "order by points limit 1", "query": "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1", "sub_ques": "the driver who has the smallest laptime"}
{"db_id": "formula_1", "sub_sql": "select t1.forename , t1.surname from drivers", "question": "What is the forename and surname of the driver with the shortest laptime?", "sub_sql_type": "null col col null col col col col", "sub_sql_new": "select constructor id , constructor reference from drivers", "query": "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1", "sub_ques": "what is the forename and surname of the driver"}
{"db_id": "formula_1", "sub_sql": "order by t2.milliseconds limit 1", "question": "What is the forename and surname of the driver with the shortest laptime?", "sub_sql_type": "null null col null limv", "sub_sql_new": "order by points limit 1", "query": "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1", "sub_ques": "the driver with the shortest laptime"}
{"db_id": "formula_1", "sub_sql": "select t1.driverid , t1.surname from drivers", "question": "What is the id and family name of the driver who has the longest laptime?", "sub_sql_type": "null col null col col col col", "sub_sql_new": "select driverid , constructor reference from drivers", "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1", "sub_ques": "what is the id and family name of the driver"}
{"db_id": "formula_1", "sub_sql": "order by t2.milliseconds desc limit 1", "question": "What is the id and family name of the driver who has the longest laptime?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by points desc limit 1", "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1", "sub_ques": "driver who has the longest laptime"}
{"db_id": "formula_1", "sub_sql": "select t1.driverid , t1.surname from drivers", "question": "What is the id and last name of the driver with the longest laptime?", "sub_sql_type": "null col null col col col col", "sub_sql_new": "select driverid , constructor reference from drivers", "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1", "sub_ques": "what is the id and last name of the driver"}
{"db_id": "formula_1", "sub_sql": "order by t2.milliseconds desc limit 1", "question": "What is the id and last name of the driver with the longest laptime?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by points desc limit 1", "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1", "sub_ques": "the driver with the longest laptime"}
{"db_id": "formula_1", "sub_sql": "select t1.driverid , t1.forename , t1.surname from drivers", "question": "What is the id, forname and surname of the driver who had the first position in terms of laptime at least twice?", "sub_sql_type": "null col null col col null col col col col", "sub_sql_new": "select driverid , constructor id , constructor reference from drivers", "query": "SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2", "sub_ques": "what is the id , forname and surname of the driver"}
{"db_id": "formula_1", "sub_sql": "where position = 1", "question": "What is the id, forname and surname of the driver who had the first position in terms of laptime at least twice?", "sub_sql_type": "null col op op value", "sub_sql_new": "where position equal to 1", "query": "SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2", "sub_ques": "driver who had the first position"}
{"db_id": "formula_1", "sub_sql": "group by t1.driverid having count laptime >= 2", "question": "What is the id, forname and surname of the driver who had the first position in terms of laptime at least twice?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2", "sub_ques": "driver in terms of laptime at least twice"}
{"db_id": "formula_1", "sub_sql": "select t1.driverid , t1.forename , t1.surname from drivers", "question": "What is the id, first name, and last name of the driver who was in the first position for laptime at least twice?", "sub_sql_type": "null col null col col null col col col col", "sub_sql_new": "select driverid , constructor id , constructor reference from drivers", "query": "SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2", "sub_ques": "what is the id , first name , and last name of the driver"}
{"db_id": "formula_1", "sub_sql": "where position = 1", "question": "What is the id, first name, and last name of the driver who was in the first position for laptime at least twice?", "sub_sql_type": "null col op op value", "sub_sql_new": "where position equal to 1", "query": "SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2", "sub_ques": "driver who was in the first position"}
{"db_id": "formula_1", "sub_sql": "group by t1.driverid having count laptime >= 2", "question": "What is the id, first name, and last name of the driver who was in the first position for laptime at least twice?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2", "sub_ques": "driver who was for laptime at least"}
{"db_id": "formula_1", "sub_sql": "where t2.name = australiangrandprix", "question": "How many drivers participated in the race Australian Grand Prix held in 2009?", "sub_sql_type": "null col op op value", "sub_sql_new": "where round equal to australiangrandprix", "query": "SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \\\\\\\"Australian Grand Prix\\\\\\\" AND YEAR = 2009", "sub_ques": "in the race australian grand prix"}
{"db_id": "formula_1", "sub_sql": "where t2.name = australiangrandprix", "question": "How many drivers were in the Australian Grand Prix held in 2009?", "sub_sql_type": "null col op op value", "sub_sql_new": "where round equal to australiangrandprix", "query": "SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \\\\\\\"Australian Grand Prix\\\\\\\" AND YEAR = 2009", "sub_ques": "in the australian grand prix"}
{"db_id": "formula_1", "sub_sql": "select count distinct driverid from results", "question": "How many drivers did not participate in the races held in 2009?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct driverid from results", "query": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )", "sub_ques": "how many drivers"}
{"db_id": "formula_1", "sub_sql": "where year != 2009", "question": "How many drivers did not participate in the races held in 2009?", "sub_sql_type": "null col op op op value", "sub_sql_new": "where number not equal to 2009", "query": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )", "sub_ques": "held in 2009"}
{"db_id": "formula_1", "sub_sql": "select count distinct driverid from results", "question": "How many drivers did not race in 2009?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct driverid from results", "query": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )", "sub_ques": "how many drivers"}
{"db_id": "formula_1", "sub_sql": "where year != 2009", "question": "How many drivers did not race in 2009?", "sub_sql_type": "null col op op op value", "sub_sql_new": "where number not equal to 2009", "query": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )", "sub_ques": "did not race in 2009"}
{"db_id": "formula_1", "sub_sql": "select t2.name , t2.year from races", "question": "Give me a list of names and years of races that had any driver whose forename is Lewis?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select round , number from races", "query": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \\\\\\\"Lewis\\\\\\\"", "sub_ques": "list of names and years of races"}
{"db_id": "formula_1", "sub_sql": "where t3.forename = lewis", "question": "Give me a list of names and years of races that had any driver whose forename is Lewis?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where constructor id equal to lewis", "query": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \\\\\\\"Lewis\\\\\\\"", "sub_ques": "driver whose forename is lewis"}
{"db_id": "formula_1", "sub_sql": "select t2.name , t2.year from races", "question": "What are the names and years of all races that had a driver with the last name Lewis?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select round , number from races", "query": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \\\\\\\"Lewis\\\\\\\"", "sub_ques": "what are the names and years of all races that had a driver with the last name"}
{"db_id": "formula_1", "sub_sql": "where t3.forename = lewis", "question": "What are the names and years of all races that had a driver with the last name Lewis?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where constructor id equal to lewis", "query": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \\\\\\\"Lewis\\\\\\\"", "sub_ques": "driver with the last name lewis"}
{"db_id": "formula_1", "sub_sql": "select forename , surname from drivers", "question": "Find the forename and surname of drivers whose nationality is German?", "sub_sql_type": "null col col null col col col col", "sub_sql_new": "select constructor id , constructor reference from drivers", "query": "SELECT forename ,  surname FROM drivers WHERE nationality = \\\\\\\"German\\\\\\\"", "sub_ques": "find the forename and surname of drivers"}
{"db_id": "formula_1", "sub_sql": "where nationality = german", "question": "Find the forename and surname of drivers whose nationality is German?", "sub_sql_type": "null col op op value", "sub_sql_new": "where nationality equal to german", "query": "SELECT forename ,  surname FROM drivers WHERE nationality = \\\\\\\"German\\\\\\\"", "sub_ques": "drivers whose nationality is german"}
{"db_id": "formula_1", "sub_sql": "select forename , surname from drivers", "question": "What is the first and last name of all the German drivers?", "sub_sql_type": "null col col null col col col col", "sub_sql_new": "select constructor id , constructor reference from drivers", "query": "SELECT forename ,  surname FROM drivers WHERE nationality = \\\\\\\"German\\\\\\\"", "sub_ques": "what is the first and last name of all the german drivers"}
{"db_id": "formula_1", "sub_sql": "where nationality = german", "question": "What is the first and last name of all the German drivers?", "sub_sql_type": "null col op op value", "sub_sql_new": "where nationality equal to german", "query": "SELECT forename ,  surname FROM drivers WHERE nationality = \\\\\\\"German\\\\\\\"", "sub_ques": "german drivers"}
{"db_id": "formula_1", "sub_sql": "select distinct t1.forename from drivers", "question": "Find all the forenames of distinct drivers who was in position 1 as standing and won?", "sub_sql_type": "null col col col col col", "sub_sql_new": "select distinct constructor id from drivers", "query": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1", "sub_ques": "find all the forenames of distinct"}
{"db_id": "formula_1", "sub_sql": "where t2.position = 1", "question": "Find all the forenames of distinct drivers who was in position 1 as standing and won?", "sub_sql_type": "null col op op value", "sub_sql_new": "where position equal to 1", "query": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1", "sub_ques": "drivers who was in position 1"}
{"db_id": "formula_1", "sub_sql": "select distinct t1.forename from drivers", "question": "What are all the different first names of the drivers who are in position as standing and won?", "sub_sql_type": "null col col col col col", "sub_sql_new": "select distinct constructor id from drivers", "query": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1", "sub_ques": "what are all the different first names of the drivers"}
{"db_id": "formula_1", "sub_sql": "where t2.position = 1", "question": "What are all the different first names of the drivers who are in position as standing and won?", "sub_sql_type": "null col op op value", "sub_sql_new": "where position equal to 1", "query": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1", "sub_ques": "drivers who are in position 1"}
{"db_id": "formula_1", "sub_sql": "select distinct t1.forename from drivers", "question": "Find all the forenames of distinct drivers who won in position 1 as driver standing and had more than 20 points?", "sub_sql_type": "null col col col col col", "sub_sql_new": "select distinct constructor id from drivers", "query": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20", "sub_ques": "find all the forenames of distinct drivers"}
{"db_id": "formula_1", "sub_sql": "where t2.position = 1", "question": "Find all the forenames of distinct drivers who won in position 1 as driver standing and had more than 20 points?", "sub_sql_type": "null col op op value", "sub_sql_new": "where position equal to 1", "query": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20", "sub_ques": "drivers who won in position 1"}
{"db_id": "formula_1", "sub_sql": "select distinct t1.forename from drivers", "question": "What are the first names of the different drivers who won in position 1 as driver standing and had more than 20 points?", "sub_sql_type": "null col col col col col", "sub_sql_new": "select distinct constructor id from drivers", "query": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20", "sub_ques": "what are the first names of the different"}
{"db_id": "formula_1", "sub_sql": "where t2.position = 1", "question": "What are the first names of the different drivers who won in position 1 as driver standing and had more than 20 points?", "sub_sql_type": "null col op op value", "sub_sql_new": "where position equal to 1", "query": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20", "sub_ques": "who won in position 1"}
{"db_id": "formula_1", "sub_sql": "select count constructors , nationality group by nationality", "question": "What are the numbers of constructors for different nationalities?", "sub_sql_type": "null agg col null col", "sub_sql_new": "select count constructors , nationality", "query": "SELECT count(*) ,  nationality FROM constructors GROUP BY nationality", "sub_ques": "what are the numbers of constructors for different nationalities"}
{"db_id": "formula_1", "sub_sql": "select count constructors , nationality group by nationality", "question": "For each nationality, how many different constructors are there?", "sub_sql_type": "null agg col null col", "sub_sql_new": "select count constructors , nationality", "query": "SELECT count(*) ,  nationality FROM constructors GROUP BY nationality", "sub_ques": "for each nationality , how many different constructors"}
{"db_id": "formula_1", "sub_sql": "select count constructorstandings , constructorid group by constructorid", "question": "What are the numbers of races for each constructor id?", "sub_sql_type": "null agg col null col", "sub_sql_new": "select count constructorstandings , constructorid", "query": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid", "sub_ques": "what are the numbers of races for each constructor id"}
{"db_id": "formula_1", "sub_sql": "select count constructorstandings , constructorid group by constructorid", "question": "For each constructor id, how many races are there?", "sub_sql_type": "null agg col null col", "sub_sql_new": "select count constructorstandings , constructorid", "query": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid", "sub_ques": "For each constructor id , how many races are there"}
{"db_id": "formula_1", "sub_sql": "select t1.name from races", "question": "What are the names of races that were held after 2017 and the circuits were in the country of Spain?", "sub_sql_type": "null col col col", "sub_sql_new": "select round from races", "query": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \\\\\\\"Spain\\\\\\\" AND T1.year > 2017", "sub_ques": "what are the names of races"}
{"db_id": "formula_1", "sub_sql": "where t2.country = spain", "question": "What are the names of races that were held after 2017 and the circuits were in the country of Spain?", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to spain", "query": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \\\\\\\"Spain\\\\\\\" AND T1.year > 2017", "sub_ques": "circuits were in the country of spain"}
{"db_id": "formula_1", "sub_sql": "select t1.name from races", "question": "What are the names of the races held after 2017 in Spain?", "sub_sql_type": "null col col col", "sub_sql_new": "select round from races", "query": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \\\\\\\"Spain\\\\\\\" AND T1.year > 2017", "sub_ques": "what are the names of the races"}
{"db_id": "formula_1", "sub_sql": "where t2.country = spain", "question": "What are the names of the races held after 2017 in Spain?", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to spain", "query": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \\\\\\\"Spain\\\\\\\" AND T1.year > 2017", "sub_ques": "in spain"}
{"db_id": "formula_1", "sub_sql": "select distinct t1.name from races", "question": "What are the unique names of races that held after 2000 and the circuits were in Spain?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct round from races", "query": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \\\\\\\"Spain\\\\\\\" AND T1.year > 2000", "sub_ques": "what are the unique names of races"}
{"db_id": "formula_1", "sub_sql": "where t2.country = spain", "question": "What are the unique names of races that held after 2000 and the circuits were in Spain?", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to spain", "query": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \\\\\\\"Spain\\\\\\\" AND T1.year > 2000", "sub_ques": "circuits were in spain"}
{"db_id": "formula_1", "sub_sql": "select distinct t1.name from races", "question": "What are the names of all races held after 2000 in Spain?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct round from races", "query": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \\\\\\\"Spain\\\\\\\" AND T1.year > 2000", "sub_ques": "what are the names of all races"}
{"db_id": "formula_1", "sub_sql": "where t2.country = spain", "question": "What are the names of all races held after 2000 in Spain?", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to spain", "query": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \\\\\\\"Spain\\\\\\\" AND T1.year > 2000", "sub_ques": "races hold in spain"}
{"db_id": "formula_1", "sub_sql": "where duration < select max duration", "question": "Find the distinct driver id and the stop number of all drivers that have a shorter pit stop duration than some drivers in the race with id 841.", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where duration less than select max duration", "query": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  <  (SELECT max(duration) FROM pitstops WHERE raceid  =  841)", "sub_ques": "drivers that have a shorter pit stop duration than some drivers"}
{"db_id": "formula_1", "sub_sql": "where raceid = 841", "question": "Find the distinct driver id and the stop number of all drivers that have a shorter pit stop duration than some drivers in the race with id 841.", "sub_sql_type": "null col op op value", "sub_sql_new": "where raceid equal to 841", "query": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  <  (SELECT max(duration) FROM pitstops WHERE raceid  =  841)", "sub_ques": "race with id 841"}
{"db_id": "formula_1", "sub_sql": "select distinct driverid , stop from pitstops", "question": "What is the id and stop number for each driver that has a shorter pit stop than the driver in the race with id 841?", "sub_sql_type": "null col col null col col col", "sub_sql_new": "select distinct driverid , stop from pitstops", "query": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  <  (SELECT max(duration) FROM pitstops WHERE raceid  =  841)", "sub_ques": "what is the id and stop number for each driver"}
{"db_id": "formula_1", "sub_sql": "where duration < select max duration", "question": "What is the id and stop number for each driver that has a shorter pit stop than the driver in the race with id 841?", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where duration less than select max duration", "query": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  <  (SELECT max(duration) FROM pitstops WHERE raceid  =  841)", "sub_ques": "driver that has a shorter pit stop than the driver"}
{"db_id": "formula_1", "sub_sql": "where raceid = 841", "question": "What is the id and stop number for each driver that has a shorter pit stop than the driver in the race with id 841?", "sub_sql_type": "null col op op value", "sub_sql_new": "where raceid equal to 841", "query": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  <  (SELECT max(duration) FROM pitstops WHERE raceid  =  841)", "sub_ques": "race with id 841"}
{"db_id": "formula_1", "sub_sql": "select distinct driverid , stop from pitstops", "question": "Find the distinct driver id of all drivers that have a longer stop duration than some drivers in the race whose id is 841?", "sub_sql_type": "null col col null col col col", "sub_sql_new": "select distinct driverid , stop from pitstops", "query": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841)", "sub_ques": "find the distinct driver id of all drivers"}
{"db_id": "formula_1", "sub_sql": "where duration > select min duration", "question": "Find the distinct driver id of all drivers that have a longer stop duration than some drivers in the race whose id is 841?", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where duration more than select min duration", "query": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841)", "sub_ques": "drivers that have a longer stop duration than some drivers"}
{"db_id": "formula_1", "sub_sql": "where raceid = 841", "question": "Find the distinct driver id of all drivers that have a longer stop duration than some drivers in the race whose id is 841?", "sub_sql_type": "null col op op value", "sub_sql_new": "where raceid equal to 841", "query": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841)", "sub_ques": "race whose id is 841"}
{"db_id": "formula_1", "sub_sql": "select distinct driverid , stop from pitstops", "question": "What are the different ids and stop durations of all the drivers whose stop lasted longer than the driver in the race with the id 841?", "sub_sql_type": "null col col null col col col", "sub_sql_new": "select distinct driverid , stop from pitstops", "query": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841)", "sub_ques": "what are the different ids and stop durations of all the drivers"}
{"db_id": "formula_1", "sub_sql": "where duration > select min duration", "question": "What are the different ids and stop durations of all the drivers whose stop lasted longer than the driver in the race with the id 841?", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where duration more than select min duration", "query": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841)", "sub_ques": "drivers whose stop lasted longer than the driver"}
{"db_id": "formula_1", "sub_sql": "where raceid = 841", "question": "What are the different ids and stop durations of all the drivers whose stop lasted longer than the driver in the race with the id 841?", "sub_sql_type": "null col op op value", "sub_sql_new": "where raceid equal to 841", "query": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841)", "sub_ques": "race with the id 841"}
{"db_id": "formula_1", "sub_sql": "select distinct forename from drivers", "question": "List the forenames of all distinct drivers in alphabetical order?", "sub_sql_type": "null col col col col col", "sub_sql_new": "select distinct constructor id from drivers", "query": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC", "sub_ques": "list the forenames of all distinct"}
{"db_id": "formula_1", "sub_sql": "order by forename asc", "question": "List the forenames of all distinct drivers in alphabetical order?", "sub_sql_type": "null null col col null", "sub_sql_new": "order by constructor id asc", "query": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC", "sub_ques": "the forenames of all distinct drivers in alphabetical order"}
{"db_id": "formula_1", "sub_sql": "select distinct forename from drivers", "question": "What are the first names of all the different drivers in alphabetical order?", "sub_sql_type": "null col col col col col", "sub_sql_new": "select distinct constructor id from drivers", "query": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC", "sub_ques": "what are the first names of all the different"}
{"db_id": "formula_1", "sub_sql": "order by forename asc", "question": "What are the first names of all the different drivers in alphabetical order?", "sub_sql_type": "null null col col null", "sub_sql_new": "order by constructor id asc", "query": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC", "sub_ques": "the first names of all the different drivers in alphabetical order"}
{"db_id": "formula_1", "sub_sql": "select distinct name from races", "question": "List the names of all distinct races in reversed  lexicographic order?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct round from races", "query": "SELECT DISTINCT name FROM races ORDER BY name DESC", "sub_ques": "list the names of all distinct"}
{"db_id": "formula_1", "sub_sql": "order by name desc", "question": "List the names of all distinct races in reversed  lexicographic order?", "sub_sql_type": "null null col null", "sub_sql_new": "order by round desc", "query": "SELECT DISTINCT name FROM races ORDER BY name DESC", "sub_ques": "the names of all distinct races in reversed lexicographic order"}
{"db_id": "formula_1", "sub_sql": "select distinct name from races", "question": "What are the different names of all the races in reverse alphabetical order?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct round from races", "query": "SELECT DISTINCT name FROM races ORDER BY name DESC", "sub_ques": "what are the different names of all"}
{"db_id": "formula_1", "sub_sql": "order by name desc", "question": "What are the different names of all the races in reverse alphabetical order?", "sub_sql_type": "null null col null", "sub_sql_new": "order by round desc", "query": "SELECT DISTINCT name FROM races ORDER BY name DESC", "sub_ques": "all the races in reverse alphabetical order"}
{"db_id": "formula_1", "sub_sql": "select name from races", "question": "What are the names of races held between 2009 and 2011?", "sub_sql_type": "null col col col", "sub_sql_new": "select round from races", "query": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011", "sub_ques": "what are the names of races"}
{"db_id": "formula_1", "sub_sql": "select name from races", "question": "What are the names of all races held between 2009 and 2011?", "sub_sql_type": "null col col col", "sub_sql_new": "select round from races", "query": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011", "sub_ques": "what are the names of all races"}
{"db_id": "formula_1", "sub_sql": "select name from races", "question": "What are the names of races held after 12:00:00 or before 09:00:00?", "sub_sql_type": "null col col col", "sub_sql_new": "select round from races", "query": "SELECT name FROM races WHERE TIME > \\\\\\\"12:00:00\\\\\\\" OR TIME < \\\\\\\"09:00:00\\\\\\\"", "sub_ques": "what are the names of races"}
{"db_id": "formula_1", "sub_sql": "where time > 12:00:00 or time < 09:00:00", "question": "What are the names of races held after 12:00:00 or before 09:00:00?", "sub_sql_type": "null col op op value null col op value value", "sub_sql_new": "where nationality more than 12:00:00 or or time < 09:00:00", "query": "SELECT name FROM races WHERE TIME > \\\\\\\"12:00:00\\\\\\\" OR TIME < \\\\\\\"09:00:00\\\\\\\"", "sub_ques": "races held after 12:00:00 or before 09:00:00"}
{"db_id": "formula_1", "sub_sql": "select name from races", "question": "What are the names of all races that occurred after 12:00:00 or before 09:00:00?", "sub_sql_type": "null col col col", "sub_sql_new": "select round from races", "query": "SELECT name FROM races WHERE TIME > \\\\\\\"12:00:00\\\\\\\" OR TIME < \\\\\\\"09:00:00\\\\\\\"", "sub_ques": "what are the names of all races"}
{"db_id": "formula_1", "sub_sql": "where time > 12:00:00 or time < 09:00:00", "question": "What are the names of all races that occurred after 12:00:00 or before 09:00:00?", "sub_sql_type": "null col op op value null col op value value", "sub_sql_new": "where nationality more than 12:00:00 or or time < 09:00:00", "query": "SELECT name FROM races WHERE TIME > \\\\\\\"12:00:00\\\\\\\" OR TIME < \\\\\\\"09:00:00\\\\\\\"", "sub_ques": "races that occurred after 12:00:00 or before 09:00:00"}
{"db_id": "formula_1", "sub_sql": "select t1.driverid , t1.surname from drivers", "question": "What is the id and last name of the driver who participated in the most races after 2010?", "sub_sql_type": "null col null col col col col", "sub_sql_new": "select driverid , constructor reference from drivers", "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1", "sub_ques": "what is the id and last name of the driver"}
{"db_id": "formula_1", "sub_sql": "where t3.year > 2010", "question": "What is the id and last name of the driver who participated in the most races after 2010?", "sub_sql_type": "null col op op value", "sub_sql_new": "where number more than 2010", "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1", "sub_ques": "races after 2010"}
{"db_id": "formula_1", "sub_sql": "group by t1.driverid order by count races desc limit 1", "question": "What is the id and last name of the driver who participated in the most races after 2010?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count races desc limit 1", "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the id of the driver who participated in the most races"}
{"db_id": "formula_1", "sub_sql": "select t1.driverid , t1.surname from drivers", "question": "What is the id and last name of the driver who participated in the most races after 2010?", "sub_sql_type": "null col null col col col col", "sub_sql_new": "select driverid , constructor reference from drivers", "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1", "sub_ques": "what is the id and last name of the driver"}
{"db_id": "formula_1", "sub_sql": "where t3.year > 2010", "question": "What is the id and last name of the driver who participated in the most races after 2010?", "sub_sql_type": "null col op op value", "sub_sql_new": "where number more than 2010", "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1", "sub_ques": "races after 2010"}
{"db_id": "formula_1", "sub_sql": "group by t1.driverid order by count races desc limit 1", "question": "What is the id and last name of the driver who participated in the most races after 2010?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count races desc limit 1", "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the driver who participated in the most races"}
{"db_id": "formula_1", "sub_sql": "select name from circuits", "question": "What are the names of circuits that belong to UK or Malaysia?", "sub_sql_type": "null col col col", "sub_sql_new": "select round from circuits", "query": "SELECT name FROM circuits WHERE country = \\\\\\\"UK\\\\\\\" OR country = \\\\\\\"Malaysia\\\\\\\"", "sub_ques": "what are the names of circuits"}
{"db_id": "formula_1", "sub_sql": "where country = uk or country = malaysia", "question": "What are the names of circuits that belong to UK or Malaysia?", "sub_sql_type": "null col op op value null col op value value", "sub_sql_new": "where name equal to uk or or country = malaysia", "query": "SELECT name FROM circuits WHERE country = \\\\\\\"UK\\\\\\\" OR country = \\\\\\\"Malaysia\\\\\\\"", "sub_ques": "circuits that belong to uk or malaysia"}
{"db_id": "formula_1", "sub_sql": "select name from circuits", "question": "What are the names of all the circuits that are in the UK or Malaysia?", "sub_sql_type": "null col col col", "sub_sql_new": "select round from circuits", "query": "SELECT name FROM circuits WHERE country = \\\\\\\"UK\\\\\\\" OR country = \\\\\\\"Malaysia\\\\\\\"", "sub_ques": "what are the names of all the circuits"}
{"db_id": "formula_1", "sub_sql": "where country = uk or country = malaysia", "question": "What are the names of all the circuits that are in the UK or Malaysia?", "sub_sql_type": "null col op op value null col op value value", "sub_sql_new": "where name equal to uk or or country = malaysia", "query": "SELECT name FROM circuits WHERE country = \\\\\\\"UK\\\\\\\" OR country = \\\\\\\"Malaysia\\\\\\\"", "sub_ques": "circuits that are in the uk or malaysia"}
{"db_id": "formula_1", "sub_sql": "select circuitid , location from circuits", "question": "Find the id and location of circuits that belong to France or Belgium?", "sub_sql_type": "null col null col col col col", "sub_sql_new": "select circuitid , circuit id from circuits", "query": "SELECT circuitid ,  LOCATION FROM circuits WHERE country = \\\\\\\"France\\\\\\\" OR country = \\\\\\\"Belgium\\\\\\\"", "sub_ques": "find the id and location of circuits"}
{"db_id": "formula_1", "sub_sql": "where country = france or country = belgium", "question": "Find the id and location of circuits that belong to France or Belgium?", "sub_sql_type": "null col op op value null col op value value", "sub_sql_new": "where name equal to france or or country = belgium", "query": "SELECT circuitid ,  LOCATION FROM circuits WHERE country = \\\\\\\"France\\\\\\\" OR country = \\\\\\\"Belgium\\\\\\\"", "sub_ques": "circuits that belong to france or belgium"}
{"db_id": "formula_1", "sub_sql": "select circuitid , location from circuits", "question": "What are the ids and locations of all circuits in France or Belgium?", "sub_sql_type": "null col null col col col col", "sub_sql_new": "select circuitid , circuit id from circuits", "query": "SELECT circuitid ,  LOCATION FROM circuits WHERE country = \\\\\\\"France\\\\\\\" OR country = \\\\\\\"Belgium\\\\\\\"", "sub_ques": "what are the ids and locations of all circuits"}
{"db_id": "formula_1", "sub_sql": "where country = france or country = belgium", "question": "What are the ids and locations of all circuits in France or Belgium?", "sub_sql_type": "null col op op value null col op value value", "sub_sql_new": "where name equal to france or or country = belgium", "query": "SELECT circuitid ,  LOCATION FROM circuits WHERE country = \\\\\\\"France\\\\\\\" OR country = \\\\\\\"Belgium\\\\\\\"", "sub_ques": "circuits in france or belgium"}
{"db_id": "formula_1", "sub_sql": "select t1.name from constructors", "question": "Find the names of Japanese constructors that have once earned more than 5 points?", "sub_sql_type": "null col col col", "sub_sql_new": "select round from constructors", "query": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \\\\\\\"Japanese\\\\\\\" AND T2.points > 5", "sub_ques": "find the names of constructors"}
{"db_id": "formula_1", "sub_sql": "where t1.nationality = japanese", "question": "Find the names of Japanese constructors that have once earned more than 5 points?", "sub_sql_type": "null col op op value", "sub_sql_new": "where nationality equal to japanese", "query": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \\\\\\\"Japanese\\\\\\\" AND T2.points > 5", "sub_ques": "japanese constructors"}
{"db_id": "formula_1", "sub_sql": "select t1.name from constructors", "question": "What are the names of all the Japanese constructors that have earned more than 5 points?", "sub_sql_type": "null col col col", "sub_sql_new": "select round from constructors", "query": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \\\\\\\"Japanese\\\\\\\" AND T2.points > 5", "sub_ques": "what are the names of all the constructors"}
{"db_id": "formula_1", "sub_sql": "where t1.nationality = japanese", "question": "What are the names of all the Japanese constructors that have earned more than 5 points?", "sub_sql_type": "null col op op value", "sub_sql_new": "where nationality equal to japanese", "query": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \\\\\\\"Japanese\\\\\\\" AND T2.points > 5", "sub_ques": "japanese constructors"}
{"db_id": "formula_1", "sub_sql": "select avg t2.fastestlapspeed from results", "question": "What is the average fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select avg fastestlapspeed from results", "query": "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \\\\\\\"Monaco Grand Prix\\\\\\\"", "sub_ques": "what is the average fastest lap speed"}
{"db_id": "formula_1", "sub_sql": "where t1.year = 2008 and t1.name = monacograndprix", "question": "What is the average fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?", "sub_sql_type": "null col op op value null col op value value", "sub_sql_new": "where number equal to 2008 and and t1.name = monacograndprix", "query": "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \\\\\\\"Monaco Grand Prix\\\\\\\"", "sub_ques": "race named 'monaco grand prix ' in 2008"}
{"db_id": "formula_1", "sub_sql": "select avg t2.fastestlapspeed from results", "question": "What is the average fastest lap speed for the Monaco Grand Prix in 2008?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select avg fastestlapspeed from results", "query": "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \\\\\\\"Monaco Grand Prix\\\\\\\"", "sub_ques": "what is the average fastest lap speed"}
{"db_id": "formula_1", "sub_sql": "where t1.year = 2008", "question": "What is the average fastest lap speed for the Monaco Grand Prix in 2008?", "sub_sql_type": "null col op op value", "sub_sql_new": "where number equal to 2008", "query": "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \\\\\\\"Monaco Grand Prix\\\\\\\"", "sub_ques": "in 2008"}
{"db_id": "formula_1", "sub_sql": "select max t2.fastestlapspeed from results", "question": "What is the maximum fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select max fastestlapspeed from results", "query": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \\\\\\\"Monaco Grand Prix\\\\\\\"", "sub_ques": "what is the maximum fastest lap speed"}
{"db_id": "formula_1", "sub_sql": "where t1.year = 2008 and t1.name = monacograndprix", "question": "What is the maximum fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?", "sub_sql_type": "null col op op value null col op value value", "sub_sql_new": "where number equal to 2008 and and t1.name = monacograndprix", "query": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \\\\\\\"Monaco Grand Prix\\\\\\\"", "sub_ques": "race named 'monaco grand prix ' in 2008"}
{"db_id": "formula_1", "sub_sql": "select max t2.fastestlapspeed from results", "question": "What is the maximum fastest lap speed in the Monaco Grand Prix in 2008?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select max fastestlapspeed from results", "query": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \\\\\\\"Monaco Grand Prix\\\\\\\"", "sub_ques": "what is the maximum fastest lap speed"}
{"db_id": "formula_1", "sub_sql": "where t1.year = 2008", "question": "What is the maximum fastest lap speed in the Monaco Grand Prix in 2008?", "sub_sql_type": "null col op op value", "sub_sql_new": "where number equal to 2008", "query": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \\\\\\\"Monaco Grand Prix\\\\\\\"", "sub_ques": "in 2008"}
{"db_id": "formula_1", "sub_sql": "select max t2.fastestlapspeed , t1.name , t1.year from results , races", "question": "What are the maximum fastest lap speed in races held after 2004 grouped by race name and ordered by year?", "sub_sql_type": "null agg col null col null col col col null col", "sub_sql_new": "select max fastestlapspeed , round , number from results , races", "query": "SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year", "sub_ques": "what are the maximum fastest lap speed in races held after 2004 grouped by race name"}
{"db_id": "formula_1", "sub_sql": "where t1.year > 2014", "question": "What are the maximum fastest lap speed in races held after 2004 grouped by race name and ordered by year?", "sub_sql_type": "null col op op value", "sub_sql_new": "where number more than 2014", "query": "SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year", "sub_ques": "races held after 2004"}
{"db_id": "formula_1", "sub_sql": "group by t1.name order by t1.year", "question": "What are the maximum fastest lap speed in races held after 2004 grouped by race name and ordered by year?", "sub_sql_type": "null null col", "sub_sql_new": "order by number", "query": "SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year", "sub_ques": "grouped by race name and ordered by year"}
{"db_id": "formula_1", "sub_sql": "group by t1.name order by t1.year", "question": "For each race name, What is the maximum fastest lap speed for races after 2004 ordered by year?", "sub_sql_type": "null null col", "sub_sql_new": "order by number", "query": "SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year", "sub_ques": "for each race name , ordered by year"}
{"db_id": "formula_1", "sub_sql": "where t1.year > 2014", "question": "What are the average fastest lap speed in races held after 2004 grouped by race name and ordered by year?", "sub_sql_type": "null col op op value", "sub_sql_new": "where number more than 2014", "query": "SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year", "sub_ques": "races held after 2004"}
{"db_id": "formula_1", "sub_sql": "group by t1.name order by t1.year", "question": "What are the average fastest lap speed in races held after 2004 grouped by race name and ordered by year?", "sub_sql_type": "null null col", "sub_sql_new": "order by number", "query": "SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year", "sub_ques": "grouped by race name and ordered by year"}
{"db_id": "formula_1", "sub_sql": "select avg t2.fastestlapspeed , t1.name , t1.year from results , races", "question": "What is the average fastest lap speed for races held after 2004, for each race, ordered by year?", "sub_sql_type": "null agg col null col null col col col null col", "sub_sql_new": "select avg fastestlapspeed , round , number from results , races", "query": "SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year", "sub_ques": "what is the average fastest lap speed for each race"}
{"db_id": "formula_1", "sub_sql": "where t1.year > 2014", "question": "What is the average fastest lap speed for races held after 2004, for each race, ordered by year?", "sub_sql_type": "null col op op value", "sub_sql_new": "where number more than 2014", "query": "SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year", "sub_ques": "races held after 2004"}
{"db_id": "formula_1", "sub_sql": "group by t1.name order by t1.year", "question": "What is the average fastest lap speed for races held after 2004, for each race, ordered by year?", "sub_sql_type": "null null col", "sub_sql_new": "order by number", "query": "SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year", "sub_ques": "for each race , ordered by year"}
{"db_id": "formula_1", "sub_sql": "select t1.driverid , t1.forename , count results group by t1.driverid", "question": "Find the id, forename and number of races of all drivers who have at least participated in two races?", "sub_sql_type": "null col null col col null agg col", "sub_sql_new": "select driverid , constructor id , count results", "query": "SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2", "sub_ques": "find the id , forename and number of races of all drivers"}
{"db_id": "formula_1", "sub_sql": "group by t1.driverid having count results >= 2", "question": "Find the id, forename and number of races of all drivers who have at least participated in two races?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2", "sub_ques": "drivers who have at least participated in two races"}
{"db_id": "formula_1", "sub_sql": "select t1.driverid , t1.forename , count results group by t1.driverid", "question": "What is the id, forename, and number of races for all drivers that have participated in at least 2 races?", "sub_sql_type": "null col null col col null agg col", "sub_sql_new": "select driverid , constructor id , count results", "query": "SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2", "sub_ques": "what is the id , forename , and number of races for all drivers"}
{"db_id": "formula_1", "sub_sql": "group by t1.driverid having count results >= 2", "question": "What is the id, forename, and number of races for all drivers that have participated in at least 2 races?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2", "sub_ques": "drivers that have participated in at least 2"}
{"db_id": "formula_1", "sub_sql": "select t1.driverid , count * from drivers group by t1.driverid", "question": "Find the driver id and number of races of all drivers who have at most participated in 30 races?", "sub_sql_type": "null col null agg col col col", "sub_sql_new": "select driverid , count * from drivers", "query": "SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30", "sub_ques": "find the driver id and number of races of all drivers"}
{"db_id": "formula_1", "sub_sql": "group by t1.driverid having count results <= 30", "question": "Find the driver id and number of races of all drivers who have at most participated in 30 races?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30", "sub_ques": "drivers who have at most participated in 30 races"}
{"db_id": "formula_1", "sub_sql": "select t1.driverid , t1.surname from drivers", "question": "Find the id and surname of the driver who participated the most number of races?", "sub_sql_type": "null col null col col col col", "sub_sql_new": "select driverid , constructor reference from drivers", "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1", "sub_ques": "find the id and surname of the driver"}
{"db_id": "formula_1", "sub_sql": "group by t1.driverid order by count results desc limit 1", "question": "Find the id and surname of the driver who participated the most number of races?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count results desc limit 1", "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the driver who participated the most number of races"}
{"db_id": "formula_1", "sub_sql": "select t1.driverid , t1.surname from drivers", "question": "What are the ids and last names of all drivers who participated in the most races?", "sub_sql_type": "null col null col col col col", "sub_sql_new": "select driverid , constructor reference from drivers", "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1", "sub_ques": "what are the ids and last names of all drivers"}
{"db_id": "formula_1", "sub_sql": "group by t1.driverid order by count results desc limit 1", "question": "What are the ids and last names of all drivers who participated in the most races?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count results desc limit 1", "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1", "sub_ques": "drivers who participated in the most races"}
{"db_id": "machine_repair", "sub_sql": "select count technician", "question": "How many technicians are there?", "sub_sql_type": "null agg col", "sub_sql_new": "select count technician", "query": "SELECT count(*) FROM technician", "sub_ques": "how many technicians"}
{"db_id": "machine_repair", "sub_sql": "select count technician", "question": "What is the number of technicians?", "sub_sql_type": "null agg col", "sub_sql_new": "select count technician", "query": "SELECT count(*) FROM technician", "sub_ques": "what is the number of technicians"}
{"db_id": "machine_repair", "sub_sql": "select name from technician", "question": "List the names of technicians in ascending order of age.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from technician", "query": "SELECT Name FROM technician ORDER BY Age ASC", "sub_ques": "list the names of technicians"}
{"db_id": "machine_repair", "sub_sql": "order by age asc", "question": "List the names of technicians in ascending order of age.", "sub_sql_type": "null null col null", "sub_sql_new": "order by age asc", "query": "SELECT Name FROM technician ORDER BY Age ASC", "sub_ques": "in ascending order of age"}
{"db_id": "machine_repair", "sub_sql": "select name from technician", "question": "What are the names of the technicians by ascending order of age?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from technician", "query": "SELECT Name FROM technician ORDER BY Age ASC", "sub_ques": "what are the names of the technicians"}
{"db_id": "machine_repair", "sub_sql": "order by age asc", "question": "What are the names of the technicians by ascending order of age?", "sub_sql_type": "null null col null", "sub_sql_new": "order by age asc", "query": "SELECT Name FROM technician ORDER BY Age ASC", "sub_ques": "by ascending order of age"}
{"db_id": "machine_repair", "sub_sql": "select team , starting_year from technician", "question": "What are the team and starting year of technicians?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select team , starting_year from technician", "query": "SELECT Team ,  Starting_Year FROM technician", "sub_ques": "what are the team and starting year of technicians"}
{"db_id": "machine_repair", "sub_sql": "select team , starting_year from technician", "question": "What is the team and starting year for each technician?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select team , starting_year from technician", "query": "SELECT Team ,  Starting_Year FROM technician", "sub_ques": "what is the team and starting year for each technician"}
{"db_id": "machine_repair", "sub_sql": "select name from technician", "question": "List the name of technicians whose team is not \\\\\\\"NYY\\\\\\\".", "sub_sql_type": "null col col col", "sub_sql_new": "select name from technician", "query": "SELECT Name FROM technician WHERE Team != \\\\\\\"NYY\\\\\\\"", "sub_ques": "list the name of technicians"}
{"db_id": "machine_repair", "sub_sql": "where team != nyy", "question": "List the name of technicians whose team is not \\\\\\\"NYY\\\\\\\".", "sub_sql_type": "null col op op op value", "sub_sql_new": "where team not equal to nyy", "query": "SELECT Name FROM technician WHERE Team != \\\\\\\"NYY\\\\\\\"", "sub_ques": "technicians whose team is not `` nyy"}
{"db_id": "machine_repair", "sub_sql": "select name from technician", "question": "What is the name of the technician whose team is not 'NYY'?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from technician", "query": "SELECT Name FROM technician WHERE Team != \\\\\\\"NYY\\\\\\\"", "sub_ques": "what is the name of the technician"}
{"db_id": "machine_repair", "sub_sql": "where team != nyy", "question": "What is the name of the technician whose team is not 'NYY'?", "sub_sql_type": "null col op op op value", "sub_sql_new": "where team not equal to nyy", "query": "SELECT Name FROM technician WHERE Team != \\\\\\\"NYY\\\\\\\"", "sub_ques": "technician whose team is not nyy"}
{"db_id": "machine_repair", "sub_sql": "select name from technician", "question": "Show the name of technicians aged either 36 or 37", "sub_sql_type": "null col col col", "sub_sql_new": "select name from technician", "query": "SELECT Name FROM technician WHERE Age  =  36 OR Age  =  37", "sub_ques": "show the name of technicians"}
{"db_id": "machine_repair", "sub_sql": "where age = 36 or age = 37", "question": "Show the name of technicians aged either 36 or 37", "sub_sql_type": "null col op op value null col op value value", "sub_sql_new": "where age equal to 36 or or age = 37", "query": "SELECT Name FROM technician WHERE Age  =  36 OR Age  =  37", "sub_ques": "technicians aged either 36 or 37"}
{"db_id": "machine_repair", "sub_sql": "select name from technician", "question": "What are the names of the technicians aged either 36 or 37?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from technician", "query": "SELECT Name FROM technician WHERE Age  =  36 OR Age  =  37", "sub_ques": "what are the names of the technicians"}
{"db_id": "machine_repair", "sub_sql": "where age = 36 or age = 37", "question": "What are the names of the technicians aged either 36 or 37?", "sub_sql_type": "null col op op value null col op value value", "sub_sql_new": "where age equal to 36 or or age = 37", "query": "SELECT Name FROM technician WHERE Age  =  36 OR Age  =  37", "sub_ques": "technicians aged either 36 or 37"}
{"db_id": "machine_repair", "sub_sql": "select starting_year from technician", "question": "What is the starting year of the oldest technicians?", "sub_sql_type": "null col col col", "sub_sql_new": "select starting_year from technician", "query": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1", "sub_ques": "what is the starting year of technicians"}
{"db_id": "machine_repair", "sub_sql": "order by age desc limit 1", "question": "What is the starting year of the oldest technicians?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by age desc limit 1", "query": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1", "sub_ques": "the oldest technicians"}
{"db_id": "machine_repair", "sub_sql": "select starting_year from technician", "question": "What is the starting year for the oldest technician?", "sub_sql_type": "null col col col", "sub_sql_new": "select starting_year from technician", "query": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1", "sub_ques": "what is the starting year for the technician"}
{"db_id": "machine_repair", "sub_sql": "order by age desc limit 1", "question": "What is the starting year for the oldest technician?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by age desc limit 1", "query": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1", "sub_ques": "the oldest technician"}
{"db_id": "machine_repair", "sub_sql": "select team , count technician group by team", "question": "Show different teams of technicians and the number of technicians in each team.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select team , count technician", "query": "SELECT Team ,  COUNT(*) FROM technician GROUP BY Team", "sub_ques": "show different teams of technicians and the number of technicians in each team"}
{"db_id": "machine_repair", "sub_sql": "select team , count technician group by team", "question": "For each team, how many technicians are there?", "sub_sql_type": "null col null agg col", "sub_sql_new": "select team , count technician", "query": "SELECT Team ,  COUNT(*) FROM technician GROUP BY Team", "sub_ques": "for each team , how many technicians"}
{"db_id": "machine_repair", "sub_sql": "select team from technician", "question": "Please show the team that has the most number of technicians.", "sub_sql_type": "null col col col", "sub_sql_new": "select team from technician", "query": "SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "show the team"}
{"db_id": "machine_repair", "sub_sql": "group by team order by count technician desc limit 1", "question": "Please show the team that has the most number of technicians.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count technician desc limit 1", "query": "SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "the team that has the most number of technicians"}
{"db_id": "machine_repair", "sub_sql": "select team from technician", "question": "What are the teams with the most technicians?", "sub_sql_type": "null col col col", "sub_sql_new": "select team from technician", "query": "SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "what are the teams"}
{"db_id": "machine_repair", "sub_sql": "group by team order by count technician desc limit 1", "question": "What are the teams with the most technicians?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count technician desc limit 1", "query": "SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "the teams with the most technicians"}
{"db_id": "machine_repair", "sub_sql": "select team from technician", "question": "Show the team that have at least two technicians.", "sub_sql_type": "null col col col", "sub_sql_new": "select team from technician", "query": "SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  2", "sub_ques": "show the team"}
{"db_id": "machine_repair", "sub_sql": "group by team having count technician >= 2", "question": "Show the team that have at least two technicians.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  2", "sub_ques": "team that have at least two technicians"}
{"db_id": "machine_repair", "sub_sql": "select team from technician", "question": "What is the team with at least 2 technicians?", "sub_sql_type": "null col col col", "sub_sql_new": "select team from technician", "query": "SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  2", "sub_ques": "what is the team"}
{"db_id": "machine_repair", "sub_sql": "group by team having count technician >= 2", "question": "What is the team with at least 2 technicians?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  2", "sub_ques": "team with at least 2 technicians"}
{"db_id": "machine_repair", "sub_sql": "select t3.name , t2.machine_series from technician , machine", "question": "Show names of technicians and series of machines they are assigned to repair.", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select name , machine_series from technician , machine", "query": "SELECT T3.Name ,  T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID", "sub_ques": "show names of technicians and series of machines"}
{"db_id": "machine_repair", "sub_sql": "select t3.name , t2.machine_series from technician , machine", "question": "What are the names of technicians and the machine series that they repair?", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select name , machine_series from technician , machine", "query": "SELECT T3.Name ,  T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID", "sub_ques": "what are the names of technicians and the machine series"}
{"db_id": "machine_repair", "sub_sql": "select t3.name from technician", "question": "Show names of technicians in ascending order of quality rank of the machine they are assigned.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from technician", "query": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank", "sub_ques": "show names of technicians"}
{"db_id": "machine_repair", "sub_sql": "order by t2.quality_rank", "question": "Show names of technicians in ascending order of quality rank of the machine they are assigned.", "sub_sql_type": "null null col col", "sub_sql_new": "order by quality rank", "query": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank", "sub_ques": "in ascending order of quality rank of the machine"}
{"db_id": "machine_repair", "sub_sql": "select t3.name from technician", "question": "What are the names of the technicians by ascending order of quality rank for the machine they are assigned?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from technician", "query": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank", "sub_ques": "what are the names of the technicians"}
{"db_id": "machine_repair", "sub_sql": "order by t2.quality_rank", "question": "What are the names of the technicians by ascending order of quality rank for the machine they are assigned?", "sub_sql_type": "null null col col", "sub_sql_new": "order by quality rank", "query": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank", "sub_ques": "by ascending order of quality rank for the machine"}
{"db_id": "machine_repair", "sub_sql": "select t3.name from technician", "question": "Show names of technicians who are assigned to repair machines with value point more than 70.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from technician", "query": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  70", "sub_ques": "show names of technicians"}
{"db_id": "machine_repair", "sub_sql": "where t2.value_points > 70", "question": "Show names of technicians who are assigned to repair machines with value point more than 70.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where value points more than 70", "query": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  70", "sub_ques": "machines with value point more than 70"}
{"db_id": "machine_repair", "sub_sql": "select t3.name from technician", "question": "What are the names of the technicians that are assigned to repair machines with more point values than 70?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from technician", "query": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  70", "sub_ques": "what are the names of the technicians"}
{"db_id": "machine_repair", "sub_sql": "where t2.value_points > 70", "question": "What are the names of the technicians that are assigned to repair machines with more point values than 70?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where value points more than 70", "query": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  70", "sub_ques": "machines with more point values than 70"}
{"db_id": "machine_repair", "sub_sql": "select t2.name , count * from technician group by t2.name", "question": "Show names of technicians and the number of machines they are assigned to repair.", "sub_sql_type": "null col null agg col col col", "sub_sql_new": "select name , count * from technician", "query": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name", "sub_ques": "show names of technicians"}
{"db_id": "machine_repair", "sub_sql": "select t2.name , count repair_assignment group by t2.name", "question": "What are the names of the technicians  and how many machines are they assigned to repair?", "sub_sql_type": "null col null agg col", "sub_sql_new": "select name , count repair_assignment", "query": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name", "sub_ques": "what are the names of the technicians and how many machines"}
{"db_id": "machine_repair", "sub_sql": "select name from technician", "question": "List the names of technicians who have not been assigned to repair machines.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from technician", "query": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)", "sub_ques": "list the names of technicians"}
{"db_id": "machine_repair", "sub_sql": "select technician_id from repair_assignment", "question": "List the names of technicians who have not been assigned to repair machines.", "sub_sql_type": "null col col col col", "sub_sql_new": "select technician id from repair_assignment", "query": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)", "sub_ques": "list the names of technicians"}
{"db_id": "machine_repair", "sub_sql": "select name from technician", "question": "What are the names of the technicians that have not been assigned to repair machines?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from technician", "query": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)", "sub_ques": "what are the names of the technicians"}
{"db_id": "entrepreneur", "sub_sql": "select count entrepreneur", "question": "How many entrepreneurs are there?", "sub_sql_type": "null agg col", "sub_sql_new": "select count entrepreneur", "query": "SELECT count(*) FROM entrepreneur", "sub_ques": "how many entrepreneurs"}
{"db_id": "entrepreneur", "sub_sql": "select count entrepreneur", "question": "Count the number of entrepreneurs.", "sub_sql_type": "null agg col", "sub_sql_new": "select count entrepreneur", "query": "SELECT count(*) FROM entrepreneur", "sub_ques": "count the number of entrepreneurs"}
{"db_id": "entrepreneur", "sub_sql": "select company from entrepreneur", "question": "List the companies of entrepreneurs in descending order of money requested.", "sub_sql_type": "null col col col", "sub_sql_new": "select company from entrepreneur", "query": "SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC", "sub_ques": "list the companies of entrepreneurs"}
{"db_id": "entrepreneur", "sub_sql": "order by money_requested desc", "question": "List the companies of entrepreneurs in descending order of money requested.", "sub_sql_type": "null null col null", "sub_sql_new": "order by money_requested desc", "query": "SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC", "sub_ques": "in descending order of money requested"}
{"db_id": "entrepreneur", "sub_sql": "select company from entrepreneur", "question": "What are the companies of entrepreneurs, ordered descending by amount of money requested?", "sub_sql_type": "null col col col", "sub_sql_new": "select company from entrepreneur", "query": "SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC", "sub_ques": "what are the companies of entrepreneurs"}
{"db_id": "entrepreneur", "sub_sql": "order by money_requested desc", "question": "What are the companies of entrepreneurs, ordered descending by amount of money requested?", "sub_sql_type": "null null col null", "sub_sql_new": "order by money_requested desc", "query": "SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC", "sub_ques": "ordered descending by amount of money requested"}
{"db_id": "entrepreneur", "sub_sql": "select company , investor from entrepreneur", "question": "List the companies and the investors of entrepreneurs.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select company , investor from entrepreneur", "query": "SELECT Company ,  Investor FROM entrepreneur", "sub_ques": "list the companies and the investors of entrepreneurs"}
{"db_id": "entrepreneur", "sub_sql": "select company , investor from entrepreneur", "question": "What are the companies and investors that correspond to each entrepreneur?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select company , investor from entrepreneur", "query": "SELECT Company ,  Investor FROM entrepreneur", "sub_ques": "what are the companies and investors that correspond to each entrepreneur"}
{"db_id": "entrepreneur", "sub_sql": "select avg money_requested from entrepreneur", "question": "What is the average money requested by all entrepreneurs?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select avg money_requested from entrepreneur", "query": "SELECT avg(Money_Requested) FROM entrepreneur", "sub_ques": "what is the average money requested by all entrepreneurs"}
{"db_id": "entrepreneur", "sub_sql": "select avg money_requested from entrepreneur", "question": "Return the average money requested across all entrepreneurs.", "sub_sql_type": "null agg col col col", "sub_sql_new": "select avg money_requested from entrepreneur", "query": "SELECT avg(Money_Requested) FROM entrepreneur", "sub_ques": "return the average money requested across all entrepreneurs"}
{"db_id": "entrepreneur", "sub_sql": "select name from people", "question": "What are the names of people in ascending order of weight?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from people", "query": "SELECT Name FROM People ORDER BY Weight ASC", "sub_ques": "what are the names of people"}
{"db_id": "entrepreneur", "sub_sql": "order by weight asc", "question": "What are the names of people in ascending order of weight?", "sub_sql_type": "null null col null", "sub_sql_new": "order by weight asc", "query": "SELECT Name FROM People ORDER BY Weight ASC", "sub_ques": "in ascending order of weight"}
{"db_id": "entrepreneur", "sub_sql": "select name from people", "question": "Return the names of people, ordered by weight ascending.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from people", "query": "SELECT Name FROM People ORDER BY Weight ASC", "sub_ques": "return the names of people"}
{"db_id": "entrepreneur", "sub_sql": "order by weight asc", "question": "Return the names of people, ordered by weight ascending.", "sub_sql_type": "null null col null", "sub_sql_new": "order by weight asc", "query": "SELECT Name FROM People ORDER BY Weight ASC", "sub_ques": "ordered by weight ascending"}
{"db_id": "entrepreneur", "sub_sql": "select t2.name from people", "question": "What are the names of entrepreneurs?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from people", "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID", "sub_ques": "what are the names of entrepreneurs"}
{"db_id": "entrepreneur", "sub_sql": "select t2.name from people", "question": "Return the names of entrepreneurs.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from people", "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID", "sub_ques": "return the names of entrepreneurs"}
{"db_id": "entrepreneur", "sub_sql": "select t2.name from people", "question": "What are the names of entrepreneurs whose investor is not \\\\\\\"Rachel Elnaugh\\\\\\\"?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from people", "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \\\\\\\"Rachel Elnaugh\\\\\\\"", "sub_ques": "what are the names of entrepreneurs"}
{"db_id": "entrepreneur", "sub_sql": "where t1.investor != rachelelnaugh", "question": "What are the names of entrepreneurs whose investor is not \\\\\\\"Rachel Elnaugh\\\\\\\"?", "sub_sql_type": "null col op op op value", "sub_sql_new": "where investor not equal to rachelelnaugh", "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \\\\\\\"Rachel Elnaugh\\\\\\\"", "sub_ques": "entrepreneurs whose investor is not rachel elnaugh"}
{"db_id": "entrepreneur", "sub_sql": "select t2.name from people", "question": "Return the names of entrepreneurs do no not have the investor Rachel Elnaugh.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from people", "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \\\\\\\"Rachel Elnaugh\\\\\\\"", "sub_ques": "Return the names of entrepreneurs"}
{"db_id": "entrepreneur", "sub_sql": "where t1.investor != rachelelnaugh", "question": "Return the names of entrepreneurs do no not have the investor Rachel Elnaugh.", "sub_sql_type": "null col op op op value", "sub_sql_new": "where investor not equal to rachelelnaugh", "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \\\\\\\"Rachel Elnaugh\\\\\\\"", "sub_ques": "entrepreneurs do no not have the investor rachel elnaugh"}
{"db_id": "entrepreneur", "sub_sql": "select weight from people", "question": "What is the weight of the shortest person?", "sub_sql_type": "null col col col", "sub_sql_new": "select weight from people", "query": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1", "sub_ques": "what is the weight"}
{"db_id": "entrepreneur", "sub_sql": "order by height asc limit 1", "question": "What is the weight of the shortest person?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by height asc limit 1", "query": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1", "sub_ques": "the shortest person"}
{"db_id": "entrepreneur", "sub_sql": "select weight from people", "question": "Return the weight of the shortest person.", "sub_sql_type": "null col col col", "sub_sql_new": "select weight from people", "query": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1", "sub_ques": "return the weight"}
{"db_id": "entrepreneur", "sub_sql": "order by height asc limit 1", "question": "Return the weight of the shortest person.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by height asc limit 1", "query": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1", "sub_ques": "the shortest person"}
{"db_id": "entrepreneur", "sub_sql": "select t2.name from people", "question": "What is the name of the entrepreneur with the greatest weight?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from people", "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1", "sub_ques": "what is the name of the entrepreneur"}
{"db_id": "entrepreneur", "sub_sql": "order by t2.weight desc limit 1", "question": "What is the name of the entrepreneur with the greatest weight?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by weight desc limit 1", "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1", "sub_ques": "the greatest weight"}
{"db_id": "entrepreneur", "sub_sql": "select t2.name from people", "question": "Return the name of the heaviest entrepreneur.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from people", "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1", "sub_ques": "return the name of entrepreneur"}
{"db_id": "entrepreneur", "sub_sql": "order by t2.weight desc limit 1", "question": "Return the name of the heaviest entrepreneur.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by weight desc limit 1", "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1", "sub_ques": "the heaviest entrepreneur"}
{"db_id": "entrepreneur", "sub_sql": "select sum t1.money_requested from entrepreneur", "question": "What is the total money requested by entrepreneurs with height more than 1.85?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select sum money_requested from entrepreneur", "query": "SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  1.85", "sub_ques": "what is the total money requested by entrepreneurs"}
{"db_id": "entrepreneur", "sub_sql": "where t2.height > 1.85", "question": "What is the total money requested by entrepreneurs with height more than 1.85?", "sub_sql_type": "null col op op value", "sub_sql_new": "where height more than 1.85", "query": "SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  1.85", "sub_ques": "entrepreneurs with height more than 1.85"}
{"db_id": "entrepreneur", "sub_sql": "select sum t1.money_requested from entrepreneur", "question": "Give the total money requested by entrepreneurs who are taller than 1.85.", "sub_sql_type": "null agg col col col", "sub_sql_new": "select sum money_requested from entrepreneur", "query": "SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  1.85", "sub_ques": "give the total money requested by entrepreneurs"}
{"db_id": "entrepreneur", "sub_sql": "where t2.height > 1.85", "question": "Give the total money requested by entrepreneurs who are taller than 1.85.", "sub_sql_type": "null col op op value", "sub_sql_new": "where height more than 1.85", "query": "SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  1.85", "sub_ques": "entrepreneurs who are taller than 1.85"}
{"db_id": "entrepreneur", "sub_sql": "select t2.date_of_birth from people", "question": "What are the dates of birth of entrepreneurs with investor \\\\\\\"Simon Woodroffe\\\\\\\" or \\\\\\\"Peter Jones\\\\\\\"?", "sub_sql_type": "null col col col", "sub_sql_new": "select date_of_birth from people", "query": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  \\\\\\\"Simon Woodroffe\\\\\\\" OR T1.Investor  =  \\\\\\\"Peter Jones\\\\\\\"", "sub_ques": "what are the dates of birth of entrepreneurs"}
{"db_id": "entrepreneur", "sub_sql": "where t1.investor = simonwoodroffe", "question": "What are the dates of birth of entrepreneurs with investor \\\\\\\"Simon Woodroffe\\\\\\\" or \\\\\\\"Peter Jones\\\\\\\"?", "sub_sql_type": "null col op op value", "sub_sql_new": "where investor equal to simonwoodroffe", "query": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  \\\\\\\"Simon Woodroffe\\\\\\\" OR T1.Investor  =  \\\\\\\"Peter Jones\\\\\\\"", "sub_ques": "entrepreneurs with investor simon woodroffe"}
{"db_id": "entrepreneur", "sub_sql": "select t2.date_of_birth from people", "question": "Return the dates of birth for entrepreneurs who have either the investor Simon Woodroffe or Peter Jones.", "sub_sql_type": "null col col col", "sub_sql_new": "select date_of_birth from people", "query": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  \\\\\\\"Simon Woodroffe\\\\\\\" OR T1.Investor  =  \\\\\\\"Peter Jones\\\\\\\"", "sub_ques": "return the dates of birth for entrepreneurs"}
{"db_id": "entrepreneur", "sub_sql": "where t1.investor = simonwoodroffe", "question": "Return the dates of birth for entrepreneurs who have either the investor Simon Woodroffe or Peter Jones.", "sub_sql_type": "null col op op value", "sub_sql_new": "where investor equal to simonwoodroffe", "query": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  \\\\\\\"Simon Woodroffe\\\\\\\" OR T1.Investor  =  \\\\\\\"Peter Jones\\\\\\\"", "sub_ques": "entrepreneurs who have either the investor simon woodroffe"}
{"db_id": "entrepreneur", "sub_sql": "select t2.weight from people", "question": "What are the weights of entrepreneurs in descending order of money requested?", "sub_sql_type": "null col col col", "sub_sql_new": "select weight from people", "query": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC", "sub_ques": "what are the weights of entrepreneurs"}
{"db_id": "entrepreneur", "sub_sql": "order by t1.money_requested desc", "question": "What are the weights of entrepreneurs in descending order of money requested?", "sub_sql_type": "null null col null", "sub_sql_new": "order by money_requested desc", "query": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC", "sub_ques": "in descending order of money requested"}
{"db_id": "entrepreneur", "sub_sql": "select t2.weight from people", "question": "Return the weights of entrepreneurs, ordered descending by amount of money requested.", "sub_sql_type": "null col col col", "sub_sql_new": "select weight from people", "query": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC", "sub_ques": "return the weights of entrepreneurs"}
{"db_id": "entrepreneur", "sub_sql": "order by t1.money_requested desc", "question": "Return the weights of entrepreneurs, ordered descending by amount of money requested.", "sub_sql_type": "null null col null", "sub_sql_new": "order by money_requested desc", "query": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC", "sub_ques": "ordered descending by amount of money requested"}
{"db_id": "entrepreneur", "sub_sql": "select investor , count entrepreneur group by investor", "question": "What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor?", "sub_sql_type": "null col null agg col", "sub_sql_new": "select investor , count entrepreneur", "query": "SELECT Investor ,  COUNT(*) FROM entrepreneur GROUP BY Investor", "sub_ques": "what are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor"}
{"db_id": "entrepreneur", "sub_sql": "select investor , count entrepreneur group by investor", "question": "How many entrepreneurs correspond to each investor?", "sub_sql_type": "null col null agg col", "sub_sql_new": "select investor , count entrepreneur", "query": "SELECT Investor ,  COUNT(*) FROM entrepreneur GROUP BY Investor", "sub_ques": "how many entrepreneurs correspond to each investor"}
{"db_id": "entrepreneur", "sub_sql": "select investor from entrepreneur", "question": "What is the investor that has invested in the most number of entrepreneurs?", "sub_sql_type": "null col col col", "sub_sql_new": "select investor from entrepreneur", "query": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "what is the investor"}
{"db_id": "entrepreneur", "sub_sql": "group by investor order by count entrepreneur desc limit 1", "question": "What is the investor that has invested in the most number of entrepreneurs?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count entrepreneur desc limit 1", "query": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "the investor that has invested in the most number of entrepreneurs"}
{"db_id": "entrepreneur", "sub_sql": "select investor from entrepreneur", "question": "Return the investor who have invested in the greatest number of entrepreneurs.", "sub_sql_type": "null col col col", "sub_sql_new": "select investor from entrepreneur", "query": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "return the investor"}
{"db_id": "entrepreneur", "sub_sql": "group by investor order by count entrepreneur desc limit 1", "question": "Return the investor who have invested in the greatest number of entrepreneurs.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count entrepreneur desc limit 1", "query": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "the investor who have invested in the greatest number of entrepreneurs"}
{"db_id": "entrepreneur", "sub_sql": "select investor from entrepreneur", "question": "What are the investors that have invested in at least two entrepreneurs?", "sub_sql_type": "null col col col", "sub_sql_new": "select investor from entrepreneur", "query": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2", "sub_ques": "what are the investors"}
{"db_id": "entrepreneur", "sub_sql": "group by investor having count entrepreneur >= 2", "question": "What are the investors that have invested in at least two entrepreneurs?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2", "sub_ques": "investors that have invested in at least two entrepreneurs"}
{"db_id": "entrepreneur", "sub_sql": "select investor from entrepreneur", "question": "Return the investors who have invested in two or more entrepreneurs.", "sub_sql_type": "null col col col", "sub_sql_new": "select investor from entrepreneur", "query": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2", "sub_ques": "return the investors"}
{"db_id": "entrepreneur", "sub_sql": "group by investor having count entrepreneur >= 2", "question": "Return the investors who have invested in two or more entrepreneurs.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2", "sub_ques": "investors who have invested in two or more entrepreneurs"}
{"db_id": "entrepreneur", "sub_sql": "select t2.name , t1.company from people , entrepreneur", "question": "List the names of entrepreneurs and their companies in descending order of money requested?", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select name , company from people , entrepreneur", "query": "SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested", "sub_ques": "list the names of entrepreneurs and their companies"}
{"db_id": "entrepreneur", "sub_sql": "order by t1.money_requested", "question": "List the names of entrepreneurs and their companies in descending order of money requested?", "sub_sql_type": "null null col", "sub_sql_new": "order by money_requested", "query": "SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested", "sub_ques": "in descending order of money requested"}
{"db_id": "entrepreneur", "sub_sql": "select t2.name , t1.company from people , entrepreneur", "question": "What are the names of entrepreneurs and their corresponding investors, ordered descending by the amount of money requested?", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select name , company from people , entrepreneur", "query": "SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested", "sub_ques": "what are the names of entrepreneurs and their corresponding investors"}
{"db_id": "entrepreneur", "sub_sql": "order by t1.money_requested", "question": "What are the names of entrepreneurs and their corresponding investors, ordered descending by the amount of money requested?", "sub_sql_type": "null null col", "sub_sql_new": "order by money_requested", "query": "SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested", "sub_ques": "ordered descending by the amount of money requested"}
{"db_id": "entrepreneur", "sub_sql": "select name from people", "question": "List the names of people that are not entrepreneurs.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from people", "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)", "sub_ques": "list the namesof people "}
{"db_id": "entrepreneur", "sub_sql": "select name from people", "question": "What are the names of people who are not entrepreneurs?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from people", "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)", "sub_ques": "what are the names of people"}
{"db_id": "entrepreneur", "sub_sql": "people not in entrepreneur", "question": "What are the names of people who are not entrepreneurs?", "sub_sql_type": "tab op op tab", "sub_sql_new": "people not in entrepreneur", "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)", "sub_ques": "people who are not entrepreneurs"}
{"db_id": "entrepreneur", "sub_sql": "select count distinct company from entrepreneur", "question": "How many distinct companies are there?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct company from entrepreneur", "query": "SELECT count(DISTINCT Company) FROM entrepreneur", "sub_ques": "how many distinct companies"}
{"db_id": "entrepreneur", "sub_sql": "select count distinct company from entrepreneur", "question": "Count the number of different companies.", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct company from entrepreneur", "query": "SELECT count(DISTINCT Company) FROM entrepreneur", "sub_ques": "count the number of different companies"}
{"db_id": "entrepreneur", "sub_sql": "select t1.company from entrepreneur", "question": "Show the company of the tallest entrepreneur.", "sub_sql_type": "null col col col", "sub_sql_new": "select company from entrepreneur", "query": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1", "sub_ques": "show the company"}
{"db_id": "entrepreneur", "sub_sql": "order by t2.height desc limit 1", "question": "Show the company of the tallest entrepreneur.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by height desc limit 1", "query": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1", "sub_ques": "the tallest entrepreneur"}
{"db_id": "entrepreneur", "sub_sql": "select t1.company from entrepreneur", "question": "Which company was started by the entrepreneur with the greatest height?", "sub_sql_type": "null col col col", "sub_sql_new": "select company from entrepreneur", "query": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1", "sub_ques": "company was started by the entrepreneur"}
{"db_id": "entrepreneur", "sub_sql": "order by t2.height desc limit 1", "question": "Which company was started by the entrepreneur with the greatest height?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by height desc limit 1", "query": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1", "sub_ques": "the entrepreneur with the greatest height"}
{"db_id": "perpetrator", "sub_sql": "select count perpetrator", "question": "How many perpetrators are there?", "sub_sql_type": "null agg col", "sub_sql_new": "select count perpetrator", "query": "SELECT count(*) FROM perpetrator", "sub_ques": "how many perpetrators"}
{"db_id": "perpetrator", "sub_sql": "select date from perpetrator", "question": "List the date of perpetrators in descending order of the number of people killed.", "sub_sql_type": "null col col col", "sub_sql_new": "select date from perpetrator", "query": "SELECT Date FROM perpetrator ORDER BY Killed DESC", "sub_ques": "list the date of perpetrators"}
{"db_id": "perpetrator", "sub_sql": "order by killed desc", "question": "List the date of perpetrators in descending order of the number of people killed.", "sub_sql_type": "null null col null", "sub_sql_new": "order by killed desc", "query": "SELECT Date FROM perpetrator ORDER BY Killed DESC", "sub_ques": "in descending order of the number of people killed"}
{"db_id": "perpetrator", "sub_sql": "select injured from perpetrator", "question": "List the number of people injured by perpetrators in ascending order.", "sub_sql_type": "null col col col", "sub_sql_new": "select injured from perpetrator", "query": "SELECT Injured FROM perpetrator ORDER BY Injured ASC", "sub_ques": "list the number of people injured by perpetrators"}
{"db_id": "perpetrator", "sub_sql": "order by injured asc", "question": "List the number of people injured by perpetrators in ascending order.", "sub_sql_type": "null null col null", "sub_sql_new": "order by injured asc", "query": "SELECT Injured FROM perpetrator ORDER BY Injured ASC", "sub_ques": "injured by perpetrators in ascending order"}
{"db_id": "perpetrator", "sub_sql": "select avg injured from perpetrator", "question": "What is the average number of people injured by all perpetrators?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select avg injured from perpetrator", "query": "SELECT avg(Injured) FROM perpetrator", "sub_ques": "what is the average number of people injured by all perpetrators"}
{"db_id": "perpetrator", "sub_sql": "select location from perpetrator", "question": "What is the location of the perpetrator with the largest kills.", "sub_sql_type": "null col col col", "sub_sql_new": "select location from perpetrator", "query": "SELECT LOCATION FROM perpetrator ORDER BY Killed DESC LIMIT 1", "sub_ques": "what is the location of the perpetrator"}
{"db_id": "perpetrator", "sub_sql": "order by killed desc limit 1", "question": "What is the location of the perpetrator with the largest kills.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by killed desc limit 1", "query": "SELECT LOCATION FROM perpetrator ORDER BY Killed DESC LIMIT 1", "sub_ques": "the perpetrator with the largest kills"}
{"db_id": "perpetrator", "sub_sql": "select name from people", "question": "What are the names of people in ascending order of height?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from people", "query": "SELECT Name FROM People ORDER BY Height ASC", "sub_ques": "what are the names of people"}
{"db_id": "perpetrator", "sub_sql": "order by height asc", "question": "What are the names of people in ascending order of height?", "sub_sql_type": "null null col null", "sub_sql_new": "order by height asc", "query": "SELECT Name FROM People ORDER BY Height ASC", "sub_ques": "in ascending order of height"}
{"db_id": "perpetrator", "sub_sql": "select t1.name from people", "question": "What are the names of perpetrators?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from people", "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID", "sub_ques": "what are the names of perpetrators"}
{"db_id": "perpetrator", "sub_sql": "select t1.name from people", "question": "What are the names of perpetrators whose country is not \\\\\\\"China\\\\\\\"?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from people", "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country != \\\\\\\"China\\\\\\\"", "sub_ques": "what are the names of perpetrators"}
{"db_id": "perpetrator", "sub_sql": "where t2.country != china", "question": "What are the names of perpetrators whose country is not \\\\\\\"China\\\\\\\"?", "sub_sql_type": "null col op op op value", "sub_sql_new": "where country not equal to china", "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country != \\\\\\\"China\\\\\\\"", "sub_ques": "perpetrators whose country is not `` china"}
{"db_id": "perpetrator", "sub_sql": "select t1.name from people", "question": "What is the name of the perpetrator with the biggest weight.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from people", "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Weight DESC LIMIT 1", "sub_ques": "what is the name of perpetrators"}
{"db_id": "perpetrator", "sub_sql": "order by t1.weight desc limit 1", "question": "What is the name of the perpetrator with the biggest weight.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by weight desc limit 1", "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Weight DESC LIMIT 1", "sub_ques": "perpetrators with the biggest weight"}
{"db_id": "perpetrator", "sub_sql": "select sum t2.killed from perpetrator", "question": "What is the total kills of the perpetrators with height more than 1.84.", "sub_sql_type": "null agg col col col", "sub_sql_new": "select sum killed from perpetrator", "query": "SELECT sum(T2.Killed) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  1.84", "sub_ques": "what is the total kills of the perpetrators"}
{"db_id": "perpetrator", "sub_sql": "where t1.height > 1.84", "question": "What is the total kills of the perpetrators with height more than 1.84.", "sub_sql_type": "null col op op value", "sub_sql_new": "where height more than 1.84", "query": "SELECT sum(T2.Killed) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  1.84", "sub_ques": "the perpetrators with height more than 1.84"}
{"db_id": "perpetrator", "sub_sql": "select t1.name from people", "question": "What are the names of perpetrators in country \\\\\\\"China\\\\\\\" or \\\\\\\"Japan\\\\\\\"?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from people", "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \\\\\\\"China\\\\\\\" OR T2.Country  =  \\\\\\\"Japan\\\\\\\"", "sub_ques": "what are the names of perpetrators"}
{"db_id": "perpetrator", "sub_sql": "where t2.country = china", "question": "What are the names of perpetrators in country \\\\\\\"China\\\\\\\" or \\\\\\\"Japan\\\\\\\"?", "sub_sql_type": "null col op op value", "sub_sql_new": "where country equal to china", "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \\\\\\\"China\\\\\\\" OR T2.Country  =  \\\\\\\"Japan\\\\\\\"", "sub_ques": "perpetrators in country `` china"}
{"db_id": "perpetrator", "sub_sql": "select t1.height from people", "question": "What are the heights of perpetrators in descending order of the number of people they injured?", "sub_sql_type": "null col col col", "sub_sql_new": "select height from people", "query": "SELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Injured DESC", "sub_ques": "what are the heights of perpetrators"}
{"db_id": "perpetrator", "sub_sql": "order by t2.injured desc", "question": "What are the heights of perpetrators in descending order of the number of people they injured?", "sub_sql_type": "null null col null", "sub_sql_new": "order by injured desc", "query": "SELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Injured DESC", "sub_ques": "in descending order of the number of people they injured"}
{"db_id": "perpetrator", "sub_sql": "select country , count perpetrator group by country", "question": "What are the countries of perpetrators? Show each country and the corresponding number of perpetrators there.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select country , count perpetrator", "query": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country", "sub_ques": "show each country and the corresponding number of perpetrators"}
{"db_id": "perpetrator", "sub_sql": "select country , count from perpetrator group by country", "question": "What is the country that has the most perpetrators?", "sub_sql_type": "null col null agg col col", "sub_sql_new": "select country , count from perpetrator", "query": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "what is the country that has the most perpetrators"}
{"db_id": "perpetrator", "sub_sql": "group by country order by count perpetrator desc limit 1", "question": "What is the country that has the most perpetrators?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count perpetrator desc limit 1", "query": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "the country that has the most perpetrators"}
{"db_id": "perpetrator", "sub_sql": "select country , count perpetrator group by country", "question": "What are the countries that have at least two perpetrators?", "sub_sql_type": "null col null agg col", "sub_sql_new": "select country , count perpetrator", "query": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country HAVING COUNT(*)  >=  2", "sub_ques": "what are the countries that have at least two perpetrators"}
{"db_id": "perpetrator", "sub_sql": "group by country having count perpetrator >= 2", "question": "What are the countries that have at least two perpetrators?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country HAVING COUNT(*)  >=  2", "sub_ques": "countries that have at least two perpetrators"}
{"db_id": "perpetrator", "sub_sql": "select t1.name from people", "question": "List the names of perpetrators in descending order of the year.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from people", "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Year DESC", "sub_ques": "list the names of perpetrators"}
{"db_id": "perpetrator", "sub_sql": "order by t2.year desc", "question": "List the names of perpetrators in descending order of the year.", "sub_sql_type": "null null col null", "sub_sql_new": "order by year desc", "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Year DESC", "sub_ques": "in descending order of the year"}
{"db_id": "perpetrator", "sub_sql": "select name from people", "question": "List the names of people that are not perpetrators.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from people", "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM perpetrator)", "sub_ques": "list the names of people"}
{"db_id": "perpetrator", "sub_sql": "select count distinct location from perpetrator", "question": "How many distinct locations of perpetrators are there?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct location from perpetrator", "query": "SELECT count(DISTINCT LOCATION) FROM perpetrator", "sub_ques": "how many distinct locations of perpetrators"}
{"db_id": "perpetrator", "sub_sql": "select t2.date from perpetrator", "question": "Show the date of the tallest perpetrator.", "sub_sql_type": "null col col col", "sub_sql_new": "select date from perpetrator", "query": "SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "sub_ques": "show the date of the perpetrator"}
{"db_id": "perpetrator", "sub_sql": "order by t1.height desc limit 1", "question": "Show the date of the tallest perpetrator.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by height desc limit 1", "query": "SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "sub_ques": "the tallest perpetrator"}
{"db_id": "perpetrator", "sub_sql": "select max year from perpetrator", "question": "In which year did the most recent crime happen?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select max year from perpetrator", "query": "SELECT max(YEAR) FROM perpetrator;", "sub_ques": "year did the most recent crime happen"}
{"db_id": "csu_1", "sub_sql": "select campus from campuses", "question": "Report the name of all campuses in Los Angeles county.", "sub_sql_type": "null col col col", "sub_sql_new": "select campus from campuses", "query": "SELECT campus FROM campuses WHERE county  =  \\\\\\\"Los Angeles\\\\\\\"", "sub_ques": "Report the name of all campuses"}
{"db_id": "csu_1", "sub_sql": "where county = losangeles", "question": "Report the name of all campuses in Los Angeles county.", "sub_sql_type": "null col op op value", "sub_sql_new": "where county equal to losangeles", "query": "SELECT campus FROM campuses WHERE county  =  \\\\\\\"Los Angeles\\\\\\\"", "sub_ques": "in los angeles county"}
{"db_id": "csu_1", "sub_sql": "select campus from campuses", "question": "What campuses are located in the county of Los Angeles?", "sub_sql_type": "null col col col", "sub_sql_new": "select campus from campuses", "query": "SELECT campus FROM campuses WHERE county  =  \\\\\\\"Los Angeles\\\\\\\"", "sub_ques": "what campuses"}
{"db_id": "csu_1", "sub_sql": "where county = losangeles", "question": "What campuses are located in the county of Los Angeles?", "sub_sql_type": "null col op op value", "sub_sql_new": "where county equal to losangeles", "query": "SELECT campus FROM campuses WHERE county  =  \\\\\\\"Los Angeles\\\\\\\"", "sub_ques": "located in the county of Los Angeles"}
{"db_id": "csu_1", "sub_sql": "select campus from campuses", "question": "What are the names of all campuses located at Chico?", "sub_sql_type": "null col col col", "sub_sql_new": "select campus from campuses", "query": "SELECT campus FROM campuses WHERE LOCATION  =  \\\\\\\"Chico\\\\\\\"", "sub_ques": "What are the names of all campuses"}
{"db_id": "csu_1", "sub_sql": "where location = chico", "question": "What are the names of all campuses located at Chico?", "sub_sql_type": "null col op op value", "sub_sql_new": "where location equal to chico", "query": "SELECT campus FROM campuses WHERE LOCATION  =  \\\\\\\"Chico\\\\\\\"", "sub_ques": "located at chico"}
{"db_id": "csu_1", "sub_sql": "select campus from campuses", "question": "What campuses are located in Chico?", "sub_sql_type": "null col col col", "sub_sql_new": "select campus from campuses", "query": "SELECT campus FROM campuses WHERE LOCATION  =  \\\\\\\"Chico\\\\\\\"", "sub_ques": "what campuses"}
{"db_id": "csu_1", "sub_sql": "where location = chico", "question": "What campuses are located in Chico?", "sub_sql_type": "null col op op value", "sub_sql_new": "where location equal to chico", "query": "SELECT campus FROM campuses WHERE LOCATION  =  \\\\\\\"Chico\\\\\\\"", "sub_ques": "are located in chico"}
{"db_id": "csu_1", "sub_sql": "select campus from campuses", "question": "Find all the campuses opened in 1958.", "sub_sql_type": "null col col col", "sub_sql_new": "select campus from campuses", "query": "SELECT campus FROM campuses WHERE YEAR  =  1958", "sub_ques": "find all the campuses"}
{"db_id": "csu_1", "sub_sql": "where year = 1958", "question": "Find all the campuses opened in 1958.", "sub_sql_type": "null col op op value", "sub_sql_new": "where year equal to 1958", "query": "SELECT campus FROM campuses WHERE YEAR  =  1958", "sub_ques": "opened in 1958"}
{"db_id": "csu_1", "sub_sql": "select campus from campuses", "question": "What are the campuses that opened in 1958?", "sub_sql_type": "null col col col", "sub_sql_new": "select campus from campuses", "query": "SELECT campus FROM campuses WHERE YEAR  =  1958", "sub_ques": "what are the campuses"}
{"db_id": "csu_1", "sub_sql": "where year = 1958", "question": "What are the campuses that opened in 1958?", "sub_sql_type": "null col op op value", "sub_sql_new": "where year equal to 1958", "query": "SELECT campus FROM campuses WHERE YEAR  =  1958", "sub_ques": "opened in 1958"}
{"db_id": "csu_1", "sub_sql": "select campus from campuses", "question": "Find the name of the campuses opened before 1800.", "sub_sql_type": "null col col col", "sub_sql_new": "select campus from campuses", "query": "SELECT campus FROM campuses WHERE YEAR  <  1800", "sub_ques": "find the names of the campuses"}
{"db_id": "csu_1", "sub_sql": "where year < 1800", "question": "Find the name of the campuses opened before 1800.", "sub_sql_type": "null col op op value", "sub_sql_new": "where year less than 1800", "query": "SELECT campus FROM campuses WHERE YEAR  <  1800", "sub_ques": "opened before 1800"}
{"db_id": "csu_1", "sub_sql": "select campus from campuses", "question": "What campuses opened before 1800?", "sub_sql_type": "null col col col", "sub_sql_new": "select campus from campuses", "query": "SELECT campus FROM campuses WHERE YEAR  <  1800", "sub_ques": "what campuses"}
{"db_id": "csu_1", "sub_sql": "where year < 1800", "question": "What campuses opened before 1800?", "sub_sql_type": "null col op op value", "sub_sql_new": "where year less than 1800", "query": "SELECT campus FROM campuses WHERE YEAR  <  1800", "sub_ques": "opened before 1800"}
{"db_id": "csu_1", "sub_sql": "select campus from campuses", "question": "Which campus was opened between 1935 and 1939?", "sub_sql_type": "null col col col", "sub_sql_new": "select campus from campuses", "query": "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939", "sub_ques": "which campus"}
{"db_id": "csu_1", "sub_sql": "where year >= 1935 and year <= 1939", "question": "Which campus was opened between 1935 and 1939?", "sub_sql_type": "null col op op op value null col op value value", "sub_sql_new": "where year no less than 1935 and and year <= 1939", "query": "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939", "sub_ques": "opened between 1935 and 1939"}
{"db_id": "csu_1", "sub_sql": "select campus from campuses", "question": "What campuses opened between 1935 and 1939?", "sub_sql_type": "null col col col", "sub_sql_new": "select campus from campuses", "query": "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939", "sub_ques": "what campuses"}
{"db_id": "csu_1", "sub_sql": "where year >= 1935 and year <= 1939", "question": "What campuses opened between 1935 and 1939?", "sub_sql_type": "null col op op op value null col op value value", "sub_sql_new": "where year no less than 1935 and and year <= 1939", "query": "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939", "sub_ques": "opened between 1935 and 1939"}
{"db_id": "csu_1", "sub_sql": "select campusfee from csu_fees", "question": "What is the campus fee of \\\\\\\"San Jose State University\\\\\\\" in year 1996?", "sub_sql_type": "null col col col", "sub_sql_new": "select campusfee from csu_fees", "query": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \\\\\\\"San Jose State University\\\\\\\" AND T2.year  =  1996", "sub_ques": "what is the campus fee"}
{"db_id": "csu_1", "sub_sql": "where t1.campus = sanjosestateuniversity", "question": "What is the campus fee of \\\\\\\"San Jose State University\\\\\\\" in year 1996?", "sub_sql_type": "null col op op value", "sub_sql_new": "where campus equal to sanjosestateuniversity", "query": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \\\\\\\"San Jose State University\\\\\\\" AND T2.year  =  1996", "sub_ques": "san jose state university"}
{"db_id": "csu_1", "sub_sql": "select campusfee from csu_fees", "question": "What is the campus fee for San Jose State University in 1996?", "sub_sql_type": "null col col col", "sub_sql_new": "select campusfee from csu_fees", "query": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \\\\\\\"San Jose State University\\\\\\\" AND T2.year  =  1996", "sub_ques": "what is the campus fee"}
{"db_id": "csu_1", "sub_sql": "where t1.campus = sanjosestateuniversity", "question": "What is the campus fee for San Jose State University in 1996?", "sub_sql_type": "null col op op value", "sub_sql_new": "where campus equal to sanjosestateuniversity", "query": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \\\\\\\"San Jose State University\\\\\\\" AND T2.year  =  1996", "sub_ques": "san jose state university"}
{"db_id": "csu_1", "sub_sql": "select campusfee from csu_fees", "question": "What is the campus fee of \\\\\\\"San Francisco State University\\\\\\\" in year 1996?", "sub_sql_type": "null col col col", "sub_sql_new": "select campusfee from csu_fees", "query": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \\\\\\\"San Francisco State University\\\\\\\" AND T2.year  =  1996", "sub_ques": "what is the campus fee"}
{"db_id": "csu_1", "sub_sql": "where t1.campus = sanfranciscostateuniversity and t2.year = 1996", "question": "What is the campus fee of \\\\\\\"San Francisco State University\\\\\\\" in year 1996?", "sub_sql_type": "null col op op value null col op value value", "sub_sql_new": "where campus equal to sanfranciscostateuniversity and and t2.year = 1996", "query": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \\\\\\\"San Francisco State University\\\\\\\" AND T2.year  =  1996", "sub_ques": "san francisco state university in year 1996"}
{"db_id": "csu_1", "sub_sql": "select campusfee from csu_fees", "question": "What is the campus fee for San Francisco State University in 1996?", "sub_sql_type": "null col col col", "sub_sql_new": "select campusfee from csu_fees", "query": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \\\\\\\"San Francisco State University\\\\\\\" AND T2.year  =  1996", "sub_ques": "what is the campus fee"}
{"db_id": "csu_1", "sub_sql": "where t1.campus = sanfranciscostateuniversity and t2.year = 1996", "question": "What is the campus fee for San Francisco State University in 1996?", "sub_sql_type": "null col op op value null col op value value", "sub_sql_new": "where campus equal to sanfranciscostateuniversity and and t2.year = 1996", "query": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \\\\\\\"San Francisco State University\\\\\\\" AND T2.year  =  1996", "sub_ques": "san francisco state university in 1996"}
{"db_id": "csu_1", "sub_sql": "select count csu_fees", "question": "Find the count of universities whose campus fee is greater than the average campus fee.", "sub_sql_type": "null agg col", "sub_sql_new": "select count csu_fees", "query": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)", "sub_ques": "Find the count of universities"}
{"db_id": "csu_1", "sub_sql": "where campusfee > select avg campusfee", "question": "Find the count of universities whose campus fee is greater than the average campus fee.", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where campusfee more than select avg campusfee", "query": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)", "sub_ques": "campus fee is greater than the average campus fee"}
{"db_id": "csu_1", "sub_sql": "select count csu_fees", "question": "How many universities have a campus fee higher than average?", "sub_sql_type": "null agg col", "sub_sql_new": "select count csu_fees", "query": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)", "sub_ques": "how many universities have a campus fee"}
{"db_id": "csu_1", "sub_sql": "where campusfee > select avg campusfee", "question": "How many universities have a campus fee higher than average?", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where campusfee more than select avg campusfee", "query": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)", "sub_ques": "campus fee higher than average"}
{"db_id": "csu_1", "sub_sql": "select count csu_fees", "question": "Find the count of universities whose campus fee is greater than the average campus fee.", "sub_sql_type": "null agg col", "sub_sql_new": "select count csu_fees", "query": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)", "sub_ques": "Find the count of universities whose campus fee"}
{"db_id": "csu_1", "sub_sql": "where campusfee > select avg campusfee", "question": "Find the count of universities whose campus fee is greater than the average campus fee.", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where campusfee more than select avg campusfee", "query": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)", "sub_ques": "campus fee is greater than the average campus fee"}
{"db_id": "csu_1", "sub_sql": "select count csu_fees", "question": "How many universities have a campus fee greater than the average?", "sub_sql_type": "null agg col", "sub_sql_new": "select count csu_fees", "query": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)", "sub_ques": "how many universities have a campus fee"}
{"db_id": "csu_1", "sub_sql": "where campusfee > select avg campusfee", "question": "How many universities have a campus fee greater than the average?", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where campusfee more than select avg campusfee", "query": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)", "sub_ques": "campus fee greater than the average"}
{"db_id": "csu_1", "sub_sql": "select campus from campuses", "question": "Which university is in Los Angeles county and opened after 1950?", "sub_sql_type": "null col col col", "sub_sql_new": "select campus from campuses", "query": "SELECT campus FROM campuses WHERE county  =  \\\\\\\"Los Angeles\\\\\\\" AND YEAR  >  1950", "sub_ques": "which university"}
{"db_id": "csu_1", "sub_sql": "where county = losangeles", "question": "Which university is in Los Angeles county and opened after 1950?", "sub_sql_type": "null col op op value", "sub_sql_new": "where county equal to losangeles", "query": "SELECT campus FROM campuses WHERE county  =  \\\\\\\"Los Angeles\\\\\\\" AND YEAR  >  1950", "sub_ques": "in los angeles county"}
{"db_id": "csu_1", "sub_sql": "select campus from campuses", "question": "What campuses are located in Los Angeles county and opened after 1950?", "sub_sql_type": "null col col col", "sub_sql_new": "select campus from campuses", "query": "SELECT campus FROM campuses WHERE county  =  \\\\\\\"Los Angeles\\\\\\\" AND YEAR  >  1950", "sub_ques": "what campuses"}
{"db_id": "csu_1", "sub_sql": "where county = losangeles and year > 1950", "question": "What campuses are located in Los Angeles county and opened after 1950?", "sub_sql_type": "null col op op value null col op value value", "sub_sql_new": "where county equal to losangeles and and year > 1950", "query": "SELECT campus FROM campuses WHERE county  =  \\\\\\\"Los Angeles\\\\\\\" AND YEAR  >  1950", "sub_ques": "are located in Los Angeles county and opened after 1950"}
{"db_id": "csu_1", "sub_sql": "group by year order by sum degrees desc limit 1", "question": "Which year has the most degrees conferred?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by sum degrees desc limit 1", "query": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1", "sub_ques": "year has the most degrees conferred"}
{"db_id": "csu_1", "sub_sql": "group by year order by sum degrees desc limit 1", "question": "In what year was the most degrees conferred?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by sum degrees desc limit 1", "query": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1", "sub_ques": "year was the most degrees conferred"}
{"db_id": "csu_1", "sub_sql": "select campus from degrees", "question": "Which campus has the most degrees conferred in all times?", "sub_sql_type": "null col col col", "sub_sql_new": "select campus from degrees", "query": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1", "sub_ques": "which campus"}
{"db_id": "csu_1", "sub_sql": "group by campus order by sum degrees desc limit 1", "question": "Which campus has the most degrees conferred in all times?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by sum degrees desc limit 1", "query": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1", "sub_ques": "campus has the most degrees conferred in all times"}
{"db_id": "csu_1", "sub_sql": "group by campus order by sum degrees desc limit 1", "question": "What campus has the most degrees  conferrred over its entire existence?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by sum degrees desc limit 1", "query": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1", "sub_ques": "campus has the most degrees conferrred over its entire existence"}
{"db_id": "csu_1", "sub_sql": "where t2.year = 2003", "question": "Which campus has the most faculties in year 2003?", "sub_sql_type": "null col op op value", "sub_sql_new": "where year equal to 2003", "query": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1", "sub_ques": "in year 2003"}
{"db_id": "csu_1", "sub_sql": "order by t2.faculty desc limit 1", "question": "Which campus has the most faculties in year 2003?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by faculty desc limit 1", "query": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1", "sub_ques": "the most faculties"}
{"db_id": "csu_1", "sub_sql": "select t1.campus from campuses", "question": "What campus has the most faculties in 2003?", "sub_sql_type": "null col col col", "sub_sql_new": "select campus from campuses", "query": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1", "sub_ques": "what campus"}
{"db_id": "csu_1", "sub_sql": "where t2.year = 2003", "question": "What campus has the most faculties in 2003?", "sub_sql_type": "null col op op value", "sub_sql_new": "where year equal to 2003", "query": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1", "sub_ques": "in 2003"}
{"db_id": "csu_1", "sub_sql": "order by t2.faculty desc limit 1", "question": "What campus has the most faculties in 2003?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by faculty desc limit 1", "query": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1", "sub_ques": "the most faculties"}
{"db_id": "csu_1", "sub_sql": "select avg campusfee from csu_fees", "question": "Find the average fee on a CSU campus in 1996", "sub_sql_type": "null agg col col col", "sub_sql_new": "select avg campusfee from csu_fees", "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996", "sub_ques": "Find the average fee on a CSU campus"}
{"db_id": "csu_1", "sub_sql": "where year = 1996", "question": "Find the average fee on a CSU campus in 1996", "sub_sql_type": "null col op op value", "sub_sql_new": "where year equal to 1996", "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996", "sub_ques": "in 1996"}
{"db_id": "csu_1", "sub_sql": "select avg campusfee from csu_fees", "question": "What is the average fee for a CSU campus in the year of 1996?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select avg campusfee from csu_fees", "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996", "sub_ques": "what is the average fee for a CSU campus"}
{"db_id": "csu_1", "sub_sql": "where year = 1996", "question": "What is the average fee for a CSU campus in the year of 1996?", "sub_sql_type": "null col op op value", "sub_sql_new": "where year equal to 1996", "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996", "sub_ques": "in the year of 1996"}
{"db_id": "csu_1", "sub_sql": "select avg campusfee from csu_fees", "question": "What is the average fee on a CSU campus in 2005?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select avg campusfee from csu_fees", "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005", "sub_ques": "what is the average fee on a CSU campus"}
{"db_id": "csu_1", "sub_sql": "select avg campusfee from csu_fees", "question": "What is the average fee for a CSU campus in the year of 2005?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select avg campusfee from csu_fees", "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005", "sub_ques": "what is the average fee for a CSU campus"}
{"db_id": "csu_1", "sub_sql": "where year = 2005", "question": "What is the average fee for a CSU campus in the year of 2005?", "sub_sql_type": "null col op op value", "sub_sql_new": "where year equal to 2005", "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005", "sub_ques": "in the year of 2005"}
{"db_id": "csu_1", "sub_sql": "select sum t2.degrees from campuses , degrees", "question": "report the total number of degrees granted between 1998 and 2002.", "sub_sql_type": "null agg col col col null col", "sub_sql_new": "select sum degrees from campuses , degrees", "query": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus", "sub_ques": "report total number of degrees"}
{"db_id": "csu_1", "sub_sql": "where t2.year >= 1998 and t2.year <= 2002", "question": "report the total number of degrees granted between 1998 and 2002.", "sub_sql_type": "null col op op op value null col op value value", "sub_sql_new": "where year no less than 1998 and and t2.year <= 2002", "query": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus", "sub_ques": "granted between 1998 and 2002"}
{"db_id": "csu_1", "sub_sql": "select t1.campus , sum t2.degrees from campuses , degrees", "question": "how many degrees were conferred between 1998 and 2002?", "sub_sql_type": "null col null agg col col col null col", "sub_sql_new": "select campus , sum degrees from campuses , degrees", "query": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus", "sub_ques": "how many degrees"}
{"db_id": "csu_1", "sub_sql": "where t1.county = orange", "question": "For each Orange county campus, report the number of degrees granted after 2000.", "sub_sql_type": "null col op op value", "sub_sql_new": "where county equal to orange", "query": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  \\\\\\\"Orange\\\\\\\" AND T2.year  >=  2000 GROUP BY T1.campus", "sub_ques": "orange county"}
{"db_id": "csu_1", "sub_sql": "where t1.county = orange", "question": "What is the total number of degrees granted after 2000 for each Orange county campus?", "sub_sql_type": "null col op op value", "sub_sql_new": "where county equal to orange", "query": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  \\\\\\\"Orange\\\\\\\" AND T2.year  >=  2000 GROUP BY T1.campus", "sub_ques": "orange county"}
{"db_id": "csu_1", "sub_sql": "select t1.campus from campuses", "question": "Find the names of the campus which has more faculties in 2002 than every campus in Orange county.", "sub_sql_type": "null col col col", "sub_sql_new": "select campus from campuses", "query": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND faculty  >  (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND T1.county  =  \\\\\\\"Orange\\\\\\\")", "sub_ques": "find the names of the campus"}
{"db_id": "csu_1", "sub_sql": "select max faculty from faculty", "question": "Find the names of the campus which has more faculties in 2002 than every campus in Orange county.", "sub_sql_type": "null agg col col col", "sub_sql_new": "select max faculty from faculty", "query": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND faculty  >  (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND T1.county  =  \\\\\\\"Orange\\\\\\\")", "sub_ques": "the campus which has more faculties"}
{"db_id": "csu_1", "sub_sql": "select t1.campus from campuses", "question": "What are the names of the campus that have more faculties in 2002 than the maximum number in Orange county?", "sub_sql_type": "null col col col", "sub_sql_new": "select campus from campuses", "query": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND faculty  >  (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND T1.county  =  \\\\\\\"Orange\\\\\\\")", "sub_ques": "What are the names of the campus"}
{"db_id": "csu_1", "sub_sql": "faculty > select max faculty", "question": "What are the names of the campus that have more faculties in 2002 than the maximum number in Orange county?", "sub_sql_type": "null agg col", "sub_sql_new": "select max faculty", "query": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND faculty  >  (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND T1.county  =  \\\\\\\"Orange\\\\\\\")", "sub_ques": "that have more faculties than the maximum number"}
{"db_id": "csu_1", "sub_sql": "select t1.campus from campuses", "question": "What campus had more than 400 total enrollment but more than 200 full time enrollment in year 1956?", "sub_sql_type": "null col col col", "sub_sql_new": "select campus from campuses", "query": "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200", "sub_ques": "what campus"}
{"db_id": "csu_1", "sub_sql": "where t2.year = 1956", "question": "What campus had more than 400 total enrollment but more than 200 full time enrollment in year 1956?", "sub_sql_type": "null col op op value", "sub_sql_new": "where year equal to 1956", "query": "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200", "sub_ques": "in year 1956"}
{"db_id": "csu_1", "sub_sql": "select t1.campus from campuses", "question": "What campus started in year 1956, has more than 200 full time students, and more than 400 students enrolled?", "sub_sql_type": "null col col col", "sub_sql_new": "select campus from campuses", "query": "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200", "sub_ques": "what campus"}
{"db_id": "csu_1", "sub_sql": "where t2.year = 1956", "question": "What campus started in year 1956, has more than 200 full time students, and more than 400 students enrolled?", "sub_sql_type": "null col op op value", "sub_sql_new": "where year equal to 1956", "query": "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200", "sub_ques": "started in year 1956"}
{"db_id": "csu_1", "sub_sql": "select count campuses", "question": "How many campuses are there in Los Angeles county?", "sub_sql_type": "null agg col", "sub_sql_new": "select count campuses", "query": "SELECT count(*) FROM campuses WHERE county  =  \\\\\\\"Los Angeles\\\\\\\"", "sub_ques": "how many campuses"}
{"db_id": "csu_1", "sub_sql": "where county = losangeles", "question": "How many campuses are there in Los Angeles county?", "sub_sql_type": "null col op op value", "sub_sql_new": "where county equal to losangeles", "query": "SELECT count(*) FROM campuses WHERE county  =  \\\\\\\"Los Angeles\\\\\\\"", "sub_ques": "campuses are there in los angeles county"}
{"db_id": "csu_1", "sub_sql": "select count campuses", "question": "How many campuses exist are in the county of LA?", "sub_sql_type": "null agg col", "sub_sql_new": "select count campuses", "query": "SELECT count(*) FROM campuses WHERE county  =  \\\\\\\"Los Angeles\\\\\\\"", "sub_ques": "how many campuses"}
{"db_id": "csu_1", "sub_sql": "where county = losangeles", "question": "How many campuses exist are in the county of LA?", "sub_sql_type": "null col op op value", "sub_sql_new": "where county equal to losangeles", "query": "SELECT count(*) FROM campuses WHERE county  =  \\\\\\\"Los Angeles\\\\\\\"", "sub_ques": "campuses exist are in the county of la"}
{"db_id": "csu_1", "sub_sql": "select campus from campuses", "question": "List the campuses in Los Angeles county.", "sub_sql_type": "null col col col", "sub_sql_new": "select campus from campuses", "query": "SELECT campus FROM campuses WHERE county  =  \\\\\\\"Los Angeles\\\\\\\"", "sub_ques": "list the campuses"}
{"db_id": "csu_1", "sub_sql": "where county = losangeles", "question": "List the campuses in Los Angeles county.", "sub_sql_type": "null col op op value", "sub_sql_new": "where county equal to losangeles", "query": "SELECT campus FROM campuses WHERE county  =  \\\\\\\"Los Angeles\\\\\\\"", "sub_ques": "in los angeles county"}
{"db_id": "csu_1", "sub_sql": "select campus from campuses", "question": "What campuses are in Los Angeles county?", "sub_sql_type": "null col col col", "sub_sql_new": "select campus from campuses", "query": "SELECT campus FROM campuses WHERE county  =  \\\\\\\"Los Angeles\\\\\\\"", "sub_ques": "what campuses"}
{"db_id": "csu_1", "sub_sql": "where county = losangeles", "question": "What campuses are in Los Angeles county?", "sub_sql_type": "null col op op value", "sub_sql_new": "where county equal to losangeles", "query": "SELECT campus FROM campuses WHERE county  =  \\\\\\\"Los Angeles\\\\\\\"", "sub_ques": "in los angeles county"}
{"db_id": "csu_1", "sub_sql": "select degrees from degrees", "question": "How many degrees were conferred in \\\\\\\"San Jose State University\\\\\\\" in 2000?", "sub_sql_type": "null col col col", "sub_sql_new": "select degrees from degrees", "query": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \\\\\\\"San Jose State University\\\\\\\" AND t2.year  =  2000", "sub_ques": "how many degrees"}
{"db_id": "csu_1", "sub_sql": "where t1.campus = sanjosestateuniversity", "question": "How many degrees were conferred in \\\\\\\"San Jose State University\\\\\\\" in 2000?", "sub_sql_type": "null col op op value", "sub_sql_new": "where campus equal to sanjosestateuniversity", "query": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \\\\\\\"San Jose State University\\\\\\\" AND t2.year  =  2000", "sub_ques": "san jose state university"}
{"db_id": "csu_1", "sub_sql": "select degrees from degrees", "question": "How many degrees were conferred at San Jose State University in 2000?", "sub_sql_type": "null col col col", "sub_sql_new": "select degrees from degrees", "query": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \\\\\\\"San Jose State University\\\\\\\" AND t2.year  =  2000", "sub_ques": "how many degrees"}
{"db_id": "csu_1", "sub_sql": "where t1.campus = sanjosestateuniversity", "question": "How many degrees were conferred at San Jose State University in 2000?", "sub_sql_type": "null col op op value", "sub_sql_new": "where campus equal to sanjosestateuniversity", "query": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \\\\\\\"San Jose State University\\\\\\\" AND t2.year  =  2000", "sub_ques": "san jose state university"}
{"db_id": "csu_1", "sub_sql": "select degrees from degrees", "question": "What are the degrees conferred in \\\\\\\"San Francisco State University\\\\\\\" in 2001.", "sub_sql_type": "null col col col", "sub_sql_new": "select degrees from degrees", "query": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \\\\\\\"San Francisco State University\\\\\\\" AND t2.year  =  2001", "sub_ques": "what are the degrees"}
{"db_id": "csu_1", "sub_sql": "where t1.campus = sanfranciscostateuniversity", "question": "What are the degrees conferred in \\\\\\\"San Francisco State University\\\\\\\" in 2001.", "sub_sql_type": "null col op op value", "sub_sql_new": "where campus equal to sanfranciscostateuniversity", "query": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \\\\\\\"San Francisco State University\\\\\\\" AND t2.year  =  2001", "sub_ques": "san francisco state university"}
{"db_id": "csu_1", "sub_sql": "select degrees from degrees", "question": "What degrees were conferred in San Francisco State University in the year 2001?", "sub_sql_type": "null col col col", "sub_sql_new": "select degrees from degrees", "query": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \\\\\\\"San Francisco State University\\\\\\\" AND t2.year  =  2001", "sub_ques": "what degrees"}
{"db_id": "csu_1", "sub_sql": "where t1.campus = sanfranciscostateuniversity", "question": "What degrees were conferred in San Francisco State University in the year 2001?", "sub_sql_type": "null col op op value", "sub_sql_new": "where campus equal to sanfranciscostateuniversity", "query": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \\\\\\\"San Francisco State University\\\\\\\" AND t2.year  =  2001", "sub_ques": "san francisco state university"}
{"db_id": "csu_1", "sub_sql": "select sum faculty from faculty", "question": "How many faculty is there in total in the year of 2002?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select sum faculty from faculty", "query": "SELECT sum(faculty) FROM faculty WHERE YEAR  =  2002", "sub_ques": "how many faculty is there in total"}
{"db_id": "csu_1", "sub_sql": "where year = 2002", "question": "How many faculty is there in total in the year of 2002?", "sub_sql_type": "null col op op value", "sub_sql_new": "where year equal to 2002", "query": "SELECT sum(faculty) FROM faculty WHERE YEAR  =  2002", "sub_ques": "in the year of 2002"}
{"db_id": "csu_1", "sub_sql": "select sum faculty from faculty", "question": "How many faculty, in total, are there in the year 2002?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select sum faculty from faculty", "query": "SELECT sum(faculty) FROM faculty WHERE YEAR  =  2002", "sub_ques": "how many faculty , in total"}
{"db_id": "csu_1", "sub_sql": "where year = 2002", "question": "How many faculty, in total, are there in the year 2002?", "sub_sql_type": "null col op op value", "sub_sql_new": "where year equal to 2002", "query": "SELECT sum(faculty) FROM faculty WHERE YEAR  =  2002", "sub_ques": "in the year 2002"}
{"db_id": "csu_1", "sub_sql": "select faculty from faculty", "question": "What is the number of faculty lines in campus \\\\\\\"Long Beach State University\\\\\\\" in 2002?", "sub_sql_type": "null col col col", "sub_sql_new": "select faculty from faculty", "query": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \\\\\\\"Long Beach State University\\\\\\\"", "sub_ques": "What is the number of faculty lines"}
{"db_id": "csu_1", "sub_sql": "select faculty from faculty", "question": "What is the number of faculty at Long Beach State University in 2002?", "sub_sql_type": "null col col col", "sub_sql_new": "select faculty from faculty", "query": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \\\\\\\"Long Beach State University\\\\\\\"", "sub_ques": "What is the number of faculty"}
{"db_id": "csu_1", "sub_sql": "select faculty from faculty", "question": "How many faculty lines are there in \\\\\\\"San Francisco State University\\\\\\\" in year 2004?", "sub_sql_type": "null col col col", "sub_sql_new": "select faculty from faculty", "query": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  \\\\\\\"San Francisco State University\\\\\\\"", "sub_ques": "how many faculty lines"}
{"db_id": "csu_1", "sub_sql": "where t1.year = 2004", "question": "How many faculty lines are there in \\\\\\\"San Francisco State University\\\\\\\" in year 2004?", "sub_sql_type": "null col op op value", "sub_sql_new": "where year equal to 2004", "query": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  \\\\\\\"San Francisco State University\\\\\\\"", "sub_ques": "in year 2004"}
{"db_id": "csu_1", "sub_sql": "select faculty from faculty", "question": "How many faculty lines are there at San Francisco State University in 2004?", "sub_sql_type": "null col col col", "sub_sql_new": "select faculty from faculty", "query": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  \\\\\\\"San Francisco State University\\\\\\\"", "sub_ques": "how many faculty lines"}
{"db_id": "csu_1", "sub_sql": "select t1.campus from campuses", "question": "List the campus that have between 600 and 1000 faculty lines in year 2004.", "sub_sql_type": "null col col col", "sub_sql_new": "select campus from campuses", "query": "SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND T1.year  =  2004", "sub_ques": "list the campus"}
{"db_id": "csu_1", "sub_sql": "where t2.faculty >= 600 and t2.faculty <= 1000", "question": "List the campus that have between 600 and 1000 faculty lines in year 2004.", "sub_sql_type": "null col op op op value null col op value value", "sub_sql_new": "where faculty no less than 600 and and t2.faculty <= 1000", "query": "SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND T1.year  =  2004", "sub_ques": "campus that have between 600 and 1000 faculty"}
{"db_id": "csu_1", "sub_sql": "select t1.campus from campuses", "question": "What are the campuses that had between 600 and 1000 faculty members in 2004?", "sub_sql_type": "null col col col", "sub_sql_new": "select campus from campuses", "query": "SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND T1.year  =  2004", "sub_ques": "what are the campuses"}
{"db_id": "csu_1", "sub_sql": "where t2.faculty >= 600 and t2.faculty <= 1000", "question": "What are the campuses that had between 600 and 1000 faculty members in 2004?", "sub_sql_type": "null col op op op value null col op value value", "sub_sql_new": "where faculty no less than 600 and and t2.faculty <= 1000", "query": "SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND T1.year  =  2004", "sub_ques": "campuses that had between 600 and 1000 faculty members"}
{"db_id": "csu_1", "sub_sql": "select t2.faculty from faculty", "question": "How many faculty lines are there in the university that conferred the most number of degrees in year 2002?", "sub_sql_type": "null col col col", "sub_sql_new": "select faculty from faculty", "query": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1", "sub_ques": "how many faculty lines are there"}
{"db_id": "csu_1", "sub_sql": "order by t3.degrees desc limit 1", "question": "How many faculty lines are there in the university that conferred the most number of degrees in year 2002?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by degrees desc limit 1", "query": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1", "sub_ques": "university that conferred the most number of degrees"}
{"db_id": "csu_1", "sub_sql": "select t2.faculty from faculty", "question": "How many faculty members did the university that conferred the most degrees in 2002 have?", "sub_sql_type": "null col col col", "sub_sql_new": "select faculty from faculty", "query": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1", "sub_ques": "how many faculty members"}
{"db_id": "csu_1", "sub_sql": "order by t3.degrees desc limit 1", "question": "How many faculty members did the university that conferred the most degrees in 2002 have?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by degrees desc limit 1", "query": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1", "sub_ques": "the university that conferred the most degrees"}
{"db_id": "csu_1", "sub_sql": "select t2.faculty from faculty", "question": "How many faculty lines are there in the university that conferred the least number of degrees in year 2001?", "sub_sql_type": "null col col col", "sub_sql_new": "select faculty from faculty", "query": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1", "sub_ques": "how many faculty lines"}
{"db_id": "csu_1", "sub_sql": "where t2.year = 2001", "question": "How many faculty lines are there in the university that conferred the least number of degrees in year 2001?", "sub_sql_type": "null col op op value", "sub_sql_new": "where year equal to 2001", "query": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1", "sub_ques": "in year 2001"}
{"db_id": "csu_1", "sub_sql": "order by t3.degrees limit 1", "question": "How many faculty lines are there in the university that conferred the least number of degrees in year 2001?", "sub_sql_type": "null null col null limv", "sub_sql_new": "order by degrees limit 1", "query": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1", "sub_ques": "the university that conferred the least number of degrees"}
{"db_id": "csu_1", "sub_sql": "select t2.faculty from faculty", "question": "How many faculty members are at the university that gave the least number of degrees in 2001?", "sub_sql_type": "null col col col", "sub_sql_new": "select faculty from faculty", "query": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1", "sub_ques": "how many faculty members"}
{"db_id": "csu_1", "sub_sql": "order by t3.degrees limit 1", "question": "How many faculty members are at the university that gave the least number of degrees in 2001?", "sub_sql_type": "null null col null limv", "sub_sql_new": "order by degrees limit 1", "query": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1", "sub_ques": "the university that gave the least number of degrees"}
{"db_id": "csu_1", "sub_sql": "select sum t1.undergraduate from discipline_enrollments", "question": "How many undergraduates are there in \\\\\\\"San Jose State University\\\\\\\" in year 2004?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select sum undergraduate from discipline_enrollments", "query": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \\\\\\\"San Jose State University\\\\\\\"", "sub_ques": "how many undergraduates"}
{"db_id": "csu_1", "sub_sql": "where t1.year = 2004", "question": "How many undergraduates are there in \\\\\\\"San Jose State University\\\\\\\" in year 2004?", "sub_sql_type": "null col op op value", "sub_sql_new": "where year equal to 2004", "query": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \\\\\\\"San Jose State University\\\\\\\"", "sub_ques": "in year 2004"}
{"db_id": "csu_1", "sub_sql": "select sum t1.undergraduate from discipline_enrollments", "question": "How many undergraduates are there at San Jose State", "sub_sql_type": "null agg col col col", "sub_sql_new": "select sum undergraduate from discipline_enrollments", "query": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \\\\\\\"San Jose State University\\\\\\\"", "sub_ques": "how many undergraduates"}
{"db_id": "csu_1", "sub_sql": "select sum t1.graduate from discipline_enrollments", "question": "What is the number of graduates in \\\\\\\"San Francisco State University\\\\\\\" in year 2004?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select sum graduate from discipline_enrollments", "query": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \\\\\\\"San Francisco State University\\\\\\\"", "sub_ques": "what is the number of graduates"}
{"db_id": "csu_1", "sub_sql": "select sum t1.graduate from discipline_enrollments", "question": "How many people graduated from San Francisco State University in 2004?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select sum graduate from discipline_enrollments", "query": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \\\\\\\"San Francisco State University\\\\\\\"", "sub_ques": "how many people graduated"}
{"db_id": "csu_1", "sub_sql": "select t1.campusfee from csu_fees", "question": "What is the campus fee of \\\\\\\"San Francisco State University\\\\\\\" in year 2000?", "sub_sql_type": "null col col col", "sub_sql_new": "select campusfee from csu_fees", "query": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \\\\\\\"San Francisco State University\\\\\\\" AND t1.year  =  2000", "sub_ques": "what is the campus fee"}
{"db_id": "csu_1", "sub_sql": "where t2.campus = sanfranciscostateuniversity", "question": "What is the campus fee of \\\\\\\"San Francisco State University\\\\\\\" in year 2000?", "sub_sql_type": "null col op op value", "sub_sql_new": "where campus equal to sanfranciscostateuniversity", "query": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \\\\\\\"San Francisco State University\\\\\\\" AND t1.year  =  2000", "sub_ques": "san francisco state university"}
{"db_id": "csu_1", "sub_sql": "select t1.campusfee from csu_fees", "question": "In the year 2000, what is the campus fee for San Francisco State University?", "sub_sql_type": "null col col col", "sub_sql_new": "select campusfee from csu_fees", "query": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \\\\\\\"San Francisco State University\\\\\\\" AND t1.year  =  2000", "sub_ques": "what is the campus fee"}
{"db_id": "csu_1", "sub_sql": "where t2.campus = sanfranciscostateuniversity", "question": "In the year 2000, what is the campus fee for San Francisco State University?", "sub_sql_type": "null col op op value", "sub_sql_new": "where campus equal to sanfranciscostateuniversity", "query": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \\\\\\\"San Francisco State University\\\\\\\" AND t1.year  =  2000", "sub_ques": "san francisco state university"}
{"db_id": "csu_1", "sub_sql": "select t1.campusfee from csu_fees", "question": "Find the campus fee of \\\\\\\"San Jose State University\\\\\\\" in year 2000.", "sub_sql_type": "null col col col", "sub_sql_new": "select campusfee from csu_fees", "query": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \\\\\\\"San Jose State University\\\\\\\" AND t1.year  =  2000", "sub_ques": "find the campus fee"}
{"db_id": "csu_1", "sub_sql": "where t2.campus = sanjosestateuniversity", "question": "Find the campus fee of \\\\\\\"San Jose State University\\\\\\\" in year 2000.", "sub_sql_type": "null col op op value", "sub_sql_new": "where campus equal to sanjosestateuniversity", "query": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \\\\\\\"San Jose State University\\\\\\\" AND t1.year  =  2000", "sub_ques": "san jose state university"}
{"db_id": "csu_1", "sub_sql": "select t1.campusfee from csu_fees", "question": "What is the campus fee in the year 2000 for San Jose State University?", "sub_sql_type": "null col col col", "sub_sql_new": "select campusfee from csu_fees", "query": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \\\\\\\"San Jose State University\\\\\\\" AND t1.year  =  2000", "sub_ques": "what is the campus fee"}
{"db_id": "csu_1", "sub_sql": "where t2.campus = sanjosestateuniversity", "question": "What is the campus fee in the year 2000 for San Jose State University?", "sub_sql_type": "null col op op value", "sub_sql_new": "where campus equal to sanjosestateuniversity", "query": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \\\\\\\"San Jose State University\\\\\\\" AND t1.year  =  2000", "sub_ques": "san jose state university"}
{"db_id": "csu_1", "sub_sql": "select count campuses", "question": "How many CSU campuses are there?", "sub_sql_type": "null agg col", "sub_sql_new": "select count campuses", "query": "SELECT count(*) FROM campuses", "sub_ques": "how many csu campuses"}
{"db_id": "csu_1", "sub_sql": "select count campuses", "question": "What is the total number of campuses?", "sub_sql_type": "null agg col", "sub_sql_new": "select count campuses", "query": "SELECT count(*) FROM campuses", "sub_ques": "what is the total number of campuses"}
{"db_id": "candidate_poll", "sub_sql": "select count candidate", "question": "How many candidates are there?", "sub_sql_type": "null agg col", "sub_sql_new": "select count candidate", "query": "SELECT count(*) FROM candidate", "sub_ques": "how many candidates"}
{"db_id": "candidate_poll", "sub_sql": "select count candidate", "question": "Count the number of candidates.", "sub_sql_type": "null agg col", "sub_sql_new": "select count candidate", "query": "SELECT count(*) FROM candidate", "sub_ques": "count the number of candidates"}
{"db_id": "candidate_poll", "sub_sql": "group by poll_source order by count candidate desc limit 1", "question": "Which poll resource provided the most number of candidate information?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count candidate desc limit 1", "query": "SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY count(*) DESC LIMIT 1", "sub_ques": "poll resource provided the most number of candidate"}
{"db_id": "candidate_poll", "sub_sql": "select poll_source from candidate", "question": "Return the poll resource associated with the most candidates.", "sub_sql_type": "null col col col", "sub_sql_new": "select poll_source from candidate", "query": "SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY count(*) DESC LIMIT 1", "sub_ques": "return the poll resource"}
{"db_id": "candidate_poll", "sub_sql": "group by poll_source order by count candidate desc limit 1", "question": "Return the poll resource associated with the most candidates.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count candidate desc limit 1", "query": "SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the poll resource associated with the most candidates"}
{"db_id": "candidate_poll", "sub_sql": "select support_rate from candidate", "question": "what are the top 3 highest support rates?", "sub_sql_type": "null col col col", "sub_sql_new": "select support_rate from candidate", "query": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3", "sub_ques": "what are the support rates"}
{"db_id": "candidate_poll", "sub_sql": "order by support_rate desc limit 3", "question": "what are the top 3 highest support rates?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by support_rate desc limit 3", "query": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3", "sub_ques": "the top 3 highest support rates"}
{"db_id": "candidate_poll", "sub_sql": "select support_rate from candidate", "question": "Return the top 3 greatest support rates.", "sub_sql_type": "null col col col", "sub_sql_new": "select support_rate from candidate", "query": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3", "sub_ques": "return the support rates"}
{"db_id": "candidate_poll", "sub_sql": "order by support_rate desc limit 3", "question": "Return the top 3 greatest support rates.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by support_rate desc limit 3", "query": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3", "sub_ques": "the top 3 greatest support rates"}
{"db_id": "candidate_poll", "sub_sql": "select candidate_id from candidate", "question": "Find the id of the candidate who got the lowest oppose rate.", "sub_sql_type": "null col col col", "sub_sql_new": "select candidate_id from candidate", "query": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1", "sub_ques": "find the id of the candidate"}
{"db_id": "candidate_poll", "sub_sql": "order by oppose_rate limit 1", "question": "Find the id of the candidate who got the lowest oppose rate.", "sub_sql_type": "null null col null limv", "sub_sql_new": "order by oppose_rate limit 1", "query": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1", "sub_ques": "the lowest oppose rate"}
{"db_id": "candidate_poll", "sub_sql": "select candidate_id from candidate", "question": "What is the id of the candidate with the lowest oppose rate?", "sub_sql_type": "null col col col", "sub_sql_new": "select candidate_id from candidate", "query": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1", "sub_ques": "what is the id of the candidate"}
{"db_id": "candidate_poll", "sub_sql": "order by oppose_rate limit 1", "question": "What is the id of the candidate with the lowest oppose rate?", "sub_sql_type": "null null col null limv", "sub_sql_new": "order by oppose_rate limit 1", "query": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1", "sub_ques": "the lowest oppose rate"}
{"db_id": "candidate_poll", "sub_sql": "select support_rate , consider_rate , oppose_rate from candidate", "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.", "sub_sql_type": "null col null col null col col col", "sub_sql_new": "select support_rate , consider_rate , oppose_rate from candidate", "query": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate", "sub_ques": "list support , consider , and oppose rates for each candidate"}
{"db_id": "candidate_poll", "sub_sql": "order by unsure_rate", "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.", "sub_sql_type": "null null col", "sub_sql_new": "order by unsure_rate", "query": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate", "sub_ques": "order by unsure rate"}
{"db_id": "candidate_poll", "sub_sql": "select support_rate , consider_rate , oppose_rate from candidate", "question": "What are the support, consider, and oppose rates of each candidate, ordered ascending by their unsure rate?", "sub_sql_type": "null col null col null col col col", "sub_sql_new": "select support_rate , consider_rate , oppose_rate from candidate", "query": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate", "sub_ques": "what are the support , consider , and oppose rates of each candidate"}
{"db_id": "candidate_poll", "sub_sql": "order by unsure_rate", "question": "What are the support, consider, and oppose rates of each candidate, ordered ascending by their unsure rate?", "sub_sql_type": "null null col", "sub_sql_new": "order by unsure_rate", "query": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate", "sub_ques": "ordered ascending by their unsure rate"}
{"db_id": "candidate_poll", "sub_sql": "order by oppose_rate desc limit 1", "question": "which poll source does the highest oppose rate come from?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by oppose_rate desc limit 1", "query": "SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1", "sub_ques": "the highest oppose rate"}
{"db_id": "candidate_poll", "sub_sql": "select poll_source from candidate", "question": "Return the poll source corresponding to the candidate who has the oppose rate.", "sub_sql_type": "null col col col", "sub_sql_new": "select poll_source from candidate", "query": "SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1", "sub_ques": "return the poll source corresponding to the candidate"}
{"db_id": "candidate_poll", "sub_sql": "select name from people", "question": "List all people names in the order of their date of birth from old to young.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from people", "query": "SELECT name FROM people ORDER BY date_of_birth", "sub_ques": "list all people names"}
{"db_id": "candidate_poll", "sub_sql": "order by date_of_birth", "question": "List all people names in the order of their date of birth from old to young.", "sub_sql_type": "null null col", "sub_sql_new": "order by date_of_birth", "query": "SELECT name FROM people ORDER BY date_of_birth", "sub_ques": "in the order of their date of birth from old to young"}
{"db_id": "candidate_poll", "sub_sql": "select name from people", "question": "What are the names of all people, ordered by their date of birth?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from people", "query": "SELECT name FROM people ORDER BY date_of_birth", "sub_ques": "what are the names of all people"}
{"db_id": "candidate_poll", "sub_sql": "order by date_of_birth", "question": "What are the names of all people, ordered by their date of birth?", "sub_sql_type": "null null col", "sub_sql_new": "order by date_of_birth", "query": "SELECT name FROM people ORDER BY date_of_birth", "sub_ques": "ordered by their date of birth"}
{"db_id": "candidate_poll", "sub_sql": "select avg height , avg weight from people", "question": "Find the average height and weight for all males (sex is M).", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select avg height , avg weight from people", "query": "SELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  'M'", "sub_ques": "Find the average height and weight"}
{"db_id": "candidate_poll", "sub_sql": "where sex = m", "question": "Find the average height and weight for all males (sex is M).", "sub_sql_type": "null col op op value", "sub_sql_new": "where sex equal to m", "query": "SELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  'M'", "sub_ques": "all males , sex is m"}
{"db_id": "candidate_poll", "sub_sql": "select avg height , avg weight from people", "question": "What are the average height and weight across males (sex is M)?", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select avg height , avg weight from people", "query": "SELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  'M'", "sub_ques": "what are the average height and weight"}
{"db_id": "candidate_poll", "sub_sql": "where sex = m", "question": "What are the average height and weight across males (sex is M)?", "sub_sql_type": "null col op op value", "sub_sql_new": "where sex equal to m", "query": "SELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  'M'", "sub_ques": "males sex is m"}
{"db_id": "candidate_poll", "sub_sql": "select name from people", "question": "find the names of people who are taller than 200 or lower than 190.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from people", "query": "SELECT name FROM people WHERE height  >  200 OR height  <  190", "sub_ques": "find the names of people"}
{"db_id": "candidate_poll", "sub_sql": "where height > 200 or height < 190", "question": "find the names of people who are taller than 200 or lower than 190.", "sub_sql_type": "null col op op value null col op value value", "sub_sql_new": "where height more than 200 or or height < 190", "query": "SELECT name FROM people WHERE height  >  200 OR height  <  190", "sub_ques": "people who are taller than 200 or lower than 190"}
{"db_id": "candidate_poll", "sub_sql": "select name from people", "question": "What are the names of people who have a height greater than 200 or less than 190?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from people", "query": "SELECT name FROM people WHERE height  >  200 OR height  <  190", "sub_ques": "what are the names of people"}
{"db_id": "candidate_poll", "sub_sql": "where height > 200", "question": "What are the names of people who have a height greater than 200 or less than 190?", "sub_sql_type": "null col op op value", "sub_sql_new": "where height more than 200", "query": "SELECT name FROM people WHERE height  >  200 OR height  <  190", "sub_ques": "people who have a height greater than 200"}
{"db_id": "candidate_poll", "sub_sql": "select avg weight , min weight , sex from people", "question": "Find the average and minimum weight for each gender.", "sub_sql_type": "null agg col null agg col null col col col", "sub_sql_new": "select avg weight , min weight , sex from people", "query": "SELECT avg(weight) ,  min(weight) ,  sex FROM people GROUP BY sex", "sub_ques": "find the average and minimum weight for each gender"}
{"db_id": "candidate_poll", "sub_sql": "select avg weight , min weight , sex from people", "question": "What are the average and minimum weights for people of each sex?", "sub_sql_type": "null agg col null agg col null col col col", "sub_sql_new": "select avg weight , min weight , sex from people", "query": "SELECT avg(weight) ,  min(weight) ,  sex FROM people GROUP BY sex", "sub_ques": "what are the average and minimum weights for people of each sex"}
{"db_id": "candidate_poll", "sub_sql": "select t1.name , t1.sex from people", "question": "Find the name and gender of the candidate who got the highest support rate.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , sex from people", "query": "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1", "sub_ques": "Find the name and gender of the candidate"}
{"db_id": "candidate_poll", "sub_sql": "order by t2.support_rate desc limit 1", "question": "Find the name and gender of the candidate who got the highest support rate.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by support_rate desc limit 1", "query": "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1", "sub_ques": "the highest support rate"}
{"db_id": "candidate_poll", "sub_sql": "select t1.name , t1.sex from people", "question": "What is the name and sex of the candidate with the highest support rate?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , sex from people", "query": "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1", "sub_ques": "what is the name and sex of the candidate"}
{"db_id": "candidate_poll", "sub_sql": "order by t2.support_rate desc limit 1", "question": "What is the name and sex of the candidate with the highest support rate?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by support_rate desc limit 1", "query": "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1", "sub_ques": "candidate with the highest support rate"}
{"db_id": "candidate_poll", "sub_sql": "select t1.name , t1.sex , min oppose_rate from people , candidate", "question": "Find the name of the candidates whose oppose percentage is the lowest for each sex.", "sub_sql_type": "null col null col null agg col col col null col", "sub_sql_new": "select name , sex , min oppose_rate from people , candidate", "query": "SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex", "sub_ques": "find the name of the candidates whose oppose percentage is the lowest for each sex"}
{"db_id": "candidate_poll", "sub_sql": "group by t1.sex order by avg t2.unsure_rate desc limit 1", "question": "which gender got the highest average uncertain ratio.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by avg unsure_rate desc limit 1", "query": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1", "sub_ques": "gender got the highest average uncertain ratio"}
{"db_id": "candidate_poll", "sub_sql": "select t1.sex from people", "question": "What is the sex of the candidate who had the highest unsure rate?", "sub_sql_type": "null col col col", "sub_sql_new": "select sex from people", "query": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY t2.unsure_rate DESC LIMIT 1", "sub_ques": "what is the sex of the candidate"}
{"db_id": "candidate_poll", "sub_sql": "group by t1.sex order by t2.unsure_rate desc limit 1", "question": "What is the sex of the candidate who had the highest unsure rate?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by unsure_rate desc limit 1", "query": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY t2.unsure_rate DESC LIMIT 1", "sub_ques": "the sex of the candidate who had the highest unsure rate"}
{"db_id": "candidate_poll", "sub_sql": "select name from people", "question": "what are the names of people who did not participate in the candidate election.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from people", "query": "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM candidate)", "sub_ques": "what are the names of people"}
{"db_id": "candidate_poll", "sub_sql": "peolp not in candidate", "question": "what are the names of people who did not participate in the candidate election.", "sub_sql_type": "op op tab", "sub_sql_new": "peolp tab not in candidate", "query": "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM candidate)", "sub_ques": "people who did not participate in the candidate"}
{"db_id": "candidate_poll", "sub_sql": "select name from people", "question": "Give the names of people who did not participate in the candidate election.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from people", "query": "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM candidate)", "sub_ques": "give the names of people"}
{"db_id": "candidate_poll", "sub_sql": "people not in candidate", "question": "Give the names of people who did not participate in the candidate election.", "sub_sql_type": "tab op op tab", "sub_sql_new": "people not in candidate", "query": "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM candidate)", "sub_ques": "people who did not participate in the candidate"}
{"db_id": "candidate_poll", "sub_sql": "select t1.name from people", "question": "Find the names of the candidates whose support percentage is lower than their oppose rate.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from people", "query": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate", "sub_ques": "Find the names of the candidates"}
{"db_id": "candidate_poll", "sub_sql": "where t2.support_rate < t2.oppose_rate", "question": "Find the names of the candidates whose support percentage is lower than their oppose rate.", "sub_sql_type": "null col op op value", "sub_sql_new": "where support_rate less than t2.oppose_rate", "query": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate", "sub_ques": "candidates whose support percentage is lower than their oppose rate"}
{"db_id": "candidate_poll", "sub_sql": "select t1.name from people", "question": "What are the names of candidates who have a lower support rate than oppose rate?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from people", "query": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate", "sub_ques": "what are the names of candidates"}
{"db_id": "candidate_poll", "sub_sql": "where t2.support_rate < t2.oppose_rate", "question": "What are the names of candidates who have a lower support rate than oppose rate?", "sub_sql_type": "null col op op value", "sub_sql_new": "where support_rate less than t2.oppose_rate", "query": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate", "sub_ques": "candidates who have a lower support rate than oppose rate"}
{"db_id": "candidate_poll", "sub_sql": "select count people , sex group by sex", "question": "how many people are there whose weight is higher than 85 for each gender?", "sub_sql_type": "null agg col null col", "sub_sql_new": "select count people , sex", "query": "SELECT count(*) ,  sex FROM people WHERE weight  >  85 GROUP BY sex", "sub_ques": "how many people are there whose weight is higher than 85 for each gender"}
{"db_id": "candidate_poll", "sub_sql": "where weight > 85", "question": "how many people are there whose weight is higher than 85 for each gender?", "sub_sql_type": "null col op op value", "sub_sql_new": "where weight more than 85", "query": "SELECT count(*) ,  sex FROM people WHERE weight  >  85 GROUP BY sex", "sub_ques": "people whose weight is higher than 85"}
{"db_id": "candidate_poll", "sub_sql": "select count people , sex group by sex", "question": "Count the number of people of each sex who have a weight higher than 85.", "sub_sql_type": "null agg col null col", "sub_sql_new": "select count people , sex", "query": "SELECT count(*) ,  sex FROM people WHERE weight  >  85 GROUP BY sex", "sub_ques": "count the number of people of each sex who have"}
{"db_id": "candidate_poll", "sub_sql": "where weight > 85", "question": "Count the number of people of each sex who have a weight higher than 85.", "sub_sql_type": "null col op op value", "sub_sql_new": "where weight more than 85", "query": "SELECT count(*) ,  sex FROM people WHERE weight  >  85 GROUP BY sex", "sub_ques": "who have a weight higher than 85"}
{"db_id": "candidate_poll", "sub_sql": "select max support_rate , min consider_rate , min oppose_rate from candidate", "question": "find the highest support percentage, lowest consider rate and oppose rate of all candidates.", "sub_sql_type": "null agg col null agg col null agg col col col", "sub_sql_new": "select max support_rate , min consider_rate , min oppose_rate from candidate", "query": "SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate", "sub_ques": "find the highest support percentage , lowest consider rate and oppose rate of all candidates"}
{"db_id": "candidate_poll", "sub_sql": "select max support_rate , min consider_rate , min oppose_rate from candidate", "question": "Return the maximum support rate, minimum consider rate, and minimum oppose rate across all candidates?", "sub_sql_type": "null agg col null agg col null agg col col col", "sub_sql_new": "select max support_rate , min consider_rate , min oppose_rate from candidate", "query": "SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate", "sub_ques": "return the maximum support rate , minimum consider rate , and minimum oppose rate across all candidates"}
{"db_id": "candidate_poll", "sub_sql": "where t1.sex = f", "question": "list all female (sex is F) candidate names in the alphabetical order.", "sub_sql_type": "null col op op value", "sub_sql_new": "where sex equal to f", "query": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name", "sub_ques": "female ( sex is f"}
{"db_id": "candidate_poll", "sub_sql": "order by t1.name", "question": "list all female (sex is F) candidate names in the alphabetical order.", "sub_sql_type": "null null col", "sub_sql_new": "order by name", "query": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name", "sub_ques": "names in the alphabetical order"}
{"db_id": "candidate_poll", "sub_sql": "select t1.name from people", "question": "What are the names of all female candidates in alphabetical order (sex is F)?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from people", "query": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name", "sub_ques": "what are the names of all candidates"}
{"db_id": "candidate_poll", "sub_sql": "where t1.sex = f", "question": "What are the names of all female candidates in alphabetical order (sex is F)?", "sub_sql_type": "null col op op value", "sub_sql_new": "where sex equal to f", "query": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name", "sub_ques": "female candidates"}
{"db_id": "candidate_poll", "sub_sql": "order by t1.name", "question": "What are the names of all female candidates in alphabetical order (sex is F)?", "sub_sql_type": "null null col", "sub_sql_new": "order by name", "query": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name", "sub_ques": "the names in alphabetical order"}
{"db_id": "candidate_poll", "sub_sql": "select name from people", "question": "find the name of people whose height is lower than the average.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from people", "query": "SELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people)", "sub_ques": "find the name of people"}
{"db_id": "candidate_poll", "sub_sql": "where height < select avg height", "question": "find the name of people whose height is lower than the average.", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where height less than select avg height", "query": "SELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people)", "sub_ques": "height is lower than the average"}
{"db_id": "candidate_poll", "sub_sql": "select name from people", "question": "What are the names of people who are shorter than average?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from people", "query": "SELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people)", "sub_ques": "what are the names of people"}
{"db_id": "candidate_poll", "sub_sql": "where height < select avg height", "question": "What are the names of people who are shorter than average?", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where height less than select avg height", "query": "SELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people)", "sub_ques": "who are shorter than average"}
{"db_id": "movie_1", "sub_sql": "select title from movie", "question": "Find the titles of all movies directed by steven spielberg.", "sub_sql_type": "null col col col", "sub_sql_new": "select title from movie", "query": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'", "sub_ques": "find the titles of all movies"}
{"db_id": "movie_1", "sub_sql": "where director = stevenspielberg", "question": "Find the titles of all movies directed by steven spielberg.", "sub_sql_type": "null col op op value", "sub_sql_new": "where director equal to stevenspielberg", "query": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'", "sub_ques": "movies directed by steven spielberg"}
{"db_id": "movie_1", "sub_sql": "select title from movie", "question": "What are the names of all movies directed by Steven Spielberg?", "sub_sql_type": "null col col col", "sub_sql_new": "select title from movie", "query": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'", "sub_ques": "what are the names of all movies"}
{"db_id": "movie_1", "sub_sql": "where director = stevenspielberg", "question": "What are the names of all movies directed by Steven Spielberg?", "sub_sql_type": "null col op op value", "sub_sql_new": "where director equal to stevenspielberg", "query": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'", "sub_ques": "movies directed by Steven Spielberg"}
{"db_id": "movie_1", "sub_sql": "select title from movie", "question": "What is the name of the movie produced after 2000 and directed by James Cameron?", "sub_sql_type": "null col col col", "sub_sql_new": "select title from movie", "query": "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000", "sub_ques": "what is the name of the movie"}
{"db_id": "movie_1", "sub_sql": "where director = jamescameron and year > 2000", "question": "What is the name of the movie produced after 2000 and directed by James Cameron?", "sub_sql_type": "null col op op value null col op value value", "sub_sql_new": "where director equal to jamescameron and and year > 2000", "query": "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000", "sub_ques": "movie produced after 2000 and directed by James Cameron"}
{"db_id": "movie_1", "sub_sql": "select title from movie", "question": "What are the titles of all movies that James Cameron directed after 2000?", "sub_sql_type": "null col col col", "sub_sql_new": "select title from movie", "query": "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000", "sub_ques": "what are the titles of all movies"}
{"db_id": "movie_1", "sub_sql": "where director = jamescameron and year > 2000", "question": "What are the titles of all movies that James Cameron directed after 2000?", "sub_sql_type": "null col op op value null col op value value", "sub_sql_new": "where director equal to jamescameron and and year > 2000", "query": "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000", "sub_ques": "movies that james cameron directed after 2000"}
{"db_id": "movie_1", "sub_sql": "select count movie", "question": "How many movies were made before 2000?", "sub_sql_type": "null agg col", "sub_sql_new": "select count movie", "query": "SELECT count(*) FROM Movie WHERE YEAR  <  2000", "sub_ques": "how many movies"}
{"db_id": "movie_1", "sub_sql": "where year < 2000", "question": "How many movies were made before 2000?", "sub_sql_type": "null col op op value", "sub_sql_new": "where year less than 2000", "query": "SELECT count(*) FROM Movie WHERE YEAR  <  2000", "sub_ques": "movies were made before 2000"}
{"db_id": "movie_1", "sub_sql": "select count movie", "question": "How many movies were made before 2000?", "sub_sql_type": "null agg col", "sub_sql_new": "select count movie", "query": "SELECT count(*) FROM Movie WHERE YEAR  <  2000", "sub_ques": "how many movies"}
{"db_id": "movie_1", "sub_sql": "where year < 2000", "question": "How many movies were made before 2000?", "sub_sql_type": "null col op op value", "sub_sql_new": "where year less than 2000", "query": "SELECT count(*) FROM Movie WHERE YEAR  <  2000", "sub_ques": "movies were made before 2000"}
{"db_id": "movie_1", "sub_sql": "select director from movie", "question": "Who is the director of movie Avatar?", "sub_sql_type": "null col col col", "sub_sql_new": "select director from movie", "query": "SELECT director FROM Movie WHERE title  = 'Avatar'", "sub_ques": "who is the director of movie"}
{"db_id": "movie_1", "sub_sql": "where title = avatar", "question": "Who is the director of movie Avatar?", "sub_sql_type": "null col op op value", "sub_sql_new": "where title equal to avatar", "query": "SELECT director FROM Movie WHERE title  = 'Avatar'", "sub_ques": "movie avatar"}
{"db_id": "movie_1", "sub_sql": "select director from movie", "question": "Who directed Avatar?", "sub_sql_type": "null col col col", "sub_sql_new": "select director from movie", "query": "SELECT director FROM Movie WHERE title  = 'Avatar'", "sub_ques": "who directed"}
{"db_id": "movie_1", "sub_sql": "select count reviewer", "question": "How many reviewers listed?", "sub_sql_type": "null agg col", "sub_sql_new": "select count reviewer", "query": "SELECT count(*) FROM Reviewer", "sub_ques": "how many reviewers"}
{"db_id": "movie_1", "sub_sql": "select count reviewer", "question": "How many reviewers are there?", "sub_sql_type": "null agg col", "sub_sql_new": "select count reviewer", "query": "SELECT count(*) FROM Reviewer", "sub_ques": "how many reviewers"}
{"db_id": "movie_1", "sub_sql": "select rid from reviewer", "question": "What is the id of the reviewer whose name has substring \\\\u201cMike\\\\u201d?", "sub_sql_type": "null col col col", "sub_sql_new": "select rid from reviewer", "query": "SELECT rID FROM Reviewer WHERE name LIKE \\\\\\\"%Mike%\\\\\\\"", "sub_ques": "what is the id of the reviewer"}
{"db_id": "movie_1", "sub_sql": "where name like mike", "question": "What is the id of the reviewer whose name has substring \\\\u201cMike\\\\u201d?", "sub_sql_type": "null col op value", "sub_sql_new": "where name like mike", "query": "SELECT rID FROM Reviewer WHERE name LIKE \\\\\\\"%Mike%\\\\\\\"", "sub_ques": "reviewer whose name has substring mike"}
{"db_id": "movie_1", "sub_sql": "select rid from reviewer", "question": "What is the id of the reviewer whose name includes the word \\\\\\\"Mike\\\\\\\"?", "sub_sql_type": "null col col col", "sub_sql_new": "select rid from reviewer", "query": "SELECT rID FROM Reviewer WHERE name LIKE \\\\\\\"%Mike%\\\\\\\"", "sub_ques": "what is the id of the reviewer"}
{"db_id": "movie_1", "sub_sql": "where name like mike", "question": "What is the id of the reviewer whose name includes the word \\\\\\\"Mike\\\\\\\"?", "sub_sql_type": "null col op value", "sub_sql_new": "where name like mike", "query": "SELECT rID FROM Reviewer WHERE name LIKE \\\\\\\"%Mike%\\\\\\\"", "sub_ques": "reviewer whose name includes the word `` mike"}
{"db_id": "movie_1", "sub_sql": "select rid from reviewer", "question": "What is the reviewer id of Daniel Lewis?", "sub_sql_type": "null col col col", "sub_sql_new": "select rid from reviewer", "query": "SELECT rID FROM Reviewer WHERE name  =  \\\\\\\"Daniel Lewis\\\\\\\"", "sub_ques": "what is the reviewer id"}
{"db_id": "movie_1", "sub_sql": "where name = daniellewis", "question": "What is the reviewer id of Daniel Lewis?", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to daniellewis", "query": "SELECT rID FROM Reviewer WHERE name  =  \\\\\\\"Daniel Lewis\\\\\\\"", "sub_ques": "reviewer id of daniel lewis"}
{"db_id": "movie_1", "sub_sql": "select rid from reviewer", "question": "What is the id of the reviewer named Daniel Lewis?", "sub_sql_type": "null col col col", "sub_sql_new": "select rid from reviewer", "query": "SELECT rID FROM Reviewer WHERE name  =  \\\\\\\"Daniel Lewis\\\\\\\"", "sub_ques": "what is the id of the reviewer"}
{"db_id": "movie_1", "sub_sql": "where name = daniellewis", "question": "What is the id of the reviewer named Daniel Lewis?", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to daniellewis", "query": "SELECT rID FROM Reviewer WHERE name  =  \\\\\\\"Daniel Lewis\\\\\\\"", "sub_ques": "reviewer named daniel lewis"}
{"db_id": "movie_1", "sub_sql": "select count rating", "question": "What is the total number of ratings that has more than 3 stars?", "sub_sql_type": "null agg col", "sub_sql_new": "select count rating", "query": "SELECT count(*) FROM Rating WHERE stars  >  3", "sub_ques": "what is the total number of ratings"}
{"db_id": "movie_1", "sub_sql": "where stars > 3", "question": "What is the total number of ratings that has more than 3 stars?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where rating stars more than 3", "query": "SELECT count(*) FROM Rating WHERE stars  >  3", "sub_ques": "ratings that has more than 3 stars"}
{"db_id": "movie_1", "sub_sql": "select count rating", "question": "How many movie ratings have more than 3 stars?", "sub_sql_type": "null agg col", "sub_sql_new": "select count rating", "query": "SELECT count(*) FROM Rating WHERE stars  >  3", "sub_ques": "how many movie ratings"}
{"db_id": "movie_1", "sub_sql": "where stars > 3", "question": "How many movie ratings have more than 3 stars?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where rating stars more than 3", "query": "SELECT count(*) FROM Rating WHERE stars  >  3", "sub_ques": "ratings have more than 3 stars"}
{"db_id": "movie_1", "sub_sql": "select max stars , min stars from rating", "question": "What is the lowest and highest rating star?", "sub_sql_type": "null agg col col null agg col col col col", "sub_sql_new": "select max rating stars , min rating stars from rating", "query": "SELECT max(stars) ,  min(stars) FROM Rating", "sub_ques": "what is the lowest and highest rating star"}
{"db_id": "movie_1", "sub_sql": "select max stars , min stars from rating", "question": "What is the maximum and mininum number of stars a rating can receive?", "sub_sql_type": "null agg col col null agg col col col col", "sub_sql_new": "select max rating stars , min rating stars from rating", "query": "SELECT max(stars) ,  min(stars) FROM Rating", "sub_ques": "what is the maximum and mininum number of stars a rating"}
{"db_id": "movie_1", "sub_sql": "select distinct year from movie", "question": "Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order of year.", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct year from movie", "query": "SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  >=  4 ORDER BY T1.year", "sub_ques": "find all years that have a movie"}
{"db_id": "movie_1", "sub_sql": "where t2.stars >= 4", "question": "Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order of year.", "sub_sql_type": "null col col op op op value", "sub_sql_new": "where rating stars no less than 4", "query": "SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  >=  4 ORDER BY T1.year", "sub_ques": "movie that received a rating of 4"}
{"db_id": "movie_1", "sub_sql": "order by t1.year", "question": "Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order of year.", "sub_sql_type": "null null col", "sub_sql_new": "order by year", "query": "SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  >=  4 ORDER BY T1.year", "sub_ques": "sort them in increasing order of year"}
{"db_id": "movie_1", "sub_sql": "select distinct year from movie", "question": "In what years did a movie receive a 4 or 5 star rating, and list the years from oldest to most recently?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct year from movie", "query": "SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  >=  4 ORDER BY T1.year", "sub_ques": "what years did a movie"}
{"db_id": "movie_1", "sub_sql": "where t2.stars >= 4", "question": "In what years did a movie receive a 4 or 5 star rating, and list the years from oldest to most recently?", "sub_sql_type": "null col col op op op value", "sub_sql_new": "where rating stars no less than 4", "query": "SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  >=  4 ORDER BY T1.year", "sub_ques": "a movie receive 4 or 5 star rating"}
{"db_id": "movie_1", "sub_sql": "order by t1.year", "question": "In what years did a movie receive a 4 or 5 star rating, and list the years from oldest to most recently?", "sub_sql_type": "null null col", "sub_sql_new": "order by year", "query": "SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  >=  4 ORDER BY T1.year", "sub_ques": "the years from oldest to most recently"}
{"db_id": "movie_1", "sub_sql": "select t1.director , t1.title from movie", "question": "What are the names of directors who directed movies with 5 star rating? Also return the title of these movies.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select director , title from movie", "query": "SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5", "sub_ques": "return the title of these movies"}
{"db_id": "movie_1", "sub_sql": "where t2.stars = 5", "question": "What are the names of directors who directed movies with 5 star rating? Also return the title of these movies.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where rating stars equal to 5", "query": "SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5", "sub_ques": "movies with 5 star rating"}
{"db_id": "movie_1", "sub_sql": "select t1.director , t1.title from movie", "question": "What are the names of the directors who created a movie with a 5 star rating, and what was the name of those movies?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select director , title from movie", "query": "SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5", "sub_ques": "what are the names of the directors , and what was the name of those movies"}
{"db_id": "movie_1", "sub_sql": "where t2.stars = 5", "question": "What are the names of the directors who created a movie with a 5 star rating, and what was the name of those movies?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where rating stars equal to 5", "query": "SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5", "sub_ques": "a movie with 5 star rating"}
{"db_id": "movie_1", "sub_sql": "select t2.name , avg t1.stars from reviewer , rating", "question": "What is the average rating star for each reviewer?", "sub_sql_type": "null col null agg col col col col null col", "sub_sql_new": "select name , avg rating stars from reviewer , rating", "query": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name", "sub_ques": "what is the average rating star for each reviewer"}
{"db_id": "movie_1", "sub_sql": "select t2.name , avg t1.stars from reviewer , rating", "question": "What is the average number of stars that each reviewer awards for a movie?", "sub_sql_type": "null col null agg col col col col null col", "sub_sql_new": "select name , avg rating stars from reviewer , rating", "query": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name", "sub_ques": "what is the average number of stars that each reviewer"}
{"db_id": "movie_1", "sub_sql": "select title from movie", "question": "Find the titles of all movies that have no ratings.", "sub_sql_type": "null col col col", "sub_sql_new": "select title from movie", "query": "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)", "sub_ques": "Find the titles of all movies"}
{"db_id": "movie_1", "sub_sql": "movie not in rating", "question": "Find the titles of all movies that have no ratings.", "sub_sql_type": "op op", "sub_sql_new": "movie tab not in rating tab", "query": "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)", "sub_ques": "movies that have no ratings"}
{"db_id": "movie_1", "sub_sql": "select title from movie", "question": "What are the titles of all movies that have not been rated?", "sub_sql_type": "null col col col", "sub_sql_new": "select title from movie", "query": "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)", "sub_ques": "what are the titles of all movies"}
{"db_id": "movie_1", "sub_sql": "movie not in rating", "question": "What are the titles of all movies that have not been rated?", "sub_sql_type": "op op", "sub_sql_new": "movie tab not in rating tab", "query": "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)", "sub_ques": "movies that have not been rated"}
{"db_id": "movie_1", "sub_sql": "select distinct name from reviewer", "question": "Find the names of all reviewers who have ratings with a NULL value for the date.", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct name from reviewer", "query": "SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  \\\\\\\"null\\\\\\\"", "sub_ques": "Find the names of all reviewers"}
{"db_id": "movie_1", "sub_sql": "where ratingdate = null", "question": "Find the names of all reviewers who have ratings with a NULL value for the date.", "sub_sql_type": "null col op op value", "sub_sql_new": "where ratingdate equal to null", "query": "SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  \\\\\\\"null\\\\\\\"", "sub_ques": "ratings with a null"}
{"db_id": "movie_1", "sub_sql": "select distinct name from reviewer", "question": "What are the different names of all reviewers whose ratings do not have a date field?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct name from reviewer", "query": "SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  \\\\\\\"null\\\\\\\"", "sub_ques": "what are the different names of all reviewers"}
{"db_id": "movie_1", "sub_sql": "where ratingdate = null", "question": "What are the different names of all reviewers whose ratings do not have a date field?", "sub_sql_type": "null col op op value", "sub_sql_new": "where ratingdate equal to null", "query": "SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  \\\\\\\"null\\\\\\\"", "sub_ques": "ratings do not have a date"}
{"db_id": "movie_1", "sub_sql": "select avg t1.stars , t2.title from rating , movie", "question": "What is the average rating stars and title for the oldest movie?", "sub_sql_type": "null agg col col null col col col null col", "sub_sql_new": "select avg rating stars , title from rating , movie", "query": "SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)", "sub_ques": "what is the average rating stars and title for the oldest movie"}
{"db_id": "movie_1", "sub_sql": "select avg t1.stars , t2.title from rating , movie", "question": "For the oldest movie listed, what is its average rating and title?", "sub_sql_type": "null agg col col null col col col null col", "sub_sql_new": "select avg rating stars , title from rating , movie", "query": "SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)", "sub_ques": "what is its average rating and title"}
{"db_id": "movie_1", "sub_sql": "where year = select max year", "question": "What is the name of the most recent movie?", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where year equal to select max year", "query": "SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)", "sub_ques": "the most recent movie"}
{"db_id": "movie_1", "sub_sql": "select title from movie", "question": "What is the title of the newest movie?", "sub_sql_type": "null col col col", "sub_sql_new": "select title from movie", "query": "SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)", "sub_ques": "what is the title of the movie"}
{"db_id": "movie_1", "sub_sql": "where year = select max year", "question": "What is the title of the newest movie?", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where year equal to select max year", "query": "SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)", "sub_ques": "the newest movie"}
{"db_id": "movie_1", "sub_sql": "select max t1.stars , t2.year from rating , movie", "question": "What is the maximum stars and year for the most recent movie?", "sub_sql_type": "null agg col col null col col col null col", "sub_sql_new": "select max rating stars , year from rating , movie", "query": "SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)", "sub_ques": "what is the maximum stars and year for the movie"}
{"db_id": "movie_1", "sub_sql": "where t2.year = select max year", "question": "What is the maximum stars and year for the most recent movie?", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where year equal to select max year", "query": "SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)", "sub_ques": "the most recent movie"}
{"db_id": "movie_1", "sub_sql": "select max t1.stars , t2.year from rating , movie", "question": "What is highest rating for the most recent movie and when was it released?", "sub_sql_type": "null agg col col null col col col null col", "sub_sql_new": "select max rating stars , year from rating , movie", "query": "SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)", "sub_ques": "what is highest rating and when was it released"}
{"db_id": "movie_1", "sub_sql": "where t2.year = select max year", "question": "What is highest rating for the most recent movie and when was it released?", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where year equal to select max year", "query": "SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)", "sub_ques": "the most recent movie"}
{"db_id": "movie_1", "sub_sql": "select title from movie", "question": "What is the names of movies whose created year is after all movies directed by Steven Spielberg?", "sub_sql_type": "null col col col", "sub_sql_new": "select title from movie", "query": "SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  \\\\\\\"Steven Spielberg\\\\\\\")", "sub_ques": "what is the names of movies"}
{"db_id": "movie_1", "sub_sql": "where year > select max year", "question": "What is the names of movies whose created year is after all movies directed by Steven Spielberg?", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where year more than select max year", "query": "SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  \\\\\\\"Steven Spielberg\\\\\\\")", "sub_ques": "movies whose created year is after all movies"}
{"db_id": "movie_1", "sub_sql": "where director = stevenspielberg", "question": "What is the names of movies whose created year is after all movies directed by Steven Spielberg?", "sub_sql_type": "null col op op value", "sub_sql_new": "where director equal to stevenspielberg", "query": "SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  \\\\\\\"Steven Spielberg\\\\\\\")", "sub_ques": "movies directed steven spielberg"}
{"db_id": "movie_1", "sub_sql": "select title from movie", "question": "What are the names of all movies that were created after the most recent Steven Spielberg film?", "sub_sql_type": "null col col col", "sub_sql_new": "select title from movie", "query": "SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  \\\\\\\"Steven Spielberg\\\\\\\")", "sub_ques": "what are the names of all movies"}
{"db_id": "movie_1", "sub_sql": "where year > select max year", "question": "What are the names of all movies that were created after the most recent Steven Spielberg film?", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where year more than select max year", "query": "SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  \\\\\\\"Steven Spielberg\\\\\\\")", "sub_ques": "created after the most recent"}
{"db_id": "movie_1", "sub_sql": "select t2.title , t2.director from movie", "question": "What are the titles and directors of the movies whose star is greater than the average stars of the movies directed by James Cameron?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select title , director from movie", "query": "SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  \\\\\\\"James Cameron\\\\\\\")", "sub_ques": "what are the titles and directors of the movies"}
{"db_id": "movie_1", "sub_sql": "where t1.stars > select avg t1.stars", "question": "What are the titles and directors of the movies whose star is greater than the average stars of the movies directed by James Cameron?", "sub_sql_type": "null col col op op value value value", "sub_sql_new": "where rating stars more than select avg t1.stars", "query": "SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  \\\\\\\"James Cameron\\\\\\\")", "sub_ques": "star is greater than the average stars"}
{"db_id": "movie_1", "sub_sql": "where t2.director = jamescameron", "question": "What are the titles and directors of the movies whose star is greater than the average stars of the movies directed by James Cameron?", "sub_sql_type": "null col op op value", "sub_sql_new": "where director equal to jamescameron", "query": "SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  \\\\\\\"James Cameron\\\\\\\")", "sub_ques": "the movies directed by James Cameron"}
{"db_id": "movie_1", "sub_sql": "select t2.title , t2.director from movie", "question": "What are the titles and directors of all movies that have a rating higher than the average James Cameron film rating?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select title , director from movie", "query": "SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  \\\\\\\"James Cameron\\\\\\\")", "sub_ques": "what are the titles and directors of all movies"}
{"db_id": "movie_1", "sub_sql": "where t1.stars > select avg t1.stars", "question": "What are the titles and directors of all movies that have a rating higher than the average James Cameron film rating?", "sub_sql_type": "null col col op op value value value", "sub_sql_new": "where rating stars more than select avg t1.stars", "query": "SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  \\\\\\\"James Cameron\\\\\\\")", "sub_ques": "rating higher than the average rating"}
{"db_id": "movie_1", "sub_sql": "select t3.name , t2.title , t1.stars , t1.ratingdate from reviewer , movie , rating", "question": "What is the reviewer name, film title, movie rating, and rating date  for every movie ordered by reviewer name, movie title, then finally rating?", "sub_sql_type": "null col null col null col col null col col col null col null col", "sub_sql_new": "select name , title , rating stars , ratingdate from reviewer , movie , rating", "query": "SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars", "sub_ques": "what is the reviewer name , film title , movie rating , and rating date for every movie"}
{"db_id": "movie_1", "sub_sql": "order by t3.name", "question": "What is the reviewer name, film title, movie rating, and rating date  for every movie ordered by reviewer name, movie title, then finally rating?", "sub_sql_type": "null null col", "sub_sql_new": "order by name", "query": "SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars", "sub_ques": "ordered by reviewer name"}
{"db_id": "movie_1", "sub_sql": "select t2.name from reviewer", "question": "Find the names of all reviewers who have contributed three or more ratings.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from reviewer", "query": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  3", "sub_ques": "find the names of all reviewers"}
{"db_id": "movie_1", "sub_sql": "group by t1.rid having count Reviewer >= 3", "question": "Find the names of all reviewers who have contributed three or more ratings.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  3", "sub_ques": "who have contributed three or more ratings"}
{"db_id": "movie_1", "sub_sql": "select t2.name from reviewer", "question": "What are the names of all reviewers that have rated 3 or more movies?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from reviewer", "query": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  3", "sub_ques": "what are the names of all reviewers"}
{"db_id": "movie_1", "sub_sql": "group by t1.rid having count Reviewer >= 3", "question": "What are the names of all reviewers that have rated 3 or more movies?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  3", "sub_ques": "reviewers that have rated 3 or more movies"}
{"db_id": "movie_1", "sub_sql": "select distinct t3.name from reviewer", "question": "Find the names of all reviewers who rated Gone with the Wind.", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct name from reviewer", "query": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  'Gone with the Wind'", "sub_ques": "Find the names of all reviewers"}
{"db_id": "movie_1", "sub_sql": "where t2.title = gonewiththewind", "question": "Find the names of all reviewers who rated Gone with the Wind.", "sub_sql_type": "null col op op value", "sub_sql_new": "where title equal to gonewiththewind", "query": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  'Gone with the Wind'", "sub_ques": "gone with the wind"}
{"db_id": "movie_1", "sub_sql": "select distinct t3.name from reviewer", "question": "What are the names of all the different reviewers who rates Gone with the Wind?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct name from reviewer", "query": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  'Gone with the Wind'", "sub_ques": "what are the names of all the different"}
{"db_id": "movie_1", "sub_sql": "select distinct t2.director from movie", "question": "Find the names of all directors whose movies are rated by Sarah Martinez.", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct director from movie", "query": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'", "sub_ques": "Find the names of all directors"}
{"db_id": "movie_1", "sub_sql": "where t3.name = sarahmartinez", "question": "Find the names of all directors whose movies are rated by Sarah Martinez.", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to sarahmartinez", "query": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'", "sub_ques": "movies are rated by Sarah Martinez"}
{"db_id": "movie_1", "sub_sql": "select distinct t2.director from movie", "question": "What are the names of all directors whose movies have been reviewed by Sarah Martinez?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct director from movie", "query": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'", "sub_ques": "What are the names of all directors"}
{"db_id": "movie_1", "sub_sql": "where t3.name = sarahmartinez", "question": "What are the names of all directors whose movies have been reviewed by Sarah Martinez?", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to sarahmartinez", "query": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'", "sub_ques": "movies have been reviewed by Sarah Martinez"}
{"db_id": "movie_1", "sub_sql": "select t1.title , t1.director from movie", "question": "For all directors who directed more than one movie, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select title , director from movie", "query": "SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title", "sub_ques": "return the titles of all movies directed by them , along with the director name ."}
{"db_id": "movie_1", "sub_sql": "order by t1.director", "question": "For all directors who directed more than one movie, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title.", "sub_sql_type": "null null col", "sub_sql_new": "order by director", "query": "SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title", "sub_ques": "sort by director name"}
{"db_id": "movie_1", "sub_sql": "select t1.title , t1.year from movie", "question": "For each director who directed more than one movie, what are the titles and dates of release for all those movies?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select title , year from movie", "query": "SELECT T1.title ,  T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title", "sub_ques": "what are the titles and dates of release for all those movies"}
{"db_id": "movie_1", "sub_sql": "select director from movie", "question": "What are the names of the directors who made exactly one movie?", "sub_sql_type": "null col col col", "sub_sql_new": "select director from movie", "query": "SELECT director FROM Movie GROUP BY director HAVING count(*)  =  1", "sub_ques": "what are the names of the directors"}
{"db_id": "movie_1", "sub_sql": "group by director having count movie = 1", "question": "What are the names of the directors who made exactly one movie?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT director FROM Movie GROUP BY director HAVING count(*)  =  1", "sub_ques": "directors who made exactly one movie"}
{"db_id": "movie_1", "sub_sql": "select director from movie", "question": "What are the names of all directors who made one movie?", "sub_sql_type": "null col col col", "sub_sql_new": "select director from movie", "query": "SELECT director FROM Movie GROUP BY director HAVING count(*)  =  1", "sub_ques": "what are the names of all directors"}
{"db_id": "movie_1", "sub_sql": "group by director having count movie = 1", "question": "What are the names of all directors who made one movie?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT director FROM Movie GROUP BY director HAVING count(*)  =  1", "sub_ques": "directors who made one movie"}
{"db_id": "movie_1", "sub_sql": "select director from movie", "question": "What are the names of the directors who made exactly one movie excluding director NULL?", "sub_sql_type": "null col col col", "sub_sql_new": "select director from movie", "query": "SELECT director FROM Movie WHERE director != \\\\\\\"null\\\\\\\" GROUP BY director HAVING count(*)  =  1", "sub_ques": "what are the names of the directors"}
{"db_id": "movie_1", "sub_sql": "where director != null", "question": "What are the names of the directors who made exactly one movie excluding director NULL?", "sub_sql_type": "null col op op op value", "sub_sql_new": "where director not equal to null", "query": "SELECT director FROM Movie WHERE director != \\\\\\\"null\\\\\\\" GROUP BY director HAVING count(*)  =  1", "sub_ques": "excluding director null"}
{"db_id": "movie_1", "sub_sql": "group by director having count movie = 1", "question": "What are the names of the directors who made exactly one movie excluding director NULL?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT director FROM Movie WHERE director != \\\\\\\"null\\\\\\\" GROUP BY director HAVING count(*)  =  1", "sub_ques": "directors who made exactly one movie"}
{"db_id": "movie_1", "sub_sql": "where director != null", "question": "What are the names of all directors who have made one movie except for the director named NULL?", "sub_sql_type": "null col op op op value", "sub_sql_new": "where director not equal to null", "query": "SELECT director FROM Movie WHERE director != \\\\\\\"null\\\\\\\" GROUP BY director HAVING count(*)  =  1", "sub_ques": "except for the director named null"}
{"db_id": "movie_1", "sub_sql": "group by director having count movie = 1", "question": "What are the names of all directors who have made one movie except for the director named NULL?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT director FROM Movie WHERE director != \\\\\\\"null\\\\\\\" GROUP BY director HAVING count(*)  =  1", "sub_ques": "directors who have made one movie"}
{"db_id": "movie_1", "sub_sql": "select count movie , t1.director group by t1.director", "question": "How many movie reviews does each director get?", "sub_sql_type": "null agg col null col", "sub_sql_new": "select count movie , director", "query": "SELECT count(*) ,  T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID GROUP BY T1.director", "sub_ques": "how many movie reviews does each director"}
{"db_id": "movie_1", "sub_sql": "select count movie , t1.director group by t1.director", "question": "For each director, how many reviews have they received?", "sub_sql_type": "null agg col null col", "sub_sql_new": "select count movie , director", "query": "SELECT count(*) ,  T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID GROUP BY T1.director", "sub_ques": "For each director, how many reviews have they received"}
{"db_id": "movie_1", "sub_sql": "select t2.title , avg t1.stars from movie , rating", "question": "Find the movies with the highest average rating. Return the movie titles and average rating.", "sub_sql_type": "null col null agg col col col col null col", "sub_sql_new": "select title , avg rating stars from movie , rating", "query": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1", "sub_ques": "Return the movie titles and average rating"}
{"db_id": "movie_1", "sub_sql": "group by t1.mid order by avg t1.stars desc limit 1", "question": "Find the movies with the highest average rating. Return the movie titles and average rating.", "sub_sql_type": "null null agg col col null null limv", "sub_sql_new": "order by avg rating stars desc limit 1", "query": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1", "sub_ques": "movies with the highest average rating"}
{"db_id": "movie_1", "sub_sql": "select t2.title , avg t1.stars from movie , rating", "question": "What are the movie titles with the highest average rating and what are those ratings?", "sub_sql_type": "null col null agg col col col col null col", "sub_sql_new": "select title , avg rating stars from movie , rating", "query": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1", "sub_ques": "what are the movie titles and what are those ratings"}
{"db_id": "movie_1", "sub_sql": "group by t1.mid order by avg t1.stars desc limit 1", "question": "What are the movie titles with the highest average rating and what are those ratings?", "sub_sql_type": "null null agg col col null null limv", "sub_sql_new": "order by avg rating stars desc limit 1", "query": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1", "sub_ques": "the movies with the highest average rating"}
{"db_id": "movie_1", "sub_sql": "select t2.title , avg t1.stars from movie , rating", "question": "What are the movie titles and average rating of the movies with the lowest average rating?", "sub_sql_type": "null col null agg col col col col null col", "sub_sql_new": "select title , avg rating stars from movie , rating", "query": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1", "sub_ques": "what are the movie titles and average rating of the movies"}
{"db_id": "movie_1", "sub_sql": "group by t1.mid order by avg t1.stars limit 1", "question": "What are the movie titles and average rating of the movies with the lowest average rating?", "sub_sql_type": "null null agg col col null limv", "sub_sql_new": "order by avg rating stars limit 1", "query": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1", "sub_ques": "the movies with the lowest average rating"}
{"db_id": "movie_1", "sub_sql": "select t2.title , avg t1.stars from movie , rating", "question": "What are the titles and average ratings for all movies that have the lowest average rating?", "sub_sql_type": "null col null agg col col col col null col", "sub_sql_new": "select title , avg rating stars from movie , rating", "query": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1", "sub_ques": "what are the titles and average ratings for all movies"}
{"db_id": "movie_1", "sub_sql": "group by t1.mid order by avg t1.stars limit 1", "question": "What are the titles and average ratings for all movies that have the lowest average rating?", "sub_sql_type": "null null agg col col null limv", "sub_sql_new": "order by avg rating stars limit 1", "query": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1", "sub_ques": "all movies that have the lowest average rating"}
{"db_id": "movie_1", "sub_sql": "select t2.title , t2.year from movie", "question": "What are the names and years of the movies that has the top 3 highest rating star?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select title , year from movie", "query": "SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3", "sub_ques": "what are the names and years of the movies"}
{"db_id": "movie_1", "sub_sql": "order by t1.stars desc limit 3", "question": "What are the names and years of the movies that has the top 3 highest rating star?", "sub_sql_type": "null null col col null null limv", "sub_sql_new": "order by rating stars desc limit 3", "query": "SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3", "sub_ques": "the movies that has the top 3 highest rating star"}
{"db_id": "movie_1", "sub_sql": "select t2.title , t2.year from movie", "question": "What are the names and years released for the movies with the top 3 highest ratings?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select title , year from movie", "query": "SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3", "sub_ques": "what are the names and years released for the movies"}
{"db_id": "movie_1", "sub_sql": "order by t1.stars desc limit 3", "question": "What are the names and years released for the movies with the top 3 highest ratings?", "sub_sql_type": "null null col col null null limv", "sub_sql_new": "order by rating stars desc limit 3", "query": "SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3", "sub_ques": "the movies with the top 3 highest ratings"}
{"db_id": "movie_1", "sub_sql": "select t2.title , t1.stars , t2.director , min t1.stars from movie , rating", "question": "For each director, what is the title and score of their most poorly rated movie?", "sub_sql_type": "null col null col col null col null agg col col col col null col", "sub_sql_new": "select title , rating stars , director , min rating stars from movie , rating", "query": "SELECT T2.title ,  T1.stars ,  T2.director ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T2.director", "sub_ques": "director , what is the title and score of their most poorly rated movie"}
{"db_id": "movie_1", "sub_sql": "group by t1.mid order by count rating desc limit 1", "question": "What is the name of the movie that is rated by most of times?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count rating desc limit 1", "query": "SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the movie that is rated by most of times"}
{"db_id": "movie_1", "sub_sql": "select t2.title , t1.mid from movie , rating", "question": "What is the name of the movie that has been reviewed the most?", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select title , mid from movie , rating", "query": "SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1", "sub_ques": "what is the name of the movie"}
{"db_id": "movie_1", "sub_sql": "group by t1.mid order by count rating desc limit 1", "question": "What is the name of the movie that has been reviewed the most?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count rating desc limit 1", "query": "SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the movie that has been reviewed the most"}
{"db_id": "movie_1", "sub_sql": "select t2.title from movie", "question": "What are the titles of all movies that have rating star is between 3 and 5?", "sub_sql_type": "null col col col", "sub_sql_new": "select title from movie", "query": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5", "sub_ques": "what are the titles of all movies"}
{"db_id": "movie_1", "sub_sql": "select t2.title from movie", "question": "What are the titles of all movies that have between 3 and 5 stars?", "sub_sql_type": "null col col col", "sub_sql_new": "select title from movie", "query": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5", "sub_ques": "what are the titles of all movies"}
{"db_id": "movie_1", "sub_sql": "select t2.name from reviewer", "question": "Find the names of reviewers who had given higher than 3 star ratings.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from reviewer", "query": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3", "sub_ques": "find the names of reviewers"}
{"db_id": "movie_1", "sub_sql": "where t1.stars > 3", "question": "Find the names of reviewers who had given higher than 3 star ratings.", "sub_sql_type": "null col col op op value", "sub_sql_new": "where rating stars more than 3", "query": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3", "sub_ques": "who had given higher than 3 star ratings"}
{"db_id": "movie_1", "sub_sql": "select t2.name from reviewer", "question": "What are the names of the reviewers who have rated a movie more than 3 stars before?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from reviewer", "query": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3", "sub_ques": "what are the names of the reviewers"}
{"db_id": "movie_1", "sub_sql": "where t1.stars > 3", "question": "What are the names of the reviewers who have rated a movie more than 3 stars before?", "sub_sql_type": "null col col op op value", "sub_sql_new": "where rating stars more than 3", "query": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3", "sub_ques": "who have rated a movie more than 3 stars"}
{"db_id": "movie_1", "sub_sql": "select mid , avg stars from rating", "question": "Find the average rating star for each movie that are not reviewed by Brittany Harris.", "sub_sql_type": "null col null agg col col col col", "sub_sql_new": "select mid , avg rating stars from rating", "query": "SELECT mID ,  avg(stars) FROM Rating WHERE mID NOT IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \\\\\\\"Brittany Harris\\\\\\\") GROUP BY mID", "sub_ques": "find the average rating star for each movie"}
{"db_id": "movie_1", "sub_sql": "where t2.name = brittanyharris", "question": "Find the average rating star for each movie that are not reviewed by Brittany Harris.", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to brittanyharris", "query": "SELECT mID ,  avg(stars) FROM Rating WHERE mID NOT IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \\\\\\\"Brittany Harris\\\\\\\") GROUP BY mID", "sub_ques": "that are not reviewed by brittany harris"}
{"db_id": "movie_1", "sub_sql": "select mid , avg stars from rating", "question": "What is the average rating for each movie that has never been reviewed by Brittany Harris?", "sub_sql_type": "null col null agg col col col col", "sub_sql_new": "select mid , avg rating stars from rating", "query": "SELECT mID ,  avg(stars) FROM Rating WHERE mID NOT IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \\\\\\\"Brittany Harris\\\\\\\") GROUP BY mID", "sub_ques": "what is the average rating for each movie"}
{"db_id": "movie_1", "sub_sql": "where t2.name = brittanyharris", "question": "What is the average rating for each movie that has never been reviewed by Brittany Harris?", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to brittanyharris", "query": "SELECT mID ,  avg(stars) FROM Rating WHERE mID NOT IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \\\\\\\"Brittany Harris\\\\\\\") GROUP BY mID", "sub_ques": "been reviewed by brittany harris"}
{"db_id": "movie_1", "sub_sql": "select mid , avg stars from rating", "question": "Find the average rating star for each movie that received at least 2 ratings.", "sub_sql_type": "null col null agg col col col col", "sub_sql_new": "select mid , avg rating stars from rating", "query": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2", "sub_ques": "find the average rating star for each movie"}
{"db_id": "movie_1", "sub_sql": "group by mid having count rating >= 2", "question": "Find the average rating star for each movie that received at least 2 ratings.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2", "sub_ques": "movie that received at least 2 ratings"}
{"db_id": "movie_1", "sub_sql": "group by mid having count rating >= 2", "question": "For each movie that received more than 3 reviews, what is the average rating?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2", "sub_ques": "movie that received more than 3 reviews"}
{"db_id": "movie_1", "sub_sql": "select rid from rating", "question": "Find the ids of reviewers who didn't only give 4 star.", "sub_sql_type": "null col col col", "sub_sql_new": "select rid from rating", "query": "SELECT rID FROM Rating WHERE stars != 4", "sub_ques": "Find the ids of reviewers"}
{"db_id": "movie_1", "sub_sql": "where stars != 4", "question": "Find the ids of reviewers who didn't only give 4 star.", "sub_sql_type": "null col col op op op value", "sub_sql_new": "where rating stars not equal to 4", "query": "SELECT rID FROM Rating WHERE stars != 4", "sub_ques": "reviewers who didn't only give 4 star"}
{"db_id": "movie_1", "sub_sql": "select rid from rating", "question": "What are the ids of all reviewers who have not given 4 stars at least once?", "sub_sql_type": "null col col col", "sub_sql_new": "select rid from rating", "query": "SELECT rID FROM Rating WHERE stars != 4", "sub_ques": "what are the ids of all reviewers"}
{"db_id": "movie_1", "sub_sql": "where stars != 4", "question": "What are the ids of all reviewers who have not given 4 stars at least once?", "sub_sql_type": "null col col op op op value", "sub_sql_new": "where rating stars not equal to 4", "query": "SELECT rID FROM Rating WHERE stars != 4", "sub_ques": "reviewers who have not given 4 stars"}
{"db_id": "movie_1", "sub_sql": "select distinct t2.title from movie", "question": "What are names of the movies that are either made after 2000 or reviewed by Brittany Harris?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct title from movie", "query": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000", "sub_ques": "what are names of the movies"}
{"db_id": "movie_1", "sub_sql": "where t3.name = brittanyharris", "question": "What are names of the movies that are either made after 2000 or reviewed by Brittany Harris?", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to brittanyharris", "query": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000", "sub_ques": "reviewed by brittany harris"}
{"db_id": "movie_1", "sub_sql": "select distinct t2.title from movie", "question": "What are the names of all movies that were made after 2000 or reviewed by Brittany Harris?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct title from movie", "query": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000", "sub_ques": "what are the names of all movies"}
{"db_id": "movie_1", "sub_sql": "where t3.name = brittanyharris", "question": "What are the names of all movies that were made after 2000 or reviewed by Brittany Harris?", "sub_sql_type": "null col op op value", "sub_sql_new": "where name equal to brittanyharris", "query": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000", "sub_ques": "reviewed by brittany harris"}
{"db_id": "movie_1", "sub_sql": "select title from movie", "question": "What are names of the movies that are either made before 1980 or directed by James Cameron?", "sub_sql_type": "null col col col", "sub_sql_new": "select title from movie", "query": "SELECT title FROM Movie WHERE director  =  \\\\\\\"James Cameron\\\\\\\" OR YEAR   <  1980", "sub_ques": "what are names of the movies"}
{"db_id": "movie_1", "sub_sql": "where director = jamescameron or year < 1980", "question": "What are names of the movies that are either made before 1980 or directed by James Cameron?", "sub_sql_type": "null col op op value null col op value value", "sub_sql_new": "where director equal to jamescameron or or year < 1980", "query": "SELECT title FROM Movie WHERE director  =  \\\\\\\"James Cameron\\\\\\\" OR YEAR   <  1980", "sub_ques": "movies that are either made before 1980 or directed by James Cameron"}
{"db_id": "movie_1", "sub_sql": "select title from movie", "question": "What are the names of all movies made before 1980 or had James Cameron as the director?", "sub_sql_type": "null col col col", "sub_sql_new": "select title from movie", "query": "SELECT title FROM Movie WHERE director  =  \\\\\\\"James Cameron\\\\\\\" OR YEAR   <  1980", "sub_ques": "what are the names of all movies"}
{"db_id": "movie_1", "sub_sql": "where director = jamescameron", "question": "What are the names of all movies made before 1980 or had James Cameron as the director?", "sub_sql_type": "null col op op value", "sub_sql_new": "where director equal to jamescameron", "query": "SELECT title FROM Movie WHERE director  =  \\\\\\\"James Cameron\\\\\\\" OR YEAR   <  1980", "sub_ques": "had james cameron as the director"}
{"db_id": "county_public_safety", "sub_sql": "select count county_public_safety", "question": "How many counties are there?", "sub_sql_type": "null agg col", "sub_sql_new": "select count county_public_safety", "query": "SELECT count(*) FROM county_public_safety", "sub_ques": "how many counties"}
{"db_id": "county_public_safety", "sub_sql": "select count county_public_safety", "question": "Count the number of countries.", "sub_sql_type": "null agg col", "sub_sql_new": "select count county_public_safety", "query": "SELECT count(*) FROM county_public_safety", "sub_ques": "count the number of counties"}
{"db_id": "county_public_safety", "sub_sql": "select name from county_public_safety", "question": "List the names of counties in descending order of population.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from county_public_safety", "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC", "sub_ques": "list the names of counties"}
{"db_id": "county_public_safety", "sub_sql": "order by population desc", "question": "List the names of counties in descending order of population.", "sub_sql_type": "null null col null", "sub_sql_new": "order by population desc", "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC", "sub_ques": "in descending order of population"}
{"db_id": "county_public_safety", "sub_sql": "select name from county_public_safety", "question": "What are the names of the counties of public safety, ordered by population descending?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from county_public_safety", "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC", "sub_ques": "what are the names of the counties of public safety"}
{"db_id": "county_public_safety", "sub_sql": "order by population desc", "question": "What are the names of the counties of public safety, ordered by population descending?", "sub_sql_type": "null null col null", "sub_sql_new": "order by population desc", "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC", "sub_ques": "ordered by population descending"}
{"db_id": "county_public_safety", "sub_sql": "select distinct police_force from county_public_safety", "question": "List the distinct police forces of counties whose location is not on east side.", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct police_force from county_public_safety", "query": "SELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION != \\\\\\\"East\\\\\\\"", "sub_ques": "list the distinct police forces of counties"}
{"db_id": "county_public_safety", "sub_sql": "where location != east", "question": "List the distinct police forces of counties whose location is not on east side.", "sub_sql_type": "null col op op op value", "sub_sql_new": "where location not equal to east", "query": "SELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION != \\\\\\\"East\\\\\\\"", "sub_ques": "whose location is not on east side"}
{"db_id": "county_public_safety", "sub_sql": "select distinct police_force from county_public_safety", "question": "What are the different police forces of counties that are not located in the East?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct police_force from county_public_safety", "query": "SELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION != \\\\\\\"East\\\\\\\"", "sub_ques": "what are the different police forces of counties"}
{"db_id": "county_public_safety", "sub_sql": "where location != east", "question": "What are the different police forces of counties that are not located in the East?", "sub_sql_type": "null col op op op value", "sub_sql_new": "where location not equal to east", "query": "SELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION != \\\\\\\"East\\\\\\\"", "sub_ques": "counties that are not located in the east"}
{"db_id": "county_public_safety", "sub_sql": "select min crime_rate , max crime_rate from county_public_safety", "question": "What are the minimum and maximum crime rate of counties?", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select min crime_rate , max crime_rate from county_public_safety", "query": "SELECT min(Crime_rate) ,  max(Crime_rate) FROM county_public_safety", "sub_ques": "what are the minimum and maximum crime rate"}
{"db_id": "county_public_safety", "sub_sql": "select min crime_rate , max crime_rate from county_public_safety", "question": "Return the minimum and maximum crime rates across all counties.", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select min crime_rate , max crime_rate from county_public_safety", "query": "SELECT min(Crime_rate) ,  max(Crime_rate) FROM county_public_safety", "sub_ques": "return the minimum and maximum crime rates"}
{"db_id": "county_public_safety", "sub_sql": "select crime_rate from county_public_safety", "question": "Show the crime rates of counties in ascending order of number of police officers.", "sub_sql_type": "null col col col", "sub_sql_new": "select crime_rate from county_public_safety", "query": "SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC", "sub_ques": "show the crime rates of counties"}
{"db_id": "county_public_safety", "sub_sql": "order by police_officers asc", "question": "Show the crime rates of counties in ascending order of number of police officers.", "sub_sql_type": "null null col null", "sub_sql_new": "order by police_officers asc", "query": "SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC", "sub_ques": "in ascending order of number of police officers"}
{"db_id": "county_public_safety", "sub_sql": "select crime_rate from county_public_safety", "question": "What are the crime rates of counties sorted by number of offices ascending?", "sub_sql_type": "null col col col", "sub_sql_new": "select crime_rate from county_public_safety", "query": "SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC", "sub_ques": "what are the crime rates of counties"}
{"db_id": "county_public_safety", "sub_sql": "order by police_officers asc", "question": "What are the crime rates of counties sorted by number of offices ascending?", "sub_sql_type": "null null col null", "sub_sql_new": "order by police_officers asc", "query": "SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC", "sub_ques": "sorted by number of offices ascending"}
{"db_id": "county_public_safety", "sub_sql": "select name from city", "question": "What are the names of cities in ascending alphabetical order?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from city", "query": "SELECT Name FROM city ORDER BY Name ASC", "sub_ques": "what are the names of cities"}
{"db_id": "county_public_safety", "sub_sql": "order by name asc", "question": "What are the names of cities in ascending alphabetical order?", "sub_sql_type": "null null col null", "sub_sql_new": "order by name asc", "query": "SELECT Name FROM city ORDER BY Name ASC", "sub_ques": "the names of cities in ascending alphabetical order"}
{"db_id": "county_public_safety", "sub_sql": "select name from city", "question": "Return the names of cities, ordered alphabetically.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from city", "query": "SELECT Name FROM city ORDER BY Name ASC", "sub_ques": "return the names of cities"}
{"db_id": "county_public_safety", "sub_sql": "order by name asc", "question": "Return the names of cities, ordered alphabetically.", "sub_sql_type": "null null col null", "sub_sql_new": "order by name asc", "query": "SELECT Name FROM city ORDER BY Name ASC", "sub_ques": "the names of cities , ordered alphabetically"}
{"db_id": "county_public_safety", "sub_sql": "select hispanic from city", "question": "What are the percentage of hispanics in cities with the black percentage higher than 10?", "sub_sql_type": "null col col col", "sub_sql_new": "select hispanic from city", "query": "SELECT Hispanic FROM city WHERE Black  >  10", "sub_ques": "What are the percentage of hispanics in cities"}
{"db_id": "county_public_safety", "sub_sql": "where black > 10", "question": "What are the percentage of hispanics in cities with the black percentage higher than 10?", "sub_sql_type": "null col op op value", "sub_sql_new": "where black more than 10", "query": "SELECT Hispanic FROM city WHERE Black  >  10", "sub_ques": "cities with the black percentage higher than 10"}
{"db_id": "county_public_safety", "sub_sql": "select hispanic from city", "question": "Return the hispanic percentage for cities in which the black percentage is greater than 10.", "sub_sql_type": "null col col col", "sub_sql_new": "select hispanic from city", "query": "SELECT Hispanic FROM city WHERE Black  >  10", "sub_ques": "return the hispanic percentage for cities"}
{"db_id": "county_public_safety", "sub_sql": "where black > 10", "question": "Return the hispanic percentage for cities in which the black percentage is greater than 10.", "sub_sql_type": "null col op op value", "sub_sql_new": "where black more than 10", "query": "SELECT Hispanic FROM city WHERE Black  >  10", "sub_ques": "cities in which the black percentage is greater than 10"}
{"db_id": "county_public_safety", "sub_sql": "select name from county_public_safety", "question": "List the name of the county with the largest population.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from county_public_safety", "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1", "sub_ques": "list the name of the county"}
{"db_id": "county_public_safety", "sub_sql": "order by population desc limit 1", "question": "List the name of the county with the largest population.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by population desc limit 1", "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1", "sub_ques": "the largest population"}
{"db_id": "county_public_safety", "sub_sql": "select name from county_public_safety", "question": "What is the name of the county with the greatest population?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from county_public_safety", "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1", "sub_ques": "what is the name of the county"}
{"db_id": "county_public_safety", "sub_sql": "order by population desc limit 1", "question": "What is the name of the county with the greatest population?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by population desc limit 1", "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1", "sub_ques": "the greatest population"}
{"db_id": "county_public_safety", "sub_sql": "select name from city", "question": "List the names of the city with the top 5 white percentages.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from city", "query": "SELECT Name FROM city ORDER BY White DESC LIMIT 5", "sub_ques": "list the names of the city"}
{"db_id": "county_public_safety", "sub_sql": "order by white desc limit 5", "question": "List the names of the city with the top 5 white percentages.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by white desc limit 5", "query": "SELECT Name FROM city ORDER BY White DESC LIMIT 5", "sub_ques": "the top 5 white percentages"}
{"db_id": "county_public_safety", "sub_sql": "select name from city", "question": "What are the names of the five cities with the greatest proportion of white people?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from city", "query": "SELECT Name FROM city ORDER BY White DESC LIMIT 5", "sub_ques": "what are the names of the five cities"}
{"db_id": "county_public_safety", "sub_sql": "order by white desc limit 5", "question": "What are the names of the five cities with the greatest proportion of white people?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by white desc limit 5", "query": "SELECT Name FROM city ORDER BY White DESC LIMIT 5", "sub_ques": "the five cities with the greatest proportion of white people"}
{"db_id": "county_public_safety", "sub_sql": "select t1.name , t2.name from city , county_public_safety", "question": "Show names of cities and names of counties they are in.", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select name , name from city , county_public_safety", "query": "SELECT T1.Name ,  T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID", "sub_ques": "show names of cities and names of counties they are in"}
{"db_id": "county_public_safety", "sub_sql": "select t1.name , t2.name from city , county_public_safety", "question": "What are the names of cities, as well as the names of the counties they correspond to?", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select name , name from city , county_public_safety", "query": "SELECT T1.Name ,  T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID", "sub_ques": "what are the names of cities , as well as the names of the counties they correspond to"}
{"db_id": "county_public_safety", "sub_sql": "select t1.white , t2.crime_rate from city , county_public_safety", "question": "Show white percentages of cities and the crime rates of counties they are in.", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select white , crime_rate from city , county_public_safety", "query": "SELECT T1.White ,  T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID", "sub_ques": "show white percentages of cities and the crime rates of counties they are in"}
{"db_id": "county_public_safety", "sub_sql": "select t1.white , t2.crime_rate from city , county_public_safety", "question": "What are the white percentages of cities, and the corresponding crime rates of the counties they correspond to?", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select white , crime_rate from city , county_public_safety", "query": "SELECT T1.White ,  T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID", "sub_ques": "what are the white percentages of cities , and the corresponding crime rates of the counties"}
{"db_id": "county_public_safety", "sub_sql": "select name from city", "question": "Show the name of cities in the county that has the largest number of police officers.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from city", "query": "SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)", "sub_ques": "show the name of cities"}
{"db_id": "county_public_safety", "sub_sql": "order by police_officers desc limit 1", "question": "Show the name of cities in the county that has the largest number of police officers.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by police_officers desc limit 1", "query": "SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)", "sub_ques": "the largest number of police officers"}
{"db_id": "county_public_safety", "sub_sql": "select name from city", "question": "What are the names of cities that are in the county with the most police officers?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from city", "query": "SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)", "sub_ques": "what are the names of cities"}
{"db_id": "county_public_safety", "sub_sql": "order by police_officers desc limit 1", "question": "What are the names of cities that are in the county with the most police officers?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by police_officers desc limit 1", "query": "SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)", "sub_ques": "the county with the most police officers"}
{"db_id": "county_public_safety", "sub_sql": "select count city", "question": "Show the number of cities in counties that have a population more than 20000.", "sub_sql_type": "null agg col", "sub_sql_new": "select count city", "query": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)", "sub_ques": "show the number of cities in counties"}
{"db_id": "county_public_safety", "sub_sql": "where population > 20000", "question": "Show the number of cities in counties that have a population more than 20000.", "sub_sql_type": "null col op op value", "sub_sql_new": "where population more than 20000", "query": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)", "sub_ques": "counties that have population more than 20000"}
{"db_id": "county_public_safety", "sub_sql": "select count city", "question": "How many cities are in counties that have populations of over 20000?", "sub_sql_type": "null agg col", "sub_sql_new": "select count city", "query": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)", "sub_ques": "how many cities are in counties"}
{"db_id": "county_public_safety", "sub_sql": "where population > 20000", "question": "How many cities are in counties that have populations of over 20000?", "sub_sql_type": "null col op op value", "sub_sql_new": "where population more than 20000", "query": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)", "sub_ques": "counties that have populations of over 20000"}
{"db_id": "county_public_safety", "sub_sql": "select t2.crime_rate from county_public_safety", "question": "Show the crime rate of counties with a city having white percentage more than 90.", "sub_sql_type": "null col col col", "sub_sql_new": "select crime_rate from county_public_safety", "query": "SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID WHERE T1.White  >  90", "sub_ques": "show the crime rate of counties"}
{"db_id": "county_public_safety", "sub_sql": "where t1.white > 90", "question": "Show the crime rate of counties with a city having white percentage more than 90.", "sub_sql_type": "null col op op value", "sub_sql_new": "where white more than 90", "query": "SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID WHERE T1.White  >  90", "sub_ques": "city having white percentage more than 90"}
{"db_id": "county_public_safety", "sub_sql": "select t2.crime_rate from county_public_safety", "question": "What are the crime rates of counties that contain cities that have white percentages of over 90?", "sub_sql_type": "null col col col", "sub_sql_new": "select crime_rate from county_public_safety", "query": "SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID WHERE T1.White  >  90", "sub_ques": "what are the crime rates of counties"}
{"db_id": "county_public_safety", "sub_sql": "where t1.white > 90", "question": "What are the crime rates of counties that contain cities that have white percentages of over 90?", "sub_sql_type": "null col op op value", "sub_sql_new": "where white more than 90", "query": "SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID WHERE T1.White  >  90", "sub_ques": "cities that have white percentages of over 90"}
{"db_id": "county_public_safety", "sub_sql": "select police_force , count county_public_safety group by police_force", "question": "Please show the police forces and the number of counties with each police force.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select police_force , count county_public_safety", "query": "SELECT Police_force ,  COUNT(*) FROM county_public_safety GROUP BY Police_force", "sub_ques": "show the police forces and the number of counties with each police force"}
{"db_id": "county_public_safety", "sub_sql": "select police_force , count county_public_safety group by police_force", "question": "How many counties correspond to each police force?", "sub_sql_type": "null col null agg col", "sub_sql_new": "select police_force , count county_public_safety", "query": "SELECT Police_force ,  COUNT(*) FROM county_public_safety GROUP BY Police_force", "sub_ques": "how many counties correspond to each police force"}
{"db_id": "county_public_safety", "sub_sql": "select location from county_public_safety", "question": "What is the location shared by most counties?", "sub_sql_type": "null col col col", "sub_sql_new": "select location from county_public_safety", "query": "SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "what is the location"}
{"db_id": "county_public_safety", "sub_sql": "group by location order by count county_public_safety desc limit 1", "question": "What is the location shared by most counties?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count county_public_safety desc limit 1", "query": "SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "the location shared by most counties"}
{"db_id": "county_public_safety", "sub_sql": "group by location order by count county_public_safety desc limit 1", "question": "Which location has the most corresponding counties?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count county_public_safety desc limit 1", "query": "SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "location has the most corresponding counties"}
{"db_id": "county_public_safety", "sub_sql": "select name from county_public_safety", "question": "List the names of counties that do not have any cities.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from county_public_safety", "query": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)", "sub_ques": "list the names of counties"}
{"db_id": "county_public_safety", "sub_sql": "select name from county_public_safety", "question": "What are the names of counties that do not contain any cities?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from county_public_safety", "query": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)", "sub_ques": "what are the names of counties"}
{"db_id": "county_public_safety", "sub_sql": "county_public_safety not in city", "question": "What are the names of counties that do not contain any cities?", "sub_sql_type": "tab tab tab op op tab", "sub_sql_new": "county public safety not in city", "query": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)", "sub_ques": "counties that do not contain any cities"}
{"db_id": "county_public_safety", "sub_sql": "select name from city", "question": "Show the names of cities in counties that have a crime rate less than 100.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from city", "query": "SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  100)", "sub_ques": "show the names of cities in counties"}
{"db_id": "county_public_safety", "sub_sql": "where crime_rate < 100", "question": "Show the names of cities in counties that have a crime rate less than 100.", "sub_sql_type": "null col op op value", "sub_sql_new": "where crime_rate less than 100", "query": "SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  100)", "sub_ques": "counties that have a crime rate less than 100"}
{"db_id": "county_public_safety", "sub_sql": "select name from city", "question": "What are the names of cities that are in counties that have a crime rate below 100?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from city", "query": "SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  100)", "sub_ques": "what are the names of cities"}
{"db_id": "county_public_safety", "sub_sql": "where crime_rate < 100", "question": "What are the names of cities that are in counties that have a crime rate below 100?", "sub_sql_type": "null col op op value", "sub_sql_new": "where crime_rate less than 100", "query": "SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  100)", "sub_ques": "counties that have a crime rate below 100"}
{"db_id": "county_public_safety", "sub_sql": "select case_burden from county_public_safety", "question": "Show the case burden of counties in descending order of population.", "sub_sql_type": "null col col col", "sub_sql_new": "select case_burden from county_public_safety", "query": "SELECT Case_burden FROM county_public_safety ORDER BY Population DESC", "sub_ques": "show the case burden of counties"}
{"db_id": "county_public_safety", "sub_sql": "order by population desc", "question": "Show the case burden of counties in descending order of population.", "sub_sql_type": "null null col null", "sub_sql_new": "order by population desc", "query": "SELECT Case_burden FROM county_public_safety ORDER BY Population DESC", "sub_ques": "in descending order of population"}
{"db_id": "county_public_safety", "sub_sql": "select case_burden from county_public_safety", "question": "What are the case burdens of counties, ordered descending by population?", "sub_sql_type": "null col col col", "sub_sql_new": "select case_burden from county_public_safety", "query": "SELECT Case_burden FROM county_public_safety ORDER BY Population DESC", "sub_ques": "what are the case burdens of counties"}
{"db_id": "county_public_safety", "sub_sql": "order by population desc", "question": "What are the case burdens of counties, ordered descending by population?", "sub_sql_type": "null null col null", "sub_sql_new": "order by population desc", "query": "SELECT Case_burden FROM county_public_safety ORDER BY Population DESC", "sub_ques": "ordered descending by population"}
{"db_id": "inn_1", "sub_sql": "select roomname from rooms", "question": "Find the names of all modern rooms with a base price below $160 and two beds.", "sub_sql_type": "null col col col", "sub_sql_new": "select roomname from rooms", "query": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';", "sub_ques": "find the names of all modern rooms"}
{"db_id": "inn_1", "sub_sql": "where baseprice < 160", "question": "Find the names of all modern rooms with a base price below $160 and two beds.", "sub_sql_type": "null col op op value", "sub_sql_new": "where baseprice less than 160", "query": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';", "sub_ques": "with a base price below $ 160"}
{"db_id": "inn_1", "sub_sql": "select roomname from rooms", "question": "What are the names of modern rooms that have a base price lower than $160 and two beds.", "sub_sql_type": "null col col col", "sub_sql_new": "select roomname from rooms", "query": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';", "sub_ques": "what are the names of modern rooms"}
{"db_id": "inn_1", "sub_sql": "where baseprice < 160", "question": "What are the names of modern rooms that have a base price lower than $160 and two beds.", "sub_sql_type": "null col op op value", "sub_sql_new": "where baseprice less than 160", "query": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';", "sub_ques": "that have a base price lower than $ 160"}
{"db_id": "inn_1", "sub_sql": "select roomname , roomid from rooms", "question": "Find all the rooms that have a price higher than 160 and can accommodate more than 2 people. Report room names and ids.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select roomname , roomid from rooms", "query": "SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2;", "sub_ques": "report room names and ids"}
{"db_id": "inn_1", "sub_sql": "where baseprice > 160", "question": "Find all the rooms that have a price higher than 160 and can accommodate more than 2 people. Report room names and ids.", "sub_sql_type": "null col op op value", "sub_sql_new": "where baseprice more than 160", "query": "SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2;", "sub_ques": "rooms that have a price higher than 160"}
{"db_id": "inn_1", "sub_sql": "select roomname , roomid from rooms", "question": "What are the room names and ids of all the rooms that cost more than 160 and can accommodate more than two people.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select roomname , roomid from rooms", "query": "SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2;", "sub_ques": "what are the room names and ids of all the rooms"}
{"db_id": "inn_1", "sub_sql": "where baseprice > 160", "question": "What are the room names and ids of all the rooms that cost more than 160 and can accommodate more than two people.", "sub_sql_type": "null col op op value", "sub_sql_new": "where baseprice more than 160", "query": "SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2;", "sub_ques": "rooms that cost more than 160"}
{"db_id": "inn_1", "sub_sql": "select t2.roomname from rooms", "question": "Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations.", "sub_sql_type": "null col col col", "sub_sql_new": "select roomname from rooms", "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;", "sub_ques": "Find the most popular room in the hotel"}
{"db_id": "inn_1", "sub_sql": "group by t1.room order by count reservations desc limit 1", "question": "Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count reservations desc limit 1", "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;", "sub_ques": "the room that had seen the largest number of reservations"}
{"db_id": "inn_1", "sub_sql": "group by t1.room order by count reservations desc limit 1", "question": "Which room has the largest number of reservations?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count reservations desc limit 1", "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;", "sub_ques": "the largest number of reservations"}
{"db_id": "inn_1", "sub_sql": "select kids from reservations", "question": "How many kids stay in the rooms reserved by ROY SWEAZY?", "sub_sql_type": "null col col col", "sub_sql_new": "select kids from reservations", "query": "SELECT kids FROM Reservations WHERE FirstName = \\\\\\\"ROY\\\\\\\" AND LastName  =  \\\\\\\"SWEAZY\\\\\\\";", "sub_ques": "how many kids stay in the rooms"}
{"db_id": "inn_1", "sub_sql": "select kids from reservations", "question": "Find the number of kids staying in the rooms reserved by a person called ROY SWEAZ.", "sub_sql_type": "null col col col", "sub_sql_new": "select kids from reservations", "query": "SELECT kids FROM Reservations WHERE FirstName = \\\\\\\"ROY\\\\\\\" AND LastName  =  \\\\\\\"SWEAZY\\\\\\\";", "sub_ques": "Find the number of kids staying in the rooms"}
{"db_id": "inn_1", "sub_sql": "where firstname = roy", "question": "Find the number of kids staying in the rooms reserved by a person called ROY SWEAZ.", "sub_sql_type": "null col op op value", "sub_sql_new": "where firstname equal to roy", "query": "SELECT kids FROM Reservations WHERE FirstName = \\\\\\\"ROY\\\\\\\" AND LastName  =  \\\\\\\"SWEAZY\\\\\\\";", "sub_ques": "by a person called ROY SWEAZ"}
{"db_id": "inn_1", "sub_sql": "select count reservations", "question": "How many times does ROY SWEAZY has reserved a room.", "sub_sql_type": "null agg col", "sub_sql_new": "select count reservations", "query": "SELECT count(*) FROM Reservations WHERE FirstName = \\\\\\\"ROY\\\\\\\" AND LastName  =  \\\\\\\"SWEAZY\\\\\\\";", "sub_ques": "how many times"}
{"db_id": "inn_1", "sub_sql": "select count reservations", "question": "Find the number of times ROY SWEAZY has reserved a room.", "sub_sql_type": "null agg col", "sub_sql_new": "select count reservations", "query": "SELECT count(*) FROM Reservations WHERE FirstName = \\\\\\\"ROY\\\\\\\" AND LastName  =  \\\\\\\"SWEAZY\\\\\\\";", "sub_ques": "find the number of times"}
{"db_id": "inn_1", "sub_sql": "select t2.roomname , t1.rate , t1.checkin , t1.checkout from rooms , reservations", "question": "Which room has the highest rate? List the room's full name, rate, check in and check out date.", "sub_sql_type": "null col null col null col null col col col null col", "sub_sql_new": "select roomname , rate , checkin , checkout from rooms , reservations", "query": "SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1;", "sub_ques": "list the room 's full name , rate , check in and check out"}
{"db_id": "inn_1", "sub_sql": "group by t1.room order by t1.rate desc limit 1", "question": "Which room has the highest rate? List the room's full name, rate, check in and check out date.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by rate desc limit 1", "query": "SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1;", "sub_ques": "room has the highest rate"}
{"db_id": "inn_1", "sub_sql": "select t2.roomname , t1.rate , t1.checkin , t1.checkout from rooms , reservations", "question": "Return the name, rate, check in and check out date for the room with the highest rate.", "sub_sql_type": "null col null col null col null col col col null col", "sub_sql_new": "select roomname , rate , checkin , checkout from rooms , reservations", "query": "SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1;", "sub_ques": "return the name , rate , check in and check out date for the room"}
{"db_id": "inn_1", "sub_sql": "group by t1.room order by t1.rate desc limit 1", "question": "Return the name, rate, check in and check out date for the room with the highest rate.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by rate desc limit 1", "query": "SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1;", "sub_ques": "room with the highest rate"}
{"db_id": "inn_1", "sub_sql": "select adults from reservations", "question": "How many adults stay in the room CONRAD SELBIG checked in on Oct 23, 2010?", "sub_sql_type": "null col col col", "sub_sql_new": "select adults from reservations", "query": "SELECT Adults FROM Reservations WHERE CheckIn  =  \\\\\\\"2010-10-23\\\\\\\" AND FirstName  =  \\\\\\\"CONRAD\\\\\\\" AND LastName  =  \\\\\\\"SELBIG\\\\\\\";", "sub_ques": "how many adults stay in the room"}
{"db_id": "inn_1", "sub_sql": "where checkin = 2010-10-23", "question": "How many adults stay in the room CONRAD SELBIG checked in on Oct 23, 2010?", "sub_sql_type": "null col op op value", "sub_sql_new": "where checkin equal to 2010-10-23", "query": "SELECT Adults FROM Reservations WHERE CheckIn  =  \\\\\\\"2010-10-23\\\\\\\" AND FirstName  =  \\\\\\\"CONRAD\\\\\\\" AND LastName  =  \\\\\\\"SELBIG\\\\\\\";", "sub_ques": "checked in on Oct 23, 2010"}
{"db_id": "inn_1", "sub_sql": "select adults from reservations", "question": "Find the number of adults for the room reserved and checked in by CONRAD SELBIG on Oct 23, 2010.", "sub_sql_type": "null col col col", "sub_sql_new": "select adults from reservations", "query": "SELECT Adults FROM Reservations WHERE CheckIn  =  \\\\\\\"2010-10-23\\\\\\\" AND FirstName  =  \\\\\\\"CONRAD\\\\\\\" AND LastName  =  \\\\\\\"SELBIG\\\\\\\";", "sub_ques": "Find the number of adults for the room"}
{"db_id": "inn_1", "sub_sql": "where checkin = 2010-10-23", "question": "Find the number of adults for the room reserved and checked in by CONRAD SELBIG on Oct 23, 2010.", "sub_sql_type": "null col op op value", "sub_sql_new": "where checkin equal to 2010-10-23", "query": "SELECT Adults FROM Reservations WHERE CheckIn  =  \\\\\\\"2010-10-23\\\\\\\" AND FirstName  =  \\\\\\\"CONRAD\\\\\\\" AND LastName  =  \\\\\\\"SELBIG\\\\\\\";", "sub_ques": "checked in on Oct 23, 2010"}
{"db_id": "inn_1", "sub_sql": "select kids from reservations", "question": "How many kids stay in the room DAMIEN TRACHSEL checked in on Sep 21, 2010?", "sub_sql_type": "null col col col", "sub_sql_new": "select kids from reservations", "query": "SELECT Kids FROM Reservations WHERE CheckIn  =  \\\\\\\"2010-09-21\\\\\\\" AND FirstName  =  \\\\\\\"DAMIEN\\\\\\\" AND LastName  =  \\\\\\\"TRACHSEL\\\\\\\";", "sub_ques": "how many kids stay in the room"}
{"db_id": "inn_1", "sub_sql": "where checkin = 2010-09-21", "question": "How many kids stay in the room DAMIEN TRACHSEL checked in on Sep 21, 2010?", "sub_sql_type": "null col op op value", "sub_sql_new": "where checkin equal to 2010-09-21", "query": "SELECT Kids FROM Reservations WHERE CheckIn  =  \\\\\\\"2010-09-21\\\\\\\" AND FirstName  =  \\\\\\\"DAMIEN\\\\\\\" AND LastName  =  \\\\\\\"TRACHSEL\\\\\\\";", "sub_ques": "checked in on Sep 21, 2010"}
{"db_id": "inn_1", "sub_sql": "select kids from reservations", "question": "Return the number of kids for the room reserved and checked in by DAMIEN TRACHSEL on  Sep 21, 2010.", "sub_sql_type": "null col col col", "sub_sql_new": "select kids from reservations", "query": "SELECT Kids FROM Reservations WHERE CheckIn  =  \\\\\\\"2010-09-21\\\\\\\" AND FirstName  =  \\\\\\\"DAMIEN\\\\\\\" AND LastName  =  \\\\\\\"TRACHSEL\\\\\\\";", "sub_ques": "Return the number of kids for the room"}
{"db_id": "inn_1", "sub_sql": "select sum beds from rooms", "question": "How many king beds are there?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select sum beds from rooms", "query": "SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';", "sub_ques": "how many king beds"}
{"db_id": "inn_1", "sub_sql": "where bedtype = king", "question": "How many king beds are there?", "sub_sql_type": "null col op op value", "sub_sql_new": "where bedtype equal to king", "query": "SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';", "sub_ques": "king beds"}
{"db_id": "inn_1", "sub_sql": "select sum beds from rooms", "question": "Find the total number of king beds available.", "sub_sql_type": "null agg col col col", "sub_sql_new": "select sum beds from rooms", "query": "SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';", "sub_ques": "find the total number of king beds"}
{"db_id": "inn_1", "sub_sql": "where bedtype = king", "question": "Find the total number of king beds available.", "sub_sql_type": "null col op op value", "sub_sql_new": "where bedtype equal to king", "query": "SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';", "sub_ques": "king beds"}
{"db_id": "inn_1", "sub_sql": "select roomname , decor from rooms", "question": "List the names and decor of rooms that have a king bed. Sort the list by their price.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select roomname , decor from rooms", "query": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;", "sub_ques": "list the names and decor of rooms"}
{"db_id": "inn_1", "sub_sql": "where bedtype = king", "question": "List the names and decor of rooms that have a king bed. Sort the list by their price.", "sub_sql_type": "null col op op value", "sub_sql_new": "where bedtype equal to king", "query": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;", "sub_ques": "king bed"}
{"db_id": "inn_1", "sub_sql": "order by baseprice", "question": "List the names and decor of rooms that have a king bed. Sort the list by their price.", "sub_sql_type": "null null col", "sub_sql_new": "order by baseprice", "query": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;", "sub_ques": "Sort the list by their price"}
{"db_id": "inn_1", "sub_sql": "select roomname , decor from rooms", "question": "What are the names and decor of rooms with a king bed? Sort them by their price", "sub_sql_type": "null col null col col col", "sub_sql_new": "select roomname , decor from rooms", "query": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;", "sub_ques": "what are the names and decor of rooms"}
{"db_id": "inn_1", "sub_sql": "order by baseprice", "question": "What are the names and decor of rooms with a king bed? Sort them by their price", "sub_sql_type": "null null col", "sub_sql_new": "order by baseprice", "query": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;", "sub_ques": "Sort them by their price"}
{"db_id": "inn_1", "sub_sql": "select roomname , baseprice from rooms", "question": "Which room has cheapest base price? List the room's name and the base price.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select roomname , baseprice from rooms", "query": "SELECT roomName ,  basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1;", "sub_ques": "List the room's name and the base price"}
{"db_id": "inn_1", "sub_sql": "order by baseprice asc limit 1", "question": "Which room has cheapest base price? List the room's name and the base price.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by baseprice asc limit 1", "query": "SELECT roomName ,  basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1;", "sub_ques": "list the room 's name and the base price"}
{"db_id": "inn_1", "sub_sql": "select roomname , baseprice from rooms", "question": "What are the room name and base price of the room with the lowest base price?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select roomname , baseprice from rooms", "query": "SELECT roomName ,  basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1;", "sub_ques": "what are the room name and base price of the room"}
{"db_id": "inn_1", "sub_sql": "order by baseprice asc limit 1", "question": "What are the room name and base price of the room with the lowest base price?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by baseprice asc limit 1", "query": "SELECT roomName ,  basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1;", "sub_ques": "the room with the lowest base price"}
{"db_id": "inn_1", "sub_sql": "select decor from rooms", "question": "What is the decor of room Recluse and defiance?", "sub_sql_type": "null col col col", "sub_sql_new": "select decor from rooms", "query": "SELECT decor FROM Rooms WHERE roomName  =  \\\\\\\"Recluse and defiance\\\\\\\";", "sub_ques": "what is the decor of room"}
{"db_id": "inn_1", "sub_sql": "select decor from rooms", "question": "Return the decor of the room named \\\\\\\"Recluse and defiance\\\\\\\".", "sub_sql_type": "null col col col", "sub_sql_new": "select decor from rooms", "query": "SELECT decor FROM Rooms WHERE roomName  =  \\\\\\\"Recluse and defiance\\\\\\\";", "sub_ques": "Return the decor of the room"}
{"db_id": "inn_1", "sub_sql": "where roomname = recluseanddefiance", "question": "Return the decor of the room named \\\\\\\"Recluse and defiance\\\\\\\".", "sub_sql_type": "null col op op value", "sub_sql_new": "where roomname equal to recluseanddefiance", "query": "SELECT decor FROM Rooms WHERE roomName  =  \\\\\\\"Recluse and defiance\\\\\\\";", "sub_ques": "room named recluse and defiance"}
{"db_id": "inn_1", "sub_sql": "select bedtype , avg baseprice from rooms", "question": "What is the average base price of different bed type? List bed type and average base price.", "sub_sql_type": "null col null agg col col col", "sub_sql_new": "select bedtype , avg baseprice from rooms", "query": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;", "sub_ques": "List bed type and average base price"}
{"db_id": "inn_1", "sub_sql": "select bedtype , avg baseprice from rooms", "question": "For each bed type, find the average base price of different bed type.", "sub_sql_type": "null col null agg col col col", "sub_sql_new": "select bedtype , avg baseprice from rooms", "query": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;", "sub_ques": "find the average base price of different bed type"}
{"db_id": "inn_1", "sub_sql": "select sum maxoccupancy from rooms", "question": "What is the total number of people who could stay in the modern rooms in this inn?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select sum maxoccupancy from rooms", "query": "SELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern';", "sub_ques": "what is the total number of people who could stay in the modern rooms"}
{"db_id": "inn_1", "sub_sql": "where decor = modern", "question": "What is the total number of people who could stay in the modern rooms in this inn?", "sub_sql_type": "null col op op value", "sub_sql_new": "where decor equal to modern", "query": "SELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern';", "sub_ques": "modern rooms"}
{"db_id": "inn_1", "sub_sql": "select sum maxoccupancy from rooms", "question": "How many people in total can stay in the modern rooms of this inn?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select sum maxoccupancy from rooms", "query": "SELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern';", "sub_ques": "how many people in total can stay in the modern rooms"}
{"db_id": "inn_1", "sub_sql": "where decor = modern", "question": "How many people in total can stay in the modern rooms of this inn?", "sub_sql_type": "null col op op value", "sub_sql_new": "where decor equal to modern", "query": "SELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern';", "sub_ques": "modern rooms"}
{"db_id": "inn_1", "sub_sql": "select t2.decor from rooms", "question": "What kind of decor has the least number of reservations?", "sub_sql_type": "null col col col", "sub_sql_new": "select decor from rooms", "query": "SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1;", "sub_ques": "what kind of decor"}
{"db_id": "inn_1", "sub_sql": "group by t2.decor order by count t2.decor asc limit 1", "question": "What kind of decor has the least number of reservations?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count decor asc limit 1", "query": "SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1;", "sub_ques": "decor has the least number of reservations"}
{"db_id": "inn_1", "sub_sql": "group by t2.decor order by count t2.decor asc limit 1", "question": "What is the least popular kind of decor?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count decor asc limit 1", "query": "SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1;", "sub_ques": "the least popular kind of decor"}
{"db_id": "inn_1", "sub_sql": "select count rooms", "question": "How many rooms are there?", "sub_sql_type": "null agg col", "sub_sql_new": "select count rooms", "query": "SELECT count(*) FROM Rooms;", "sub_ques": "how many rooms"}
{"db_id": "inn_1", "sub_sql": "select count rooms", "question": "What is the total number of rooms available in this inn?", "sub_sql_type": "null agg col", "sub_sql_new": "select count rooms", "query": "SELECT count(*) FROM Rooms;", "sub_ques": "what is the total number of rooms"}
{"db_id": "inn_1", "sub_sql": "select count rooms", "question": "Find the number of rooms with a king bed.", "sub_sql_type": "null agg col", "sub_sql_new": "select count rooms", "query": "SELECT count(*) FROM Rooms WHERE bedType  =  \\\\\\\"King\\\\\\\";", "sub_ques": "find the number of rooms"}
{"db_id": "inn_1", "sub_sql": "where bedtype = king", "question": "Find the number of rooms with a king bed.", "sub_sql_type": "null col op op value", "sub_sql_new": "where bedtype equal to king", "query": "SELECT count(*) FROM Rooms WHERE bedType  =  \\\\\\\"King\\\\\\\";", "sub_ques": "rooms with a king bed"}
{"db_id": "inn_1", "sub_sql": "select count rooms", "question": "How many rooms have a king bed?", "sub_sql_type": "null agg col", "sub_sql_new": "select count rooms", "query": "SELECT count(*) FROM Rooms WHERE bedType  =  \\\\\\\"King\\\\\\\";", "sub_ques": "how many rooms"}
{"db_id": "inn_1", "sub_sql": "where bedtype = king", "question": "How many rooms have a king bed?", "sub_sql_type": "null col op op value", "sub_sql_new": "where bedtype equal to king", "query": "SELECT count(*) FROM Rooms WHERE bedType  =  \\\\\\\"King\\\\\\\";", "sub_ques": "rooms have a king bed"}
{"db_id": "inn_1", "sub_sql": "select bedtype , count rooms group by bedtype", "question": "Find the number of rooms for each bed type.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select bedtype , count rooms", "query": "SELECT bedType ,  count(*) FROM Rooms GROUP BY bedType;", "sub_ques": "find the number of rooms for each bed type"}
{"db_id": "inn_1", "sub_sql": "select bedtype , count rooms group by bedtype", "question": "What are the number of rooms for each bed type?", "sub_sql_type": "null col null agg col", "sub_sql_new": "select bedtype , count rooms", "query": "SELECT bedType ,  count(*) FROM Rooms GROUP BY bedType;", "sub_ques": "what are the number of rooms for each bed type"}
{"db_id": "inn_1", "sub_sql": "select roomname from rooms", "question": "Find the name of the room with the maximum occupancy.", "sub_sql_type": "null col col col", "sub_sql_new": "select roomname from rooms", "query": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;", "sub_ques": "find the name of the room"}
{"db_id": "inn_1", "sub_sql": "order by maxoccupancy desc limit 1", "question": "Find the name of the room with the maximum occupancy.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by maxoccupancy desc limit 1", "query": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;", "sub_ques": "the room with the maximum occupancy"}
{"db_id": "inn_1", "sub_sql": "select roomname from rooms", "question": "What is the name of the room that can accommodate the most people?", "sub_sql_type": "null col col col", "sub_sql_new": "select roomname from rooms", "query": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;", "sub_ques": "what is the name of the room"}
{"db_id": "inn_1", "sub_sql": "order by maxoccupancy desc limit 1", "question": "What is the name of the room that can accommodate the most people?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by maxoccupancy desc limit 1", "query": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;", "sub_ques": "room that can accommodate the most people"}
{"db_id": "inn_1", "sub_sql": "select roomid , roomname from rooms", "question": "Find the id and name of the most expensive base price room.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select roomid , roomname from rooms", "query": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;", "sub_ques": "find the id and name of the most expensive base price room"}
{"db_id": "inn_1", "sub_sql": "order by baseprice desc limit 1", "question": "Find the id and name of the most expensive base price room.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by baseprice desc limit 1", "query": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;", "sub_ques": "the most expensive base price"}
{"db_id": "inn_1", "sub_sql": "order by baseprice desc limit 1", "question": "Which room has the highest base price?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by baseprice desc limit 1", "query": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;", "sub_ques": "room has the highest base price"}
{"db_id": "inn_1", "sub_sql": "select roomname , bedtype from rooms", "question": "List the type of bed and name of all traditional rooms.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select roomname , bedtype from rooms", "query": "SELECT roomName ,  bedType FROM Rooms WHERE decor = \\\\\\\"traditional\\\\\\\";", "sub_ques": "list the type of bed and name of all rooms"}
{"db_id": "inn_1", "sub_sql": "select roomname , bedtype from rooms", "question": "What are the bed type and name of all the rooms with traditional decor?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select roomname , bedtype from rooms", "query": "SELECT roomName ,  bedType FROM Rooms WHERE decor = \\\\\\\"traditional\\\\\\\";", "sub_ques": "what are the bed type and name of all the rooms"}
{"db_id": "inn_1", "sub_sql": "where decor = traditional", "question": "What are the bed type and name of all the rooms with traditional decor?", "sub_sql_type": "null col op op value", "sub_sql_new": "where decor equal to traditional", "query": "SELECT roomName ,  bedType FROM Rooms WHERE decor = \\\\\\\"traditional\\\\\\\";", "sub_ques": "the rooms with traditional decor"}
{"db_id": "inn_1", "sub_sql": "select decor , count rooms group by decor", "question": "Find the number of rooms with king bed for each decor type.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select decor , count rooms", "query": "SELECT decor ,  count(*) FROM Rooms WHERE bedType = \\\\\\\"King\\\\\\\" GROUP BY decor;", "sub_ques": "find the number of rooms with king bed for each decor"}
{"db_id": "inn_1", "sub_sql": "select decor , count rooms group by decor", "question": "How many rooms have king beds? Report the number for each decor type.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select decor , count rooms", "query": "SELECT decor ,  count(*) FROM Rooms WHERE bedType = \\\\\\\"King\\\\\\\" GROUP BY decor;", "sub_ques": "report the number for each decor"}
{"db_id": "inn_1", "sub_sql": "select decor , avg baseprice , min baseprice from rooms", "question": "Find the average and minimum price of the rooms in different decor.", "sub_sql_type": "null col null agg col null agg col col col", "sub_sql_new": "select decor , avg baseprice , min baseprice from rooms", "query": "SELECT decor , avg(basePrice) ,  min(basePrice) FROM Rooms GROUP BY decor;", "sub_ques": "find the average and minimum price of the rooms in different decor"}
{"db_id": "inn_1", "sub_sql": "select decor , avg baseprice , min baseprice from rooms", "question": "What is the average minimum and price of the rooms for each different decor.", "sub_sql_type": "null col null agg col null agg col col col", "sub_sql_new": "select decor , avg baseprice , min baseprice from rooms", "query": "SELECT decor , avg(basePrice) ,  min(basePrice) FROM Rooms GROUP BY decor;", "sub_ques": "what is the average minimum and price of the rooms for each different decor"}
{"db_id": "inn_1", "sub_sql": "select roomname from rooms", "question": "List the name of all rooms sorted by their prices.", "sub_sql_type": "null col col col", "sub_sql_new": "select roomname from rooms", "query": "SELECT roomName FROM Rooms ORDER BY basePrice;", "sub_ques": "list the name of all rooms"}
{"db_id": "inn_1", "sub_sql": "order by baseprice", "question": "List the name of all rooms sorted by their prices.", "sub_sql_type": "null null col", "sub_sql_new": "order by baseprice", "query": "SELECT roomName FROM Rooms ORDER BY basePrice;", "sub_ques": "sorted by their prices"}
{"db_id": "inn_1", "sub_sql": "select roomname from rooms", "question": "Sort all the rooms according to the price. Just report the room names.", "sub_sql_type": "null col col col", "sub_sql_new": "select roomname from rooms", "query": "SELECT roomName FROM Rooms ORDER BY basePrice;", "sub_ques": "just report the room names"}
{"db_id": "inn_1", "sub_sql": "order by baseprice", "question": "Sort all the rooms according to the price. Just report the room names.", "sub_sql_type": "null null col", "sub_sql_new": "order by baseprice", "query": "SELECT roomName FROM Rooms ORDER BY basePrice;", "sub_ques": "Sort all the rooms according to the price"}
{"db_id": "inn_1", "sub_sql": "select decor , count * from rooms group by decor", "question": "Find the number of rooms with price higher than 120 for different decor.", "sub_sql_type": "null col null agg col col col", "sub_sql_new": "select decor , count * from rooms", "query": "SELECT decor , count(*) FROM Rooms WHERE basePrice  >  120 GROUP BY decor;", "sub_ques": "find the number of rooms with price higher than 120 for different decor"}
{"db_id": "inn_1", "sub_sql": "where baseprice > 120", "question": "Find the number of rooms with price higher than 120 for different decor.", "sub_sql_type": "null col op op value", "sub_sql_new": "where baseprice more than 120", "query": "SELECT decor , count(*) FROM Rooms WHERE basePrice  >  120 GROUP BY decor;", "sub_ques": "rooms with price higher than 120"}
{"db_id": "inn_1", "sub_sql": "select decor , count * from rooms group by decor", "question": "How many rooms cost more than 120, for each different decor?", "sub_sql_type": "null col null agg col col col", "sub_sql_new": "select decor , count * from rooms", "query": "SELECT decor , count(*) FROM Rooms WHERE basePrice  >  120 GROUP BY decor;", "sub_ques": "how many rooms cost more than 120 , for each different decor"}
{"db_id": "inn_1", "sub_sql": "where baseprice > 120", "question": "How many rooms cost more than 120, for each different decor?", "sub_sql_type": "null col op op value", "sub_sql_new": "where baseprice more than 120", "query": "SELECT decor , count(*) FROM Rooms WHERE basePrice  >  120 GROUP BY decor;", "sub_ques": "rooms cost more than 120"}
{"db_id": "inn_1", "sub_sql": "select bedtype , avg baseprice from rooms", "question": "For each bed type, find the average room price.", "sub_sql_type": "null col null agg col col col", "sub_sql_new": "select bedtype , avg baseprice from rooms", "query": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;", "sub_ques": "for each bed type , find the average room"}
{"db_id": "inn_1", "sub_sql": "select bedtype , avg baseprice from rooms", "question": "What is the average base price of rooms, for each bed type?", "sub_sql_type": "null col null agg col col col", "sub_sql_new": "select bedtype , avg baseprice from rooms", "query": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;", "sub_ques": "what is the average base price of rooms , for each bed type"}
{"db_id": "inn_1", "sub_sql": "select roomname from rooms", "question": "List the name of rooms with king or queen bed.", "sub_sql_type": "null col col col", "sub_sql_new": "select roomname from rooms", "query": "SELECT roomName FROM Rooms WHERE bedType  =  \\\\\\\"King\\\\\\\" OR bedType  =  \\\\\\\"Queen\\\\\\\";", "sub_ques": "list the name of rooms"}
{"db_id": "inn_1", "sub_sql": "select roomname from rooms", "question": "What are the names of rooms that have either king or queen bed?", "sub_sql_type": "null col col col", "sub_sql_new": "select roomname from rooms", "query": "SELECT roomName FROM Rooms WHERE bedType  =  \\\\\\\"King\\\\\\\" OR bedType  =  \\\\\\\"Queen\\\\\\\";", "sub_ques": "what are the names of rooms"}
{"db_id": "inn_1", "sub_sql": "select count distinct bedtype from rooms", "question": "How many different types of beds are there?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct bedtype from rooms", "query": "SELECT count(DISTINCT bedType) FROM Rooms;", "sub_ques": "how many different types of beds"}
{"db_id": "inn_1", "sub_sql": "select count distinct bedtype from rooms", "question": "Find the number of distinct bed types available in this inn.", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct bedtype from rooms", "query": "SELECT count(DISTINCT bedType) FROM Rooms;", "sub_ques": "find the number of distinct bed types"}
{"db_id": "inn_1", "sub_sql": "select roomid , roomname from rooms", "question": "Find the name and id of the top 3 expensive rooms.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select roomid , roomname from rooms", "query": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;", "sub_ques": "find the name and id of the rooms"}
{"db_id": "inn_1", "sub_sql": "order by baseprice desc limit 3", "question": "Find the name and id of the top 3 expensive rooms.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by baseprice desc limit 3", "query": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;", "sub_ques": "the top 3 expensive rooms"}
{"db_id": "inn_1", "sub_sql": "select roomid , roomname from rooms", "question": "What are the name and id of the three highest priced rooms?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select roomid , roomname from rooms", "query": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;", "sub_ques": "what are the name and id of the rooms"}
{"db_id": "inn_1", "sub_sql": "order by baseprice desc limit 3", "question": "What are the name and id of the three highest priced rooms?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by baseprice desc limit 3", "query": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;", "sub_ques": "the three highest priced rooms"}
{"db_id": "inn_1", "sub_sql": "select roomname from rooms", "question": "Find the name of rooms whose price is higher than the average price.", "sub_sql_type": "null col col col", "sub_sql_new": "select roomname from rooms", "query": "SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );", "sub_ques": "find the name of rooms"}
{"db_id": "inn_1", "sub_sql": "where baseprice > select avg baseprice", "question": "Find the name of rooms whose price is higher than the average price.", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where baseprice more than select avg baseprice", "query": "SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );", "sub_ques": "price is higher than the average price"}
{"db_id": "inn_1", "sub_sql": "select roomname from rooms", "question": "What are the name of rooms that cost more than the average.", "sub_sql_type": "null col col col", "sub_sql_new": "select roomname from rooms", "query": "SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );", "sub_ques": "what are the name of rooms"}
{"db_id": "inn_1", "sub_sql": "where baseprice > select avg baseprice", "question": "What are the name of rooms that cost more than the average.", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where baseprice more than select avg baseprice", "query": "SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );", "sub_ques": "cost more than the average"}
{"db_id": "inn_1", "sub_sql": "select count rooms", "question": "Find the number of rooms that do not have any reservation.", "sub_sql_type": "null agg col", "sub_sql_new": "select count rooms", "query": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)", "sub_ques": "find the number of rooms"}
{"db_id": "inn_1", "sub_sql": "select distinct room from reservations", "question": "Find the number of rooms that do not have any reservation.", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct room from reservations", "query": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)", "sub_ques": "find the number of rooms"}
{"db_id": "inn_1", "sub_sql": "select count rooms", "question": "How many rooms have not had any reservation yet?", "sub_sql_type": "null agg col", "sub_sql_new": "select count rooms", "query": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)", "sub_ques": "how many rooms"}
{"db_id": "inn_1", "sub_sql": "select distinct room from reservations", "question": "How many rooms have not had any reservation yet?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct room from reservations", "query": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)", "sub_ques": "how many rooms"}
{"db_id": "inn_1", "sub_sql": "select t2.roomname , count reservations , t1.room group by t1.room", "question": "Return the name and number of reservations made for each of the rooms.", "sub_sql_type": "null col null agg col null col", "sub_sql_new": "select roomname , count reservations , room", "query": "SELECT T2.roomName ,  count(*) ,  T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room", "sub_ques": "return the name and number of reservations made for each of the rooms"}
{"db_id": "inn_1", "sub_sql": "select t2.roomname from rooms", "question": "Find the names of rooms that have been reserved for more than 60 times.", "sub_sql_type": "null col col col", "sub_sql_new": "select roomname from rooms", "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  60", "sub_ques": "find the names of rooms"}
{"db_id": "inn_1", "sub_sql": "group by t1.room having count Reservations > 60", "question": "Find the names of rooms that have been reserved for more than 60 times.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  60", "sub_ques": "rooms that have been reserved for more than 60 times"}
{"db_id": "inn_1", "sub_sql": "select t2.roomname from rooms", "question": "What are the names of rooms whose reservation frequency exceeds 60 times?", "sub_sql_type": "null col col col", "sub_sql_new": "select roomname from rooms", "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  60", "sub_ques": "what are the names of rooms"}
{"db_id": "inn_1", "sub_sql": "group by t1.room having count Reservations > 60", "question": "What are the names of rooms whose reservation frequency exceeds 60 times?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  60", "sub_ques": "rooms whose reservation frequency exceeds 60 times"}
{"db_id": "inn_1", "sub_sql": "select roomname from rooms", "question": "Find the name of rooms whose base price is between 120 and 150.", "sub_sql_type": "null col col col", "sub_sql_new": "select roomname from rooms", "query": "SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150", "sub_ques": "find the name of rooms"}
{"db_id": "inn_1", "sub_sql": "select roomname from rooms", "question": "Which rooms cost between 120 and 150? Give me the room names.", "sub_sql_type": "null col col col", "sub_sql_new": "select roomname from rooms", "query": "SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150", "sub_ques": "give me the room names"}
{"db_id": "inn_1", "sub_sql": "select t2.roomname from rooms", "question": "Find the name of rooms booked by some customers whose first name contains ROY.", "sub_sql_type": "null col col col", "sub_sql_new": "select roomname from rooms", "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'", "sub_ques": "find the name of rooms"}
{"db_id": "inn_1", "sub_sql": "where firstname like roy", "question": "Find the name of rooms booked by some customers whose first name contains ROY.", "sub_sql_type": "null col op value", "sub_sql_new": "where firstname like roy", "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'", "sub_ques": "customers whose first name contains roy"}
{"db_id": "inn_1", "sub_sql": "select t2.roomname from rooms", "question": "What are the name of rooms booked by customers whose first name has \\\\\\\"ROY\\\\\\\" in part?", "sub_sql_type": "null col col col", "sub_sql_new": "select roomname from rooms", "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'", "sub_ques": "what are the name of rooms"}
{"db_id": "inn_1", "sub_sql": "where firstname like roy", "question": "What are the name of rooms booked by customers whose first name has \\\\\\\"ROY\\\\\\\" in part?", "sub_sql_type": "null col op value", "sub_sql_new": "where firstname like roy", "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'", "sub_ques": "whose first name has `` roy"}
{"db_id": "local_govt_mdm", "sub_sql": "select t1.cmi_details from customer_master_index", "question": "what are the details of the cmi masters that have the cross reference code 'Tax'?", "sub_sql_type": "null col col col col", "sub_sql_new": "select cmi details from customer_master_index", "query": "SELECT T1.cmi_details FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id  =  T2.master_customer_id WHERE T2.source_system_code  =  'Tax'", "sub_ques": "what are the details of the cmi masters"}
{"db_id": "local_govt_mdm", "sub_sql": "where t2.source_system_code = tax", "question": "what are the details of the cmi masters that have the cross reference code 'Tax'?", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where source system code equal to tax", "query": "SELECT T1.cmi_details FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id  =  T2.master_customer_id WHERE T2.source_system_code  =  'Tax'", "sub_ques": "cmi masters that have the cross reference code tax"}
{"db_id": "local_govt_mdm", "sub_sql": "group by t1.cmi_cross_ref_id having count Council_Tax >= 1", "question": "What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T1.cmi_cross_ref_id ,  T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count(*)  >=  1", "sub_ques": "cmi cross reference id that is related to at least one council tax entry"}
{"db_id": "local_govt_mdm", "sub_sql": "order by t2.council_tax_id", "question": "What is the tax source system code related to the benefits and overpayments? List the code and the benifit id, order by benifit id.", "sub_sql_type": "null null col col col", "sub_sql_new": "order by council tax id", "query": "SELECT T1.source_system_code ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Benefits_Overpayments AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id ORDER BY T2.council_tax_id", "sub_ques": "order by benifit id"}
{"db_id": "local_govt_mdm", "sub_sql": "where t3.cmi_details != schmidt,kertzmannandlubowitz", "question": "What are the renting arrears tax ids related to the customer master index whose detail is not 'Schmidt, Kertzmann and Lubowitz'?", "sub_sql_type": "null col col op op op value", "sub_sql_new": "where cmi details not equal to schmidt,kertzmannandlubowitz", "query": "SELECT T1.council_tax_id FROM Rent_Arrears AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id JOIN Customer_Master_Index AS T3 ON T3.master_customer_id  =  T2.master_customer_id WHERE T3.cmi_details != 'Schmidt ,  Kertzmann and Lubowitz'", "sub_ques": "the customer master index whose detail is not ' Schmidt , Kertzmann and Lubowitz '"}
{"db_id": "local_govt_mdm", "sub_sql": "where t2.source_system_code = electoral", "question": "What are the register ids of electoral registries that have the cross reference source system code 'Electoral' or 'Tax'?", "sub_sql_type": "null col col col op op value", "sub_sql_new": "where source system code equal to electoral", "query": "SELECT T1.electoral_register_id FROM Electoral_Register AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id WHERE T2.source_system_code  =  'Electoral' OR T2.source_system_code  =  'Tax'", "sub_ques": "the cross reference source system code ' Electoral '"}
{"db_id": "local_govt_mdm", "sub_sql": "select count distinct source_system_code from cmi_cross_references", "question": "How many different source system code for the cmi cross references are there?", "sub_sql_type": "null agg col col col col col col", "sub_sql_new": "select count distinct source system code from cmi_cross_references", "query": "SELECT count(DISTINCT source_system_code) FROM CMI_cross_references", "sub_ques": "how many different source system code"}
{"db_id": "local_govt_mdm", "sub_sql": "order by cmi_details desc", "question": "List all information about customer master index, and sort them by details in descending order.", "sub_sql_type": "null null col col null", "sub_sql_new": "order by cmi details desc", "query": "SELECT * FROM customer_master_index ORDER BY cmi_details DESC", "sub_ques": "sort them by details in descending order"}
{"db_id": "local_govt_mdm", "sub_sql": "select council_tax_id , cmi_cross_ref_id from parking_fines", "question": "List the council tax ids and their related cmi cross references of all the parking fines.", "sub_sql_type": "null col col col null col col col col col col", "sub_sql_new": "select council tax id , cmi cross reference id from parking_fines", "query": "SELECT council_tax_id ,  cmi_cross_ref_id FROM parking_fines", "sub_ques": "list the council tax ids and their related cmi cross"}
{"db_id": "local_govt_mdm", "sub_sql": "select count rent_arrears", "question": "How many council taxes are collected for renting arrears ?", "sub_sql_type": "null agg col", "sub_sql_new": "select count rent_arrears", "query": "SELECT count(*) FROM rent_arrears", "sub_ques": "how many council taxes"}
{"db_id": "local_govt_mdm", "sub_sql": "select distinct t2.source_system_code from cmi_cross_references", "question": "What are the distinct cross reference source system codes which are related to the master customer details 'Gottlieb, Becker and Wyman'?", "sub_sql_type": "null col col col col col col", "sub_sql_new": "select distinct source system code from cmi_cross_references", "query": "SELECT DISTINCT T2.source_system_code FROM customer_master_index AS T1 JOIN cmi_cross_references AS T2 ON T1.master_customer_id  =  T2.master_customer_id WHERE T1.cmi_details  =  'Gottlieb ,  Becker and Wyman'", "sub_ques": "what are the distinct cross reference source system codes"}
{"db_id": "local_govt_mdm", "sub_sql": "select distinct source_system_code from cmi_cross_references", "question": "Which distinct source system code includes the substring 'en'?", "sub_sql_type": "null col col col col col col", "sub_sql_new": "select distinct source system code from cmi_cross_references", "query": "SELECT DISTINCT source_system_code FROM cmi_cross_references WHERE source_system_code LIKE '%en%'", "sub_ques": "which distinct source system code"}
{"db_id": "local_govt_mdm", "sub_sql": "where source_system_code like en", "question": "Which distinct source system code includes the substring 'en'?", "sub_sql_type": "null col col col op value", "sub_sql_new": "where source system code like en", "query": "SELECT DISTINCT source_system_code FROM cmi_cross_references WHERE source_system_code LIKE '%en%'", "sub_ques": "source system code includes the substring en"}
{"db_id": "party_host", "sub_sql": "select count party", "question": "How many parties are there?", "sub_sql_type": "null agg col", "sub_sql_new": "select count party", "query": "SELECT count(*) FROM party", "sub_ques": "how many parties"}
{"db_id": "party_host", "sub_sql": "select count party", "question": "Count the number of parties.", "sub_sql_type": "null agg col", "sub_sql_new": "select count party", "query": "SELECT count(*) FROM party", "sub_ques": "count the number of parties"}
{"db_id": "party_host", "sub_sql": "select party_theme from party", "question": "List the themes of parties in ascending order of number of hosts.", "sub_sql_type": "null col col col", "sub_sql_new": "select party_theme from party", "query": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC", "sub_ques": "list the themes of parties"}
{"db_id": "party_host", "sub_sql": "order by number_of_hosts asc", "question": "List the themes of parties in ascending order of number of hosts.", "sub_sql_type": "null null col null", "sub_sql_new": "order by number_of_hosts asc", "query": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC", "sub_ques": "in ascending order of number of hosts"}
{"db_id": "party_host", "sub_sql": "select party_theme from party", "question": "What are the themes of parties ordered by the number of hosts in ascending manner?", "sub_sql_type": "null col col col", "sub_sql_new": "select party_theme from party", "query": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC", "sub_ques": "what are the themes of parties"}
{"db_id": "party_host", "sub_sql": "order by number_of_hosts asc", "question": "What are the themes of parties ordered by the number of hosts in ascending manner?", "sub_sql_type": "null null col null", "sub_sql_new": "order by number_of_hosts asc", "query": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC", "sub_ques": "ordered by the number of hosts in ascending manner"}
{"db_id": "party_host", "sub_sql": "select party_theme , location from party", "question": "What are the themes and locations of parties?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select party_theme , location from party", "query": "SELECT Party_Theme ,  LOCATION FROM party", "sub_ques": "what are the themes and locations of parties"}
{"db_id": "party_host", "sub_sql": "select party_theme , location from party", "question": "Give me the theme and location of each party.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select party_theme , location from party", "query": "SELECT Party_Theme ,  LOCATION FROM party", "sub_ques": "give me the theme and location of each party"}
{"db_id": "party_host", "sub_sql": "select first_year , last_year from party", "question": "Show the first year and last year of parties with theme \\\\\\\"Spring\\\\\\\" or \\\\\\\"Teqnology\\\\\\\".", "sub_sql_type": "null col null col col col", "sub_sql_new": "select first_year , last_year from party", "query": "SELECT First_year ,  Last_year FROM party WHERE Party_Theme  =  \\\\\\\"Spring\\\\\\\" OR Party_Theme  =  \\\\\\\"Teqnology\\\\\\\"", "sub_ques": "show the first year and last year of parties"}
{"db_id": "party_host", "sub_sql": "where party_theme = spring", "question": "Show the first year and last year of parties with theme \\\\\\\"Spring\\\\\\\" or \\\\\\\"Teqnology\\\\\\\".", "sub_sql_type": "null col op op value", "sub_sql_new": "where party_theme equal to spring", "query": "SELECT First_year ,  Last_year FROM party WHERE Party_Theme  =  \\\\\\\"Spring\\\\\\\" OR Party_Theme  =  \\\\\\\"Teqnology\\\\\\\"", "sub_ques": "parties with theme `` spring"}
{"db_id": "party_host", "sub_sql": "select first_year , last_year from party", "question": "What are the first year and last year of the parties whose theme is \\\\\\\"Spring\\\\\\\" or \\\\\\\"Teqnology\\\\\\\"?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select first_year , last_year from party", "query": "SELECT First_year ,  Last_year FROM party WHERE Party_Theme  =  \\\\\\\"Spring\\\\\\\" OR Party_Theme  =  \\\\\\\"Teqnology\\\\\\\"", "sub_ques": "what are the first year and last year of the parties"}
{"db_id": "party_host", "sub_sql": "where party_theme = spring", "question": "What are the first year and last year of the parties whose theme is \\\\\\\"Spring\\\\\\\" or \\\\\\\"Teqnology\\\\\\\"?", "sub_sql_type": "null col op op value", "sub_sql_new": "where party_theme equal to spring", "query": "SELECT First_year ,  Last_year FROM party WHERE Party_Theme  =  \\\\\\\"Spring\\\\\\\" OR Party_Theme  =  \\\\\\\"Teqnology\\\\\\\"", "sub_ques": "parties whose theme is `` spring"}
{"db_id": "party_host", "sub_sql": "select avg number_of_hosts from party", "question": "What is the average number of hosts for parties?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select avg number_of_hosts from party", "query": "SELECT avg(Number_of_hosts) FROM party", "sub_ques": "what is the average number of hosts for parties"}
{"db_id": "party_host", "sub_sql": "select avg number_of_hosts from party", "question": "Compute the average number of hosts for parties.", "sub_sql_type": "null agg col col col", "sub_sql_new": "select avg number_of_hosts from party", "query": "SELECT avg(Number_of_hosts) FROM party", "sub_ques": "compute the average number of hosts for parties"}
{"db_id": "party_host", "sub_sql": "select location from party", "question": "What is the location of the party with the most hosts?", "sub_sql_type": "null col col col", "sub_sql_new": "select location from party", "query": "SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1", "sub_ques": "what is the location of the party"}
{"db_id": "party_host", "sub_sql": "order by number_of_hosts desc limit 1", "question": "What is the location of the party with the most hosts?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by number_of_hosts desc limit 1", "query": "SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1", "sub_ques": "party with the most hosts"}
{"db_id": "party_host", "sub_sql": "select location from party", "question": "Which party had the most hosts? Give me the party location.", "sub_sql_type": "null col col col", "sub_sql_new": "select location from party", "query": "SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1", "sub_ques": "Give me the party location"}
{"db_id": "party_host", "sub_sql": "order by number_of_hosts desc limit 1", "question": "Which party had the most hosts? Give me the party location.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by number_of_hosts desc limit 1", "query": "SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1", "sub_ques": "party had the most hosts"}
{"db_id": "party_host", "sub_sql": "select nationality , count host group by nationality", "question": "Show different nationalities along with the number of hosts of each nationality.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select nationality , count host", "query": "SELECT Nationality ,  COUNT(*) FROM HOST GROUP BY Nationality", "sub_ques": "show different nationalities along with the number of hosts of each nationality"}
{"db_id": "party_host", "sub_sql": "select nationality , count host group by nationality", "question": "How many hosts does each nationality have? List the nationality and the count.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select nationality , count host", "query": "SELECT Nationality ,  COUNT(*) FROM HOST GROUP BY Nationality", "sub_ques": "how many hosts does each nationality have ? list the nationality"}
{"db_id": "party_host", "sub_sql": "select nationality from host", "question": "Show the most common nationality of hosts.", "sub_sql_type": "null col col col", "sub_sql_new": "select nationality from host", "query": "SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "show the most common nationality of hosts"}
{"db_id": "party_host", "sub_sql": "group by nationality order by count host desc limit 1", "question": "Show the most common nationality of hosts.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count host desc limit 1", "query": "SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "the most common nationality of hosts"}
{"db_id": "party_host", "sub_sql": "group by nationality order by count host desc limit 1", "question": "Which nationality has the most hosts?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count host desc limit 1", "query": "SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "sub_ques": "nationality has the most hosts"}
{"db_id": "party_host", "sub_sql": "select t3.party_theme , t2.name from party , host", "question": "Show the themes of parties and the names of the party hosts.", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select party_theme , name from party , host", "query": "SELECT T3.Party_Theme ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID", "sub_ques": "show the themes of parties and the names of the party"}
{"db_id": "party_host", "sub_sql": "select t3.party_theme , t2.name from party , host", "question": "For each party, return its theme and the name of its host.", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select party_theme , name from party , host", "query": "SELECT T3.Party_Theme ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID", "sub_ques": "return its theme and the name of its host"}
{"db_id": "party_host", "sub_sql": "select t3.location , t2.name from party , host", "question": "Show the locations of parties and the names of the party hosts in ascending order of the age of the host.", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select location , name from party , host", "query": "SELECT T3.Location ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID ORDER BY T2.Age", "sub_ques": "show the locations of parties and the names of the party"}
{"db_id": "party_host", "sub_sql": "order by t2.age", "question": "Show the locations of parties and the names of the party hosts in ascending order of the age of the host.", "sub_sql_type": "null null col", "sub_sql_new": "order by age", "query": "SELECT T3.Location ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID ORDER BY T2.Age", "sub_ques": "in ascending order of the age of the host"}
{"db_id": "party_host", "sub_sql": "select t3.location , t2.name from party , host", "question": "For each party, find its location and the name of its host. Sort the result in ascending order of the age of the host.", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select location , name from party , host", "query": "SELECT T3.Location ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID ORDER BY T2.Age", "sub_ques": "find its location and the name of its host"}
{"db_id": "party_host", "sub_sql": "order by t2.age", "question": "For each party, find its location and the name of its host. Sort the result in ascending order of the age of the host.", "sub_sql_type": "null null col", "sub_sql_new": "order by age", "query": "SELECT T3.Location ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID ORDER BY T2.Age", "sub_ques": "sort the result in ascending order of the age of the host"}
{"db_id": "party_host", "sub_sql": "select t3.location from party", "question": "Show the locations of parties with hosts older than 50.", "sub_sql_type": "null col col col", "sub_sql_new": "select location from party", "query": "SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T2.Age  >  50", "sub_ques": "show the locations of parties"}
{"db_id": "party_host", "sub_sql": "where t2.age > 50", "question": "Show the locations of parties with hosts older than 50.", "sub_sql_type": "null col op op value", "sub_sql_new": "where age more than 50", "query": "SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T2.Age  >  50", "sub_ques": "parties with hosts older than 50"}
{"db_id": "party_host", "sub_sql": "select t3.location from party", "question": "Which parties have hosts of age above 50? Give me the party locations.", "sub_sql_type": "null col col col", "sub_sql_new": "select location from party", "query": "SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T2.Age  >  50", "sub_ques": "Give me the party locations"}
{"db_id": "party_host", "sub_sql": "where t2.age > 50", "question": "Which parties have hosts of age above 50? Give me the party locations.", "sub_sql_type": "null col op op value", "sub_sql_new": "where age more than 50", "query": "SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T2.Age  >  50", "sub_ques": "hosts of age above 50"}
{"db_id": "party_host", "sub_sql": "select t2.name from host", "question": "Show the host names for parties with number of hosts greater than 20.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from host", "query": "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20", "sub_ques": "show the host names for parties"}
{"db_id": "party_host", "sub_sql": "where t3.number_of_hosts > 20", "question": "Show the host names for parties with number of hosts greater than 20.", "sub_sql_type": "null col op op value", "sub_sql_new": "where number_of_hosts more than 20", "query": "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20", "sub_ques": "parties with number of hosts greater than 20"}
{"db_id": "party_host", "sub_sql": "select t2.name from host", "question": "Which parties have more than 20 hosts? Give me the host names for these parties.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from host", "query": "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20", "sub_ques": "Give me the host names for these parties"}
{"db_id": "party_host", "sub_sql": "where t3.number_of_hosts > 20", "question": "Which parties have more than 20 hosts? Give me the host names for these parties.", "sub_sql_type": "null col op op value", "sub_sql_new": "where number_of_hosts more than 20", "query": "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20", "sub_ques": "parties have more than 20 hosts"}
{"db_id": "party_host", "sub_sql": "select name , nationality from host", "question": "Show the name and the nationality of the oldest host.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , nationality from host", "query": "SELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT 1", "sub_ques": "show the name and the nationality"}
{"db_id": "party_host", "sub_sql": "order by age desc limit 1", "question": "Show the name and the nationality of the oldest host.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by age desc limit 1", "query": "SELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT 1", "sub_ques": "the oldest host"}
{"db_id": "party_host", "sub_sql": "select name , nationality from host", "question": "What are the name and the nationality of the host of the highest age?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , nationality from host", "query": "SELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT 1", "sub_ques": "what are the name and the nationality of the host"}
{"db_id": "party_host", "sub_sql": "order by age desc limit 1", "question": "What are the name and the nationality of the host of the highest age?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by age desc limit 1", "query": "SELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT 1", "sub_ques": "the highest age"}
{"db_id": "party_host", "sub_sql": "select name from host", "question": "List the names of hosts who did not serve as a host of any party in our record.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from host", "query": "SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)", "sub_ques": "list the names of hosts"}
{"db_id": "party_host", "sub_sql": "host not in party_host", "question": "List the names of hosts who did not serve as a host of any party in our record.", "sub_sql_type": "tab op op tab tab", "sub_sql_new": "host not in party host", "query": "SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)", "sub_ques": "hosts who did not serve as a host of any party"}
{"db_id": "party_host", "sub_sql": "select name from host", "question": "What are the names of hosts who did not host any party in our record?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from host", "query": "SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)", "sub_ques": "what are the names of hosts"}
{"db_id": "party_host", "sub_sql": "select host_id from party_host", "question": "What are the names of hosts who did not host any party in our record?", "sub_sql_type": "null col col col", "sub_sql_new": "select host_id from party_host", "query": "SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)", "sub_ques": "hosts who did not host any party"}
{"db_id": "storm_record", "sub_sql": "select count region", "question": "How many regions do we have?", "sub_sql_type": "null agg col", "sub_sql_new": "select count region", "query": "SELECT count(*) FROM region", "sub_ques": "how many regions"}
{"db_id": "storm_record", "sub_sql": "select count region", "question": "Count the number of regions.", "sub_sql_type": "null agg col", "sub_sql_new": "select count region", "query": "SELECT count(*) FROM region", "sub_ques": "count the number of regions"}
{"db_id": "storm_record", "sub_sql": "select region_code , region_name from region", "question": "Show all region code and region name sorted by the codes.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select region_code , region_name from region", "query": "SELECT region_code ,  region_name FROM region ORDER BY region_code", "sub_ques": "show all region code and region name"}
{"db_id": "storm_record", "sub_sql": "order by region_code", "question": "Show all region code and region name sorted by the codes.", "sub_sql_type": "null null col", "sub_sql_new": "order by region_code", "query": "SELECT region_code ,  region_name FROM region ORDER BY region_code", "sub_ques": "sorted by the codes"}
{"db_id": "storm_record", "sub_sql": "select region_code , region_name from region", "question": "What are the codes and names for all regions, sorted by codes?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select region_code , region_name from region", "query": "SELECT region_code ,  region_name FROM region ORDER BY region_code", "sub_ques": "what are the codes and names for all regions"}
{"db_id": "storm_record", "sub_sql": "order by region_code", "question": "What are the codes and names for all regions, sorted by codes?", "sub_sql_type": "null null col", "sub_sql_new": "order by region_code", "query": "SELECT region_code ,  region_name FROM region ORDER BY region_code", "sub_ques": "sorted by codes"}
{"db_id": "storm_record", "sub_sql": "select region_name from region", "question": "List all region names in alphabetical order.", "sub_sql_type": "null col col col", "sub_sql_new": "select region_name from region", "query": "SELECT region_name FROM region ORDER BY region_name", "sub_ques": "list all region names"}
{"db_id": "storm_record", "sub_sql": "order by region_name", "question": "List all region names in alphabetical order.", "sub_sql_type": "null null col", "sub_sql_new": "order by region_name", "query": "SELECT region_name FROM region ORDER BY region_name", "sub_ques": "region names in alphabetical order"}
{"db_id": "storm_record", "sub_sql": "select region_name from region", "question": "What are the names of the regions in alphabetical order?", "sub_sql_type": "null col col col", "sub_sql_new": "select region_name from region", "query": "SELECT region_name FROM region ORDER BY region_name", "sub_ques": "what are the names of the regions"}
{"db_id": "storm_record", "sub_sql": "order by region_name", "question": "What are the names of the regions in alphabetical order?", "sub_sql_type": "null null col", "sub_sql_new": "order by region_name", "query": "SELECT region_name FROM region ORDER BY region_name", "sub_ques": "the names of the regions in alphabetical order"}
{"db_id": "storm_record", "sub_sql": "select region_name from region", "question": "Show names for all regions except for Denmark.", "sub_sql_type": "null col col col", "sub_sql_new": "select region_name from region", "query": "SELECT region_name FROM region WHERE region_name != 'Denmark'", "sub_ques": "show names for all regions"}
{"db_id": "storm_record", "sub_sql": "where region_name != denmark", "question": "Show names for all regions except for Denmark.", "sub_sql_type": "null col op op op value", "sub_sql_new": "where region_name not equal to denmark", "query": "SELECT region_name FROM region WHERE region_name != 'Denmark'", "sub_ques": "names for all regions except for denmark"}
{"db_id": "storm_record", "sub_sql": "select region_name from region", "question": "Return the names of all regions other than Denmark.", "sub_sql_type": "null col col col", "sub_sql_new": "select region_name from region", "query": "SELECT region_name FROM region WHERE region_name != 'Denmark'", "sub_ques": "return the names of all regions"}
{"db_id": "storm_record", "sub_sql": "where region_name != denmark", "question": "Return the names of all regions other than Denmark.", "sub_sql_type": "null col op op op value", "sub_sql_new": "where region_name not equal to denmark", "query": "SELECT region_name FROM region WHERE region_name != 'Denmark'", "sub_ques": "names of all regions other than denmark"}
{"db_id": "storm_record", "sub_sql": "select count storm", "question": "How many storms had death records?", "sub_sql_type": "null agg col", "sub_sql_new": "select count storm", "query": "SELECT count(*) FROM storm WHERE Number_Deaths  >  0", "sub_ques": "how many storms"}
{"db_id": "storm_record", "sub_sql": "where number_deaths > 0", "question": "How many storms had death records?", "sub_sql_type": "null col op op value", "sub_sql_new": "where number_deaths more than 0", "query": "SELECT count(*) FROM storm WHERE Number_Deaths  >  0", "sub_ques": "storms had death records"}
{"db_id": "storm_record", "sub_sql": "select count storm", "question": "Count the number of storms in which at least 1 person died.", "sub_sql_type": "null agg col", "sub_sql_new": "select count storm", "query": "SELECT count(*) FROM storm WHERE Number_Deaths  >  0", "sub_ques": "count the number of storms"}
{"db_id": "storm_record", "sub_sql": "where number_deaths > 0", "question": "Count the number of storms in which at least 1 person died.", "sub_sql_type": "null col op op value", "sub_sql_new": "where number_deaths more than 0", "query": "SELECT count(*) FROM storm WHERE Number_Deaths  >  0", "sub_ques": "storms in which at least 1 person died"}
{"db_id": "storm_record", "sub_sql": "select name , dates_active , number_deaths from storm", "question": "List name, dates active, and number of deaths for all storms with at least 1 death.", "sub_sql_type": "null col null col null col col col", "sub_sql_new": "select name , dates_active , number_deaths from storm", "query": "SELECT name ,  dates_active ,  number_deaths FROM storm WHERE number_deaths  >=  1", "sub_ques": "list name , dates active , and number of deaths for all storms"}
{"db_id": "storm_record", "sub_sql": "where number_deaths >= 1", "question": "List name, dates active, and number of deaths for all storms with at least 1 death.", "sub_sql_type": "null col op op op value", "sub_sql_new": "where number_deaths no less than 1", "query": "SELECT name ,  dates_active ,  number_deaths FROM storm WHERE number_deaths  >=  1", "sub_ques": "number of deaths for all storms with at least 1 death"}
{"db_id": "storm_record", "sub_sql": "select name , dates_active , number_deaths from storm", "question": "What are the names, dates active, and number of deaths for storms that had 1 or more death?", "sub_sql_type": "null col null col null col col col", "sub_sql_new": "select name , dates_active , number_deaths from storm", "query": "SELECT name ,  dates_active ,  number_deaths FROM storm WHERE number_deaths  >=  1", "sub_ques": "what are the names , dates active , and number of deaths for storms"}
{"db_id": "storm_record", "sub_sql": "where number_deaths >= 1", "question": "What are the names, dates active, and number of deaths for storms that had 1 or more death?", "sub_sql_type": "null col op op op value", "sub_sql_new": "where number_deaths no less than 1", "query": "SELECT name ,  dates_active ,  number_deaths FROM storm WHERE number_deaths  >=  1", "sub_ques": "number of deaths for storms that had 1 or more death"}
{"db_id": "storm_record", "sub_sql": "select avg damage_millions_usd , max damage_millions_usd from storm", "question": "Show the average and maximum damage for all storms with max speed higher than 1000.", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select avg damage_millions_usd , max damage_millions_usd from storm", "query": "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000", "sub_ques": "show the average and maximum damage for all storms"}
{"db_id": "storm_record", "sub_sql": "where max_speed > 1000", "question": "Show the average and maximum damage for all storms with max speed higher than 1000.", "sub_sql_type": "null col op op value", "sub_sql_new": "where max_speed more than 1000", "query": "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000", "sub_ques": "storms with max speed higher than 1000"}
{"db_id": "storm_record", "sub_sql": "select avg damage_millions_usd , max damage_millions_usd from storm", "question": "What is the average and maximum damage in millions for storms that had a max speed over 1000?", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select avg damage_millions_usd , max damage_millions_usd from storm", "query": "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000", "sub_ques": "what is the average and maximum damage in millions for storms"}
{"db_id": "storm_record", "sub_sql": "where max_speed > 1000", "question": "What is the average and maximum damage in millions for storms that had a max speed over 1000?", "sub_sql_type": "null col op op value", "sub_sql_new": "where max_speed more than 1000", "query": "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000", "sub_ques": "storms that had a max speed over 1000"}
{"db_id": "storm_record", "sub_sql": "select sum number_deaths , sum damage_millions_usd from storm", "question": "What is the total number of deaths and damage for all storms with a max speed greater than the average?", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select sum number_deaths , sum damage_millions_usd from storm", "query": "SELECT sum(number_deaths) ,  sum(damage_millions_USD) FROM storm WHERE max_speed  >  (SELECT avg(max_speed) FROM storm)", "sub_ques": "what is the total number of deaths and damage for all storms"}
{"db_id": "storm_record", "sub_sql": "where max_speed > select avg max_speed", "question": "What is the total number of deaths and damage for all storms with a max speed greater than the average?", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where max_speed more than select avg max_speed", "query": "SELECT sum(number_deaths) ,  sum(damage_millions_USD) FROM storm WHERE max_speed  >  (SELECT avg(max_speed) FROM storm)", "sub_ques": "with a max speed greater than the average"}
{"db_id": "storm_record", "sub_sql": "select sum number_deaths , sum damage_millions_usd from storm", "question": "Return the total number of deaths and total damange in millions for storms that had a max speed greater than the average.", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select sum number_deaths , sum damage_millions_usd from storm", "query": "SELECT sum(number_deaths) ,  sum(damage_millions_USD) FROM storm WHERE max_speed  >  (SELECT avg(max_speed) FROM storm)", "sub_ques": "return the total number of deaths and total damange in millions for storms"}
{"db_id": "storm_record", "sub_sql": "where max_speed > select avg max_speed", "question": "Return the total number of deaths and total damange in millions for storms that had a max speed greater than the average.", "sub_sql_type": "null col op op value value value", "sub_sql_new": "where max_speed more than select avg max_speed", "query": "SELECT sum(number_deaths) ,  sum(damage_millions_USD) FROM storm WHERE max_speed  >  (SELECT avg(max_speed) FROM storm)", "sub_ques": "that had a max speed greater than the average"}
{"db_id": "storm_record", "sub_sql": "select name , damage_millions_usd from storm", "question": "List name and damage for all storms in a descending order of max speed.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , damage_millions_usd from storm", "query": "SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC", "sub_ques": "list name and damage for all storms"}
{"db_id": "storm_record", "sub_sql": "order by max_speed desc", "question": "List name and damage for all storms in a descending order of max speed.", "sub_sql_type": "null null col null", "sub_sql_new": "order by max_speed desc", "query": "SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC", "sub_ques": "in a descending order of max speed"}
{"db_id": "storm_record", "sub_sql": "select name , damage_millions_usd from storm", "question": "What are the names and damage in millions for storms, ordered by their max speeds descending?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , damage_millions_usd from storm", "query": "SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC", "sub_ques": "what are the names and damage in millions for storms"}
{"db_id": "storm_record", "sub_sql": "order by max_speed desc", "question": "What are the names and damage in millions for storms, ordered by their max speeds descending?", "sub_sql_type": "null null col null", "sub_sql_new": "order by max_speed desc", "query": "SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC", "sub_ques": "ordered by their max speeds descending"}
{"db_id": "storm_record", "sub_sql": "select count distinct region_id from affected_region", "question": "How many regions are affected?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct region_id from affected_region", "query": "SELECT count(DISTINCT region_id) FROM affected_region", "sub_ques": "how many regions"}
{"db_id": "storm_record", "sub_sql": "select count distinct region_id from affected_region", "question": "Count the number of different affected regions.", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct region_id from affected_region", "query": "SELECT count(DISTINCT region_id) FROM affected_region", "sub_ques": "count the number of different affected regions"}
{"db_id": "storm_record", "sub_sql": "select region_name from region", "question": "Show the name for regions not affected.", "sub_sql_type": "null col col col", "sub_sql_new": "select region_name from region", "query": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)", "sub_ques": "show the name for regions"}
{"db_id": "storm_record", "sub_sql": "region not in affected_region", "question": "Show the name for regions not affected.", "sub_sql_type": "tab op op tab tab", "sub_sql_new": "region not in affected region", "query": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)", "sub_ques": "regions not affected"}
{"db_id": "storm_record", "sub_sql": "select region_name from region", "question": "What are the names of regions that were not affected?", "sub_sql_type": "null col col col", "sub_sql_new": "select region_name from region", "query": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)", "sub_ques": "what are the names of regions"}
{"db_id": "storm_record", "sub_sql": "region not in affected_region", "question": "What are the names of regions that were not affected?", "sub_sql_type": "tab op op tab tab", "sub_sql_new": "region not in affected region", "query": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)", "sub_ques": "regions that were not affected"}
{"db_id": "storm_record", "sub_sql": "select t1.region_name , count affected_region group by t1.region_id", "question": "Show the name for regions and the number of storms for each region.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select region_name , count affected_region", "query": "SELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id", "sub_ques": "show the name for regions and the number of storms for each region"}
{"db_id": "storm_record", "sub_sql": "select t1.region_name , count affected_region group by t1.region_id", "question": "How many storms occured in each region?", "sub_sql_type": "null col null agg col", "sub_sql_new": "select region_name , count affected_region", "query": "SELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id", "sub_ques": "how many storms occured in each region"}
{"db_id": "storm_record", "sub_sql": "select t1.name , count affected_region group by t1.storm_id", "question": "List the name for storms and the number of affected regions for each storm.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select name , count affected_region", "query": "SELECT T1.name ,  count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id", "sub_ques": "list the name for storms and the number of affected regions for each storm"}
{"db_id": "storm_record", "sub_sql": "select t1.name , count affected_region group by t1.storm_id", "question": "How many regions were affected by each storm?", "sub_sql_type": "null col null agg col", "sub_sql_new": "select name , count affected_region", "query": "SELECT T1.name ,  count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id", "sub_ques": "how many regions were affected by each storm ?"}
{"db_id": "storm_record", "sub_sql": "select t1.name , t1.max_speed from storm", "question": "What is the storm name and max speed which affected the greatest number of regions?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , max_speed from storm", "query": "SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "what is the storm name and max speed"}
{"db_id": "storm_record", "sub_sql": "group by t1.storm_id order by count affected_region desc limit 1", "question": "What is the storm name and max speed which affected the greatest number of regions?", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count affected_region desc limit 1", "query": "SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the storm which affected the greatest number of regions"}
{"db_id": "storm_record", "sub_sql": "select t1.name , t1.max_speed from storm", "question": "Return the name and max speed of the storm that affected the most regions.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select name , max_speed from storm", "query": "SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "return the name and max speed of the storm"}
{"db_id": "storm_record", "sub_sql": "group by t1.storm_id order by count affected_region desc limit 1", "question": "Return the name and max speed of the storm that affected the most regions.", "sub_sql_type": "null null agg col null null limv", "sub_sql_new": "order by count affected_region desc limit 1", "query": "SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1", "sub_ques": "the storm that affected the most regions"}
{"db_id": "storm_record", "sub_sql": "select name from storm", "question": "Show the name of storms which don't have affected region in record.", "sub_sql_type": "null col col col", "sub_sql_new": "select name from storm", "query": "SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)", "sub_ques": "show the name of storms"}
{"db_id": "storm_record", "sub_sql": "storm not in affected_region", "question": "Show the name of storms which don't have affected region in record.", "sub_sql_type": "tab op op tab tab", "sub_sql_new": "storm not in affected region", "query": "SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)", "sub_ques": "storms which don't have affected region"}
{"db_id": "storm_record", "sub_sql": "select name from storm", "question": "What are the names of storms that did not affect any regions?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from storm", "query": "SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)", "sub_ques": "what are the names of storms"}
{"db_id": "storm_record", "sub_sql": "storm not in affected_region", "question": "What are the names of storms that did not affect any regions?", "sub_sql_type": "tab op op tab tab", "sub_sql_new": "storm not in affected region", "query": "SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)", "sub_ques": "storms that did not affect any regions"}
{"db_id": "storm_record", "sub_sql": "select t2.region_name from region", "question": "What are the region names affected by the storm with a number of deaths of least 10?", "sub_sql_type": "null col col col", "sub_sql_new": "select region_name from region", "query": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T3.number_deaths  >=  10", "sub_ques": "what are the region names"}
{"db_id": "storm_record", "sub_sql": "where t3.number_deaths >= 10", "question": "What are the region names affected by the storm with a number of deaths of least 10?", "sub_sql_type": "null col op op op value", "sub_sql_new": "where number_deaths no less than 10", "query": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T3.number_deaths  >=  10", "sub_ques": "storm with a number of deaths of least 10"}
{"db_id": "storm_record", "sub_sql": "select t2.region_name from region", "question": "Return the names of the regions affected by storms that had a death count of at least 10.", "sub_sql_type": "null col col col", "sub_sql_new": "select region_name from region", "query": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T3.number_deaths  >=  10", "sub_ques": "return the names of the regions"}
{"db_id": "storm_record", "sub_sql": "where t3.number_deaths >= 10", "question": "Return the names of the regions affected by storms that had a death count of at least 10.", "sub_sql_type": "null col op op op value", "sub_sql_new": "where number_deaths no less than 10", "query": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T3.number_deaths  >=  10", "sub_ques": "storms that had a death count of at least 10"}
{"db_id": "storm_record", "sub_sql": "select t3.name from storm", "question": "Show all storm names affecting region \\\\\\\"Denmark\\\\\\\".", "sub_sql_type": "null col col col", "sub_sql_new": "select name from storm", "query": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'", "sub_ques": "show all storm names"}
{"db_id": "storm_record", "sub_sql": "where t2.region_name = denmark", "question": "Show all storm names affecting region \\\\\\\"Denmark\\\\\\\".", "sub_sql_type": "null col op op value", "sub_sql_new": "where region_name equal to denmark", "query": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'", "sub_ques": "affecting region `` denmark"}
{"db_id": "storm_record", "sub_sql": "select t3.name from storm", "question": "What are the names of the storms that affected Denmark?", "sub_sql_type": "null col col col", "sub_sql_new": "select name from storm", "query": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'", "sub_ques": "what are the names of the storms"}
{"db_id": "storm_record", "sub_sql": "where t2.region_name = denmark", "question": "What are the names of the storms that affected Denmark?", "sub_sql_type": "null col op op value", "sub_sql_new": "where region_name equal to denmark", "query": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'", "sub_ques": "storms that affected denmark"}
{"db_id": "storm_record", "sub_sql": "select t1.region_name from region", "question": "Show the region name with at least two storms.", "sub_sql_type": "null col col col", "sub_sql_new": "select region_name from region", "query": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2", "sub_ques": "show the region name"}
{"db_id": "storm_record", "sub_sql": "group by t1.region_id having count affected_region >= 2", "question": "Show the region name with at least two storms.", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2", "sub_ques": "region name with at least two storms"}
{"db_id": "storm_record", "sub_sql": "select t1.region_name from region", "question": "What are the names of regions with two or more storms?", "sub_sql_type": "null col col col", "sub_sql_new": "select region_name from region", "query": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2", "sub_ques": "what are the names of regions"}
{"db_id": "storm_record", "sub_sql": "group by t1.region_id having count affected_region >= 2", "question": "What are the names of regions with two or more storms?", "sub_sql_type": "", "sub_sql_new": "", "query": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2", "sub_ques": "regions with two or more storms"}
{"db_id": "storm_record", "sub_sql": "select t2.region_name from region", "question": "Find the names of the regions which were affected by the storm that killed the greatest number of people.", "sub_sql_type": "null col col col", "sub_sql_new": "select region_name from region", "query": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1", "sub_ques": "find the names of the regions"}
{"db_id": "storm_record", "sub_sql": "order by t3.number_deaths desc limit 1", "question": "Find the names of the regions which were affected by the storm that killed the greatest number of people.", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by number_deaths desc limit 1", "query": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1", "sub_ques": "the storm that killed the greatest number of people"}
{"db_id": "storm_record", "sub_sql": "select t2.region_name from region", "question": "What are the names of regions that were affected by the storm in which the most people died?", "sub_sql_type": "null col col col", "sub_sql_new": "select region_name from region", "query": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1", "sub_ques": "what are the names of regions"}
{"db_id": "storm_record", "sub_sql": "order by t3.number_deaths desc limit 1", "question": "What are the names of regions that were affected by the storm in which the most people died?", "sub_sql_type": "null null col null null limv", "sub_sql_new": "order by number_deaths desc limit 1", "query": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1", "sub_ques": "the storm in which the most people died"}
{"db_id": "election", "sub_sql": "select count county", "question": "How many counties are there in total?", "sub_sql_type": "null agg col", "sub_sql_new": "select count county", "query": "SELECT count(*) FROM county", "sub_ques": "how many counties are there in total"}
{"db_id": "election", "sub_sql": "select count county", "question": "Count the total number of counties.", "sub_sql_type": "null agg col", "sub_sql_new": "select count county", "query": "SELECT count(*) FROM county", "sub_ques": "count the total number of counties"}
{"db_id": "election", "sub_sql": "select county_name , population from county", "question": "Show the county name and population of all counties.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select county_name , population from county", "query": "SELECT County_name ,  Population FROM county", "sub_ques": "show the county name and population of all counties"}
{"db_id": "election", "sub_sql": "select county_name , population from county", "question": "What are the name and population of each county?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select county_name , population from county", "query": "SELECT County_name ,  Population FROM county", "sub_ques": "what are the name and population of each county"}
{"db_id": "election", "sub_sql": "select avg population from county", "question": "Show the average population of all counties.", "sub_sql_type": "null agg col col col", "sub_sql_new": "select avg population from county", "query": "SELECT avg(Population) FROM county", "sub_ques": "show the average population of all counties"}
{"db_id": "election", "sub_sql": "select avg population from county", "question": "On average how large is the population of the counties?", "sub_sql_type": "null agg col col col", "sub_sql_new": "select avg population from county", "query": "SELECT avg(Population) FROM county", "sub_ques": "on average how large is the population of the counties"}
{"db_id": "election", "sub_sql": "select max population , min population from county", "question": "Return the maximum and minimum population among all counties.", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select max population , min population from county", "query": "SELECT max(Population) ,  min(Population) FROM county", "sub_ques": "return the maximum and minimum population among all counties"}
{"db_id": "election", "sub_sql": "select max population , min population from county", "question": "What are the maximum and minimum population of the counties?", "sub_sql_type": "null agg col null agg col col col", "sub_sql_new": "select max population , min population from county", "query": "SELECT max(Population) ,  min(Population) FROM county", "sub_ques": "what are the maximum and minimum population of the counties"}
{"db_id": "election", "sub_sql": "select distinct district from election", "question": "Show all the distinct districts for elections.", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct district from election", "query": "SELECT DISTINCT District FROM election", "sub_ques": "show all the distinct districts for elections"}
{"db_id": "election", "sub_sql": "select distinct district from election", "question": "What are the distinct districts for elections?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct district from election", "query": "SELECT DISTINCT District FROM election", "sub_ques": "what are the distinct districts for elections"}
{"db_id": "election", "sub_sql": "select zip_code from county", "question": "Show the zip code of the county with name \\\\\\\"Howard\\\\\\\".", "sub_sql_type": "null col col col", "sub_sql_new": "select zip_code from county", "query": "SELECT Zip_code FROM county WHERE County_name  =  \\\\\\\"Howard\\\\\\\"", "sub_ques": "show the zip code of the county"}
{"db_id": "election", "sub_sql": "where county_name = howard", "question": "Show the zip code of the county with name \\\\\\\"Howard\\\\\\\".", "sub_sql_type": "null col op op value", "sub_sql_new": "where county_name equal to howard", "query": "SELECT Zip_code FROM county WHERE County_name  =  \\\\\\\"Howard\\\\\\\"", "sub_ques": "county with name `` howard"}
{"db_id": "election", "sub_sql": "select zip_code from county", "question": "What is the zip code the county named \\\\\\\"Howard\\\\\\\" is located in?", "sub_sql_type": "null col col col", "sub_sql_new": "select zip_code from county", "query": "SELECT Zip_code FROM county WHERE County_name  =  \\\\\\\"Howard\\\\\\\"", "sub_ques": "what is the zip code the county"}
{"db_id": "election", "sub_sql": "where county_name = howard", "question": "What is the zip code the county named \\\\\\\"Howard\\\\\\\" is located in?", "sub_sql_type": "null col op op value", "sub_sql_new": "where county_name equal to howard", "query": "SELECT Zip_code FROM county WHERE County_name  =  \\\\\\\"Howard\\\\\\\"", "sub_ques": "county named `` howard is located in"}
{"db_id": "election", "sub_sql": "select delegate from election", "question": "Show the delegate from district 1 in election.", "sub_sql_type": "null col col col", "sub_sql_new": "select delegate from election", "query": "SELECT Delegate FROM election WHERE District  =  1", "sub_ques": "show the delegate"}
{"db_id": "election", "sub_sql": "where district = 1", "question": "Show the delegate from district 1 in election.", "sub_sql_type": "null col op op value", "sub_sql_new": "where district equal to 1", "query": "SELECT Delegate FROM election WHERE District  =  1", "sub_ques": "from district 1 in election"}
{"db_id": "election", "sub_sql": "select delegate from election", "question": "Who is the delegate of district 1 in the elections?", "sub_sql_type": "null col col col", "sub_sql_new": "select delegate from election", "query": "SELECT Delegate FROM election WHERE District  =  1", "sub_ques": "who is the delegate in the elections"}
{"db_id": "election", "sub_sql": "where district = 1", "question": "Who is the delegate of district 1 in the elections?", "sub_sql_type": "null col op op value", "sub_sql_new": "where district equal to 1", "query": "SELECT Delegate FROM election WHERE District  =  1", "sub_ques": "district 1 in the elections"}
{"db_id": "election", "sub_sql": "select delegate , committee from election", "question": "Show the delegate and committee information of elections.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select delegate , committee from election", "query": "SELECT Delegate ,  Committee FROM election", "sub_ques": "show the delegate and committee information of elections"}
{"db_id": "election", "sub_sql": "select delegate , committee from election", "question": "What are the delegate and committee information for each election record?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select delegate , committee from election", "query": "SELECT Delegate ,  Committee FROM election", "sub_ques": "what are the delegate and committee information for each election"}
{"db_id": "election", "sub_sql": "select count distinct governor from party", "question": "How many distinct governors are there?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct governor from party", "query": "SELECT count(DISTINCT Governor) FROM party", "sub_ques": "how many distinct governors"}
{"db_id": "election", "sub_sql": "select count distinct governor from party", "question": "Count the number of distinct governors.", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct governor from party", "query": "SELECT count(DISTINCT Governor) FROM party", "sub_ques": "count the number of distinct governors"}
{"db_id": "election", "sub_sql": "select lieutenant_governor , comptroller from party", "question": "Show the lieutenant governor and comptroller from the democratic party.", "sub_sql_type": "null col null col col col", "sub_sql_new": "select lieutenant_governor , comptroller from party", "query": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \\\\\\\"Democratic\\\\\\\"", "sub_ques": "show the lieutenant governor and comptroller"}
{"db_id": "election", "sub_sql": "where party = democratic", "question": "Show the lieutenant governor and comptroller from the democratic party.", "sub_sql_type": "null col op op value", "sub_sql_new": "where party equal to democratic", "query": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \\\\\\\"Democratic\\\\\\\"", "sub_ques": "from the democratic party"}
{"db_id": "election", "sub_sql": "select lieutenant_governor , comptroller from party", "question": "Who are the lieutenant governor and comptroller from the democratic party?", "sub_sql_type": "null col null col col col", "sub_sql_new": "select lieutenant_governor , comptroller from party", "query": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \\\\\\\"Democratic\\\\\\\"", "sub_ques": "Who are the lieutenant governor and comptroller from the democratic party"}
{"db_id": "election", "sub_sql": "where party = democratic", "question": "Who are the lieutenant governor and comptroller from the democratic party?", "sub_sql_type": "null col op op value", "sub_sql_new": "where party equal to democratic", "query": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \\\\\\\"Democratic\\\\\\\"", "sub_ques": "from the democratic party"}
{"db_id": "election", "sub_sql": "select distinct year from party", "question": "In which distinct years was the governor \\\\\\\"Eliot Spitzer\\\\\\\"?", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct year from party", "query": "SELECT DISTINCT YEAR FROM party WHERE Governor  =  \\\\\\\"Eliot Spitzer\\\\\\\"", "sub_ques": "in which distinct years"}
{"db_id": "election", "sub_sql": "where governor = eliotspitzer", "question": "In which distinct years was the governor \\\\\\\"Eliot Spitzer\\\\\\\"?", "sub_sql_type": "null col op op value", "sub_sql_new": "where governor equal to eliotspitzer", "query": "SELECT DISTINCT YEAR FROM party WHERE Governor  =  \\\\\\\"Eliot Spitzer\\\\\\\"", "sub_ques": "governor eliot spitzer"}
{"db_id": "election", "sub_sql": "select distinct year from party", "question": "Find the distinct years when the governor was named \\\\\\\"Eliot Spitzer\\\\\\\".", "sub_sql_type": "null col col col col", "sub_sql_new": "select distinct year from party", "query": "SELECT DISTINCT YEAR FROM party WHERE Governor  =  \\\\\\\"Eliot Spitzer\\\\\\\"", "sub_ques": "find the distinct years"}
{"db_id": "election", "sub_sql": "where governor = eliotspitzer", "question": "Find the distinct years when the governor was named \\\\\\\"Eliot Spitzer\\\\\\\".", "sub_sql_type": "null col op op value", "sub_sql_new": "where governor equal to eliotspitzer", "query": "SELECT DISTINCT YEAR FROM party WHERE Governor  =  \\\\\\\"Eliot Spitzer\\\\\\\"", "sub_ques": "governor was named eliot spitzer"}
{"db_id": "election", "sub_sql": "select t2.delegate , t1.county_name from election , county", "question": "Show the delegates and the names of county they belong to.", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select delegate , county_name from election , county", "query": "SELECT T2.Delegate ,  T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District", "sub_ques": "show the delegates and the names of county"}
{"db_id": "election", "sub_sql": "select t2.delegate , t1.county_name from election , county", "question": "What are the delegate and name of the county they belong to, for each county?", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select delegate , county_name from election , county", "query": "SELECT T2.Delegate ,  T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District", "sub_ques": "what are the delegate and name of the county they belong to , for each county"}
{"db_id": "election", "sub_sql": "where t1.population < 100000", "question": "Which delegates are from counties with population smaller than 100000?", "sub_sql_type": "null col op op value", "sub_sql_new": "where population less than 100000", "query": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000", "sub_ques": "counties with population smaller than 100000"}
{"db_id": "election", "sub_sql": "select t2.delegate from election", "question": "Find the delegates who are from counties with population below 100000.", "sub_sql_type": "null col col col", "sub_sql_new": "select delegate from election", "query": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000", "sub_ques": "find the delegates"}
{"db_id": "election", "sub_sql": "where t1.population < 100000", "question": "Find the delegates who are from counties with population below 100000.", "sub_sql_type": "null col op op value", "sub_sql_new": "where population less than 100000", "query": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000", "sub_ques": "counties with population below 100000"}
{"db_id": "election", "sub_sql": "select count distinct t2.delegate from election", "question": "How many distinct delegates are from counties with population larger than 50000?", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct delegate from election", "query": "SELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  >  50000", "sub_ques": "how many distinct delegates"}
{"db_id": "election", "sub_sql": "where t1.population > 50000", "question": "How many distinct delegates are from counties with population larger than 50000?", "sub_sql_type": "null col op op value", "sub_sql_new": "where population more than 50000", "query": "SELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  >  50000", "sub_ques": "counties with population larger than 50000"}
{"db_id": "election", "sub_sql": "select count distinct t2.delegate from election", "question": "Count the number of distinct delegates who are from counties with population above 50000.", "sub_sql_type": "null agg col col col col", "sub_sql_new": "select count distinct delegate from election", "query": "SELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  >  50000", "sub_ques": "count the number of distinct delegates"}
{"db_id": "election", "sub_sql": "where t1.population > 50000", "question": "Count the number of distinct delegates who are from counties with population above 50000.", "sub_sql_type": "null col op op value", "sub_sql_new": "where population more than 50000", "query": "SELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  >  50000", "sub_ques": "counties with population above 50000"}
{"db_id": "election", "sub_sql": "select t1.county_name from county", "question": "What are the names of the county that the delegates on \\\\\\\"Appropriations\\\\\\\" committee belong to?", "sub_sql_type": "null col col col", "sub_sql_new": "select county_name from county", "query": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T2.Committee  =  \\\\\\\"Appropriations\\\\\\\"", "sub_ques": "what are the names of the county"}
{"db_id": "election", "sub_sql": "where t2.committee = appropriations", "question": "What are the names of the county that the delegates on \\\\\\\"Appropriations\\\\\\\" committee belong to?", "sub_sql_type": "null col op op value", "sub_sql_new": "where committee equal to appropriations", "query": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T2.Committee  =  \\\\\\\"Appropriations\\\\\\\"", "sub_ques": "appropriations '' committee belong to"}
{"db_id": "election", "sub_sql": "select t1.county_name from county", "question": "Which county do the delegates on \\\\\\\"Appropriations\\\\\\\" committee belong to? Give me the county names.", "sub_sql_type": "null col col col", "sub_sql_new": "select county_name from county", "query": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T2.Committee  =  \\\\\\\"Appropriations\\\\\\\"", "sub_ques": "give me the county names"}
{"db_id": "election", "sub_sql": "where t2.committee = appropriations", "question": "Which county do the delegates on \\\\\\\"Appropriations\\\\\\\" committee belong to? Give me the county names.", "sub_sql_type": "null col op op value", "sub_sql_new": "where committee equal to appropriations", "query": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T2.Committee  =  \\\\\\\"Appropriations\\\\\\\"", "sub_ques": "appropriations '' committee belong to"}
{"db_id": "election", "sub_sql": "select t1.delegate , t2.party from election , party", "question": "Show the delegates and the names of the party they belong to.", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select delegate , party from election , party", "query": "SELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID", "sub_ques": "show the delegates and the names of the party"}
{"db_id": "election", "sub_sql": "select t1.delegate , t2.party from election , party", "question": "For each delegate, find the names of the party they are part of.", "sub_sql_type": "null col null col col col null col", "sub_sql_new": "select delegate , party from election , party", "query": "SELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID", "sub_ques": "for each delegate , find the names of the party they are part"}
{"db_id": "election", "sub_sql": "select t2.governor from party", "question": "Who were the governors of the parties associated with delegates from district 1?", "sub_sql_type": "null col col col", "sub_sql_new": "select governor from party", "query": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1", "sub_ques": "who are the governors of the parties"}
{"db_id": "election", "sub_sql": "where t1.district = 1", "question": "Who were the governors of the parties associated with delegates from district 1?", "sub_sql_type": "null col op op value", "sub_sql_new": "where district equal to 1", "query": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1", "sub_ques": "from district 1"}
{"db_id": "election", "sub_sql": "select t2.governor from party", "question": "Find the parties associated with the delegates from district 1. Who served as governors of the parties?", "sub_sql_type": "null col col col", "sub_sql_new": "select governor from party", "query": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1", "sub_ques": "Who served as governors of the parties"}
{"db_id": "election", "sub_sql": "where t1.district = 1", "question": "Find the parties associated with the delegates from district 1. Who served as governors of the parties?", "sub_sql_type": "null col op op value", "sub_sql_new": "where district equal to 1", "query": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1", "sub_ques": "from district 1"}
{"db_id": "election", "sub_sql": "select t2.comptroller from party", "question": "Find the parties associated with the delegates from district 1 or 2. Who served as comptrollers of the parties?", "sub_sql_type": "null col col col", "sub_sql_new": "select comptroller from party", "query": "SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1 OR T1.District  =  2", "sub_ques": "Who served as comptrollers of the parties"}
{"db_id": "election", "sub_sql": "select t1.committee from election", "question": "Return all the committees that have delegates from Democratic party.", "sub_sql_type": "null col col col", "sub_sql_new": "select committee from election", "query": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \\\\\\\"Democratic\\\\\\\"", "sub_ques": "return all the committees"}
{"db_id": "election", "sub_sql": "where t2.party = democratic", "question": "Return all the committees that have delegates from Democratic party.", "sub_sql_type": "null col op op value", "sub_sql_new": "where party equal to democratic", "query": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \\\\\\\"Democratic\\\\\\\"", "sub_ques": "from democratic party"}
{"db_id": "election", "sub_sql": "where t2.party = democratic", "question": "Which committees have delegates from the Democratic party?", "sub_sql_type": "null col op op value", "sub_sql_new": "where party equal to democratic", "query": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \\\\\\\"Democratic\\\\\\\"", "sub_ques": "from the democratic party"}
{"db_id": "election", "sub_sql": "select t1.county_name , count election group by t1.county_id", "question": "Show the name of each county along with the corresponding number of delegates from that county.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select county_name , count election", "query": "SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id", "sub_ques": "show the name of each county along with the corresponding number of delegates from that county"}
{"db_id": "election", "sub_sql": "select t1.county_name , count election group by t1.county_id", "question": "For each county, find the name of the county and the number of delegates from that county.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select county_name , count election", "query": "SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id", "sub_ques": "for each county , find the name of the county and the number of delegates from that county"}
{"db_id": "election", "sub_sql": "select t2.party , count election group by t1.party", "question": "Show the name of each party and the corresponding number of delegates from that party.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select party , count election", "query": "SELECT T2.Party ,  COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party", "sub_ques": "show the name of each party and the corresponding number of delegates from that party"}
{"db_id": "election", "sub_sql": "select t2.party , count election group by t1.party", "question": "For each party, return the name of the party and the number of delegates from that party.", "sub_sql_type": "null col null agg col", "sub_sql_new": "select party , count election", "query": "SELECT T2.Party ,  COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party", "sub_ques": "return the name of the party and the number of delegates from that party"}
{"db_id": "election", "sub_sql": "select county_name from county", "question": "Return the names of all counties sorted by population in ascending order.", "sub_sql_type": "null col col col", "sub_sql_new": "select county_name from county", "query": "SELECT County_name FROM county ORDER BY Population ASC", "sub_ques": "return the names of all counties"}
{"db_id": "election", "sub_sql": "order by population asc", "question": "Return the names of all counties sorted by population in ascending order.", "sub_sql_type": "null null col null", "sub_sql_new": "order by population asc", "query": "SELECT County_name FROM county ORDER BY Population ASC", "sub_ques": "sorted by population in ascending order"}
{"db_id": "election", "sub_sql": "order by population asc", "question": "Sort the names of all counties in ascending order of population.", "sub_sql_type": "null null col null", "sub_sql_new": "order by population asc", "query": "SELECT County_name FROM county ORDER BY Population ASC", "sub_ques": "counties in ascending order of population"}
